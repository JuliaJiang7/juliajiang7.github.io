{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/pictures/06DD99DC.png","path":"pictures/06DD99DC.png","modified":0,"renderable":0},{"_id":"source/pictures/08786FDF.png","path":"pictures/08786FDF.png","modified":0,"renderable":0},{"_id":"source/pictures/13px-Dark_Red_x.svg-1587911490598.png","path":"pictures/13px-Dark_Red_x.svg-1587911490598.png","modified":0,"renderable":0},{"_id":"source/pictures/13px-Dark_Red_x.svg-1587911490730.png","path":"pictures/13px-Dark_Red_x.svg-1587911490730.png","modified":0,"renderable":0},{"_id":"source/pictures/13px-Dark_Red_x.svg-1587911490852.png","path":"pictures/13px-Dark_Red_x.svg-1587911490852.png","modified":0,"renderable":0},{"_id":"source/pictures/13px-Dark_Red_x.svg.png","path":"pictures/13px-Dark_Red_x.svg.png","modified":0,"renderable":0},{"_id":"source/pictures/13px-Green_check.svg-1587911490574.png","path":"pictures/13px-Green_check.svg-1587911490574.png","modified":0,"renderable":0},{"_id":"source/pictures/13px-Green_check.svg-1587911490720.png","path":"pictures/13px-Green_check.svg-1587911490720.png","modified":0,"renderable":0},{"_id":"source/pictures/13px-Green_check.svg-1587911491234.png","path":"pictures/13px-Green_check.svg-1587911491234.png","modified":0,"renderable":0},{"_id":"source/pictures/13px-Green_check.svg.png","path":"pictures/13px-Green_check.svg.png","modified":0,"renderable":0},{"_id":"source/pictures/13px-Yellow_check.svg.png","path":"pictures/13px-Yellow_check.svg.png","modified":0,"renderable":0},{"_id":"source/pictures/20140728110939595","path":"pictures/20140728110939595","modified":0,"renderable":0},{"_id":"source/pictures/20140729181940812","path":"pictures/20140729181940812","modified":0,"renderable":0},{"_id":"source/pictures/20140725231726921","path":"pictures/20140725231726921","modified":0,"renderable":0},{"_id":"source/pictures/20140729182154066","path":"pictures/20140729182154066","modified":0,"renderable":0},{"_id":"source/pictures/280px-PrimaryKey_zht.svg.png","path":"pictures/280px-PrimaryKey_zht.svg.png","modified":0,"renderable":0},{"_id":"source/pictures/4b9c2ec85d900b1485fad362aabc2349a4d54ad3.svg","path":"pictures/4b9c2ec85d900b1485fad362aabc2349a4d54ad3.svg","modified":0,"renderable":0},{"_id":"source/pictures/311ab170f5b301b3a97ebb5be89317e5c9ca47be5117b5bfbf3083ceec7346b4-image.png","path":"pictures/311ab170f5b301b3a97ebb5be89317e5c9ca47be5117b5bfbf3083ceec7346b4-image.png","modified":0,"renderable":0},{"_id":"source/pictures/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f382f32322f313635363165353961343133353836393f773d39353026683d32373926663d706e6726733d3238353239-1586834473510.jpg","path":"pictures/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f382f32322f313635363165353961343133353836393f773d39353026683d32373926663d706e6726733d3238353239-1586834473510.jpg","modified":0,"renderable":0},{"_id":"source/pictures/8-queens.png","path":"pictures/8-queens.png","modified":0,"renderable":0},{"_id":"source/pictures/8394323_13080758591kyV-1595069195969.jpg","path":"pictures/8394323_13080758591kyV-1595069195969.jpg","modified":0,"renderable":0},{"_id":"source/pictures/8394323_13080758591kyV.jpg","path":"pictures/8394323_13080758591kyV.jpg","modified":0,"renderable":0},{"_id":"source/pictures/8394323_1308075859Zfue.jpg","path":"pictures/8394323_1308075859Zfue.jpg","modified":0,"renderable":0},{"_id":"source/pictures/CgpOIF5rDYmATP43AAB3coc0R64799.png","path":"pictures/CgpOIF5rDYmATP43AAB3coc0R64799.png","modified":0,"renderable":0},{"_id":"source/pictures/CgpOIF5rDYmAPR1lAABl-qSxBYs115.png","path":"pictures/CgpOIF5rDYmAPR1lAABl-qSxBYs115.png","modified":0,"renderable":0},{"_id":"source/pictures/Cgq2xl5rDYmAXoWFAAArXO_oe8c713.png","path":"pictures/Cgq2xl5rDYmAXoWFAAArXO_oe8c713.png","modified":0,"renderable":0},{"_id":"source/pictures/bg2013050103.png","path":"pictures/bg2013050103.png","modified":0,"renderable":0},{"_id":"source/pictures/bg2013050104.png","path":"pictures/bg2013050104.png","modified":0,"renderable":0},{"_id":"source/pictures/b2cb057773e3d67976c535d6ef547d51_720w.png","path":"pictures/b2cb057773e3d67976c535d6ef547d51_720w.png","modified":0,"renderable":0},{"_id":"source/pictures/bg2013050105.png","path":"pictures/bg2013050105.png","modified":0,"renderable":0},{"_id":"source/pictures/bg2013050106.png","path":"pictures/bg2013050106.png","modified":0,"renderable":0},{"_id":"source/pictures/bg2013050107-1594975043794.png","path":"pictures/bg2013050107-1594975043794.png","modified":0,"renderable":0},{"_id":"source/pictures/bg2013050107.png","path":"pictures/bg2013050107.png","modified":0,"renderable":0},{"_id":"source/pictures/bg2013050108.png","path":"pictures/bg2013050108.png","modified":0,"renderable":0},{"_id":"source/pictures/bg2013050109.png","path":"pictures/bg2013050109.png","modified":0,"renderable":0},{"_id":"source/pictures/bg2013050110.png","path":"pictures/bg2013050110.png","modified":0,"renderable":0},{"_id":"source/pictures/bg2013050111.png","path":"pictures/bg2013050111.png","modified":0,"renderable":0},{"_id":"source/pictures/bg2013050112-1594975805920.png","path":"pictures/bg2013050112-1594975805920.png","modified":0,"renderable":0},{"_id":"source/pictures/bg2013050112.png","path":"pictures/bg2013050112.png","modified":0,"renderable":0},{"_id":"source/pictures/bg2013050113.png","path":"pictures/bg2013050113.png","modified":0,"renderable":0},{"_id":"source/pictures/bg2013050114.png","path":"pictures/bg2013050114.png","modified":0,"renderable":0},{"_id":"source/pictures/coin.png","path":"pictures/coin.png","modified":0,"renderable":0},{"_id":"source/pictures/fib.png","path":"pictures/fib.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200405194407416.png","path":"pictures/image-20200405194407416.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200426223643952.png","path":"pictures/image-20200426223643952.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200426224653184.png","path":"pictures/image-20200426224653184.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200426223715720.png","path":"pictures/image-20200426223715720.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200426224741598.png","path":"pictures/image-20200426224741598.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200426225059906.png","path":"pictures/image-20200426225059906.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200426225211203.png","path":"pictures/image-20200426225211203.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200426225223170.png","path":"pictures/image-20200426225223170.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200426225402284.png","path":"pictures/image-20200426225402284.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200426230751958.png","path":"pictures/image-20200426230751958.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200426230943516.png","path":"pictures/image-20200426230943516.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200426231034553.png","path":"pictures/image-20200426231034553.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200426231044849.png","path":"pictures/image-20200426231044849.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200427232114257.png","path":"pictures/image-20200427232114257.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200427232353749.png","path":"pictures/image-20200427232353749.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200427232447340.png","path":"pictures/image-20200427232447340.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200427232554631.png","path":"pictures/image-20200427232554631.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200427232650317.png","path":"pictures/image-20200427232650317.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200428230552342.png","path":"pictures/image-20200428230552342.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200428231345713.png","path":"pictures/image-20200428231345713.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200428232129091.png","path":"pictures/image-20200428232129091.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200514143731277-1595486755603.png","path":"pictures/image-20200514143731277-1595486755603.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200428232253846.png","path":"pictures/image-20200428232253846.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200514143731277.png","path":"pictures/image-20200514143731277.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200725154024914.png","path":"pictures/image-20200725154024914.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200807171516964.png","path":"pictures/image-20200807171516964.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200807171625633.png","path":"pictures/image-20200807171625633.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200807172325257.png","path":"pictures/image-20200807172325257.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200808193648360.png","path":"pictures/image-20200808193648360.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200808193751871.png","path":"pictures/image-20200808193751871.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200810100323970.png","path":"pictures/image-20200810100323970.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200808194237663.png","path":"pictures/image-20200808194237663.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200814153910285.png","path":"pictures/image-20200814153910285.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200815105842768.png","path":"pictures/image-20200815105842768.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200817163511887.png","path":"pictures/image-20200817163511887.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200817163701700.png","path":"pictures/image-20200817163701700.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200817171813338.png","path":"pictures/image-20200817171813338.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200818094630464.png","path":"pictures/image-20200818094630464.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200818100806984.png","path":"pictures/image-20200818100806984.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200818112245505.png","path":"pictures/image-20200818112245505.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200818201822616.png","path":"pictures/image-20200818201822616.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200819111819257.png","path":"pictures/image-20200819111819257.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200819150240523.png","path":"pictures/image-20200819150240523.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200820100311020.png","path":"pictures/image-20200820100311020.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200820151924955.png","path":"pictures/image-20200820151924955.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200821104215491.png","path":"pictures/image-20200821104215491.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200821104157163.png","path":"pictures/image-20200821104157163.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200821111825878.png","path":"pictures/image-20200821111825878.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200822094721670.png","path":"pictures/image-20200822094721670.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200822101717491.png","path":"pictures/image-20200822101717491.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200824094845802.png","path":"pictures/image-20200824094845802.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200824101740024.png","path":"pictures/image-20200824101740024.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200824193240313.png","path":"pictures/image-20200824193240313.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200824200146778.png","path":"pictures/image-20200824200146778.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200825143910613.png","path":"pictures/image-20200825143910613.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200826094442518.png","path":"pictures/image-20200826094442518.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200826101920949.png","path":"pictures/image-20200826101920949.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200826102906095.png","path":"pictures/image-20200826102906095.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200826144648426.png","path":"pictures/image-20200826144648426.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200826145822905.png","path":"pictures/image-20200826145822905.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200826161851806.png","path":"pictures/image-20200826161851806.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200826162804216.png","path":"pictures/image-20200826162804216.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200826164535445.png","path":"pictures/image-20200826164535445.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200826165407268.png","path":"pictures/image-20200826165407268.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200826165656748.png","path":"pictures/image-20200826165656748.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200827104857215.png","path":"pictures/image-20200827104857215.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200828102111964.png","path":"pictures/image-20200828102111964.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200828110613718.png","path":"pictures/image-20200828110613718.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200828191832335.png","path":"pictures/image-20200828191832335.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200831101224071.png","path":"pictures/image-20200831101224071.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200831105056785.png","path":"pictures/image-20200831105056785.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200831113455312.png","path":"pictures/image-20200831113455312.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200831113544204.png","path":"pictures/image-20200831113544204.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200831113602250.png","path":"pictures/image-20200831113602250.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200831113732603.png","path":"pictures/image-20200831113732603.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200831144633336.png","path":"pictures/image-20200831144633336.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200831144653744.png","path":"pictures/image-20200831144653744.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200831144738524.png","path":"pictures/image-20200831144738524.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200831145140568.png","path":"pictures/image-20200831145140568.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200901091457061.png","path":"pictures/image-20200901091457061.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200901091510832.png","path":"pictures/image-20200901091510832.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200901093602332.png","path":"pictures/image-20200901093602332.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200901100021967.png","path":"pictures/image-20200901100021967.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200901100037412.png","path":"pictures/image-20200901100037412.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200902100344960.png","path":"pictures/image-20200902100344960.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200902104235073.png","path":"pictures/image-20200902104235073.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200903093332125.png","path":"pictures/image-20200903093332125.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200903095901434.png","path":"pictures/image-20200903095901434.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200904105932893.png","path":"pictures/image-20200904105932893.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200907095838051.png","path":"pictures/image-20200907095838051.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200908190526092.png","path":"pictures/image-20200908190526092.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200908193644741.png","path":"pictures/image-20200908193644741.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200908193801938.png","path":"pictures/image-20200908193801938.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200908194711399.png","path":"pictures/image-20200908194711399.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200908195206197.png","path":"pictures/image-20200908195206197.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200908195430706.png","path":"pictures/image-20200908195430706.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200908200341884.png","path":"pictures/image-20200908200341884.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200909191523151.png","path":"pictures/image-20200909191523151.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200910185227369.png","path":"pictures/image-20200910185227369.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200911103413418.png","path":"pictures/image-20200911103413418.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200912101636226.png","path":"pictures/image-20200912101636226.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200912104507992.png","path":"pictures/image-20200912104507992.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200912105349916.png","path":"pictures/image-20200912105349916.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200912114154510.png","path":"pictures/image-20200912114154510.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200914160900975.png","path":"pictures/image-20200914160900975.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200914163116761.png","path":"pictures/image-20200914163116761.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200914163039855.png","path":"pictures/image-20200914163039855.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200914163237021.png","path":"pictures/image-20200914163237021.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200914163358944.png","path":"pictures/image-20200914163358944.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200915154342061.png","path":"pictures/image-20200915154342061.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200918185127353.png","path":"pictures/image-20200918185127353.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200929194330209.png","path":"pictures/image-20200929194330209.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200921142507255.png","path":"pictures/image-20200921142507255.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200929194630351.png","path":"pictures/image-20200929194630351.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20201013212322051.png","path":"pictures/image-20201013212322051.png","modified":0,"renderable":0},{"_id":"source/pictures/u=287229615,2118435423&fm=26&gp=0.jpg","path":"pictures/u=287229615,2118435423&fm=26&gp=0.jpg","modified":0,"renderable":0},{"_id":"source/pictures/微信截图_20200405164325.png","path":"pictures/微信截图_20200405164325.png","modified":0,"renderable":0},{"_id":"source/pictures/微信截图_20200405164537.png","path":"pictures/微信截图_20200405164537.png","modified":0,"renderable":0},{"_id":"source/pictures/微信截图_20200405164821-1586080506840.png","path":"pictures/微信截图_20200405164821-1586080506840.png","modified":0,"renderable":0},{"_id":"source/pictures/微信截图_20200405164821-1586080520904.png","path":"pictures/微信截图_20200405164821-1586080520904.png","modified":0,"renderable":0},{"_id":"source/pictures/微信截图_20200405164821.png","path":"pictures/微信截图_20200405164821.png","modified":0,"renderable":0},{"_id":"source/pictures/微信截图_20200405234951.png","path":"pictures/微信截图_20200405234951.png","modified":0,"renderable":0},{"_id":"source/pictures/1-1595902107828.jpg","path":"pictures/1-1595902107828.jpg","modified":0,"renderable":0},{"_id":"source/pictures/1.jpg","path":"pictures/1.jpg","modified":0,"renderable":0},{"_id":"source/pictures/2.jpg","path":"pictures/2.jpg","modified":0,"renderable":0},{"_id":"source/pictures/2019-3Java运行时数据区域JDK1.8.png","path":"pictures/2019-3Java运行时数据区域JDK1.8.png","modified":0,"renderable":0},{"_id":"source/pictures/5-1595987693352.jpg","path":"pictures/5-1595987693352.jpg","modified":0,"renderable":0},{"_id":"source/pictures/5.jpg","path":"pictures/5.jpg","modified":0,"renderable":0},{"_id":"source/pictures/544caeb82a329fa49cc99842818ed1ba_720w.png","path":"pictures/544caeb82a329fa49cc99842818ed1ba_720w.png","modified":0,"renderable":0},{"_id":"source/pictures/8db4a3bdfb238da1a1c4431d2b6e075c_720w.png","path":"pictures/8db4a3bdfb238da1a1c4431d2b6e075c_720w.png","modified":0,"renderable":0},{"_id":"source/pictures/8e8203c1b51be6446cda4026eaaccf19_720w.png","path":"pictures/8e8203c1b51be6446cda4026eaaccf19_720w.png","modified":0,"renderable":0},{"_id":"source/pictures/9430388_1508834386231_FE8B1A979ADF6E3C2C114AF3F9CA693C.png","path":"pictures/9430388_1508834386231_FE8B1A979ADF6E3C2C114AF3F9CA693C.png","modified":0,"renderable":0},{"_id":"source/pictures/a285d9b2da279a18b052fe5eed69afe9_r.jpg","path":"pictures/a285d9b2da279a18b052fe5eed69afe9_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/e5aa99e811d1814e010afa7779b759d4_r.jpg","path":"pictures/e5aa99e811d1814e010afa7779b759d4_r.jpg","modified":0,"renderable":0},{"_id":"source/pictures/icon.jpg","path":"pictures/icon.jpg","modified":0,"renderable":0},{"_id":"source/pictures/image-20200426223214696.png","path":"pictures/image-20200426223214696.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200729164116169.png","path":"pictures/image-20200729164116169.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200807171742778.png","path":"pictures/image-20200807171742778.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200907095746263.png","path":"pictures/image-20200907095746263.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200908091720713.png","path":"pictures/image-20200908091720713.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200908202619771.png","path":"pictures/image-20200908202619771.png","modified":0,"renderable":0},{"_id":"source/pictures/state.jpg","path":"pictures/state.jpg","modified":0,"renderable":0},{"_id":"source/pictures/state2.jpg","path":"pictures/state2.jpg","modified":0,"renderable":0},{"_id":"source/pictures/3.jpg","path":"pictures/3.jpg","modified":0,"renderable":0},{"_id":"source/pictures/image-20200729152340608.png","path":"pictures/image-20200729152340608.png","modified":0,"renderable":0},{"_id":"source/pictures/导出时序图.jpg","path":"pictures/导出时序图.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"source/pictures/0f1c183ceb7b634f8a527028afd4893e26dfe3796afce35cbb177b125939179b-LeetCode 第 47 题：“全排列 II”题解配图.png","path":"pictures/0f1c183ceb7b634f8a527028afd4893e26dfe3796afce35cbb177b125939179b-LeetCode 第 47 题：“全排列 II”题解配图.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200912160847665.png","path":"pictures/image-20200912160847665.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200912161028162.png","path":"pictures/image-20200912161028162.png","modified":0,"renderable":0},{"_id":"source/pictures/全排列2.png","path":"pictures/全排列2.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/fancybox/LICENSE","path":"lib/fancybox/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/README.md","path":"lib/fancybox/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"source/pictures/image-20200721113245712.png","path":"pictures/image-20200721113245712.png","modified":0,"renderable":0},{"_id":"source/pictures/image-20200912154659563.png","path":"pictures/image-20200912154659563.png","modified":0,"renderable":0},{"_id":"source/pictures/58e67eae921e4b431782c07444af824e_r.jpg","path":"pictures/58e67eae921e4b431782c07444af824e_r.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.css","path":"lib/fancybox/source/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.js","path":"lib/fancybox/source/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"source/pictures/导出类图.jpg","path":"pictures/导出类图.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/images/mango16*16.png","path":"images/mango16*16.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/mango32*32.png","path":"images/mango32*32.png","modified":0,"renderable":1},{"_id":"source/pictures/Spring-AOP类图.jpg","path":"pictures/Spring-AOP类图.jpg","modified":0,"renderable":0},{"_id":"source/pictures/AOP数据权限类图.png","path":"pictures/AOP数据权限类图.png","modified":0,"renderable":0},{"_id":"source/pictures/AOP-数据库UML.png","path":"pictures/AOP-数据库UML.png","modified":0,"renderable":0},{"_id":"source/pictures/AOP流程.png","path":"pictures/AOP流程.png","modified":0,"renderable":0},{"_id":"source/pictures/Spring-AOP流程.jpg","path":"pictures/Spring-AOP流程.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"171afbdd0ce45195cc7ac168ee63df2bc8ec20e3","modified":1615173887264},{"_id":"source/CNAME","hash":"d329c161806740dbb4ead9ad648efe9d038036fb","modified":1608985609152},{"_id":"source/404.html","hash":"1c5281fff51bd7dbba35bd58605bb8051438e56e","modified":1608985609152},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1608985609237},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1608985609237},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1608985609237},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1608985609237},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1608985609237},{"_id":"themes/next/_config.yml","hash":"13b3befff84e94c809afcd536fce3f91db46c0df","modified":1614854585653},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1608985609237},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1608985609238},{"_id":"themes/next/package.json","hash":"6be512ba52a3f9edb27f4db15c8cc166741af3e9","modified":1608985609258},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1608985609243},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1608985609238},{"_id":"source/_posts/HashMap实现原理及其重要方法.md","hash":"b382d0ead5507f0e33154198acaf13570ea59929","modified":1608985609152},{"_id":"source/_posts/JSON与Java对象的转换.md","hash":"1a18641bc1a7ac99c166f3e2a943edccdb5a9160","modified":1608985609153},{"_id":"source/_posts/KMP算法.md","hash":"19cd50a5ef7b652b5e98b766111e62ab08a9de54","modified":1608985609153},{"_id":"source/_posts/String的特点以及方法.md","hash":"76f20f4e486a4c14c53586df0223119251ef5469","modified":1608985609153},{"_id":"source/_posts/二分查找总结.md","hash":"28fe0a82fca573e36672d421cbe3d849355cfde6","modified":1608985609153},{"_id":"source/_posts/二叉树总结.md","hash":"461a0956ed0b2c8782ef2bca84cea1b0a70ea724","modified":1608985609154},{"_id":"source/_posts/回溯算法总结.md","hash":"fe4c88a9db18b0971d854e362f0b5ef58b28950f","modified":1608985609155},{"_id":"source/_posts/生产者消费者模式-阻塞队列实现导出.md","hash":"1d81cc674ed356eb3811a991b2119f24c2362105","modified":1615173194723},{"_id":"source/_posts/设计数据库的一些认识.md","hash":"675b27dc4b9d15d5d3711537406e1ee35d63cedd","modified":1608985609155},{"_id":"source/_posts/贪心算法总结.md","hash":"ab024c609209b08495387bdf06da1b3f9dcc83ce","modified":1614083730890},{"_id":"source/_posts/链表总结.md","hash":"9936bba587ee4859dc080fa15fae6ad7b0876819","modified":1608985609155},{"_id":"source/categories/index.md","hash":"edd1f24931443fb635da7554f25c9d4d8621a7e1","modified":1608985609155},{"_id":"source/tags/index.md","hash":"260405b9d087344669c6ca7bd105def5f346dea6","modified":1608985609218},{"_id":"source/pictures/06DD99DC.png","hash":"c047d6fb6d7f8bbd9256e2a262e0e6ba222ad5f6","modified":1608985609156},{"_id":"source/pictures/08786FDF.png","hash":"da1bfbf1105a1417d952402f2c75f61005e83367","modified":1608985609156},{"_id":"source/pictures/13px-Dark_Red_x.svg-1587911490598.png","hash":"6c0e1ae69d747b49467935d3719627d0e95315cf","modified":1608985609159},{"_id":"source/pictures/13px-Dark_Red_x.svg-1587911490730.png","hash":"6c0e1ae69d747b49467935d3719627d0e95315cf","modified":1608985609159},{"_id":"source/pictures/13px-Dark_Red_x.svg-1587911490852.png","hash":"6c0e1ae69d747b49467935d3719627d0e95315cf","modified":1608985609159},{"_id":"source/pictures/13px-Dark_Red_x.svg.png","hash":"6c0e1ae69d747b49467935d3719627d0e95315cf","modified":1608985609159},{"_id":"source/pictures/13px-Green_check.svg-1587911490574.png","hash":"c5cc5fa2ac79ad7004006cab68d2b48b6954a261","modified":1608985609159},{"_id":"source/pictures/13px-Green_check.svg-1587911490720.png","hash":"c5cc5fa2ac79ad7004006cab68d2b48b6954a261","modified":1608985609159},{"_id":"source/pictures/13px-Green_check.svg-1587911491234.png","hash":"c5cc5fa2ac79ad7004006cab68d2b48b6954a261","modified":1608985609159},{"_id":"source/pictures/13px-Green_check.svg.png","hash":"c5cc5fa2ac79ad7004006cab68d2b48b6954a261","modified":1608985609160},{"_id":"source/pictures/13px-Yellow_check.svg.png","hash":"9ded6c97d470f15b15bd8fcb8efbe2b388e4d1cb","modified":1608985609160},{"_id":"source/pictures/20140728110939595","hash":"95231b12f400acc79dff9ed6a106edd285a52a08","modified":1608985609161},{"_id":"source/pictures/20140729181940812","hash":"d3ce7077dbefdf25c19972d2b553990f76014c9d","modified":1608985609161},{"_id":"source/pictures/20140725231726921","hash":"bd66be8dcd8cdd87e032c37bfa00530dd27906c7","modified":1608985609161},{"_id":"source/pictures/20140729182154066","hash":"aa45de5d88acf924aee6247a06e1ce0b14b94d78","modified":1608985609162},{"_id":"source/pictures/280px-PrimaryKey_zht.svg.png","hash":"5e7b24d4f76e895edf95acd03d15b61eea3e0a32","modified":1608985609163},{"_id":"source/pictures/4b9c2ec85d900b1485fad362aabc2349a4d54ad3.svg","hash":"1bc8dc6e50b62f17ac0f88735972cc04724a7cc0","modified":1608985609165},{"_id":"source/pictures/311ab170f5b301b3a97ebb5be89317e5c9ca47be5117b5bfbf3083ceec7346b4-image.png","hash":"84b11342ac12210673ab412a34efaae4d9a65e04","modified":1608985609165},{"_id":"source/pictures/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f382f32322f313635363165353961343133353836393f773d39353026683d32373926663d706e6726733d3238353239-1586834473510.jpg","hash":"448701ff02b96b4130a144c9e04fe6ee985f06bd","modified":1608985609169},{"_id":"source/pictures/8-queens.png","hash":"0ac226d9578912b881d6e9159f9dc84dfafae3b4","modified":1608985609169},{"_id":"source/pictures/8394323_13080758591kyV-1595069195969.jpg","hash":"490a25772e3a93527c3ffb5fb9b71645e377ceb6","modified":1608985609169},{"_id":"source/pictures/8394323_13080758591kyV.jpg","hash":"490a25772e3a93527c3ffb5fb9b71645e377ceb6","modified":1608985609169},{"_id":"source/pictures/8394323_1308075859Zfue.jpg","hash":"6a9bf06f64b67779f9156a5cfcba340e333773d8","modified":1608985609169},{"_id":"source/pictures/CgpOIF5rDYmATP43AAB3coc0R64799.png","hash":"ffdee18e263362103bdcf9cdcc490925a02ec404","modified":1608985609172},{"_id":"source/pictures/CgpOIF5rDYmAPR1lAABl-qSxBYs115.png","hash":"3f27a0a4597ebd2ad6923a07b2a4a7217b4e722a","modified":1608985609171},{"_id":"source/pictures/Cgq2xl5rDYmAXoWFAAArXO_oe8c713.png","hash":"e0497e15938d539b6b1850ddbd8b1aeccb724acf","modified":1608985609172},{"_id":"source/pictures/bg2013050103.png","hash":"2b717e623b919cbb201eddb40b32840d6f901aca","modified":1608985609173},{"_id":"source/pictures/bg2013050104.png","hash":"83a552022e33adfc9c1218b6d2fe0bc34d710685","modified":1608985609173},{"_id":"source/pictures/b2cb057773e3d67976c535d6ef547d51_720w.png","hash":"f0c66ea4b87387c5d35d2e5cc126db0e59beebc5","modified":1608985609173},{"_id":"source/pictures/bg2013050105.png","hash":"61af65ffa974557fcba929dfc9edb790f112db4e","modified":1608985609173},{"_id":"source/pictures/bg2013050106.png","hash":"36d27adf1022d9b9260cd30fdbbcab6382cedfa0","modified":1608985609173},{"_id":"source/pictures/bg2013050107-1594975043794.png","hash":"5c9fed7e60504c6b3af6cfaa69a7d73412760eee","modified":1608985609174},{"_id":"source/pictures/bg2013050107.png","hash":"5c9fed7e60504c6b3af6cfaa69a7d73412760eee","modified":1608985609174},{"_id":"source/pictures/bg2013050108.png","hash":"ef78b584d26d386c06d5dc2e442f8294c1ca2c83","modified":1608985609174},{"_id":"source/pictures/bg2013050109.png","hash":"253f9b51ff6fb0e139583f313d4d0461bffe6519","modified":1608985609174},{"_id":"source/pictures/bg2013050110.png","hash":"a4be08d9bac94619e7d7691f200e7f4fafec2466","modified":1608985609174},{"_id":"source/pictures/bg2013050111.png","hash":"a413a5ce4df7a2488f63abbf6acd26d3dfa77b48","modified":1608985609174},{"_id":"source/pictures/bg2013050112-1594975805920.png","hash":"ce545744202d862617e5d61b3a2a341cac92d71d","modified":1608985609175},{"_id":"source/pictures/bg2013050112.png","hash":"ce545744202d862617e5d61b3a2a341cac92d71d","modified":1608985609175},{"_id":"source/pictures/bg2013050113.png","hash":"b155d4aba0de4a0e80cf4292bad0e39f74831ecd","modified":1608985609175},{"_id":"source/pictures/bg2013050114.png","hash":"de953eeb5e6d77f5f8261311f778643c178b1141","modified":1608985609175},{"_id":"source/pictures/coin.png","hash":"65a8f563570d368545e04e347f3d6d98c9416842","modified":1608985609175},{"_id":"source/pictures/fib.png","hash":"8dfe15248fd9ed42da9a292f699da952f675e295","modified":1608985609176},{"_id":"source/pictures/image-20200405194407416.png","hash":"1586f8d8afffd0c2defda7f2eacefc58c083af21","modified":1608985609177},{"_id":"source/pictures/image-20200426223643952.png","hash":"66fb57cd572f6c27f95a5e27302c444531d57569","modified":1608985609178},{"_id":"source/pictures/image-20200426224653184.png","hash":"cb9c67069263437662d1a8765b691dd2fe0379c2","modified":1608985609178},{"_id":"source/pictures/image-20200426223715720.png","hash":"077e8a044464ba08e58e2cc6a6035eda426e6475","modified":1608985609178},{"_id":"source/pictures/image-20200426224741598.png","hash":"4f6603a30fa36100a3d3c7a88e91148cd61c63dd","modified":1608985609179},{"_id":"source/pictures/image-20200426225059906.png","hash":"996d7166bc0ddfde1a7a1ff2d46813eb5cd70aa7","modified":1608985609179},{"_id":"source/pictures/image-20200426225211203.png","hash":"d957fb454a1b08d29905e69d9dd5dd8b4576a0e1","modified":1608985609179},{"_id":"source/pictures/image-20200426225223170.png","hash":"394189505db9ecc4c976a1569a48f69e00db119e","modified":1608985609179},{"_id":"source/pictures/image-20200426225402284.png","hash":"9f2124d12cb452473b756aa2b1d58d2764f0c673","modified":1608985609179},{"_id":"source/pictures/image-20200426230751958.png","hash":"9705bcd5ab1245869bac682e7af051cab66287b6","modified":1608985609179},{"_id":"source/pictures/image-20200426230943516.png","hash":"80bdb88d250a83221c8f4c2c637fd6212eefe768","modified":1608985609179},{"_id":"source/pictures/image-20200426231034553.png","hash":"6c6ca5fe211dc9d99cf02b7185e75328affe6434","modified":1608985609180},{"_id":"source/pictures/image-20200426231044849.png","hash":"b04e478a1114950d3b8239b0e0c1d3f67b76ba93","modified":1608985609180},{"_id":"source/pictures/image-20200427232114257.png","hash":"2751946e99f0a325ad7fe42fbe104142ef763ad9","modified":1608985609180},{"_id":"source/pictures/image-20200427232353749.png","hash":"06936ec0a417b5c69ff14250c8d7a30856fa395b","modified":1608985609180},{"_id":"source/pictures/image-20200427232447340.png","hash":"1cd15f44b59f358877f29b5376d5c37c115c005e","modified":1608985609180},{"_id":"source/pictures/image-20200427232554631.png","hash":"b852423042322138e6edeaa5cff024e4d41ee94d","modified":1608985609181},{"_id":"source/pictures/image-20200427232650317.png","hash":"2b2a13c5fc9790659c881dfece5d99c686f8583a","modified":1608985609181},{"_id":"source/pictures/image-20200428230552342.png","hash":"9bd5dd8215cca539be3c246d09116ab440e9b6c9","modified":1608985609181},{"_id":"source/pictures/image-20200428231345713.png","hash":"afdc77941a5f12ac5c5d7a932b0d54d5bcd6c93e","modified":1608985609182},{"_id":"source/pictures/image-20200428232129091.png","hash":"625fec8947a8d52bf0e469a32dc5c79c2f5214a3","modified":1608985609182},{"_id":"source/pictures/image-20200514143731277-1595486755603.png","hash":"7e5972ef65941e399096511ff6d6352f94520c5a","modified":1608985609183},{"_id":"source/pictures/image-20200428232253846.png","hash":"8572ecd407752520701fd12b76c83875545fd1d5","modified":1608985609183},{"_id":"source/pictures/image-20200514143731277.png","hash":"7e5972ef65941e399096511ff6d6352f94520c5a","modified":1608985609183},{"_id":"source/pictures/image-20200725154024914.png","hash":"9b4d31d6a53b1806f7d93b74ff27e6b075a0f644","modified":1608985609185},{"_id":"source/pictures/image-20200807171516964.png","hash":"d5739540187fb0a2cd442add1c5d584eb84be8c4","modified":1608985609187},{"_id":"source/pictures/image-20200807171625633.png","hash":"9b53cd4e7eb5671c0204673ffa9735b51c6a1b8f","modified":1608985609188},{"_id":"source/pictures/image-20200807172325257.png","hash":"ef3874f72e0405c7910cdbc2f7bb60dc2771613a","modified":1608985609189},{"_id":"source/pictures/image-20200808193648360.png","hash":"d8e9e848cc529569cccc5664f8766a4148f568b2","modified":1608985609189},{"_id":"source/pictures/image-20200808193751871.png","hash":"eae923e9c0c65c0463f6c2cd9ef8cb509e71fb7b","modified":1608985609189},{"_id":"source/pictures/image-20200810100323970.png","hash":"7cb795a65cf99c7363357169c6ae38fdb404cedd","modified":1608985609190},{"_id":"source/pictures/image-20200808194237663.png","hash":"b5837709a4cf43665247e9e4f9535382c8fb9893","modified":1608985609190},{"_id":"source/pictures/image-20200814153910285.png","hash":"78d03419726c153f5550674f47b6bd453aacc69e","modified":1608985609190},{"_id":"source/pictures/image-20200815105842768.png","hash":"4f15af4c7e3b03d604e8ab6900994262af739fc4","modified":1608985609190},{"_id":"source/pictures/image-20200817163511887.png","hash":"14a44031539ff7a09a111821ec52502be34fa196","modified":1608985609191},{"_id":"source/pictures/image-20200817163701700.png","hash":"59a5a14c1a33fabe26229102f89deb9797d417d7","modified":1608985609191},{"_id":"source/pictures/image-20200817171813338.png","hash":"0867eac73679806ae0e15f55f4651f285bf08940","modified":1608985609191},{"_id":"source/pictures/image-20200818094630464.png","hash":"c388bb3a629be92a19a3446079238631a5a39854","modified":1608985609191},{"_id":"source/pictures/image-20200818100806984.png","hash":"f284f41e32538f3a097ce60bf2105c221e25ce75","modified":1608985609191},{"_id":"source/pictures/image-20200818112245505.png","hash":"fb7ea311693b3d1575da5792357c999b6c2bd3f4","modified":1608985609192},{"_id":"source/pictures/image-20200818201822616.png","hash":"e981ba4346e2cda01c9d2ef0f756820aef14e94b","modified":1608985609192},{"_id":"source/pictures/image-20200819111819257.png","hash":"c6a679a8e3d99dda56b9b728b39d2a9eb8d0edd2","modified":1608985609192},{"_id":"source/pictures/image-20200819150240523.png","hash":"6c59c3cb95ce98bb6b063d5862569d0ab721ab63","modified":1608985609192},{"_id":"source/pictures/image-20200820100311020.png","hash":"b1a041c8afcc55e658344d43991da4ccd567a899","modified":1608985609192},{"_id":"source/pictures/image-20200820151924955.png","hash":"3ee7b7786094e51b22eb6f319c49e07cee459a94","modified":1608985609193},{"_id":"source/pictures/image-20200821104215491.png","hash":"245bfcf1c0cee704d0ecf718dace20060d0558ef","modified":1608985609193},{"_id":"source/pictures/image-20200821104157163.png","hash":"6229fa9e197aa5fd15432d8f0e45d9260298e7b2","modified":1608985609193},{"_id":"source/pictures/image-20200821111825878.png","hash":"5e279c15f5ed1f087d47b9a693e0de93470cddbc","modified":1608985609194},{"_id":"source/pictures/image-20200822094721670.png","hash":"e6e9de2e02c33859b4bb6074602802d0266b5ad6","modified":1608985609194},{"_id":"source/pictures/image-20200822101717491.png","hash":"10bc4c6278f491c1e4b17dda02b3f17d1108e75d","modified":1608985609194},{"_id":"source/pictures/image-20200824094845802.png","hash":"5930764b8fbf80138f500720de23f46ca2d08a03","modified":1608985609195},{"_id":"source/pictures/image-20200824101740024.png","hash":"e4aa94455b6dbf76b99dcb81c5460996a33c6bc6","modified":1608985609195},{"_id":"source/pictures/image-20200824193240313.png","hash":"82218b16dc0f29ca333a40b65c4f0f049d08b7d8","modified":1608985609195},{"_id":"source/pictures/image-20200824200146778.png","hash":"54727ffefeb41c7f19335b6ac8a09298c13c4956","modified":1608985609195},{"_id":"source/pictures/image-20200825143910613.png","hash":"4999e9a9661dc7de39230d2432e15822744a588a","modified":1608985609196},{"_id":"source/pictures/image-20200826094442518.png","hash":"42d87b77aaeddb725bb2dde6413adbd3b9a169ac","modified":1608985609196},{"_id":"source/pictures/image-20200826101920949.png","hash":"d45a7002fdbb76157b61ca094890f235b9f2512e","modified":1608985609196},{"_id":"source/pictures/image-20200826102906095.png","hash":"dd34716c6b208e365c9e3fc165b5792b29180d0d","modified":1608985609197},{"_id":"source/pictures/image-20200826144648426.png","hash":"ea6fdf7f861f5d8cbd5d6ff641d5154f60771242","modified":1608985609197},{"_id":"source/pictures/image-20200826145822905.png","hash":"5d319ad9c8b87c97e942be2633f3ef04309f5875","modified":1608985609197},{"_id":"source/pictures/image-20200826161851806.png","hash":"da388940ba3c4d90838881c78c0cd1ba48b4744a","modified":1608985609197},{"_id":"source/pictures/image-20200826162804216.png","hash":"08d8a14651991776a1198512fbb938e4dcd467f3","modified":1608985609198},{"_id":"source/pictures/image-20200826164535445.png","hash":"de8eb39887b78b799e55a9733442939fe445b7a3","modified":1608985609198},{"_id":"source/pictures/image-20200826165407268.png","hash":"89123d5ccefce0bf88d3b2ce5de4f9d95be868a2","modified":1608985609198},{"_id":"source/pictures/image-20200826165656748.png","hash":"7bcda11cd5fa757b2e16f2a6efc4353cfa23c87f","modified":1608985609198},{"_id":"source/pictures/image-20200827104857215.png","hash":"98e8ede6de612ed92c59fc0304fcd2b0878513f4","modified":1608985609199},{"_id":"source/pictures/image-20200828102111964.png","hash":"58d9bf0435d12af0e2b9030d170cb59541e4063a","modified":1608985609199},{"_id":"source/pictures/image-20200828110613718.png","hash":"e7d8235db8a94444bb7859f53be8fd8c9dc421c2","modified":1608985609199},{"_id":"source/pictures/image-20200828191832335.png","hash":"cbd129f2ed922ff269a12e0066a718e84c18b8e5","modified":1608985609199},{"_id":"source/pictures/image-20200831101224071.png","hash":"eff188a52f93d3149a96bb9e38dc3648de05d51d","modified":1608985609200},{"_id":"source/pictures/image-20200831105056785.png","hash":"5a1b964fa10c0ae69fa17ced03893fc86aa9f225","modified":1608985609200},{"_id":"source/pictures/image-20200831113455312.png","hash":"813d9989b6ebee9a70797b643c8460bb1e1c6d55","modified":1608985609200},{"_id":"source/pictures/image-20200831113544204.png","hash":"3d36a3bbcfbf9cabd19cd5612042a09baf350a6f","modified":1608985609200},{"_id":"source/pictures/image-20200831113602250.png","hash":"aab1b05f5c922ca2c5b2a99ef6479ecc1145a794","modified":1608985609200},{"_id":"source/pictures/image-20200831113732603.png","hash":"29379da92b1015cb7c24c0d7c77cddadf78e3261","modified":1608985609201},{"_id":"source/pictures/image-20200831144633336.png","hash":"b728eb8f88c9c947d4e4c30f4b8df9336fce457f","modified":1608985609201},{"_id":"source/pictures/image-20200831144653744.png","hash":"93625b6fc1bf6861eafa2e6c79c64c95d9c84f22","modified":1608985609201},{"_id":"source/pictures/image-20200831144738524.png","hash":"418649d044148be84e086b5ea6c03c5b58d253bd","modified":1608985609201},{"_id":"source/pictures/image-20200831145140568.png","hash":"3b6b5ca72eadb8dbd907a44f030dea6d4d88dfb1","modified":1608985609201},{"_id":"source/pictures/image-20200901091457061.png","hash":"7779b170d2b7dfad193f098f4a0fce9273e23776","modified":1608985609201},{"_id":"source/pictures/image-20200901091510832.png","hash":"d89bbe3a8f78859e1b94b71955b9cfefad8c281f","modified":1608985609202},{"_id":"source/pictures/image-20200901093602332.png","hash":"5c55421b5fbb6e80fe5148034b55634da6377bbb","modified":1608985609202},{"_id":"source/pictures/image-20200901100021967.png","hash":"9248282f706a684ddd457d14587c5e863fa27298","modified":1608985609202},{"_id":"source/pictures/image-20200901100037412.png","hash":"2c3b89ebcb094d7ba3fa71bad1f2544e45c5930c","modified":1608985609202},{"_id":"source/pictures/image-20200902100344960.png","hash":"a8d37d680a14ad1ef3f93837ef1882f774533eb9","modified":1608985609203},{"_id":"source/pictures/image-20200902104235073.png","hash":"ab57fce9fd320932e8ea8f654e68c195752b6576","modified":1608985609203},{"_id":"source/pictures/image-20200903093332125.png","hash":"ecab796cab947eb6cb952d9a01f2291168c24f88","modified":1608985609203},{"_id":"source/pictures/image-20200903095901434.png","hash":"b7f5ab0903347f98e271ea4219a175482237b0e2","modified":1608985609204},{"_id":"source/pictures/image-20200904105932893.png","hash":"000a440ffd40a9feb6378e3833365f7e28679728","modified":1608985609204},{"_id":"source/pictures/image-20200907095838051.png","hash":"623476934685f9f5c1890d57d3451b947c2203de","modified":1608985609205},{"_id":"source/pictures/image-20200908190526092.png","hash":"d61db1b80b2d2f8820cee6131912168a2885fe5d","modified":1608985609205},{"_id":"source/pictures/image-20200908193644741.png","hash":"0c9e94ad17e411ee492e207597083c4dbafb88b1","modified":1608985609205},{"_id":"source/pictures/image-20200908193801938.png","hash":"c586fee1f0784f64aa1ec9f9a3142275bbd5dbde","modified":1608985609206},{"_id":"source/pictures/image-20200908194711399.png","hash":"7a7b3ad7ddeed04d8830491520adc8deb6944d69","modified":1608985609206},{"_id":"source/pictures/image-20200908195206197.png","hash":"9ab7b4b32159a4a9b413b3529efeed56946fd227","modified":1608985609206},{"_id":"source/pictures/image-20200908195430706.png","hash":"a88b782fedb292f043d739dc2af66afb4b0eabd1","modified":1608985609206},{"_id":"source/pictures/image-20200908200341884.png","hash":"95dfebd2818626de4acc2f50b2726a462e9d9927","modified":1608985609207},{"_id":"source/pictures/image-20200909191523151.png","hash":"ee22d9c0dd044ab405c6d9c7e838357a99ddaa5c","modified":1608985609207},{"_id":"source/pictures/image-20200910185227369.png","hash":"7b62879c6e0261552221e6d0df252a47b9678797","modified":1608985609208},{"_id":"source/pictures/image-20200911103413418.png","hash":"9d0e405b9aa8be90efdbcebadff31153cfa99c5d","modified":1608985609208},{"_id":"source/pictures/image-20200912101636226.png","hash":"4f7071a6d2d747d322fdd6471df34c95adcd2f06","modified":1608985609208},{"_id":"source/pictures/image-20200912104507992.png","hash":"cfe5487371166812706f43e9c2b4e45912f42f81","modified":1608985609209},{"_id":"source/pictures/image-20200912105349916.png","hash":"56a2f5f73ad6f010b1a75f01fe1f38091038e28a","modified":1608985609209},{"_id":"source/pictures/image-20200912114154510.png","hash":"25f9ba8dfc0ed16d10669238e0f22973afe866f4","modified":1608985609209},{"_id":"source/pictures/image-20200914160900975.png","hash":"c3abfe7939a1bc7c14070f094c0651c25df7bd3c","modified":1608985609211},{"_id":"source/pictures/image-20200914163116761.png","hash":"b737279f0cf775bb9a17b2125ab5ed57af0c897d","modified":1608985609212},{"_id":"source/pictures/image-20200914163039855.png","hash":"930b0bc32fa3275223c9dd8e7c9c1a25da08b6cf","modified":1608985609212},{"_id":"source/pictures/image-20200914163237021.png","hash":"b2c192e2ba66f7233f440acfa4d998303d880fdb","modified":1608985609212},{"_id":"source/pictures/image-20200914163358944.png","hash":"3a4b86f85dc211c1ce6dda2a6022f120a22a3689","modified":1608985609212},{"_id":"source/pictures/image-20200915154342061.png","hash":"2962c43811bd39baf05522ed9849d9f6a4e652f2","modified":1608985609213},{"_id":"source/pictures/image-20200918185127353.png","hash":"4f30b93d741cd0763563cbfd64bde1171bfa2ca0","modified":1608985609213},{"_id":"source/pictures/image-20200929194330209.png","hash":"4332d12ffbfa9da9cb61587d3f51b40d3c6a209b","modified":1608985609213},{"_id":"source/pictures/image-20200921142507255.png","hash":"70b40ed307677c5ae509632a9ea0167f0716ac7c","modified":1608985609213},{"_id":"source/pictures/image-20200929194630351.png","hash":"a0f23b9f090e3b1ad7cef697277f668709246bad","modified":1608985609213},{"_id":"source/pictures/image-20201013212322051.png","hash":"9ab9a9abf46c7e5a7694b09cfe6ffd9db961c41e","modified":1608985609214},{"_id":"source/pictures/u=287229615,2118435423&fm=26&gp=0.jpg","hash":"5906784c345d0e5f599471403230407694266542","modified":1608985609215},{"_id":"source/pictures/微信截图_20200405164325.png","hash":"2434373813e3d3c0edab941d1992a3541499b8a1","modified":1608985609216},{"_id":"source/pictures/微信截图_20200405164537.png","hash":"aafe4fbe5866dd55281f4258c056455d4acb83f2","modified":1608985609217},{"_id":"source/pictures/微信截图_20200405164821-1586080506840.png","hash":"387c75d9cd846a3d5966f6cd2c823832b8b20fb7","modified":1608985609217},{"_id":"source/pictures/微信截图_20200405164821-1586080520904.png","hash":"387c75d9cd846a3d5966f6cd2c823832b8b20fb7","modified":1608985609217},{"_id":"source/pictures/微信截图_20200405164821.png","hash":"387c75d9cd846a3d5966f6cd2c823832b8b20fb7","modified":1608985609217},{"_id":"source/pictures/微信截图_20200405234951.png","hash":"22926ce81df0569292d85abe87974310934a4d55","modified":1608985609218},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1608985609239},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1608985609239},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1608985609239},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1608985609239},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1608985609239},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1608985609239},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1608985609239},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1608985609240},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1608985609240},{"_id":"themes/next/languages/ar.yml","hash":"c5d6fa35b57fa2bfab4a8a3b66fc52b5673f1ba5","modified":1608985609243},{"_id":"themes/next/languages/de.yml","hash":"109943f7adcd5cdbe4c6c95c9d279603f07edacb","modified":1608985609243},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1608985609243},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1608985609243},{"_id":"themes/next/languages/fa.yml","hash":"a24e0cf28e9f137d0d2219498778693c3c3960b2","modified":1608985609244},{"_id":"themes/next/languages/es.yml","hash":"53ef4a621fd628748b8ed711fe86080e9c9c91c8","modified":1608985609243},{"_id":"themes/next/languages/hu.yml","hash":"074d069af9aed5ad34fa809bd058a3b9e2d01051","modified":1608985609244},{"_id":"themes/next/languages/fr.yml","hash":"578a30a51b9ecbbcb4c200362ad9a37ffd3272db","modified":1608985609244},{"_id":"themes/next/languages/it.yml","hash":"ba2c8f51f2f719dabe71b6053c6fe6866161ec66","modified":1608985609244},{"_id":"themes/next/languages/ja.yml","hash":"5e13b521201944815665bd077b65d7ce69622b81","modified":1608985609245},{"_id":"themes/next/languages/ko.yml","hash":"4aa8f3bf06e02879863b19901476cb23ecd2d709","modified":1608985609245},{"_id":"themes/next/languages/id.yml","hash":"6037450ecd02796e08ca2e98037845b7c30c2807","modified":1608985609244},{"_id":"themes/next/languages/nl.yml","hash":"e27b29c60d88ef4c30de291b595cf8cad639c5d1","modified":1608985609245},{"_id":"themes/next/languages/pt-BR.yml","hash":"0660471e067d01ec80962d5721ae282aafff274d","modified":1608985609245},{"_id":"themes/next/languages/pt.yml","hash":"f7516b9d86b52c80bf63d3efc7ee6fd985205001","modified":1608985609245},{"_id":"themes/next/languages/ru.yml","hash":"a5381aab2a94bc5599f5b427f7d5a1a39949c4ce","modified":1608985609245},{"_id":"themes/next/languages/tr.yml","hash":"145d28f6f051129dc6393affe8f68cd7ba925078","modified":1608985609246},{"_id":"themes/next/languages/uk.yml","hash":"df54b2149c70bd64f7bd375e5833fe07660da237","modified":1608985609246},{"_id":"themes/next/languages/vi.yml","hash":"ffc144f606e171fdd8cdb41808ac36e406015a54","modified":1608985609246},{"_id":"themes/next/languages/zh-CN.yml","hash":"f22d66ef7a93811ff932986e9e5d69a320db5d96","modified":1608985609246},{"_id":"themes/next/languages/zh-HK.yml","hash":"2620632caa3c94022d9513ab1971d15512e737e7","modified":1608985609246},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1608985609247},{"_id":"themes/next/languages/zh-TW.yml","hash":"0964e90406bbd495e901d6b9d5f10124c8cad950","modified":1608985609247},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1608985609257},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1608985609257},{"_id":"themes/next/layout/page.swig","hash":"bf5489a86cb553a68183e0163e64acbcead77c21","modified":1608985609258},{"_id":"themes/next/layout/index.swig","hash":"19df6e8f095015322e6c038b0f83773ed6ce83ff","modified":1608985609257},{"_id":"themes/next/layout/post.swig","hash":"9ad0ee47ea1279ea84a9a0ee32b425e6d33ce969","modified":1608985609258},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1608985609258},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1608985609261},{"_id":"source/_posts/动态规划总结.md","hash":"841dead92a5c5fd6b2b46cd700e3c9548729d212","modified":1608985609154},{"_id":"source/pictures/1-1595902107828.jpg","hash":"69d6b3dc69015e4536a1ffafdfa9f3ab4e57b28f","modified":1608985609158},{"_id":"source/pictures/1.jpg","hash":"77d01ecc5571b3c2cca8723e9f1514cf472eed6e","modified":1608985609159},{"_id":"source/pictures/2.jpg","hash":"e661a4a0f5a01c0dbc993f1ff84c1b19060a4a59","modified":1608985609160},{"_id":"source/pictures/2019-3Java运行时数据区域JDK1.8.png","hash":"dda2bfe438c8055100d16d9d7a132b43706e605d","modified":1608985609163},{"_id":"source/pictures/5-1595987693352.jpg","hash":"b953826bab44a42be146c9fa523d339cb9601b5a","modified":1608985609165},{"_id":"source/pictures/5.jpg","hash":"b953826bab44a42be146c9fa523d339cb9601b5a","modified":1608985609166},{"_id":"source/pictures/544caeb82a329fa49cc99842818ed1ba_720w.png","hash":"06e9dd0ef543f293834ba9530eb4bd6a77e7ec57","modified":1608985609167},{"_id":"source/pictures/8db4a3bdfb238da1a1c4431d2b6e075c_720w.png","hash":"d00e6d851a6a0ff456541d5dcfdecf1a23ae37c5","modified":1608985609170},{"_id":"source/pictures/8e8203c1b51be6446cda4026eaaccf19_720w.png","hash":"6ecc82a616bf4a228d9d64db036c696dbbdb251a","modified":1608985609170},{"_id":"source/pictures/9430388_1508834386231_FE8B1A979ADF6E3C2C114AF3F9CA693C.png","hash":"b0f851d19a5516fbfca04c0b1deeeef71345459f","modified":1608985609171},{"_id":"source/pictures/a285d9b2da279a18b052fe5eed69afe9_r.jpg","hash":"680974721014c89b2e93b2bfd613fba7b07958e8","modified":1608985609172},{"_id":"source/pictures/e5aa99e811d1814e010afa7779b759d4_r.jpg","hash":"abea0ba889725a7c96a76ea48450830ba3c17c43","modified":1608985609176},{"_id":"source/pictures/icon.jpg","hash":"6da3fb027a364a7a842a8373918c75ea4c360771","modified":1608985609177},{"_id":"source/pictures/image-20200426223214696.png","hash":"a15e47db17258699605763b660ca9726d98253b0","modified":1608985609177},{"_id":"source/pictures/image-20200729164116169.png","hash":"07e65c66ee4c90488eb21549ebb85096e91e5be7","modified":1608985609187},{"_id":"source/pictures/image-20200807171742778.png","hash":"67b7ce8e957a11d8519e029df95aa35a02d6e1bb","modified":1608985609188},{"_id":"source/pictures/image-20200907095746263.png","hash":"75f655ced000d4805678a546614ecabcb929a8aa","modified":1608985609204},{"_id":"source/pictures/image-20200908091720713.png","hash":"84a6a8a59b4089744d7f65ac94fd5ecfa428633d","modified":1608985609205},{"_id":"source/pictures/image-20200908202619771.png","hash":"eadf47014d9ccffbb97577b9964396de04a55e88","modified":1608985609207},{"_id":"source/pictures/state.jpg","hash":"700dada6c73703a3e23b404c77ff8c600797f24e","modified":1608985609214},{"_id":"source/pictures/state2.jpg","hash":"74717b7989ec767fcd25a89f08599aa21aa87e23","modified":1608985609215},{"_id":"source/pictures/导出时序图 (2).png","hash":"442a071efd3886ed6836c2b89fdba655a9ddc2dc","modified":1614084308033},{"_id":"source/pictures/3.jpg","hash":"7d260b51642976294144b1f66e2b930651aa10dc","modified":1608985609164},{"_id":"source/pictures/image-20200729152340608.png","hash":"5e3a63ee26f5be88389f03741fc7a22640e5f28a","modified":1608985609186},{"_id":"source/pictures/导出时序图.jpg","hash":"a42358ac33b41e3f60b048f73599568abf8c9cd0","modified":1614515589913},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1608985609240},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1608985609241},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1608985609240},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1608985609241},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1608985609241},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1608985609240},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1608985609241},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1608985609242},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1608985609242},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1608985609242},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1608985609242},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1608985609242},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1608985609242},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"c4ec5822d644ddcedf2401837e6f6e6d3b63fbcd","modified":1608985609247},{"_id":"themes/next/layout/_macro/post.swig","hash":"a463029bc1ffe63cfdaf03477674854d3173ca4b","modified":1615173806225},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1608985609248},{"_id":"themes/next/layout/_partials/footer.swig","hash":"af2d688f688923080aaf8f20be33cfda629797ea","modified":1608985609248},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1608985609247},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1608985609249},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1608985609249},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1608985609251},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1608985609253},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1608985609255},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1608985609255},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1608985609256},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1608985609251},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1608985609251},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1608985609252},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"263178dcdf7b72f5c44d5559e28ef36f4968a251","modified":1608985609252},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1608985609253},{"_id":"themes/next/scripts/events/index.js","hash":"bf5e93f9209d111a014a7a6a17e86c05be552d13","modified":1608985609258},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1608985609260},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1608985609260},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1608985609260},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1608985609260},{"_id":"themes/next/scripts/filters/post.js","hash":"d86849559ae54a4098aef4e2ab9dc8f99a1d186c","modified":1608985609260},{"_id":"themes/next/scripts/helpers/engine.js","hash":"22d77bd511fc7c1bbd12339d65004ed5bfb0713c","modified":1608985609260},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1608985609261},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1608985609261},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1608985609261},{"_id":"themes/next/scripts/tags/button.js","hash":"946dd7beede408d1f090d5e9774d74763828b97c","modified":1608985609261},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1608985609262},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"0f133f27b61e8351cfd0959ba8a1b8551a9a8cc6","modified":1608985609262},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1608985609262},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1608985609262},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1608985609262},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1608985609262},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1608985609263},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1608985609263},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1608985609262},{"_id":"themes/next/source/css/_colors.styl","hash":"6a5ae9c02d12ee56a5b5222d676ac0a71d7aaa56","modified":1608985609263},{"_id":"themes/next/source/css/_mixins.styl","hash":"b79ff3debd5709397b122292fc7e551ae9d40782","modified":1608985609273},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1608985609277},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1608985609277},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1608985609278},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1608985609277},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1608985609278},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1608985609278},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1608985609278},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1608985609278},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1608985609279},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1608985609279},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1608985609279},{"_id":"themes/next/source/images/favicon.ico","hash":"83222202712d4542f60f7d26f6cb6534f7900016","modified":1608985609280},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1608985609278},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1608985609280},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1608985609278},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1608985609280},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1608985609280},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1608985609282},{"_id":"themes/next/source/js/local-search.js","hash":"b42bd1c883ce91db8632d96e0f0e062cb6b73adc","modified":1608985609281},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1608985609281},{"_id":"themes/next/source/js/next-boot.js","hash":"a22eeb6048ddd6b9224c8a671cbcfa303a2f7a1a","modified":1608985609281},{"_id":"themes/next/source/js/utils.js","hash":"95c5d37aa06521675afcf8619cfc5dbba3d2e18a","modified":1608985609282},{"_id":"themes/next/source/js/algolia-search.js","hash":"23cc3c013185eb97ef347c3b4c92d928f2f3398f","modified":1608985609281},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1608985609281},{"_id":"source/pictures/0f1c183ceb7b634f8a527028afd4893e26dfe3796afce35cbb177b125939179b-LeetCode 第 47 题：“全排列 II”题解配图.png","hash":"5d3ffbbb186e1ecc98e1a035092308de0bc6421b","modified":1608985609157},{"_id":"source/pictures/image-20200912160847665.png","hash":"beda7eaa39a64836535042f6c75a9de783b2a86b","modified":1608985609210},{"_id":"source/pictures/image-20200912161028162.png","hash":"a6b5cb1890bd16850217eb69f0f217018c6ca844","modified":1608985609211},{"_id":"source/pictures/导出类图 (2).png","hash":"3f2fe7b15262339c4103610182ce7dfdcb71889a","modified":1614084418012},{"_id":"source/pictures/全排列2.png","hash":"5d3ffbbb186e1ecc98e1a035092308de0bc6421b","modified":1608985609216},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1608985609248},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"1ea12d4b9490d9065ebf1b8739b90ce5defd6398","modified":1608985609248},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1608985609248},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1608985609248},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"12aeb9ee0d1d49d347f82a91e6bab568e1b59037","modified":1608985609249},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"958e097790551c9520426a1233add03515034f35","modified":1608985609249},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1608985609249},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1608985609249},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1608985609249},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1608985609250},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1608985609250},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1608985609251},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1608985609250},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"12cd9adb0c33adc484201f9e8a4e64ccf3011bae","modified":1608985609250},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1608985609250},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1608985609250},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1608985609250},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"ec20ff43845723e0ac2a245047c7a7e5aead6e88","modified":1608985609251},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1608985609253},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1608985609253},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1608985609253},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1608985609253},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1608985609254},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1608985609254},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1608985609255},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1608985609255},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1608985609255},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1608985609254},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1608985609254},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1608985609254},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1608985609254},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1608985609254},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1608985609255},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1608985609256},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1608985609256},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1608985609256},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1608985609257},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1608985609257},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1608985609256},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1608985609256},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1608985609256},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1608985609257},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1608985609257},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1608985609252},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1608985609252},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1608985609252},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1608985609252},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1608985609252},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1608985609258},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1608985609258},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1608985609259},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1608985609259},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1608985609259},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1608985609259},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"19cbd24880d0fbbd4d5698cd54da598f03b942da","modified":1608985609259},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1608985609259},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1608985609259},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1608985609260},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6a72b5928cdab9526a288177991e4b2aedd028cf","modified":1608985609260},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"38597817ede20418e73ae4afc50047ea5088c73e","modified":1608985609276},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1608985609276},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a14d03a8b8e7f687479b37f893e9784973040138","modified":1608985609277},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1608985609276},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"9840998e1a1fbcd419c52a1e38fa54a003eac963","modified":1608985609277},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"d8bf9cb15d9d91c7ad022ba2954b5b4d326f17f7","modified":1614085545747},{"_id":"themes/next/source/lib/fancybox/LICENSE","hash":"8624bcdae55baeef00cd11d5dfcfa60f68710a02","modified":1614085545748},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1614085545747},{"_id":"themes/next/source/lib/fancybox/README.md","hash":"8286582ed7c338fce8bb03566b769fba378bce83","modified":1614085545748},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1608985609282},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1608985609283},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1608985609282},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1608985609287},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1608985609286},{"_id":"themes/next/source/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1608985609281},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1608985609283},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1608985609283},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1608985609282},{"_id":"source/pictures/image-20200721113245712.png","hash":"7c6f5009dbfdfa0c19160a6d23ababb543310187","modified":1608985609185},{"_id":"source/pictures/image-20200912154659563.png","hash":"ea448db577c144e045c31f8929c2c45f38caec6e","modified":1608985609210},{"_id":"source/pictures/58e67eae921e4b431782c07444af824e_r.jpg","hash":"5224f89fe8e92c5d1e890fb89911231d88825a72","modified":1608985609168},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1608985609263},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1608985609264},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1608985609266},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1608985609263},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1608985609268},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1608985609268},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"8b9156ae47f4c58cf6cf7505cdd22bae7022481f","modified":1608985609270},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1608985609270},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"00d73105cb7b872e12d82d1dacbb15d5c2b58291","modified":1608985609270},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1608985609271},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1608985609271},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1608985609271},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b3bea92eef0e1fe2e7e294dac2184d16b5b8d666","modified":1608985609272},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1608985609273},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1608985609274},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"3a2ecb6e32374a56f0ef059a6d3e3701339cf47b","modified":1608985609274},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1608985609274},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"a49d3c821eb5e4e9661c8fbe548678f93a0ad0a6","modified":1608985609274},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1608985609274},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1608985609274},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1608985609275},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1608985609275},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"4794bd45d5e32ea005c805bcbc65b871e9927d02","modified":1608985609273},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"bb392700f04d956bb5f606efb052453efeade53d","modified":1608985609275},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1608985609275},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1608985609275},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1608985609275},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1608985609275},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e4f958677a75de87ee1caf7e22ba46a0602f22dd","modified":1608985609276},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"ccb71d732b12acd02ac26ed6bbda4861d027857d","modified":1608985609276},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"82025c3ad7af12e532e2e81be98deb0a74ff23ac","modified":1608985609276},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1608985609276},{"_id":"themes/next/source/lib/fancybox/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1614085545738},{"_id":"themes/next/source/lib/fancybox/.git/config","hash":"0bd9061daa1ae14bc8c15ccb2616123858620669","modified":1614085545741},{"_id":"themes/next/source/lib/fancybox/.git/index","hash":"0e5f902bfcbb633db12072726383d6087ff194f8","modified":1614516736705},{"_id":"themes/next/source/lib/fancybox/.git/packed-refs","hash":"b6ffcdb23c4f9b3e5576fe104e8596ea71603c84","modified":1614085545736},{"_id":"themes/next/source/lib/fancybox/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1614085542173},{"_id":"themes/next/source/lib/fancybox/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1614085545748},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"e43435fb9eaa918f5b8e35c9e110124b8bd13751","modified":1614085545749},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1614085545749},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1608985609284},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1608985609284},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1608985609286},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1608985609264},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1608985609264},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"c1daeb60c23945f745703ac2c3f4bf99d0ea3d95","modified":1608985609264},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1608985609264},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1608985609264},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"b480fbde7013f5647b42454d8189d2d45a886b5c","modified":1608985609264},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1608985609265},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1608985609265},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"5d5c022aa3b2f89c2f2a178212338bb64804dd75","modified":1608985609265},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1608985609265},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"66211794e4ed47e779ca81150cef588e0b4f2fc5","modified":1608985609265},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"796eb941ba0ca03fd5ca6d15a1f6a56afd9aa174","modified":1608985609265},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1608985609265},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1608985609265},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1608985609265},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1608985609266},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1608985609266},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1608985609266},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1608985609265},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1608985609266},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1608985609266},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1608985609266},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1608985609267},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1608985609267},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1608985609266},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1608985609267},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"555762730f1f31451113e8fdc84ec438ea738d90","modified":1608985609267},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1608985609267},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1608985609268},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1608985609267},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1608985609267},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1608985609268},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1608985609268},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1608985609268},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1608985609268},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1608985609269},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1608985609269},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1608985609269},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1608985609269},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1608985609269},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1608985609270},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1608985609270},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1608985609271},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1608985609271},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1608985609271},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1608985609272},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1608985609272},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1608985609272},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"9b3cce30c58e57b59e45d3f668a71a4129d3a8e4","modified":1608985609272},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"5ac97054b302fe3ce47822a03a3b56aa3d582005","modified":1608985609273},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1608985609273},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1608985609273},{"_id":"themes/next/source/lib/fancybox/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1614085542178},{"_id":"themes/next/source/lib/fancybox/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1614085542175},{"_id":"themes/next/source/lib/fancybox/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1614085542174},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1614085542178},{"_id":"themes/next/source/lib/fancybox/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1614085542176},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1614085542178},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1614085542179},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1614085542175},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1614085542175},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1614085542176},{"_id":"themes/next/source/lib/fancybox/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1614085542173},{"_id":"themes/next/source/lib/fancybox/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1614085542177},{"_id":"themes/next/source/lib/fancybox/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1614085542179},{"_id":"themes/next/source/lib/fancybox/.git/logs/HEAD","hash":"b56d1820c6528c2aa9ed67f523cf850095e419f2","modified":1614085545740},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1614085545750},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1608985609285},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1608985609284},{"_id":"themes/next/source/lib/fancybox/.git/objects/16/b01254a56610f4c6b7721c534ed4fc40ae51dd","hash":"88ca5fd99322d3a4067e0711af79f41c078f2ef5","modified":1614085544797},{"_id":"themes/next/source/lib/fancybox/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1614085544645},{"_id":"themes/next/source/lib/fancybox/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1614085544647},{"_id":"themes/next/source/lib/fancybox/.git/objects/1f/a2c5f332b7e304431213aec21012e53f8781d7","hash":"7632806182aa989d3b7029579d5c03c34b113ee3","modified":1614085544634},{"_id":"themes/next/source/lib/fancybox/.git/objects/40/9607f1ba381a64c3ccb8d5440299e8ef868ef8","hash":"a462f7a9efebb70c4051f92c09ccbd9885132c77","modified":1614085544628},{"_id":"themes/next/source/lib/fancybox/.git/objects/36/9bab09306448a2970d378b59bb21c059edad63","hash":"877e0c15623d0d6ff8f09bb627fc60a489f3c105","modified":1614085544744},{"_id":"themes/next/source/lib/fancybox/.git/objects/00/c03f6be011e8878608eec12f68caf42b73f38e","hash":"8516bd35bc8f9223e13de5877778c8d14d49d6db","modified":1614085545719},{"_id":"themes/next/source/lib/fancybox/.git/objects/19/3567a3107003507fafacd255c349857e417926","hash":"ef5eab75e8c6998cb223edb4eb8a26c4cfc9415c","modified":1614085545595},{"_id":"themes/next/source/lib/fancybox/.git/objects/3d/521bfc64755e348870094e85323dc1b9c96a6b","hash":"e9660fc4f89ecb176b0ab6e4860579c1bfe9f9cb","modified":1614085545338},{"_id":"themes/next/source/lib/fancybox/.git/objects/47/d427b6c52396bbab53a05f57aaa82b52c805b1","hash":"c5626bbb62f4d1d1e39034e7f44baf4c509410d6","modified":1614085545341},{"_id":"themes/next/source/lib/fancybox/.git/objects/54/0a7b36ee26decfc3f0f34bf73bc85c48899128","hash":"2e5447a9dd879d71368e9dddd34d93849d00b934","modified":1614085545721},{"_id":"themes/next/source/lib/fancybox/.git/objects/51/cf05811ed7d35e92551db1ba5a6e267ce781a5","hash":"99c009035ea86e3876b586577677d4d62ae12379","modified":1614085545336},{"_id":"themes/next/source/lib/fancybox/.git/objects/63/c555caede30ab06d6dba16644a827e9574c8cb","hash":"846603220288272ad5d35ebdc3c917cc4adce424","modified":1614085544630},{"_id":"themes/next/source/lib/fancybox/.git/objects/64/c47e893a0fef71c8c0930975ef114d9812da56","hash":"eaad75fab15724f9c2b069fc1ce9b8216be149d7","modified":1614085544748},{"_id":"themes/next/source/lib/fancybox/.git/objects/53/ceaabe0f8677333c5be196778b3e40840a1869","hash":"7bc1c1c42059d5402335b5293bfb5e54bee22557","modified":1614085544639},{"_id":"themes/next/source/lib/fancybox/.git/objects/78/068b93f813cecbbd50c8247de547035009d512","hash":"4bc2bee779bd7e3cca13ee34801cf1e12585e5ae","modified":1614085545340},{"_id":"themes/next/source/lib/fancybox/.git/objects/7c/c60b295fa2dcb82537a63792c9b3b3c2e74c33","hash":"b2dc23c71b13726c391aaefaa5312227a9b6ab7e","modified":1614085544799},{"_id":"themes/next/source/lib/fancybox/.git/objects/7b/15d3cb03fda86241f8b2b335f04e9b9de0e1c4","hash":"d1fe3bd82c90f7d93874798a8ee8ebf1391d7207","modified":1614085545569},{"_id":"themes/next/source/lib/fancybox/.git/objects/94/a9ed024d3859793618152ea559a168bbcbb5e2","hash":"1c2d080a86f03eb960e112a94910a5115addf57a","modified":1614085544741},{"_id":"themes/next/source/lib/fancybox/.git/objects/80/6b27034bd69d563e4243c2f12b43c7064b32dd","hash":"b7d3e8020767ae60a2029da8eccb0068623dc618","modified":1614085545335},{"_id":"themes/next/source/lib/fancybox/.git/objects/89/9d7a75b543fbed2a785f67d995bc77e06eb2e9","hash":"5651e2b80703225f642625c0fb2646543096d2cf","modified":1614085544636},{"_id":"themes/next/source/lib/fancybox/.git/objects/ad/569256343419017e8832a38faaa1c786716a1d","hash":"0538e4abd112b0a843035f28a511edabbe73f2ce","modified":1614085544632},{"_id":"themes/next/source/lib/fancybox/.git/objects/aa/654e17af8c354994f706c4e33bba6b5b70caeb","hash":"22b1bdf0b0974bf5e9022953ac26066056c235ff","modified":1614085545716},{"_id":"themes/next/source/lib/fancybox/.git/objects/92/4369c371444afb18fb86309229f5b4c24c6cf4","hash":"9eb6fa8ff9081e6650f6bee350d21567df105737","modified":1614085545592},{"_id":"themes/next/source/lib/fancybox/.git/objects/b6/c361c8dcf2f5a7572e81b956272e4cfe1198c1","hash":"3e160c605dbd94dcef2b9692a4a5a82bddb76264","modified":1614085544746},{"_id":"themes/next/source/lib/fancybox/.git/objects/ce/c0e316bee5d497ee834dbd29e0c5aad8331052","hash":"3d769fa5f55014841d10bb3bdf1b9725c43e9043","modified":1614085544641},{"_id":"themes/next/source/lib/fancybox/.git/objects/bd/e1f741357b44b49290d43fdd193125202fef81","hash":"9beefc75cc0c37d04e98dd13b51ad85df40e77b9","modified":1614085544643},{"_id":"themes/next/source/lib/fancybox/.git/objects/f6/bb280a0b2c68256a8e906b35c6976c80c1b3be","hash":"5daaee11fc384fbe0f02c7123036c954ee9a73fd","modified":1614085544644},{"_id":"themes/next/source/lib/fancybox/.git/refs/heads/master","hash":"0b56bdb897316a3b4ec6c120673249f65f4cb420","modified":1614085545740},{"_id":"themes/next/source/lib/fancybox/.git/objects/c2/fc5def1b6c38369e5e8b849adb956bd79b549e","hash":"27f03b9616e615b2724bac0fa4507d152697f3f1","modified":1614085544638},{"_id":"themes/next/source/lib/fancybox/.git/objects/d5/d10f6be62acc10fec6e11e8dc4affe1184a17b","hash":"cec51b2539349d2aba1ec5d11eaded3815eccdc5","modified":1614085544990},{"_id":"themes/next/source/lib/fancybox/.git/objects/9b/fe9361836240600c1bcc3cab9d42b35e731fad","hash":"3d38ffc7ac1ae85224691ef15d7f32e40c40b3a2","modified":1614085544794},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1608985609285},{"_id":"themes/next/source/lib/fancybox/.git/objects/7c/00ef8195b73793d477d22e723ecdac9553ebf3","hash":"fd8c4fd143b32fb3e86367f123feb7c35b305262","modified":1614085545327},{"_id":"themes/next/source/lib/fancybox/.git/objects/b3/b3098638624b56be968573e2dab1684f8a7f06","hash":"6fa11a2d904dff2b8f4ae1bd88bdbb66736438a1","modified":1614085544984},{"_id":"themes/next/source/lib/fancybox/.git/objects/ac/97c2cc9f61c52753abe4174a4a74b2064e5af0","hash":"272e74036b0612de83d9d0aa9604d3edf888b249","modified":1614085545567},{"_id":"themes/next/source/lib/fancybox/.git/logs/refs/heads/master","hash":"b56d1820c6528c2aa9ed67f523cf850095e419f2","modified":1614085545740},{"_id":"themes/next/source/lib/fancybox/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1614085545738},{"_id":"themes/next/source/lib/fancybox/.git/logs/refs/remotes/origin/HEAD","hash":"b56d1820c6528c2aa9ed67f523cf850095e419f2","modified":1614085545738},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"27f034e5db8c32e268e2959b9a7c1258d36e4510","modified":1614085545751},{"_id":"public/baidu_urls.txt","hash":"9fb3f82c2c4ad63ab3a3eba8f049b96799cfa489","modified":1615171614175},{"_id":"public/baidusitemap.xml","hash":"297e9e59d2c7139604135528dca3fd92d4ea01bb","modified":1615192961847},{"_id":"public/sitemap.xml","hash":"a10905d2f84184fbbd43e586d5de8bdeba5c4290","modified":1615192961847},{"_id":"public/search.xml","hash":"a60edaaf06e260a5446493234ede57aeed4b79fd","modified":1615192961847},{"_id":"public/404.html","hash":"757a26fa5b0dd7a7e1190dbf756c28f9238fc5eb","modified":1615192961847},{"_id":"public/tags/index.html","hash":"035e81d32cf12e4296739f7e60c1f63a1fafbe88","modified":1615192961847},{"_id":"public/categories/index.html","hash":"a05e8fdbe2e097a3e6696acf3f9e9839cd5cb1e2","modified":1615192961847},{"_id":"public/archives/page/2/index.html","hash":"8044cfb561cc790311ef7200a14c8d78c80a4851","modified":1615192961847},{"_id":"public/archives/2020/page/2/index.html","hash":"acb060914574e203a280c5cb5849d88531bb5b7e","modified":1615192961847},{"_id":"public/archives/2020/04/index.html","hash":"de712a32d362d97e11c6952cd5a8473f11b3a64a","modified":1615192961847},{"_id":"public/archives/2020/06/index.html","hash":"0b327d10d567120c67e1bda8284a34e6cd5ab2bb","modified":1615192961847},{"_id":"public/archives/2020/07/index.html","hash":"1e123970862542415825fd5e3b3496262912252f","modified":1615192961847},{"_id":"public/archives/2020/08/index.html","hash":"fe644eaa23a324494fe7307b56f89d80d60fb7a5","modified":1615192961847},{"_id":"public/archives/2020/09/index.html","hash":"05bbadf02e0c2185bca8eeee95f96e555b29160b","modified":1615192961847},{"_id":"public/archives/2021/index.html","hash":"9a0821082d30931d1f46f597e2297770bce737b5","modified":1615192961847},{"_id":"public/archives/2021/02/index.html","hash":"b96a1192db0affec5de648dc7213850368a4c33d","modified":1615192961847},{"_id":"public/categories/Java/index.html","hash":"b0875daff1f61ddb74a05193055237f36dc1d9e5","modified":1615192961847},{"_id":"public/categories/Database/index.html","hash":"ec04f88f61511af3d628aba8707d2713db23dfef","modified":1615192961847},{"_id":"public/tags/json/index.html","hash":"feec6c92f2d3931c2bca0e9101180242c76f617a","modified":1615192961847},{"_id":"public/tags/String/index.html","hash":"feaa76804d9ef002c954ee022795065ffb13543d","modified":1615192961847},{"_id":"public/tags/KMP/index.html","hash":"ae29c40b49a197cb0aa989584f9b9b02bc2a5029","modified":1615192961847},{"_id":"public/tags/Database/index.html","hash":"580c38cf8f77f030d58ab787e5936dff9cdedfcc","modified":1615192961847},{"_id":"public/tags/链表/index.html","hash":"90e6bb062cc6534013f1ab73175df6114522950f","modified":1615192961847},{"_id":"public/tags/贪心算法/index.html","hash":"787d0ce83ba98a89096ced3f9591f3237c4fc53c","modified":1615192961847},{"_id":"public/tags/二分查找/index.html","hash":"f838127587d25d6fbebd1d3d8c52f440974f9889","modified":1615192961847},{"_id":"public/tags/HashMap/index.html","hash":"e17b0e52d5015b9d1732280d25f4bdf2a267d58f","modified":1615192961847},{"_id":"public/tags/回溯/index.html","hash":"887b3cbc83e84b03d4c8beec9cf4b4760a886dcd","modified":1615192961847},{"_id":"public/tags/二叉树/index.html","hash":"84e8b6754e5398d5a247a49654516e2eafa22acb","modified":1615192961847},{"_id":"public/tags/DP/index.html","hash":"78f09ccd222d89ea8a5b5838aed0db0983ed8015","modified":1615192961847},{"_id":"public/2021/02/23/生产者消费者模式-阻塞队列实现导出/index.html","hash":"55ad0c14f5c22279a1484cfc91b8c525c575f886","modified":1615192961847},{"_id":"public/2020/09/11/动态规划总结/index.html","hash":"ecdee6165d1c07c172be0b065da17a2d178c7efb","modified":1615192961847},{"_id":"public/2020/09/27/KMP算法/index.html","hash":"163d7629e831b633f397dc58495cab5b3e1a6fad","modified":1615192961847},{"_id":"public/2020/08/17/链表总结/index.html","hash":"a48e436800df38541ed749eed343e607f2f47ff1","modified":1615192961847},{"_id":"public/2020/08/01/贪心算法总结/index.html","hash":"a0d02d0a93c28f92d4390c09eca4b372dc18ad10","modified":1615192961847},{"_id":"public/2020/07/25/回溯算法总结/index.html","hash":"28c285ce003c24b5f76b3c5d9debb8219c9c89c8","modified":1615192961847},{"_id":"public/2020/07/23/JSON与Java对象的转换/index.html","hash":"0da6c6d0412c57cfbb66486f829b9c90fcd9134d","modified":1615192961847},{"_id":"public/2020/07/12/设计数据库的一些认识/index.html","hash":"63c76e96a05988bf182f27f9174ca18005510fe2","modified":1615192961847},{"_id":"public/2020/07/10/二叉树总结/index.html","hash":"0cf1feb3af6402a24dba98031e5cf27bf17e4572","modified":1615192961847},{"_id":"public/2020/06/10/二分查找总结/index.html","hash":"4d29208d9c2ce27bb0603287783702c9ff0a1129","modified":1615192961847},{"_id":"public/2020/04/05/HashMap实现原理及其重要方法/index.html","hash":"80a9c2e566dcb460a8654ca7b7970fca298093dc","modified":1615192961847},{"_id":"public/2020/04/04/String的特点以及方法/index.html","hash":"a93b8f8a8cae3bc8ca8eb7dfedfb0b331e6ce914","modified":1615192961847},{"_id":"public/archives/index.html","hash":"50175efe675b7f49a31224c5351426e55c01411e","modified":1615192961847},{"_id":"public/archives/2020/index.html","hash":"1e174713e2625aa15ec3a131d6ac8cf1c3e8b51b","modified":1615192961847},{"_id":"public/tags/Java/index.html","hash":"32fed1189f2a51af61a244d754838b1c2cfa38b1","modified":1615192961847},{"_id":"public/categories/Algorithm/index.html","hash":"ae3e18d2ce8127ed4ddf0e2819458a52aa059f2d","modified":1615192961847},{"_id":"public/tags/Algorithm/index.html","hash":"dfd6819ece99143bee930ae0b2793bbff70d7c7c","modified":1615192961847},{"_id":"public/index.html","hash":"ddad7d7e6272d2f13e478d850a491750e5037f30","modified":1615192961847},{"_id":"public/pictures/13px-Dark_Red_x.svg-1587911490730.png","hash":"6c0e1ae69d747b49467935d3719627d0e95315cf","modified":1614516816360},{"_id":"public/CNAME","hash":"d329c161806740dbb4ead9ad648efe9d038036fb","modified":1614516816360},{"_id":"public/pictures/08786FDF.png","hash":"da1bfbf1105a1417d952402f2c75f61005e83367","modified":1614516816360},{"_id":"public/pictures/13px-Dark_Red_x.svg-1587911490598.png","hash":"6c0e1ae69d747b49467935d3719627d0e95315cf","modified":1614516816360},{"_id":"public/pictures/13px-Dark_Red_x.svg-1587911490852.png","hash":"6c0e1ae69d747b49467935d3719627d0e95315cf","modified":1614516816360},{"_id":"public/pictures/13px-Dark_Red_x.svg.png","hash":"6c0e1ae69d747b49467935d3719627d0e95315cf","modified":1614516816360},{"_id":"public/pictures/13px-Green_check.svg-1587911490574.png","hash":"c5cc5fa2ac79ad7004006cab68d2b48b6954a261","modified":1614516816360},{"_id":"public/pictures/13px-Green_check.svg-1587911490720.png","hash":"c5cc5fa2ac79ad7004006cab68d2b48b6954a261","modified":1614516816360},{"_id":"public/pictures/13px-Green_check.svg.png","hash":"c5cc5fa2ac79ad7004006cab68d2b48b6954a261","modified":1614516816360},{"_id":"public/pictures/13px-Green_check.svg-1587911491234.png","hash":"c5cc5fa2ac79ad7004006cab68d2b48b6954a261","modified":1614516816360},{"_id":"public/pictures/20140728110939595","hash":"95231b12f400acc79dff9ed6a106edd285a52a08","modified":1614516816360},{"_id":"public/pictures/13px-Yellow_check.svg.png","hash":"9ded6c97d470f15b15bd8fcb8efbe2b388e4d1cb","modified":1614516816360},{"_id":"public/pictures/20140729181940812","hash":"d3ce7077dbefdf25c19972d2b553990f76014c9d","modified":1614516816360},{"_id":"public/pictures/4b9c2ec85d900b1485fad362aabc2349a4d54ad3.svg","hash":"1bc8dc6e50b62f17ac0f88735972cc04724a7cc0","modified":1614516816360},{"_id":"public/pictures/280px-PrimaryKey_zht.svg.png","hash":"5e7b24d4f76e895edf95acd03d15b61eea3e0a32","modified":1614516816360},{"_id":"public/pictures/311ab170f5b301b3a97ebb5be89317e5c9ca47be5117b5bfbf3083ceec7346b4-image.png","hash":"84b11342ac12210673ab412a34efaae4d9a65e04","modified":1614516816360},{"_id":"public/pictures/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f382f32322f313635363165353961343133353836393f773d39353026683d32373926663d706e6726733d3238353239-1586834473510.jpg","hash":"448701ff02b96b4130a144c9e04fe6ee985f06bd","modified":1614516816360},{"_id":"public/pictures/8-queens.png","hash":"0ac226d9578912b881d6e9159f9dc84dfafae3b4","modified":1614516816360},{"_id":"public/pictures/8394323_1308075859Zfue.jpg","hash":"6a9bf06f64b67779f9156a5cfcba340e333773d8","modified":1614516816360},{"_id":"public/pictures/20140729182154066","hash":"aa45de5d88acf924aee6247a06e1ce0b14b94d78","modified":1614516816360},{"_id":"public/pictures/8394323_13080758591kyV-1595069195969.jpg","hash":"490a25772e3a93527c3ffb5fb9b71645e377ceb6","modified":1614516816360},{"_id":"public/pictures/Cgq2xl5rDYmAXoWFAAArXO_oe8c713.png","hash":"e0497e15938d539b6b1850ddbd8b1aeccb724acf","modified":1614516816360},{"_id":"public/pictures/bg2013050104.png","hash":"83a552022e33adfc9c1218b6d2fe0bc34d710685","modified":1614516816360},{"_id":"public/pictures/CgpOIF5rDYmAPR1lAABl-qSxBYs115.png","hash":"3f27a0a4597ebd2ad6923a07b2a4a7217b4e722a","modified":1614516816360},{"_id":"public/pictures/bg2013050105.png","hash":"61af65ffa974557fcba929dfc9edb790f112db4e","modified":1614516816360},{"_id":"public/pictures/bg2013050106.png","hash":"36d27adf1022d9b9260cd30fdbbcab6382cedfa0","modified":1614516816360},{"_id":"public/pictures/bg2013050107-1594975043794.png","hash":"5c9fed7e60504c6b3af6cfaa69a7d73412760eee","modified":1614516816360},{"_id":"public/pictures/bg2013050107.png","hash":"5c9fed7e60504c6b3af6cfaa69a7d73412760eee","modified":1614516816360},{"_id":"public/pictures/bg2013050110.png","hash":"a4be08d9bac94619e7d7691f200e7f4fafec2466","modified":1614516816360},{"_id":"public/pictures/bg2013050108.png","hash":"ef78b584d26d386c06d5dc2e442f8294c1ca2c83","modified":1614516816360},{"_id":"public/pictures/bg2013050109.png","hash":"253f9b51ff6fb0e139583f313d4d0461bffe6519","modified":1614516816360},{"_id":"public/pictures/bg2013050111.png","hash":"a413a5ce4df7a2488f63abbf6acd26d3dfa77b48","modified":1614516816360},{"_id":"public/pictures/coin.png","hash":"65a8f563570d368545e04e347f3d6d98c9416842","modified":1614516816360},{"_id":"public/pictures/bg2013050112-1594975805920.png","hash":"ce545744202d862617e5d61b3a2a341cac92d71d","modified":1614516816360},{"_id":"public/pictures/bg2013050113.png","hash":"b155d4aba0de4a0e80cf4292bad0e39f74831ecd","modified":1614516816360},{"_id":"public/pictures/fib.png","hash":"8dfe15248fd9ed42da9a292f699da952f675e295","modified":1614516816360},{"_id":"public/pictures/image-20200405194407416.png","hash":"1586f8d8afffd0c2defda7f2eacefc58c083af21","modified":1614516816360},{"_id":"public/pictures/bg2013050112.png","hash":"ce545744202d862617e5d61b3a2a341cac92d71d","modified":1614516816360},{"_id":"public/pictures/image-20200426224653184.png","hash":"cb9c67069263437662d1a8765b691dd2fe0379c2","modified":1614516816360},{"_id":"public/pictures/bg2013050114.png","hash":"de953eeb5e6d77f5f8261311f778643c178b1141","modified":1614516816360},{"_id":"public/pictures/image-20200426223715720.png","hash":"077e8a044464ba08e58e2cc6a6035eda426e6475","modified":1614516816360},{"_id":"public/pictures/image-20200426224741598.png","hash":"4f6603a30fa36100a3d3c7a88e91148cd61c63dd","modified":1614516816360},{"_id":"public/pictures/image-20200426223643952.png","hash":"66fb57cd572f6c27f95a5e27302c444531d57569","modified":1614516816360},{"_id":"public/pictures/image-20200426225059906.png","hash":"996d7166bc0ddfde1a7a1ff2d46813eb5cd70aa7","modified":1614516816360},{"_id":"public/pictures/image-20200426225223170.png","hash":"394189505db9ecc4c976a1569a48f69e00db119e","modified":1614516816360},{"_id":"public/pictures/image-20200426225211203.png","hash":"d957fb454a1b08d29905e69d9dd5dd8b4576a0e1","modified":1614516816360},{"_id":"public/pictures/image-20200426230943516.png","hash":"80bdb88d250a83221c8f4c2c637fd6212eefe768","modified":1614516816360},{"_id":"public/pictures/image-20200426225402284.png","hash":"9f2124d12cb452473b756aa2b1d58d2764f0c673","modified":1614516816360},{"_id":"public/pictures/image-20200426231034553.png","hash":"6c6ca5fe211dc9d99cf02b7185e75328affe6434","modified":1614516816360},{"_id":"public/pictures/image-20200426230751958.png","hash":"9705bcd5ab1245869bac682e7af051cab66287b6","modified":1614516816360},{"_id":"public/pictures/image-20200426231044849.png","hash":"b04e478a1114950d3b8239b0e0c1d3f67b76ba93","modified":1614516816360},{"_id":"public/pictures/image-20200427232353749.png","hash":"06936ec0a417b5c69ff14250c8d7a30856fa395b","modified":1614516816360},{"_id":"public/pictures/image-20200427232114257.png","hash":"2751946e99f0a325ad7fe42fbe104142ef763ad9","modified":1614516816360},{"_id":"public/pictures/image-20200427232447340.png","hash":"1cd15f44b59f358877f29b5376d5c37c115c005e","modified":1614516816360},{"_id":"public/pictures/image-20200427232554631.png","hash":"b852423042322138e6edeaa5cff024e4d41ee94d","modified":1614516816360},{"_id":"public/pictures/image-20200427232650317.png","hash":"2b2a13c5fc9790659c881dfece5d99c686f8583a","modified":1614516816360},{"_id":"public/pictures/image-20200514143731277.png","hash":"7e5972ef65941e399096511ff6d6352f94520c5a","modified":1614516816360},{"_id":"public/pictures/image-20200514143731277-1595486755603.png","hash":"7e5972ef65941e399096511ff6d6352f94520c5a","modified":1614516816360},{"_id":"public/pictures/image-20200428231345713.png","hash":"afdc77941a5f12ac5c5d7a932b0d54d5bcd6c93e","modified":1614516816360},{"_id":"public/pictures/image-20200725154024914.png","hash":"9b4d31d6a53b1806f7d93b74ff27e6b075a0f644","modified":1614516816360},{"_id":"public/pictures/image-20200428232253846.png","hash":"8572ecd407752520701fd12b76c83875545fd1d5","modified":1614516816360},{"_id":"public/pictures/image-20200428232129091.png","hash":"625fec8947a8d52bf0e469a32dc5c79c2f5214a3","modified":1614516816360},{"_id":"public/pictures/image-20200807172325257.png","hash":"ef3874f72e0405c7910cdbc2f7bb60dc2771613a","modified":1614516816360},{"_id":"public/pictures/image-20200810100323970.png","hash":"7cb795a65cf99c7363357169c6ae38fdb404cedd","modified":1614516816360},{"_id":"public/pictures/image-20200807171625633.png","hash":"9b53cd4e7eb5671c0204673ffa9735b51c6a1b8f","modified":1614516816360},{"_id":"public/pictures/image-20200814153910285.png","hash":"78d03419726c153f5550674f47b6bd453aacc69e","modified":1614516816360},{"_id":"public/pictures/image-20200808193648360.png","hash":"d8e9e848cc529569cccc5664f8766a4148f568b2","modified":1614516816360},{"_id":"public/pictures/image-20200815105842768.png","hash":"4f15af4c7e3b03d604e8ab6900994262af739fc4","modified":1614516816360},{"_id":"public/pictures/image-20200817163701700.png","hash":"59a5a14c1a33fabe26229102f89deb9797d417d7","modified":1614516816360},{"_id":"public/pictures/image-20200817171813338.png","hash":"0867eac73679806ae0e15f55f4651f285bf08940","modified":1614516816360},{"_id":"public/pictures/image-20200817163511887.png","hash":"14a44031539ff7a09a111821ec52502be34fa196","modified":1614516816360},{"_id":"public/pictures/image-20200808194237663.png","hash":"b5837709a4cf43665247e9e4f9535382c8fb9893","modified":1614516816360},{"_id":"public/pictures/image-20200818094630464.png","hash":"c388bb3a629be92a19a3446079238631a5a39854","modified":1614516816360},{"_id":"public/pictures/image-20200808193751871.png","hash":"eae923e9c0c65c0463f6c2cd9ef8cb509e71fb7b","modified":1614516816360},{"_id":"public/pictures/image-20200818112245505.png","hash":"fb7ea311693b3d1575da5792357c999b6c2bd3f4","modified":1614516816360},{"_id":"public/pictures/image-20200818201822616.png","hash":"e981ba4346e2cda01c9d2ef0f756820aef14e94b","modified":1614516816360},{"_id":"public/pictures/image-20200819150240523.png","hash":"6c59c3cb95ce98bb6b063d5862569d0ab721ab63","modified":1614516816360},{"_id":"public/pictures/image-20200818100806984.png","hash":"f284f41e32538f3a097ce60bf2105c221e25ce75","modified":1614516816360},{"_id":"public/pictures/image-20200821104215491.png","hash":"245bfcf1c0cee704d0ecf718dace20060d0558ef","modified":1614516816360},{"_id":"public/pictures/image-20200820100311020.png","hash":"b1a041c8afcc55e658344d43991da4ccd567a899","modified":1614516816360},{"_id":"public/pictures/image-20200819111819257.png","hash":"c6a679a8e3d99dda56b9b728b39d2a9eb8d0edd2","modified":1614516816360},{"_id":"public/pictures/image-20200820151924955.png","hash":"3ee7b7786094e51b22eb6f319c49e07cee459a94","modified":1614516816360},{"_id":"public/pictures/image-20200821111825878.png","hash":"5e279c15f5ed1f087d47b9a693e0de93470cddbc","modified":1614516816360},{"_id":"public/pictures/image-20200822094721670.png","hash":"e6e9de2e02c33859b4bb6074602802d0266b5ad6","modified":1614516816360},{"_id":"public/pictures/image-20200824094845802.png","hash":"5930764b8fbf80138f500720de23f46ca2d08a03","modified":1614516816360},{"_id":"public/pictures/image-20200824101740024.png","hash":"e4aa94455b6dbf76b99dcb81c5460996a33c6bc6","modified":1614516816360},{"_id":"public/pictures/image-20200822101717491.png","hash":"10bc4c6278f491c1e4b17dda02b3f17d1108e75d","modified":1614516816360},{"_id":"public/pictures/image-20200821104157163.png","hash":"6229fa9e197aa5fd15432d8f0e45d9260298e7b2","modified":1614516816360},{"_id":"public/pictures/image-20200824200146778.png","hash":"54727ffefeb41c7f19335b6ac8a09298c13c4956","modified":1614516816360},{"_id":"public/pictures/image-20200824193240313.png","hash":"82218b16dc0f29ca333a40b65c4f0f049d08b7d8","modified":1614516816360},{"_id":"public/pictures/image-20200825143910613.png","hash":"4999e9a9661dc7de39230d2432e15822744a588a","modified":1614516816360},{"_id":"public/pictures/image-20200826144648426.png","hash":"ea6fdf7f861f5d8cbd5d6ff641d5154f60771242","modified":1614516816360},{"_id":"public/pictures/image-20200826101920949.png","hash":"d45a7002fdbb76157b61ca094890f235b9f2512e","modified":1614516816360},{"_id":"public/pictures/image-20200826161851806.png","hash":"da388940ba3c4d90838881c78c0cd1ba48b4744a","modified":1614516816360},{"_id":"public/pictures/image-20200826164535445.png","hash":"de8eb39887b78b799e55a9733442939fe445b7a3","modified":1614516816360},{"_id":"public/pictures/image-20200826145822905.png","hash":"5d319ad9c8b87c97e942be2633f3ef04309f5875","modified":1614516816360},{"_id":"public/pictures/image-20200826094442518.png","hash":"42d87b77aaeddb725bb2dde6413adbd3b9a169ac","modified":1614516816360},{"_id":"public/pictures/image-20200826162804216.png","hash":"08d8a14651991776a1198512fbb938e4dcd467f3","modified":1614516816360},{"_id":"public/pictures/image-20200826165656748.png","hash":"7bcda11cd5fa757b2e16f2a6efc4353cfa23c87f","modified":1614516816360},{"_id":"public/pictures/image-20200826102906095.png","hash":"dd34716c6b208e365c9e3fc165b5792b29180d0d","modified":1614516816360},{"_id":"public/pictures/image-20200826165407268.png","hash":"89123d5ccefce0bf88d3b2ce5de4f9d95be868a2","modified":1614516816360},{"_id":"public/pictures/image-20200828191832335.png","hash":"cbd129f2ed922ff269a12e0066a718e84c18b8e5","modified":1614516816360},{"_id":"public/pictures/image-20200828102111964.png","hash":"58d9bf0435d12af0e2b9030d170cb59541e4063a","modified":1614516816360},{"_id":"public/pictures/image-20200828110613718.png","hash":"e7d8235db8a94444bb7859f53be8fd8c9dc421c2","modified":1614516816360},{"_id":"public/pictures/image-20200831113455312.png","hash":"813d9989b6ebee9a70797b643c8460bb1e1c6d55","modified":1614516816360},{"_id":"public/pictures/image-20200831113602250.png","hash":"aab1b05f5c922ca2c5b2a99ef6479ecc1145a794","modified":1614516816360},{"_id":"public/pictures/image-20200831144633336.png","hash":"b728eb8f88c9c947d4e4c30f4b8df9336fce457f","modified":1614516816360},{"_id":"public/pictures/image-20200831144653744.png","hash":"93625b6fc1bf6861eafa2e6c79c64c95d9c84f22","modified":1614516816360},{"_id":"public/pictures/image-20200831113544204.png","hash":"3d36a3bbcfbf9cabd19cd5612042a09baf350a6f","modified":1614516816360},{"_id":"public/pictures/image-20200831145140568.png","hash":"3b6b5ca72eadb8dbd907a44f030dea6d4d88dfb1","modified":1614516816360},{"_id":"public/pictures/image-20200831113732603.png","hash":"29379da92b1015cb7c24c0d7c77cddadf78e3261","modified":1614516816360},{"_id":"public/pictures/image-20200831144738524.png","hash":"418649d044148be84e086b5ea6c03c5b58d253bd","modified":1614516816360},{"_id":"public/pictures/image-20200831105056785.png","hash":"5a1b964fa10c0ae69fa17ced03893fc86aa9f225","modified":1614516816360},{"_id":"public/pictures/image-20200901091457061.png","hash":"7779b170d2b7dfad193f098f4a0fce9273e23776","modified":1614516816360},{"_id":"public/pictures/image-20200901100037412.png","hash":"2c3b89ebcb094d7ba3fa71bad1f2544e45c5930c","modified":1614516816360},{"_id":"public/pictures/image-20200901093602332.png","hash":"5c55421b5fbb6e80fe5148034b55634da6377bbb","modified":1614516816360},{"_id":"public/pictures/image-20200901100021967.png","hash":"9248282f706a684ddd457d14587c5e863fa27298","modified":1614516816360},{"_id":"public/pictures/image-20200903093332125.png","hash":"ecab796cab947eb6cb952d9a01f2291168c24f88","modified":1614516816360},{"_id":"public/pictures/image-20200903095901434.png","hash":"b7f5ab0903347f98e271ea4219a175482237b0e2","modified":1614516816360},{"_id":"public/pictures/image-20200902100344960.png","hash":"a8d37d680a14ad1ef3f93837ef1882f774533eb9","modified":1614516816360},{"_id":"public/pictures/image-20200902104235073.png","hash":"ab57fce9fd320932e8ea8f654e68c195752b6576","modified":1614516816360},{"_id":"public/pictures/image-20200907095838051.png","hash":"623476934685f9f5c1890d57d3451b947c2203de","modified":1614516816360},{"_id":"public/pictures/image-20200904105932893.png","hash":"000a440ffd40a9feb6378e3833365f7e28679728","modified":1614516816360},{"_id":"public/pictures/image-20200908193801938.png","hash":"c586fee1f0784f64aa1ec9f9a3142275bbd5dbde","modified":1614516816360},{"_id":"public/pictures/image-20200908190526092.png","hash":"d61db1b80b2d2f8820cee6131912168a2885fe5d","modified":1614516816360},{"_id":"public/pictures/image-20200908193644741.png","hash":"0c9e94ad17e411ee492e207597083c4dbafb88b1","modified":1614516816360},{"_id":"public/pictures/image-20200908195430706.png","hash":"a88b782fedb292f043d739dc2af66afb4b0eabd1","modified":1614516816360},{"_id":"public/pictures/image-20200908194711399.png","hash":"7a7b3ad7ddeed04d8830491520adc8deb6944d69","modified":1614516816360},{"_id":"public/pictures/image-20200909191523151.png","hash":"ee22d9c0dd044ab405c6d9c7e838357a99ddaa5c","modified":1614516816360},{"_id":"public/pictures/image-20200908200341884.png","hash":"95dfebd2818626de4acc2f50b2726a462e9d9927","modified":1614516816360},{"_id":"public/pictures/image-20200908195206197.png","hash":"9ab7b4b32159a4a9b413b3529efeed56946fd227","modified":1614516816360},{"_id":"public/pictures/image-20200910185227369.png","hash":"7b62879c6e0261552221e6d0df252a47b9678797","modified":1614516816360},{"_id":"public/pictures/image-20200911103413418.png","hash":"9d0e405b9aa8be90efdbcebadff31153cfa99c5d","modified":1614516816360},{"_id":"public/pictures/image-20200912105349916.png","hash":"56a2f5f73ad6f010b1a75f01fe1f38091038e28a","modified":1614516816360},{"_id":"public/pictures/image-20200912101636226.png","hash":"4f7071a6d2d747d322fdd6471df34c95adcd2f06","modified":1614516816360},{"_id":"public/pictures/image-20200912104507992.png","hash":"cfe5487371166812706f43e9c2b4e45912f42f81","modified":1614516816360},{"_id":"public/pictures/image-20200914163358944.png","hash":"3a4b86f85dc211c1ce6dda2a6022f120a22a3689","modified":1614516816360},{"_id":"public/pictures/image-20200912114154510.png","hash":"25f9ba8dfc0ed16d10669238e0f22973afe866f4","modified":1614516816360},{"_id":"public/pictures/image-20200914160900975.png","hash":"c3abfe7939a1bc7c14070f094c0651c25df7bd3c","modified":1614516816360},{"_id":"public/pictures/image-20200914163116761.png","hash":"b737279f0cf775bb9a17b2125ab5ed57af0c897d","modified":1614516816360},{"_id":"public/pictures/image-20200918185127353.png","hash":"4f30b93d741cd0763563cbfd64bde1171bfa2ca0","modified":1614516816360},{"_id":"public/pictures/image-20200914163237021.png","hash":"b2c192e2ba66f7233f440acfa4d998303d880fdb","modified":1614516816360},{"_id":"public/pictures/image-20200929194330209.png","hash":"4332d12ffbfa9da9cb61587d3f51b40d3c6a209b","modified":1614516816360},{"_id":"public/pictures/image-20200915154342061.png","hash":"2962c43811bd39baf05522ed9849d9f6a4e652f2","modified":1614516816360},{"_id":"public/pictures/image-20200929194630351.png","hash":"a0f23b9f090e3b1ad7cef697277f668709246bad","modified":1614516816360},{"_id":"public/pictures/image-20201013212322051.png","hash":"9ab9a9abf46c7e5a7694b09cfe6ffd9db961c41e","modified":1614516816360},{"_id":"public/pictures/image-20200914163039855.png","hash":"930b0bc32fa3275223c9dd8e7c9c1a25da08b6cf","modified":1614516816360},{"_id":"public/pictures/image-20200921142507255.png","hash":"70b40ed307677c5ae509632a9ea0167f0716ac7c","modified":1614516816360},{"_id":"public/pictures/微信截图_20200405164325.png","hash":"2434373813e3d3c0edab941d1992a3541499b8a1","modified":1614516816360},{"_id":"public/pictures/u=287229615,2118435423&fm=26&gp=0.jpg","hash":"5906784c345d0e5f599471403230407694266542","modified":1614516816360},{"_id":"public/pictures/微信截图_20200405164537.png","hash":"aafe4fbe5866dd55281f4258c056455d4acb83f2","modified":1614516816360},{"_id":"public/pictures/微信截图_20200405164821-1586080506840.png","hash":"387c75d9cd846a3d5966f6cd2c823832b8b20fb7","modified":1614516816360},{"_id":"public/pictures/微信截图_20200405164821-1586080520904.png","hash":"387c75d9cd846a3d5966f6cd2c823832b8b20fb7","modified":1614516816360},{"_id":"public/pictures/微信截图_20200405164821.png","hash":"387c75d9cd846a3d5966f6cd2c823832b8b20fb7","modified":1614516816360},{"_id":"public/pictures/微信截图_20200405234951.png","hash":"22926ce81df0569292d85abe87974310934a4d55","modified":1614516816360},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1614516816360},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1614516816360},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1614516816360},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1614516816360},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1614516816360},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1614516816360},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1614516816360},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1614516816360},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1614516816360},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1614516816360},{"_id":"public/images/favicon.ico","hash":"83222202712d4542f60f7d26f6cb6534f7900016","modified":1614516816360},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1614516816360},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1614516816360},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1614516816360},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1614516816360},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1614516816360},{"_id":"public/lib/fancybox/LICENSE","hash":"8624bcdae55baeef00cd11d5dfcfa60f68710a02","modified":1614516816360},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1614516816360},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1614516816360},{"_id":"public/pictures/06DD99DC.png","hash":"c047d6fb6d7f8bbd9256e2a262e0e6ba222ad5f6","modified":1614516816360},{"_id":"public/pictures/20140725231726921","hash":"bd66be8dcd8cdd87e032c37bfa00530dd27906c7","modified":1614516816360},{"_id":"public/pictures/8394323_13080758591kyV.jpg","hash":"490a25772e3a93527c3ffb5fb9b71645e377ceb6","modified":1614516816360},{"_id":"public/pictures/CgpOIF5rDYmATP43AAB3coc0R64799.png","hash":"ffdee18e263362103bdcf9cdcc490925a02ec404","modified":1614516816360},{"_id":"public/pictures/bg2013050103.png","hash":"2b717e623b919cbb201eddb40b32840d6f901aca","modified":1614516816360},{"_id":"public/pictures/b2cb057773e3d67976c535d6ef547d51_720w.png","hash":"f0c66ea4b87387c5d35d2e5cc126db0e59beebc5","modified":1614516816360},{"_id":"public/pictures/image-20200428230552342.png","hash":"9bd5dd8215cca539be3c246d09116ab440e9b6c9","modified":1614516816360},{"_id":"public/pictures/image-20200807171516964.png","hash":"d5739540187fb0a2cd442add1c5d584eb84be8c4","modified":1614516816360},{"_id":"public/pictures/image-20200827104857215.png","hash":"98e8ede6de612ed92c59fc0304fcd2b0878513f4","modified":1614516816360},{"_id":"public/pictures/image-20200831101224071.png","hash":"eff188a52f93d3149a96bb9e38dc3648de05d51d","modified":1614516816360},{"_id":"public/pictures/image-20200901091510832.png","hash":"d89bbe3a8f78859e1b94b71955b9cfefad8c281f","modified":1614516816360},{"_id":"public/pictures/1-1595902107828.jpg","hash":"69d6b3dc69015e4536a1ffafdfa9f3ab4e57b28f","modified":1614516816360},{"_id":"public/pictures/544caeb82a329fa49cc99842818ed1ba_720w.png","hash":"06e9dd0ef543f293834ba9530eb4bd6a77e7ec57","modified":1614516816360},{"_id":"public/pictures/2019-3Java运行时数据区域JDK1.8.png","hash":"dda2bfe438c8055100d16d9d7a132b43706e605d","modified":1614516816360},{"_id":"public/pictures/8db4a3bdfb238da1a1c4431d2b6e075c_720w.png","hash":"d00e6d851a6a0ff456541d5dcfdecf1a23ae37c5","modified":1614516816360},{"_id":"public/pictures/9430388_1508834386231_FE8B1A979ADF6E3C2C114AF3F9CA693C.png","hash":"b0f851d19a5516fbfca04c0b1deeeef71345459f","modified":1614516816360},{"_id":"public/pictures/8e8203c1b51be6446cda4026eaaccf19_720w.png","hash":"6ecc82a616bf4a228d9d64db036c696dbbdb251a","modified":1614516816360},{"_id":"public/pictures/a285d9b2da279a18b052fe5eed69afe9_r.jpg","hash":"680974721014c89b2e93b2bfd613fba7b07958e8","modified":1614516816360},{"_id":"public/pictures/image-20200426223214696.png","hash":"a15e47db17258699605763b660ca9726d98253b0","modified":1614516816360},{"_id":"public/pictures/e5aa99e811d1814e010afa7779b759d4_r.jpg","hash":"abea0ba889725a7c96a76ea48450830ba3c17c43","modified":1614516816360},{"_id":"public/pictures/image-20200729164116169.png","hash":"07e65c66ee4c90488eb21549ebb85096e91e5be7","modified":1614516816360},{"_id":"public/pictures/image-20200807171742778.png","hash":"67b7ce8e957a11d8519e029df95aa35a02d6e1bb","modified":1614516816360},{"_id":"public/pictures/image-20200907095746263.png","hash":"75f655ced000d4805678a546614ecabcb929a8aa","modified":1614516816360},{"_id":"public/pictures/icon.jpg","hash":"6da3fb027a364a7a842a8373918c75ea4c360771","modified":1614516816360},{"_id":"public/pictures/image-20200908091720713.png","hash":"84a6a8a59b4089744d7f65ac94fd5ecfa428633d","modified":1614516816360},{"_id":"public/pictures/state2.jpg","hash":"74717b7989ec767fcd25a89f08599aa21aa87e23","modified":1614516816360},{"_id":"public/pictures/image-20200908202619771.png","hash":"eadf47014d9ccffbb97577b9964396de04a55e88","modified":1614516816360},{"_id":"public/pictures/导出时序图 (2).png","hash":"442a071efd3886ed6836c2b89fdba655a9ddc2dc","modified":1614516816360},{"_id":"public/pictures/state.jpg","hash":"700dada6c73703a3e23b404c77ff8c600797f24e","modified":1614516816360},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1614516816360},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1614516816360},{"_id":"public/js/next-boot.js","hash":"a22eeb6048ddd6b9224c8a671cbcfa303a2f7a1a","modified":1614516816360},{"_id":"public/js/algolia-search.js","hash":"23cc3c013185eb97ef347c3b4c92d928f2f3398f","modified":1614516816360},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1614516816360},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1614516816360},{"_id":"public/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1614516816360},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1614516816360},{"_id":"public/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1614516816360},{"_id":"public/lib/fancybox/README.html","hash":"ef332d1b78e923c8ba02c84f37e966c0fd8bb6c5","modified":1614516816360},{"_id":"public/css/main.css","hash":"1fca2115f7c952c39ab19aebabc6ccae738fd669","modified":1614516816360},{"_id":"public/pictures/1.jpg","hash":"77d01ecc5571b3c2cca8723e9f1514cf472eed6e","modified":1614516816360},{"_id":"public/pictures/2.jpg","hash":"e661a4a0f5a01c0dbc993f1ff84c1b19060a4a59","modified":1614516816360},{"_id":"public/pictures/5-1595987693352.jpg","hash":"b953826bab44a42be146c9fa523d339cb9601b5a","modified":1614516816360},{"_id":"public/pictures/3.jpg","hash":"7d260b51642976294144b1f66e2b930651aa10dc","modified":1614516816360},{"_id":"public/pictures/image-20200912161028162.png","hash":"a6b5cb1890bd16850217eb69f0f217018c6ca844","modified":1614516816360},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1614516816360},{"_id":"public/js/local-search.js","hash":"b42bd1c883ce91db8632d96e0f0e062cb6b73adc","modified":1614516816360},{"_id":"public/js/utils.js","hash":"95c5d37aa06521675afcf8619cfc5dbba3d2e18a","modified":1614516816360},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1614516816360},{"_id":"public/lib/fancybox/source/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1614516816360},{"_id":"public/pictures/导出时序图.jpg","hash":"a42358ac33b41e3f60b048f73599568abf8c9cd0","modified":1614516816360},{"_id":"public/pictures/0f1c183ceb7b634f8a527028afd4893e26dfe3796afce35cbb177b125939179b-LeetCode 第 47 题：“全排列 II”题解配图.png","hash":"5d3ffbbb186e1ecc98e1a035092308de0bc6421b","modified":1614516816360},{"_id":"public/pictures/导出类图 (2).png","hash":"3f2fe7b15262339c4103610182ce7dfdcb71889a","modified":1614516816360},{"_id":"public/pictures/image-20200912154659563.png","hash":"ea448db577c144e045c31f8929c2c45f38caec6e","modified":1614516816360},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1614516816360},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"e43435fb9eaa918f5b8e35c9e110124b8bd13751","modified":1614516816360},{"_id":"public/pictures/image-20200912160847665.png","hash":"beda7eaa39a64836535042f6c75a9de783b2a86b","modified":1614516816360},{"_id":"public/pictures/58e67eae921e4b431782c07444af824e_r.jpg","hash":"5224f89fe8e92c5d1e890fb89911231d88825a72","modified":1614516816360},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1614516816360},{"_id":"public/pictures/5.jpg","hash":"b953826bab44a42be146c9fa523d339cb9601b5a","modified":1614516816360},{"_id":"public/pictures/image-20200729152340608.png","hash":"5e3a63ee26f5be88389f03741fc7a22640e5f28a","modified":1614516816360},{"_id":"public/pictures/全排列2.png","hash":"5d3ffbbb186e1ecc98e1a035092308de0bc6421b","modified":1614516816360},{"_id":"public/pictures/image-20200721113245712.png","hash":"7c6f5009dbfdfa0c19160a6d23ababb543310187","modified":1614516816360},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1614516816360},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1614516816360},{"_id":"public/lib/fancybox/source/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1614516816360},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"27f034e5db8c32e268e2959b9a7c1258d36e4510","modified":1614516816360},{"_id":"source/pictures/.DS_Store","hash":"a2fbabdc912409ec20b61fce70e245badf268949","modified":1615108983294},{"_id":"source/pictures/导出类图.jpg","hash":"edb17e09ad8e5dc9bc86c6020380f5360257a8d0","modified":1614517491045},{"_id":"public/pictures/导出类图.jpg","hash":"edb17e09ad8e5dc9bc86c6020380f5360257a8d0","modified":1614517539688},{"_id":"themes/next/.DS_Store","hash":"f82d500b1ceaaee50f865fb3b876ca29f4e91a83","modified":1615173339729},{"_id":"themes/next/source/.DS_Store","hash":"8cd6574621a7433c79e785d87bfcbfb3ba6854c2","modified":1614911255521},{"_id":"themes/next/source/images/mango16*16.png","hash":"1f6c876095d1441169975f83abbaeb8d392aea89","modified":1614854500746},{"_id":"themes/next/source/images/mango32*32.png","hash":"33800bc30171ab3c6e4d18401be4816886de6234","modified":1614854521898},{"_id":"public/images/mango16*16.png","hash":"1f6c876095d1441169975f83abbaeb8d392aea89","modified":1614854664189},{"_id":"public/images/mango32*32.png","hash":"33800bc30171ab3c6e4d18401be4816886de6234","modified":1614854664189},{"_id":"source/_posts/SpringBoot-AOP实现数据权限管理.md","hash":"33b374cde58ad39169c6939a1af243e9591acd1d","modified":1615192921496},{"_id":"source/pictures/Spring-AOP类图.jpg","hash":"0f672bde90851f3bd61e1cd0c32ae76e9be4c789","modified":1615108226225},{"_id":"source/pictures/Spring-AOP流程.jpg","hash":"d782c744a54186f52e5005169912f0942e2b93f9","modified":1615108074081},{"_id":"source/pictures/AOP数据权限类图.png","hash":"f9794909be58b38b3ee490b6cf280ce82212758c","modified":1614156123786},{"_id":"source/pictures/AOP-数据库UML.png","hash":"e44bdbd152de0ec9a771845bcf83e08df74b4bea","modified":1615108929527},{"_id":"source/pictures/AOP流程.png","hash":"e76a0fe931dbca8221ddd741972e06f63fc20613","modified":1614168434623},{"_id":"public/archives/2021/03/index.html","hash":"21348d27b88d24d6585cdec6dbb8e43fa185eaa2","modified":1615192961847},{"_id":"public/categories/SpringBoot/index.html","hash":"2704cd0c24977c03ccd9535130cc0f52518ac0e7","modified":1615192961847},{"_id":"public/tags/Java/page/2/index.html","hash":"0ecb50b9bee0b5ee676c3b31859397ab6a2262cc","modified":1615192961847},{"_id":"public/tags/SpringBoot/index.html","hash":"b9b9dd3697ab50442a46a17b5cb5d4efe122f1c6","modified":1615192961847},{"_id":"public/tags/AOP/index.html","hash":"87688aca07a4a89db75d3704d513c04d32e82047","modified":1615192961847},{"_id":"public/2021/03/07/SpringBoot-AOP实现数据权限管理/index.html","hash":"35be154c139dc400f8dbdfde96aba03ef06a4215","modified":1615192961847},{"_id":"public/pictures/Spring-AOP类图.jpg","hash":"0f672bde90851f3bd61e1cd0c32ae76e9be4c789","modified":1615171614175},{"_id":"public/pictures/AOP数据权限类图.png","hash":"f9794909be58b38b3ee490b6cf280ce82212758c","modified":1615171614175},{"_id":"public/pictures/Spring-AOP流程.jpg","hash":"d782c744a54186f52e5005169912f0942e2b93f9","modified":1615171614175},{"_id":"public/pictures/AOP-数据库UML.png","hash":"e44bdbd152de0ec9a771845bcf83e08df74b4bea","modified":1615171614175},{"_id":"public/pictures/AOP流程.png","hash":"e76a0fe931dbca8221ddd741972e06f63fc20613","modified":1615171614175},{"_id":"themes/next/layout/.DS_Store","hash":"7f554be67c01896596a334dd1efae66c92bce41e","modified":1615173339728},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1615174009360}],"Category":[{"name":"Java","_id":"cklp5mkv70004nyl1bo1n6ugw"},{"name":"Algorithm","_id":"cklp5mkvs000cnyl15ydgc7cn"},{"name":"Database","_id":"cklp5mkvu000knyl1c4yj0udx"},{"name":"SpringBoot","_id":"cklyyda400001kml180wsgd0c"}],"Data":[],"Page":[{"_content":"+layout: false\n+---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>404</title>\n    </head>\n    <body>\n        <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"返回\"></script> \n    </body>\n</html>","source":"404.html","raw":"+layout: false\n+---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>404</title>\n    </head>\n    <body>\n        <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"返回\"></script> \n    </body>\n</html>","date":"2020-12-26T12:26:49.152Z","updated":"2020-12-26T12:26:49.152Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cklp5mktt0000nyl17bly1ms3","content":"+layout: false\n+---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>404</title>\n    </head>\n    <body>\n        <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"返回\"></script> \n    </body>\n</html>","site":{"data":{}},"length":20,"excerpt":"","more":"+layout: false\n+---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>404</title>\n    </head>\n    <body>\n        <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"返回\"></script> \n    </body>\n</html>"},{"title":"tags","date":"2020-03-29T09:39:17.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-03-29 17:39:17\ntype: \"tags\"\ncomments: false\n---\n","updated":"2020-12-26T12:26:49.218Z","path":"tags/index.html","layout":"page","_id":"cklp5mkv50002nyl17kmydzp5","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"categories","date":"2020-03-29T09:40:35.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-03-29 17:40:35\ntype: \"categories\"\ncomments: false\n---\n","updated":"2020-12-26T12:26:49.155Z","path":"categories/index.html","layout":"page","_id":"cklp5mkv60003nyl12fqk5pvx","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"生产者消费者模式+阻塞队列实现异步导出","date":"2021-02-23T12:49:20.000Z","top":true,"typora-copy-images-to":"..\\pictures","_content":"\n这是我在实习期间实现的一个小功能，断断续续遇到了一些问题，也做了一些优化，收获很大。整体思路简单做了一个demo: [export-demo](https://github.com/JuliaJiang7/export-demo)，下文是使用具体解决方案的原因和步骤等等，于我而言是一个梳理和总结，如果也能给你提供一种解决问题的思路，那可真是太好了！\n\n## 1. 具体需求\n\n简单来说就是：在页面输入查询条件，点击导出，将数据导出为Excel文件。这里导出的Excel文件，我们会上传到文件服务器，并将这个导出请求信息和结果存储在请求管理表，在请求管理页面进行展示和下载。\n\n总结下来，导出过程是：用户输入查询条件 -> 点击导出 -> 生成Excel -> 上传文件服务器 -> 存储文件url等信息到请求管理表 -> 请求管理页面可显示和下载。\n\n<!--more-->\n\n## 2. 初步方案\n\n这个场景非常适合用 **生产者-消费者模型** 来解决。为什么呢？\n\n导出一个文件是比较费时的，特别是在导出大量数据时，用户不可能一直处于等待这个导出的状态，服务器也不可能在这段时间只来处理这一个请求，因此就需要 **异步处理** 这个请求，如何实现异步呢？这里我们将项目逻辑上分为两个模块：业务模块和任务模块，两者都单独部署和启动。在业务模块抛出请求后直接返回，而在任务模块进行真正地导出操作。这种异步处理方式就是典型的生产者-消费者。\n\n生产者-消费者模型的实现方式有很多种，可以参考：[Java实现生产者和消费者的5种方式](https://juejin.cn/post/6844903486895865864)。这里我们采用阻塞队列，并将这个阻塞队列存储在 redis 中，这样两个独立部署的模块也可以通信。\n\n## 3. 痛点分析\n\n那么对于导出文件，存在哪些痛点呢？\n\n1. 当单个用户导出大量数据时，可能造成OOM。解决办法：分页导出，每次查询1000条数据填充Excel。\n2. 当多个用户导出数据时，可能造成OOM。解决办法：生产者-消费者模型+阻塞队列。（啊这个OOM还是不太理解）\n3. 导出文件时间长。解决办法：多线程导出，当查询数据大于1000条时每次启5个线程来查询数据，后填充到Excel中。\n\n## 4. 时序图\n\n<img src=\"/pictures/导出时序图.jpg\"/>\n\n## 5. 类图\n\n<img src=\"/pictures/导出类图.jpg\"/>\n\n## 6. 为什么这么设计？\n\n1. **[模版模式](https://www.runoob.com/design-pattern/template-pattern.html)**：很多个页面有导出，那每一个导出都单独写一个Handler方法吗？是的...我的第一版代码就是这么写的..这样的代码很明显有很多问题，比如相同的代码要写很多遍，当然这里面有几个小地方不一样，比如查询数据、返回对象等，这样就导致**可维护性**差，比如后期导出的流程有一些改变，那么就需要修改很多类；另外，如果需要再增加一个导出，同样的代码还需要再写一遍，即**可扩展性**很差。\n   回过头来，再看看这个场景，其实非常适合使用模版模式优化。使用一个抽象模版类定义整个导出的流程，在其中定义公共的方法，比如更新请求管理表、发送消息这类功能，每种具体的导出的不同部分，写成抽象方法，在子类中实现，比如导出数据总数、分页查询数据等。\n2. **QueueInfo接口**：定义阻塞队列的名称，有几个阻塞队列，就有几个QueueInfo的实现类，该名称对应EventModel中的key，我们可以把所有的导出放在一个队列中，如果其他事件比如导入，就可以扩展一个新的实现类来定义。\n3. **EventHandler接口**：定义事件处理方法和对应类型EventType。要实现一个事件，必须实现EventHandler接口，这就规定了所有的事件处理类都有这两个方法。这样在consumer中，我们使用``applicationContext.getBeansOfType(EventHandler.class)`` ,并将其转换为EventType和EventHandler实现类的映射，根据EventType就可以调用对应的实现类。为什么这样设计？还是扩展性的问题，如果需要添加一种事件，添加EventHandler的实现类即可。\n\n\n\n## 7. 改进优化\n\n1. 异步处理看起来很美好，但会为代码引入更大的复杂度，比如错误处理、反馈机制等等。比如不知道什么原因的运行失败，导致请求一直处于运行中，这种情况可以使用 **定时任务**（ElasticJob） ，每5分钟查看请求管理表中是否存在运行了一个小时以上的请求，如果存在，将请求状态修改为运行失败。\n\n\n\n## 8. 源码\n\n[export-demo](https://github.com/JuliaJiang7/export-demo)\n\n\n\n## 9. 一些思考\n\n我们都知道 Java 是面向对象的，三大特性封装、继承、多态，但怎样用好这些特性是很有意思的问题。想起之前面试的一个问题：**接口和抽象类的区别是什么？** 这是一个很常见的面试题，很多博客总结了很多，比如是否有方法实现、修饰符、成员变量类型等这些方面来回答，但真正核心的区别应该在于：抽象类是一个 **模版**，而接口更多的是作为一种 **适配** 的功能，比如上面的模版模式中的模版类，以及EventHandler接口。也就是常见的那句话：\n\n>  从设计层面来说，抽象是对类的一种抽象，是一种模板设计；接口是对行为的抽象，是一种行为的规范。\n\n\n\n## 10. 参考引用\n\n1. https://www.cnblogs.com/0813lichenyu/p/11599421.html\n2. https://www.runoob.com/design-pattern/template-pattern.html","source":"_posts/生产者消费者模式-阻塞队列实现导出.md","raw":"---\ntitle: 生产者消费者模式+阻塞队列实现异步导出\ndate: 2021-02-23 20:49:20\ntags:\n  - Java\ncategories: Java\ntop: true\ntypora-copy-images-to: ..\\pictures\n---\n\n这是我在实习期间实现的一个小功能，断断续续遇到了一些问题，也做了一些优化，收获很大。整体思路简单做了一个demo: [export-demo](https://github.com/JuliaJiang7/export-demo)，下文是使用具体解决方案的原因和步骤等等，于我而言是一个梳理和总结，如果也能给你提供一种解决问题的思路，那可真是太好了！\n\n## 1. 具体需求\n\n简单来说就是：在页面输入查询条件，点击导出，将数据导出为Excel文件。这里导出的Excel文件，我们会上传到文件服务器，并将这个导出请求信息和结果存储在请求管理表，在请求管理页面进行展示和下载。\n\n总结下来，导出过程是：用户输入查询条件 -> 点击导出 -> 生成Excel -> 上传文件服务器 -> 存储文件url等信息到请求管理表 -> 请求管理页面可显示和下载。\n\n<!--more-->\n\n## 2. 初步方案\n\n这个场景非常适合用 **生产者-消费者模型** 来解决。为什么呢？\n\n导出一个文件是比较费时的，特别是在导出大量数据时，用户不可能一直处于等待这个导出的状态，服务器也不可能在这段时间只来处理这一个请求，因此就需要 **异步处理** 这个请求，如何实现异步呢？这里我们将项目逻辑上分为两个模块：业务模块和任务模块，两者都单独部署和启动。在业务模块抛出请求后直接返回，而在任务模块进行真正地导出操作。这种异步处理方式就是典型的生产者-消费者。\n\n生产者-消费者模型的实现方式有很多种，可以参考：[Java实现生产者和消费者的5种方式](https://juejin.cn/post/6844903486895865864)。这里我们采用阻塞队列，并将这个阻塞队列存储在 redis 中，这样两个独立部署的模块也可以通信。\n\n## 3. 痛点分析\n\n那么对于导出文件，存在哪些痛点呢？\n\n1. 当单个用户导出大量数据时，可能造成OOM。解决办法：分页导出，每次查询1000条数据填充Excel。\n2. 当多个用户导出数据时，可能造成OOM。解决办法：生产者-消费者模型+阻塞队列。（啊这个OOM还是不太理解）\n3. 导出文件时间长。解决办法：多线程导出，当查询数据大于1000条时每次启5个线程来查询数据，后填充到Excel中。\n\n## 4. 时序图\n\n<img src=\"/pictures/导出时序图.jpg\"/>\n\n## 5. 类图\n\n<img src=\"/pictures/导出类图.jpg\"/>\n\n## 6. 为什么这么设计？\n\n1. **[模版模式](https://www.runoob.com/design-pattern/template-pattern.html)**：很多个页面有导出，那每一个导出都单独写一个Handler方法吗？是的...我的第一版代码就是这么写的..这样的代码很明显有很多问题，比如相同的代码要写很多遍，当然这里面有几个小地方不一样，比如查询数据、返回对象等，这样就导致**可维护性**差，比如后期导出的流程有一些改变，那么就需要修改很多类；另外，如果需要再增加一个导出，同样的代码还需要再写一遍，即**可扩展性**很差。\n   回过头来，再看看这个场景，其实非常适合使用模版模式优化。使用一个抽象模版类定义整个导出的流程，在其中定义公共的方法，比如更新请求管理表、发送消息这类功能，每种具体的导出的不同部分，写成抽象方法，在子类中实现，比如导出数据总数、分页查询数据等。\n2. **QueueInfo接口**：定义阻塞队列的名称，有几个阻塞队列，就有几个QueueInfo的实现类，该名称对应EventModel中的key，我们可以把所有的导出放在一个队列中，如果其他事件比如导入，就可以扩展一个新的实现类来定义。\n3. **EventHandler接口**：定义事件处理方法和对应类型EventType。要实现一个事件，必须实现EventHandler接口，这就规定了所有的事件处理类都有这两个方法。这样在consumer中，我们使用``applicationContext.getBeansOfType(EventHandler.class)`` ,并将其转换为EventType和EventHandler实现类的映射，根据EventType就可以调用对应的实现类。为什么这样设计？还是扩展性的问题，如果需要添加一种事件，添加EventHandler的实现类即可。\n\n\n\n## 7. 改进优化\n\n1. 异步处理看起来很美好，但会为代码引入更大的复杂度，比如错误处理、反馈机制等等。比如不知道什么原因的运行失败，导致请求一直处于运行中，这种情况可以使用 **定时任务**（ElasticJob） ，每5分钟查看请求管理表中是否存在运行了一个小时以上的请求，如果存在，将请求状态修改为运行失败。\n\n\n\n## 8. 源码\n\n[export-demo](https://github.com/JuliaJiang7/export-demo)\n\n\n\n## 9. 一些思考\n\n我们都知道 Java 是面向对象的，三大特性封装、继承、多态，但怎样用好这些特性是很有意思的问题。想起之前面试的一个问题：**接口和抽象类的区别是什么？** 这是一个很常见的面试题，很多博客总结了很多，比如是否有方法实现、修饰符、成员变量类型等这些方面来回答，但真正核心的区别应该在于：抽象类是一个 **模版**，而接口更多的是作为一种 **适配** 的功能，比如上面的模版模式中的模版类，以及EventHandler接口。也就是常见的那句话：\n\n>  从设计层面来说，抽象是对类的一种抽象，是一种模板设计；接口是对行为的抽象，是一种行为的规范。\n\n\n\n## 10. 参考引用\n\n1. https://www.cnblogs.com/0813lichenyu/p/11599421.html\n2. https://www.runoob.com/design-pattern/template-pattern.html","slug":"生产者消费者模式-阻塞队列实现导出","published":1,"updated":"2021-03-08T03:13:14.723Z","_id":"cklp5mkv10001nyl1g86qd6wk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>这是我在实习期间实现的一个小功能，断断续续遇到了一些问题，也做了一些优化，收获很大。整体思路简单做了一个demo: <a href=\"https://github.com/JuliaJiang7/export-demo\" target=\"_blank\" rel=\"noopener\">export-demo</a>，下文是使用具体解决方案的原因和步骤等等，于我而言是一个梳理和总结，如果也能给你提供一种解决问题的思路，那可真是太好了！</p>\n<h2 id=\"1-具体需求\"><a href=\"#1-具体需求\" class=\"headerlink\" title=\"1. 具体需求\"></a>1. 具体需求</h2><p>简单来说就是：在页面输入查询条件，点击导出，将数据导出为Excel文件。这里导出的Excel文件，我们会上传到文件服务器，并将这个导出请求信息和结果存储在请求管理表，在请求管理页面进行展示和下载。</p>\n<p>总结下来，导出过程是：用户输入查询条件 -&gt; 点击导出 -&gt; 生成Excel -&gt; 上传文件服务器 -&gt; 存储文件url等信息到请求管理表 -&gt; 请求管理页面可显示和下载。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"2-初步方案\"><a href=\"#2-初步方案\" class=\"headerlink\" title=\"2. 初步方案\"></a>2. 初步方案</h2><p>这个场景非常适合用 <strong>生产者-消费者模型</strong> 来解决。为什么呢？</p>\n<p>导出一个文件是比较费时的，特别是在导出大量数据时，用户不可能一直处于等待这个导出的状态，服务器也不可能在这段时间只来处理这一个请求，因此就需要 <strong>异步处理</strong> 这个请求，如何实现异步呢？这里我们将项目逻辑上分为两个模块：业务模块和任务模块，两者都单独部署和启动。在业务模块抛出请求后直接返回，而在任务模块进行真正地导出操作。这种异步处理方式就是典型的生产者-消费者。</p>\n<p>生产者-消费者模型的实现方式有很多种，可以参考：<a href=\"https://juejin.cn/post/6844903486895865864\" target=\"_blank\" rel=\"noopener\">Java实现生产者和消费者的5种方式</a>。这里我们采用阻塞队列，并将这个阻塞队列存储在 redis 中，这样两个独立部署的模块也可以通信。</p>\n<h2 id=\"3-痛点分析\"><a href=\"#3-痛点分析\" class=\"headerlink\" title=\"3. 痛点分析\"></a>3. 痛点分析</h2><p>那么对于导出文件，存在哪些痛点呢？</p>\n<ol>\n<li>当单个用户导出大量数据时，可能造成OOM。解决办法：分页导出，每次查询1000条数据填充Excel。</li>\n<li>当多个用户导出数据时，可能造成OOM。解决办法：生产者-消费者模型+阻塞队列。（啊这个OOM还是不太理解）</li>\n<li>导出文件时间长。解决办法：多线程导出，当查询数据大于1000条时每次启5个线程来查询数据，后填充到Excel中。</li>\n</ol>\n<h2 id=\"4-时序图\"><a href=\"#4-时序图\" class=\"headerlink\" title=\"4. 时序图\"></a>4. 时序图</h2><img src=\"/pictures/导出时序图.jpg\"/>\n\n<h2 id=\"5-类图\"><a href=\"#5-类图\" class=\"headerlink\" title=\"5. 类图\"></a>5. 类图</h2><img src=\"/pictures/导出类图.jpg\"/>\n\n<h2 id=\"6-为什么这么设计？\"><a href=\"#6-为什么这么设计？\" class=\"headerlink\" title=\"6. 为什么这么设计？\"></a>6. 为什么这么设计？</h2><ol>\n<li><strong><a href=\"https://www.runoob.com/design-pattern/template-pattern.html\" target=\"_blank\" rel=\"noopener\">模版模式</a></strong>：很多个页面有导出，那每一个导出都单独写一个Handler方法吗？是的…我的第一版代码就是这么写的..这样的代码很明显有很多问题，比如相同的代码要写很多遍，当然这里面有几个小地方不一样，比如查询数据、返回对象等，这样就导致<strong>可维护性</strong>差，比如后期导出的流程有一些改变，那么就需要修改很多类；另外，如果需要再增加一个导出，同样的代码还需要再写一遍，即<strong>可扩展性</strong>很差。<br>回过头来，再看看这个场景，其实非常适合使用模版模式优化。使用一个抽象模版类定义整个导出的流程，在其中定义公共的方法，比如更新请求管理表、发送消息这类功能，每种具体的导出的不同部分，写成抽象方法，在子类中实现，比如导出数据总数、分页查询数据等。</li>\n<li><strong>QueueInfo接口</strong>：定义阻塞队列的名称，有几个阻塞队列，就有几个QueueInfo的实现类，该名称对应EventModel中的key，我们可以把所有的导出放在一个队列中，如果其他事件比如导入，就可以扩展一个新的实现类来定义。</li>\n<li><strong>EventHandler接口</strong>：定义事件处理方法和对应类型EventType。要实现一个事件，必须实现EventHandler接口，这就规定了所有的事件处理类都有这两个方法。这样在consumer中，我们使用<code>applicationContext.getBeansOfType(EventHandler.class)</code> ,并将其转换为EventType和EventHandler实现类的映射，根据EventType就可以调用对应的实现类。为什么这样设计？还是扩展性的问题，如果需要添加一种事件，添加EventHandler的实现类即可。</li>\n</ol>\n<h2 id=\"7-改进优化\"><a href=\"#7-改进优化\" class=\"headerlink\" title=\"7. 改进优化\"></a>7. 改进优化</h2><ol>\n<li>异步处理看起来很美好，但会为代码引入更大的复杂度，比如错误处理、反馈机制等等。比如不知道什么原因的运行失败，导致请求一直处于运行中，这种情况可以使用 <strong>定时任务</strong>（ElasticJob） ，每5分钟查看请求管理表中是否存在运行了一个小时以上的请求，如果存在，将请求状态修改为运行失败。</li>\n</ol>\n<h2 id=\"8-源码\"><a href=\"#8-源码\" class=\"headerlink\" title=\"8. 源码\"></a>8. 源码</h2><p><a href=\"https://github.com/JuliaJiang7/export-demo\" target=\"_blank\" rel=\"noopener\">export-demo</a></p>\n<h2 id=\"9-一些思考\"><a href=\"#9-一些思考\" class=\"headerlink\" title=\"9. 一些思考\"></a>9. 一些思考</h2><p>我们都知道 Java 是面向对象的，三大特性封装、继承、多态，但怎样用好这些特性是很有意思的问题。想起之前面试的一个问题：<strong>接口和抽象类的区别是什么？</strong> 这是一个很常见的面试题，很多博客总结了很多，比如是否有方法实现、修饰符、成员变量类型等这些方面来回答，但真正核心的区别应该在于：抽象类是一个 <strong>模版</strong>，而接口更多的是作为一种 <strong>适配</strong> 的功能，比如上面的模版模式中的模版类，以及EventHandler接口。也就是常见的那句话：</p>\n<blockquote>\n<p> 从设计层面来说，抽象是对类的一种抽象，是一种模板设计；接口是对行为的抽象，是一种行为的规范。</p>\n</blockquote>\n<h2 id=\"10-参考引用\"><a href=\"#10-参考引用\" class=\"headerlink\" title=\"10. 参考引用\"></a>10. 参考引用</h2><ol>\n<li><a href=\"https://www.cnblogs.com/0813lichenyu/p/11599421.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/0813lichenyu/p/11599421.html</a></li>\n<li><a href=\"https://www.runoob.com/design-pattern/template-pattern.html\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/design-pattern/template-pattern.html</a></li>\n</ol>\n","site":{"data":{}},"length":2039,"excerpt":"<p>这是我在实习期间实现的一个小功能，断断续续遇到了一些问题，也做了一些优化，收获很大。整体思路简单做了一个demo: <a href=\"https://github.com/JuliaJiang7/export-demo\" target=\"_blank\" rel=\"noopener\">export-demo</a>，下文是使用具体解决方案的原因和步骤等等，于我而言是一个梳理和总结，如果也能给你提供一种解决问题的思路，那可真是太好了！</p>\n<h2 id=\"1-具体需求\"><a href=\"#1-具体需求\" class=\"headerlink\" title=\"1. 具体需求\"></a>1. 具体需求</h2><p>简单来说就是：在页面输入查询条件，点击导出，将数据导出为Excel文件。这里导出的Excel文件，我们会上传到文件服务器，并将这个导出请求信息和结果存储在请求管理表，在请求管理页面进行展示和下载。</p>\n<p>总结下来，导出过程是：用户输入查询条件 -&gt; 点击导出 -&gt; 生成Excel -&gt; 上传文件服务器 -&gt; 存储文件url等信息到请求管理表 -&gt; 请求管理页面可显示和下载。</p>","more":"<h2 id=\"2-初步方案\"><a href=\"#2-初步方案\" class=\"headerlink\" title=\"2. 初步方案\"></a>2. 初步方案</h2><p>这个场景非常适合用 <strong>生产者-消费者模型</strong> 来解决。为什么呢？</p>\n<p>导出一个文件是比较费时的，特别是在导出大量数据时，用户不可能一直处于等待这个导出的状态，服务器也不可能在这段时间只来处理这一个请求，因此就需要 <strong>异步处理</strong> 这个请求，如何实现异步呢？这里我们将项目逻辑上分为两个模块：业务模块和任务模块，两者都单独部署和启动。在业务模块抛出请求后直接返回，而在任务模块进行真正地导出操作。这种异步处理方式就是典型的生产者-消费者。</p>\n<p>生产者-消费者模型的实现方式有很多种，可以参考：<a href=\"https://juejin.cn/post/6844903486895865864\" target=\"_blank\" rel=\"noopener\">Java实现生产者和消费者的5种方式</a>。这里我们采用阻塞队列，并将这个阻塞队列存储在 redis 中，这样两个独立部署的模块也可以通信。</p>\n<h2 id=\"3-痛点分析\"><a href=\"#3-痛点分析\" class=\"headerlink\" title=\"3. 痛点分析\"></a>3. 痛点分析</h2><p>那么对于导出文件，存在哪些痛点呢？</p>\n<ol>\n<li>当单个用户导出大量数据时，可能造成OOM。解决办法：分页导出，每次查询1000条数据填充Excel。</li>\n<li>当多个用户导出数据时，可能造成OOM。解决办法：生产者-消费者模型+阻塞队列。（啊这个OOM还是不太理解）</li>\n<li>导出文件时间长。解决办法：多线程导出，当查询数据大于1000条时每次启5个线程来查询数据，后填充到Excel中。</li>\n</ol>\n<h2 id=\"4-时序图\"><a href=\"#4-时序图\" class=\"headerlink\" title=\"4. 时序图\"></a>4. 时序图</h2><img src=\"/pictures/导出时序图.jpg\"/>\n\n<h2 id=\"5-类图\"><a href=\"#5-类图\" class=\"headerlink\" title=\"5. 类图\"></a>5. 类图</h2><img src=\"/pictures/导出类图.jpg\"/>\n\n<h2 id=\"6-为什么这么设计？\"><a href=\"#6-为什么这么设计？\" class=\"headerlink\" title=\"6. 为什么这么设计？\"></a>6. 为什么这么设计？</h2><ol>\n<li><strong><a href=\"https://www.runoob.com/design-pattern/template-pattern.html\" target=\"_blank\" rel=\"noopener\">模版模式</a></strong>：很多个页面有导出，那每一个导出都单独写一个Handler方法吗？是的…我的第一版代码就是这么写的..这样的代码很明显有很多问题，比如相同的代码要写很多遍，当然这里面有几个小地方不一样，比如查询数据、返回对象等，这样就导致<strong>可维护性</strong>差，比如后期导出的流程有一些改变，那么就需要修改很多类；另外，如果需要再增加一个导出，同样的代码还需要再写一遍，即<strong>可扩展性</strong>很差。<br>回过头来，再看看这个场景，其实非常适合使用模版模式优化。使用一个抽象模版类定义整个导出的流程，在其中定义公共的方法，比如更新请求管理表、发送消息这类功能，每种具体的导出的不同部分，写成抽象方法，在子类中实现，比如导出数据总数、分页查询数据等。</li>\n<li><strong>QueueInfo接口</strong>：定义阻塞队列的名称，有几个阻塞队列，就有几个QueueInfo的实现类，该名称对应EventModel中的key，我们可以把所有的导出放在一个队列中，如果其他事件比如导入，就可以扩展一个新的实现类来定义。</li>\n<li><strong>EventHandler接口</strong>：定义事件处理方法和对应类型EventType。要实现一个事件，必须实现EventHandler接口，这就规定了所有的事件处理类都有这两个方法。这样在consumer中，我们使用<code>applicationContext.getBeansOfType(EventHandler.class)</code> ,并将其转换为EventType和EventHandler实现类的映射，根据EventType就可以调用对应的实现类。为什么这样设计？还是扩展性的问题，如果需要添加一种事件，添加EventHandler的实现类即可。</li>\n</ol>\n<h2 id=\"7-改进优化\"><a href=\"#7-改进优化\" class=\"headerlink\" title=\"7. 改进优化\"></a>7. 改进优化</h2><ol>\n<li>异步处理看起来很美好，但会为代码引入更大的复杂度，比如错误处理、反馈机制等等。比如不知道什么原因的运行失败，导致请求一直处于运行中，这种情况可以使用 <strong>定时任务</strong>（ElasticJob） ，每5分钟查看请求管理表中是否存在运行了一个小时以上的请求，如果存在，将请求状态修改为运行失败。</li>\n</ol>\n<h2 id=\"8-源码\"><a href=\"#8-源码\" class=\"headerlink\" title=\"8. 源码\"></a>8. 源码</h2><p><a href=\"https://github.com/JuliaJiang7/export-demo\" target=\"_blank\" rel=\"noopener\">export-demo</a></p>\n<h2 id=\"9-一些思考\"><a href=\"#9-一些思考\" class=\"headerlink\" title=\"9. 一些思考\"></a>9. 一些思考</h2><p>我们都知道 Java 是面向对象的，三大特性封装、继承、多态，但怎样用好这些特性是很有意思的问题。想起之前面试的一个问题：<strong>接口和抽象类的区别是什么？</strong> 这是一个很常见的面试题，很多博客总结了很多，比如是否有方法实现、修饰符、成员变量类型等这些方面来回答，但真正核心的区别应该在于：抽象类是一个 <strong>模版</strong>，而接口更多的是作为一种 <strong>适配</strong> 的功能，比如上面的模版模式中的模版类，以及EventHandler接口。也就是常见的那句话：</p>\n<blockquote>\n<p> 从设计层面来说，抽象是对类的一种抽象，是一种模板设计；接口是对行为的抽象，是一种行为的规范。</p>\n</blockquote>\n<h2 id=\"10-参考引用\"><a href=\"#10-参考引用\" class=\"headerlink\" title=\"10. 参考引用\"></a>10. 参考引用</h2><ol>\n<li><a href=\"https://www.cnblogs.com/0813lichenyu/p/11599421.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/0813lichenyu/p/11599421.html</a></li>\n<li><a href=\"https://www.runoob.com/design-pattern/template-pattern.html\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/design-pattern/template-pattern.html</a></li>\n</ol>"},{"title":"JSON与Java对象的转换","date":"2020-07-23T06:36:31.000Z","visible":"hide","typora-copy-images-to":"..\\pictures","_content":"\n本文简要介绍了 JSON 的定义、语法规则，同时总结了两个把 JSON 字符串转为 JavaBean 的库分别是 json-lib、fastjson，另外还有 json 数据的传输与接收的简单使用。\n\n## 1. JSON\n\n### 1.1 什么是 JSON？\n\n**JSON（JavaScript Object Notation，JavaScript对象表示法）：**（from Wikipedia）是一种由道格拉斯·克罗克福特构想和设计、*轻量级的数据交换语言*，该语言以易于让人阅读的文字为基础，用来传输由属性值或者序列性的值组成的数据对象。尽管JSON是JavaScript的一个子集，但JSON是*独立于语言的文本格式*，并且采用了类似于C语言家族的一些习惯。\n\nJSON 数据格式与语言无关。即便它源自JavaScript，但当前很多编程语言都支持 JSON 格式数据的生成和解析。JSON 的官方 MIME 类型是 application/json，文件扩展名是 .json。\n\n<!--more-->\n\n### 1.2 JSON 语法规则\n\n- 数据格式为 键/值 对（一个名称对应一个值）\n\n```json\n\"name\":\"julia\"\n```\n\n- 数据由逗号分隔\n- 大括号保存对象（对象可以保存多个键值对）\n\n```json\n{\"name\":\"julia\", \"url\":\"juliajiang7.github.io/\"}\n```\n\n- 方括号保存数组，数组可以包含对象\n\n```json\n\"sites\":[\n    {\"name\":\"julia\", \"url\":\"juliajiang7.github.io\"},\n    {\"name\":\"Google\", \"url\":\"www.google.com\"}\n]\n```\n\n详细请参考 [JSON教程](https://www.runoob.com/json/json-tutorial.html)\n\n## 2. 使用 json-lib\n\nhttp://json-lib.sourceforge.net/\n\nJSON-lib is a java library for transforming beans, maps, collections, java arrays and XML to JSON and back again to beans and DynaBeans.\nIt is based on the work by Douglas Crockford in http://www.json.org/java.\n\n### 2.1 引入 maven\n\n```xml\n<dependency>\n    <groupId>net.sf.json-lib</groupId>\n    <artifactId>json-lib</artifactId>\n    <version>2.2.3</version>\n    <classifier>jdk15</classifier>\n</dependency>\n```\n\n### 2.2 json 对象转为 Java 对象\n\n#### 2.2.1 创建实体 Student \n\n```java\npublic class Student {\n    private String name;\n    private Integer age;\n    private Boolean isValid;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    public Boolean getIsValid() {\n        return isValid;\n    }\n\n    public void setIsValid(Boolean valid) {\n        isValid = valid;\n    }\n}\n```\n\n#### 2.2.2 转换对象\n\n```java\n@Test\npublic void test(){\n    String jsonStr = \"{\\\"name\\\":\\\"julia\\\", \\\"age\\\":16, \\\"isValid\\\":true}\";\n    // 将json字符串转为JSONObject对象\n    JSONObject jsonObject = JSONObject.fromObject(jsonStr);\n    // 将JSONObject对象转为Student对象\n    Student student = (Student) JSONObject.toBean(jsonObject, Student.class);\n    System.out.println(student);\n}\n// 输出：\n// Student{name='julia', age=16, isValid=true}\n```\n\n### 2.3 json 数组转为 Java 的 List\\<T>\n\n```java\n@Test\npublic void test2(){\n    String jsonStr = \"[{\\\"name\\\":\\\"julia\\\", \\\"age\\\":16, \\\"isValid\\\":true}, \" +\n        \"{\\\"name\\\":\\\"fan\\\", \\\"age\\\":17, \\\"isValid\\\":false}, \" +\n        \"{\\\"name\\\":\\\"jiang\\\", \\\"age\\\":18, \\\"isValid\\\":true}]\";\n    // 将json数组转为JSONArray对象\n    JSONArray jsonArray = JSONArray.fromObject(jsonStr);\n    // 将JSONArray对象转为List\n    List<Student> students = (List<Student>) JSONArray.toCollection(jsonArray, Student.class);\n    System.out.println(students);\n}\n// 输出：\n// [Student{name='julia', age=16, isValid=true}, Student{name='fan', age=17, isValid=false}, Student{name='jiang', age=18, isValid=true}]\n```\n\n### 2.4 json 复杂数据转为 JavaBean 对象\n\n如果 json 对象中包含数组，这个数组中包含 json 对象，如下所示：\n\n![image-20200514143731277](/pictures/image-20200514143731277-1595486755603.png)\n\n要将这个 json 字符串转为 JavaBean 对象，实体类需要有 List<Student\\> 属性。定义实体来 Teacher 如下：\n\n#### 2.4.1 创建 Teacher 对象\n\n```java\npublic class Teacher {\n    private String name;\n    private Integer age;\n    List<Student> students;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n\n    public void setStudents(List<Student> students) {\n        this.students = students;\n    }\n}\n```\n\n#### 2.4.2 转换对象\n\n我们还是采用前面的方式进行转换，发现在获取 ``student.getName()`` 时报错**net.sf.ezmorph.bean.MorphDynaBean cannot be cast to** 如下所示：\n\n```java\n@Test\npublic void test3(){\n    String jsonStr = \"{\\\"name\\\":\\\"teacher\\\", \\\"age\\\":30, \\\"students\\\":\" +\n        \"[{\\\"name\\\":\\\"julia\\\",\\\"age\\\":16,\\\"isValid\\\":true},\" +\n        \"{\\\"name\\\":\\\"fan\\\",\\\"age\\\":17,\\\"isValid\\\":false}]}\";\n    // 将json数组转为JSONArray对象\n    JSONObject jsonObject = JSONObject.fromObject(jsonStr);\n    Teacher teacher = (Teacher) JSONObject.toBean(jsonObject, Teacher.class);\n    System.out.println(teacher);\n    for (Student student : teacher.getStudents()) {\n        System.out.println(student.getName());\n    }\n}\n// 输出：\n/* \nTeacher{name='teacher', age=30, students=[net.sf.ezmorph.bean.MorphDynaBean@3c6aa04a[\n  {isValid=true, name=julia, age=16}\n], net.sf.ezmorph.bean.MorphDynaBean@2257fadf[\n  {isValid=false, name=fan, age=17}\n]]}\n\njava.lang.ClassCastException: net.sf.ezmorph.bean.MorphDynaBean cannot be cast to com.juliajiang.blogtest.entity.Student\n...\n*/\n```\n\n这是因为：在操作 json 数据时，如果没有指明数据类型，那么只能是基本类型（比如上述Integer、Boolean等）或者String类型，不能出现复杂数据类型。\n\n应该采用如下方式转换：\n\n```java\n@Test\npublic void test3(){\n    String jsonStr = \"{\\\"name\\\":\\\"teacher\\\", \\\"age\\\":30, \\\"students\\\":\" +\n        \"[{\\\"name\\\":\\\"julia\\\",\\\"age\\\":16,\\\"isValid\\\":true},\" +\n        \"{\\\"name\\\":\\\"fan\\\",\\\"age\\\":17,\\\"isValid\\\":false}]}\";\n    // 将json数组转为JSONArray对象\n    JSONObject jsonObject = JSONObject.fromObject(jsonStr);\n    Map<String, Class> map = new HashMap<>();\n    map.put(\"students\", Student.class);\n    // 添加map\n    Teacher teacher = (Teacher) JSONObject.toBean(jsonObject, Teacher.class, map);\n    System.out.println(teacher);\n    for (Student student : teacher.getStudents()) {\n        System.out.println(student.getName());\n    }\n}\n// 输出：\n/*\nTeacher{name='teacher', age=30, students=[Student{name='julia', age=16, isValid=true}, Student{name='fan', age=17, isValid=false}]}\njulia\nfan\n*/\n```\n\n其中 map 对象是 Teacher 中各个属性的类型，map 的 key 是属性的名，value 是属性的类型。\n\n## 3. 使用 fastjson\n\nfastjson 中文WiKi：https://github.com/alibaba/fastjson/wiki/Quick-Start-CN\n\n### 3.1 什么是 fastjson?\n\nfastjson是阿里巴巴的开源JSON解析库，它可以解析JSON格式的字符串，支持将Java Bean序列化为JSON字符串，也可以从JSON字符串反序列化到JavaBean。\n\n### 3.2 引入 maven \n\n```xml\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>1.2.28</version>\n</dependency>\n```\n\n### 3.3 json 字符串与 Java 对象互转\n\n```java\n@Test\npublic void test4(){\n    Student student = new Student(\"julia\", 16, true);\n    // 将Java对象转为json字符串\n    String jsonString = JSON.toJSONString(student);\n    System.out.println(jsonString);\n    // 将json字符串转为Java对象\n    Student student1 = JSON.parseObject(jsonString, Student.class);\n    System.out.println(student1);\n}\n/* 输出：\n{\"age\":16,\"isValid\":true,\"name\":\"julia\"}\nStudent{name='julia', age=16, isValid=true}\n*/\n```\n\n### 3.4 json 数组转为 List\\<T> \n\n```java\n@Test\npublic void test(){\n    String jsonStr = \"[{\\\"name\\\":\\\"julia\\\", \\\"age\\\":16, \\\"isValid\\\":true}, \" +\n        \"{\\\"name\\\":\\\"fan\\\", \\\"age\\\":17, \\\"isValid\\\":false}, \" +\n        \"{\\\"name\\\":\\\"jiang\\\", \\\"age\\\":18, \\\"isValid\\\":true}]\";\n    List<Student> students = JSONArray.parseArray(jsonStr, Student.class);\n    System.out.println(students);\n}\n/*\n输出：\n[Student{name='julia', age=16, isValid=true}, Student{name='fan', age=17, isValid=false}, Student{name='jiang', age=18, isValid=true}]\n*/\n```\n\n### 3.5 json 复杂数据转为 Java 对象\n\n```java \n@Test\npublic void test2(){\n    String jsonStr = \"{\\\"name\\\":\\\"teacher\\\", \\\"age\\\":30, \\\"students\\\":\" +\n        \"[{\\\"name\\\":\\\"julia\\\",\\\"age\\\":16,\\\"isValid\\\":true},\" +\n        \"{\\\"name\\\":\\\"fan\\\",\\\"age\\\":17,\\\"isValid\\\":false}]}\";\n    Teacher teacher = JSON.parseObject(jsonStr, Teacher.class);\n    System.out.println(teacher);\n    for (Student student : teacher.getStudents()) {\n        System.out.println(student.getName());\n    }\n}\n/*输出：\nTeacher{name='teacher', age=30, students=[Student{name='julia', age=16, isValid=true}, Student{name='fan', age=17, isValid=false}]}\njulia\nfan\n*/\n```\n\n## 4. fastjson 和 json-lib 对比\n\n就以上三种使用途径来看，fastjson 确实更加方便。\n\n## 5. json 数据的传输与接收\n\nJSON 通常用于与服务端交换数据，在向服务器发送数据时一般是字符串。我们可以使用 `` JSON.stringify() `` 方法将 JavaScript 对象转换为字符串。\n\n向服务器发送请求：\n\n```javascript\nvar param = JSON.stringify(searchList);\n$.post(url, {\n            searchList:param\n        },function (data) {\n            /*...*/\n        });\n```\n\nspringboot 后台 controller 接收：\n\n```java\n@RequestMapping(\"/search\")\n@ResponseBody\npublic Map search(String searchList){\n    // 将前台接收的 json 数组转化为实体SearchList的列表\n    List<SearchList> lists = JSONArray.parseArray(searchList, SearchList.class);\n    /*...*/\n}\n```\n\n## 6. 参考文献\n\n1. https://www.runoob.com/json/json-tutorial.html","source":"_posts/JSON与Java对象的转换.md","raw":"---\ntitle: JSON与Java对象的转换\ndate: 2020-07-23 14:36:31\ntags:\n  - Java\n  - json\ncategories: Java\nvisible: hide\ntypora-copy-images-to: ..\\pictures\n---\n\n本文简要介绍了 JSON 的定义、语法规则，同时总结了两个把 JSON 字符串转为 JavaBean 的库分别是 json-lib、fastjson，另外还有 json 数据的传输与接收的简单使用。\n\n## 1. JSON\n\n### 1.1 什么是 JSON？\n\n**JSON（JavaScript Object Notation，JavaScript对象表示法）：**（from Wikipedia）是一种由道格拉斯·克罗克福特构想和设计、*轻量级的数据交换语言*，该语言以易于让人阅读的文字为基础，用来传输由属性值或者序列性的值组成的数据对象。尽管JSON是JavaScript的一个子集，但JSON是*独立于语言的文本格式*，并且采用了类似于C语言家族的一些习惯。\n\nJSON 数据格式与语言无关。即便它源自JavaScript，但当前很多编程语言都支持 JSON 格式数据的生成和解析。JSON 的官方 MIME 类型是 application/json，文件扩展名是 .json。\n\n<!--more-->\n\n### 1.2 JSON 语法规则\n\n- 数据格式为 键/值 对（一个名称对应一个值）\n\n```json\n\"name\":\"julia\"\n```\n\n- 数据由逗号分隔\n- 大括号保存对象（对象可以保存多个键值对）\n\n```json\n{\"name\":\"julia\", \"url\":\"juliajiang7.github.io/\"}\n```\n\n- 方括号保存数组，数组可以包含对象\n\n```json\n\"sites\":[\n    {\"name\":\"julia\", \"url\":\"juliajiang7.github.io\"},\n    {\"name\":\"Google\", \"url\":\"www.google.com\"}\n]\n```\n\n详细请参考 [JSON教程](https://www.runoob.com/json/json-tutorial.html)\n\n## 2. 使用 json-lib\n\nhttp://json-lib.sourceforge.net/\n\nJSON-lib is a java library for transforming beans, maps, collections, java arrays and XML to JSON and back again to beans and DynaBeans.\nIt is based on the work by Douglas Crockford in http://www.json.org/java.\n\n### 2.1 引入 maven\n\n```xml\n<dependency>\n    <groupId>net.sf.json-lib</groupId>\n    <artifactId>json-lib</artifactId>\n    <version>2.2.3</version>\n    <classifier>jdk15</classifier>\n</dependency>\n```\n\n### 2.2 json 对象转为 Java 对象\n\n#### 2.2.1 创建实体 Student \n\n```java\npublic class Student {\n    private String name;\n    private Integer age;\n    private Boolean isValid;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    public Boolean getIsValid() {\n        return isValid;\n    }\n\n    public void setIsValid(Boolean valid) {\n        isValid = valid;\n    }\n}\n```\n\n#### 2.2.2 转换对象\n\n```java\n@Test\npublic void test(){\n    String jsonStr = \"{\\\"name\\\":\\\"julia\\\", \\\"age\\\":16, \\\"isValid\\\":true}\";\n    // 将json字符串转为JSONObject对象\n    JSONObject jsonObject = JSONObject.fromObject(jsonStr);\n    // 将JSONObject对象转为Student对象\n    Student student = (Student) JSONObject.toBean(jsonObject, Student.class);\n    System.out.println(student);\n}\n// 输出：\n// Student{name='julia', age=16, isValid=true}\n```\n\n### 2.3 json 数组转为 Java 的 List\\<T>\n\n```java\n@Test\npublic void test2(){\n    String jsonStr = \"[{\\\"name\\\":\\\"julia\\\", \\\"age\\\":16, \\\"isValid\\\":true}, \" +\n        \"{\\\"name\\\":\\\"fan\\\", \\\"age\\\":17, \\\"isValid\\\":false}, \" +\n        \"{\\\"name\\\":\\\"jiang\\\", \\\"age\\\":18, \\\"isValid\\\":true}]\";\n    // 将json数组转为JSONArray对象\n    JSONArray jsonArray = JSONArray.fromObject(jsonStr);\n    // 将JSONArray对象转为List\n    List<Student> students = (List<Student>) JSONArray.toCollection(jsonArray, Student.class);\n    System.out.println(students);\n}\n// 输出：\n// [Student{name='julia', age=16, isValid=true}, Student{name='fan', age=17, isValid=false}, Student{name='jiang', age=18, isValid=true}]\n```\n\n### 2.4 json 复杂数据转为 JavaBean 对象\n\n如果 json 对象中包含数组，这个数组中包含 json 对象，如下所示：\n\n![image-20200514143731277](/pictures/image-20200514143731277-1595486755603.png)\n\n要将这个 json 字符串转为 JavaBean 对象，实体类需要有 List<Student\\> 属性。定义实体来 Teacher 如下：\n\n#### 2.4.1 创建 Teacher 对象\n\n```java\npublic class Teacher {\n    private String name;\n    private Integer age;\n    List<Student> students;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    public List<Student> getStudents() {\n        return students;\n    }\n\n    public void setStudents(List<Student> students) {\n        this.students = students;\n    }\n}\n```\n\n#### 2.4.2 转换对象\n\n我们还是采用前面的方式进行转换，发现在获取 ``student.getName()`` 时报错**net.sf.ezmorph.bean.MorphDynaBean cannot be cast to** 如下所示：\n\n```java\n@Test\npublic void test3(){\n    String jsonStr = \"{\\\"name\\\":\\\"teacher\\\", \\\"age\\\":30, \\\"students\\\":\" +\n        \"[{\\\"name\\\":\\\"julia\\\",\\\"age\\\":16,\\\"isValid\\\":true},\" +\n        \"{\\\"name\\\":\\\"fan\\\",\\\"age\\\":17,\\\"isValid\\\":false}]}\";\n    // 将json数组转为JSONArray对象\n    JSONObject jsonObject = JSONObject.fromObject(jsonStr);\n    Teacher teacher = (Teacher) JSONObject.toBean(jsonObject, Teacher.class);\n    System.out.println(teacher);\n    for (Student student : teacher.getStudents()) {\n        System.out.println(student.getName());\n    }\n}\n// 输出：\n/* \nTeacher{name='teacher', age=30, students=[net.sf.ezmorph.bean.MorphDynaBean@3c6aa04a[\n  {isValid=true, name=julia, age=16}\n], net.sf.ezmorph.bean.MorphDynaBean@2257fadf[\n  {isValid=false, name=fan, age=17}\n]]}\n\njava.lang.ClassCastException: net.sf.ezmorph.bean.MorphDynaBean cannot be cast to com.juliajiang.blogtest.entity.Student\n...\n*/\n```\n\n这是因为：在操作 json 数据时，如果没有指明数据类型，那么只能是基本类型（比如上述Integer、Boolean等）或者String类型，不能出现复杂数据类型。\n\n应该采用如下方式转换：\n\n```java\n@Test\npublic void test3(){\n    String jsonStr = \"{\\\"name\\\":\\\"teacher\\\", \\\"age\\\":30, \\\"students\\\":\" +\n        \"[{\\\"name\\\":\\\"julia\\\",\\\"age\\\":16,\\\"isValid\\\":true},\" +\n        \"{\\\"name\\\":\\\"fan\\\",\\\"age\\\":17,\\\"isValid\\\":false}]}\";\n    // 将json数组转为JSONArray对象\n    JSONObject jsonObject = JSONObject.fromObject(jsonStr);\n    Map<String, Class> map = new HashMap<>();\n    map.put(\"students\", Student.class);\n    // 添加map\n    Teacher teacher = (Teacher) JSONObject.toBean(jsonObject, Teacher.class, map);\n    System.out.println(teacher);\n    for (Student student : teacher.getStudents()) {\n        System.out.println(student.getName());\n    }\n}\n// 输出：\n/*\nTeacher{name='teacher', age=30, students=[Student{name='julia', age=16, isValid=true}, Student{name='fan', age=17, isValid=false}]}\njulia\nfan\n*/\n```\n\n其中 map 对象是 Teacher 中各个属性的类型，map 的 key 是属性的名，value 是属性的类型。\n\n## 3. 使用 fastjson\n\nfastjson 中文WiKi：https://github.com/alibaba/fastjson/wiki/Quick-Start-CN\n\n### 3.1 什么是 fastjson?\n\nfastjson是阿里巴巴的开源JSON解析库，它可以解析JSON格式的字符串，支持将Java Bean序列化为JSON字符串，也可以从JSON字符串反序列化到JavaBean。\n\n### 3.2 引入 maven \n\n```xml\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>1.2.28</version>\n</dependency>\n```\n\n### 3.3 json 字符串与 Java 对象互转\n\n```java\n@Test\npublic void test4(){\n    Student student = new Student(\"julia\", 16, true);\n    // 将Java对象转为json字符串\n    String jsonString = JSON.toJSONString(student);\n    System.out.println(jsonString);\n    // 将json字符串转为Java对象\n    Student student1 = JSON.parseObject(jsonString, Student.class);\n    System.out.println(student1);\n}\n/* 输出：\n{\"age\":16,\"isValid\":true,\"name\":\"julia\"}\nStudent{name='julia', age=16, isValid=true}\n*/\n```\n\n### 3.4 json 数组转为 List\\<T> \n\n```java\n@Test\npublic void test(){\n    String jsonStr = \"[{\\\"name\\\":\\\"julia\\\", \\\"age\\\":16, \\\"isValid\\\":true}, \" +\n        \"{\\\"name\\\":\\\"fan\\\", \\\"age\\\":17, \\\"isValid\\\":false}, \" +\n        \"{\\\"name\\\":\\\"jiang\\\", \\\"age\\\":18, \\\"isValid\\\":true}]\";\n    List<Student> students = JSONArray.parseArray(jsonStr, Student.class);\n    System.out.println(students);\n}\n/*\n输出：\n[Student{name='julia', age=16, isValid=true}, Student{name='fan', age=17, isValid=false}, Student{name='jiang', age=18, isValid=true}]\n*/\n```\n\n### 3.5 json 复杂数据转为 Java 对象\n\n```java \n@Test\npublic void test2(){\n    String jsonStr = \"{\\\"name\\\":\\\"teacher\\\", \\\"age\\\":30, \\\"students\\\":\" +\n        \"[{\\\"name\\\":\\\"julia\\\",\\\"age\\\":16,\\\"isValid\\\":true},\" +\n        \"{\\\"name\\\":\\\"fan\\\",\\\"age\\\":17,\\\"isValid\\\":false}]}\";\n    Teacher teacher = JSON.parseObject(jsonStr, Teacher.class);\n    System.out.println(teacher);\n    for (Student student : teacher.getStudents()) {\n        System.out.println(student.getName());\n    }\n}\n/*输出：\nTeacher{name='teacher', age=30, students=[Student{name='julia', age=16, isValid=true}, Student{name='fan', age=17, isValid=false}]}\njulia\nfan\n*/\n```\n\n## 4. fastjson 和 json-lib 对比\n\n就以上三种使用途径来看，fastjson 确实更加方便。\n\n## 5. json 数据的传输与接收\n\nJSON 通常用于与服务端交换数据，在向服务器发送数据时一般是字符串。我们可以使用 `` JSON.stringify() `` 方法将 JavaScript 对象转换为字符串。\n\n向服务器发送请求：\n\n```javascript\nvar param = JSON.stringify(searchList);\n$.post(url, {\n            searchList:param\n        },function (data) {\n            /*...*/\n        });\n```\n\nspringboot 后台 controller 接收：\n\n```java\n@RequestMapping(\"/search\")\n@ResponseBody\npublic Map search(String searchList){\n    // 将前台接收的 json 数组转化为实体SearchList的列表\n    List<SearchList> lists = JSONArray.parseArray(searchList, SearchList.class);\n    /*...*/\n}\n```\n\n## 6. 参考文献\n\n1. https://www.runoob.com/json/json-tutorial.html","slug":"JSON与Java对象的转换","published":1,"updated":"2020-12-26T12:26:49.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5mkvq0008nyl1fsmqchpn","content":"<p>本文简要介绍了 JSON 的定义、语法规则，同时总结了两个把 JSON 字符串转为 JavaBean 的库分别是 json-lib、fastjson，另外还有 json 数据的传输与接收的简单使用。</p>\n<h2 id=\"1-JSON\"><a href=\"#1-JSON\" class=\"headerlink\" title=\"1. JSON\"></a>1. JSON</h2><h3 id=\"1-1-什么是-JSON？\"><a href=\"#1-1-什么是-JSON？\" class=\"headerlink\" title=\"1.1 什么是 JSON？\"></a>1.1 什么是 JSON？</h3><p><strong>JSON（JavaScript Object Notation，JavaScript对象表示法）：</strong>（from Wikipedia）是一种由道格拉斯·克罗克福特构想和设计、<em>轻量级的数据交换语言</em>，该语言以易于让人阅读的文字为基础，用来传输由属性值或者序列性的值组成的数据对象。尽管JSON是JavaScript的一个子集，但JSON是<em>独立于语言的文本格式</em>，并且采用了类似于C语言家族的一些习惯。</p>\n<p>JSON 数据格式与语言无关。即便它源自JavaScript，但当前很多编程语言都支持 JSON 格式数据的生成和解析。JSON 的官方 MIME 类型是 application/json，文件扩展名是 .json。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"1-2-JSON-语法规则\"><a href=\"#1-2-JSON-语法规则\" class=\"headerlink\" title=\"1.2 JSON 语法规则\"></a>1.2 JSON 语法规则</h3><ul>\n<li>数据格式为 键/值 对（一个名称对应一个值）</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"name\":\"julia\"</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>数据由逗号分隔</li>\n<li>大括号保存对象（对象可以保存多个键值对）</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"julia\"</span>, <span class=\"attr\">\"url\"</span>:<span class=\"string\">\"juliajiang7.github.io/\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方括号保存数组，数组可以包含对象</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"sites\":[</span><br><span class=\"line\">    &#123;\"name\":\"julia\", \"url\":\"juliajiang7.github.io\"&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"Google\"</span>, <span class=\"attr\">\"url\"</span>:<span class=\"string\">\"www.google.com\"</span>&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>详细请参考 <a href=\"https://www.runoob.com/json/json-tutorial.html\" target=\"_blank\" rel=\"noopener\">JSON教程</a></p>\n<h2 id=\"2-使用-json-lib\"><a href=\"#2-使用-json-lib\" class=\"headerlink\" title=\"2. 使用 json-lib\"></a>2. 使用 json-lib</h2><p><a href=\"http://json-lib.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">http://json-lib.sourceforge.net/</a></p>\n<p>JSON-lib is a java library for transforming beans, maps, collections, java arrays and XML to JSON and back again to beans and DynaBeans.<br>It is based on the work by Douglas Crockford in <a href=\"http://www.json.org/java\" target=\"_blank\" rel=\"noopener\">http://www.json.org/java</a>.</p>\n<h3 id=\"2-1-引入-maven\"><a href=\"#2-1-引入-maven\" class=\"headerlink\" title=\"2.1 引入 maven\"></a>2.1 引入 maven</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.sf.json-lib<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>json-lib<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">classifier</span>&gt;</span>jdk15<span class=\"tag\">&lt;/<span class=\"name\">classifier</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-json-对象转为-Java-对象\"><a href=\"#2-2-json-对象转为-Java-对象\" class=\"headerlink\" title=\"2.2 json 对象转为 Java 对象\"></a>2.2 json 对象转为 Java 对象</h3><h4 id=\"2-2-1-创建实体-Student\"><a href=\"#2-2-1-创建实体-Student\" class=\"headerlink\" title=\"2.2.1 创建实体 Student\"></a>2.2.1 创建实体 Student</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean isValid;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">getIsValid</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isValid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setIsValid</span><span class=\"params\">(Boolean valid)</span> </span>&#123;</span><br><span class=\"line\">        isValid = valid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-2-转换对象\"><a href=\"#2-2-2-转换对象\" class=\"headerlink\" title=\"2.2.2 转换对象\"></a>2.2.2 转换对象</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    String jsonStr = <span class=\"string\">\"&#123;\\\"name\\\":\\\"julia\\\", \\\"age\\\":16, \\\"isValid\\\":true&#125;\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将json字符串转为JSONObject对象</span></span><br><span class=\"line\">    JSONObject jsonObject = JSONObject.fromObject(jsonStr);</span><br><span class=\"line\">    <span class=\"comment\">// 将JSONObject对象转为Student对象</span></span><br><span class=\"line\">    Student student = (Student) JSONObject.toBean(jsonObject, Student<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    System.out.println(student);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"><span class=\"comment\">// Student&#123;name='julia', age=16, isValid=true&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-json-数组转为-Java-的-List-lt-T-gt\"><a href=\"#2-3-json-数组转为-Java-的-List-lt-T-gt\" class=\"headerlink\" title=\"2.3 json 数组转为 Java 的 List&lt;T&gt;\"></a>2.3 json 数组转为 Java 的 List&lt;T&gt;</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    String jsonStr = <span class=\"string\">\"[&#123;\\\"name\\\":\\\"julia\\\", \\\"age\\\":16, \\\"isValid\\\":true&#125;, \"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"&#123;\\\"name\\\":\\\"fan\\\", \\\"age\\\":17, \\\"isValid\\\":false&#125;, \"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"&#123;\\\"name\\\":\\\"jiang\\\", \\\"age\\\":18, \\\"isValid\\\":true&#125;]\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将json数组转为JSONArray对象</span></span><br><span class=\"line\">    JSONArray jsonArray = JSONArray.fromObject(jsonStr);</span><br><span class=\"line\">    <span class=\"comment\">// 将JSONArray对象转为List</span></span><br><span class=\"line\">    List&lt;Student&gt; students = (List&lt;Student&gt;) JSONArray.toCollection(jsonArray, Student<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    System.out.println(students);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"><span class=\"comment\">// [Student&#123;name='julia', age=16, isValid=true&#125;, Student&#123;name='fan', age=17, isValid=false&#125;, Student&#123;name='jiang', age=18, isValid=true&#125;]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-json-复杂数据转为-JavaBean-对象\"><a href=\"#2-4-json-复杂数据转为-JavaBean-对象\" class=\"headerlink\" title=\"2.4 json 复杂数据转为 JavaBean 对象\"></a>2.4 json 复杂数据转为 JavaBean 对象</h3><p>如果 json 对象中包含数组，这个数组中包含 json 对象，如下所示：</p>\n<p><img src=\"/pictures/image-20200514143731277-1595486755603.png\" alt=\"image-20200514143731277\"></p>\n<p>要将这个 json 字符串转为 JavaBean 对象，实体类需要有 List&lt;Student&gt; 属性。定义实体来 Teacher 如下：</p>\n<h4 id=\"2-4-1-创建-Teacher-对象\"><a href=\"#2-4-1-创建-Teacher-对象\" class=\"headerlink\" title=\"2.4.1 创建 Teacher 对象\"></a>2.4.1 创建 Teacher 对象</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    List&lt;Student&gt; students;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Student&gt; <span class=\"title\">getStudents</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> students;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStudents</span><span class=\"params\">(List&lt;Student&gt; students)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.students = students;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-2-转换对象\"><a href=\"#2-4-2-转换对象\" class=\"headerlink\" title=\"2.4.2 转换对象\"></a>2.4.2 转换对象</h4><p>我们还是采用前面的方式进行转换，发现在获取 <code>student.getName()</code> 时报错<strong>net.sf.ezmorph.bean.MorphDynaBean cannot be cast to</strong> 如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    String jsonStr = <span class=\"string\">\"&#123;\\\"name\\\":\\\"teacher\\\", \\\"age\\\":30, \\\"students\\\":\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"[&#123;\\\"name\\\":\\\"julia\\\",\\\"age\\\":16,\\\"isValid\\\":true&#125;,\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"&#123;\\\"name\\\":\\\"fan\\\",\\\"age\\\":17,\\\"isValid\\\":false&#125;]&#125;\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将json数组转为JSONArray对象</span></span><br><span class=\"line\">    JSONObject jsonObject = JSONObject.fromObject(jsonStr);</span><br><span class=\"line\">    Teacher teacher = (Teacher) JSONObject.toBean(jsonObject, Teacher<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    System.out.println(teacher);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Student student : teacher.getStudents()) &#123;</span><br><span class=\"line\">        System.out.println(student.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">Teacher&#123;name='teacher', age=30, students=[net.sf.ezmorph.bean.MorphDynaBean@3c6aa04a[</span></span><br><span class=\"line\"><span class=\"comment\">  &#123;isValid=true, name=julia, age=16&#125;</span></span><br><span class=\"line\"><span class=\"comment\">], net.sf.ezmorph.bean.MorphDynaBean@2257fadf[</span></span><br><span class=\"line\"><span class=\"comment\">  &#123;isValid=false, name=fan, age=17&#125;</span></span><br><span class=\"line\"><span class=\"comment\">]]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">java.lang.ClassCastException: net.sf.ezmorph.bean.MorphDynaBean cannot be cast to com.juliajiang.blogtest.entity.Student</span></span><br><span class=\"line\"><span class=\"comment\">...</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>这是因为：在操作 json 数据时，如果没有指明数据类型，那么只能是基本类型（比如上述Integer、Boolean等）或者String类型，不能出现复杂数据类型。</p>\n<p>应该采用如下方式转换：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    String jsonStr = <span class=\"string\">\"&#123;\\\"name\\\":\\\"teacher\\\", \\\"age\\\":30, \\\"students\\\":\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"[&#123;\\\"name\\\":\\\"julia\\\",\\\"age\\\":16,\\\"isValid\\\":true&#125;,\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"&#123;\\\"name\\\":\\\"fan\\\",\\\"age\\\":17,\\\"isValid\\\":false&#125;]&#125;\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将json数组转为JSONArray对象</span></span><br><span class=\"line\">    JSONObject jsonObject = JSONObject.fromObject(jsonStr);</span><br><span class=\"line\">    Map&lt;String, Class&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">\"students\"</span>, Student<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 添加map</span></span><br><span class=\"line\">    Teacher teacher = (Teacher) JSONObject.toBean(jsonObject, Teacher<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">map</span>)</span>;</span><br><span class=\"line\">    System.out.println(teacher);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Student student : teacher.getStudents()) &#123;</span><br><span class=\"line\">        System.out.println(student.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">Teacher&#123;name='teacher', age=30, students=[Student&#123;name='julia', age=16, isValid=true&#125;, Student&#123;name='fan', age=17, isValid=false&#125;]&#125;</span></span><br><span class=\"line\"><span class=\"comment\">julia</span></span><br><span class=\"line\"><span class=\"comment\">fan</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>其中 map 对象是 Teacher 中各个属性的类型，map 的 key 是属性的名，value 是属性的类型。</p>\n<h2 id=\"3-使用-fastjson\"><a href=\"#3-使用-fastjson\" class=\"headerlink\" title=\"3. 使用 fastjson\"></a>3. 使用 fastjson</h2><p>fastjson 中文WiKi：<a href=\"https://github.com/alibaba/fastjson/wiki/Quick-Start-CN\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/fastjson/wiki/Quick-Start-CN</a></p>\n<h3 id=\"3-1-什么是-fastjson\"><a href=\"#3-1-什么是-fastjson\" class=\"headerlink\" title=\"3.1 什么是 fastjson?\"></a>3.1 什么是 fastjson?</h3><p>fastjson是阿里巴巴的开源JSON解析库，它可以解析JSON格式的字符串，支持将Java Bean序列化为JSON字符串，也可以从JSON字符串反序列化到JavaBean。</p>\n<h3 id=\"3-2-引入-maven\"><a href=\"#3-2-引入-maven\" class=\"headerlink\" title=\"3.2 引入 maven\"></a>3.2 引入 maven</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.28<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-json-字符串与-Java-对象互转\"><a href=\"#3-3-json-字符串与-Java-对象互转\" class=\"headerlink\" title=\"3.3 json 字符串与 Java 对象互转\"></a>3.3 json 字符串与 Java 对象互转</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test4</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Student student = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"julia\"</span>, <span class=\"number\">16</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 将Java对象转为json字符串</span></span><br><span class=\"line\">    String jsonString = JSON.toJSONString(student);</span><br><span class=\"line\">    System.out.println(jsonString);</span><br><span class=\"line\">    <span class=\"comment\">// 将json字符串转为Java对象</span></span><br><span class=\"line\">    Student student1 = JSON.parseObject(jsonString, Student<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    System.out.println(student1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 输出：</span></span><br><span class=\"line\"><span class=\"comment\">&#123;\"age\":16,\"isValid\":true,\"name\":\"julia\"&#125;</span></span><br><span class=\"line\"><span class=\"comment\">Student&#123;name='julia', age=16, isValid=true&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-json-数组转为-List-lt-T-gt\"><a href=\"#3-4-json-数组转为-List-lt-T-gt\" class=\"headerlink\" title=\"3.4 json 数组转为 List&lt;T&gt;\"></a>3.4 json 数组转为 List&lt;T&gt;</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    String jsonStr = <span class=\"string\">\"[&#123;\\\"name\\\":\\\"julia\\\", \\\"age\\\":16, \\\"isValid\\\":true&#125;, \"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"&#123;\\\"name\\\":\\\"fan\\\", \\\"age\\\":17, \\\"isValid\\\":false&#125;, \"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"&#123;\\\"name\\\":\\\"jiang\\\", \\\"age\\\":18, \\\"isValid\\\":true&#125;]\"</span>;</span><br><span class=\"line\">    List&lt;Student&gt; students = JSONArray.parseArray(jsonStr, Student<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    System.out.println(students);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">输出：</span></span><br><span class=\"line\"><span class=\"comment\">[Student&#123;name='julia', age=16, isValid=true&#125;, Student&#123;name='fan', age=17, isValid=false&#125;, Student&#123;name='jiang', age=18, isValid=true&#125;]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-5-json-复杂数据转为-Java-对象\"><a href=\"#3-5-json-复杂数据转为-Java-对象\" class=\"headerlink\" title=\"3.5 json 复杂数据转为 Java 对象\"></a>3.5 json 复杂数据转为 Java 对象</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    String jsonStr = <span class=\"string\">\"&#123;\\\"name\\\":\\\"teacher\\\", \\\"age\\\":30, \\\"students\\\":\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"[&#123;\\\"name\\\":\\\"julia\\\",\\\"age\\\":16,\\\"isValid\\\":true&#125;,\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"&#123;\\\"name\\\":\\\"fan\\\",\\\"age\\\":17,\\\"isValid\\\":false&#125;]&#125;\"</span>;</span><br><span class=\"line\">    Teacher teacher = JSON.parseObject(jsonStr, Teacher<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    System.out.println(teacher);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Student student : teacher.getStudents()) &#123;</span><br><span class=\"line\">        System.out.println(student.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*输出：</span></span><br><span class=\"line\"><span class=\"comment\">Teacher&#123;name='teacher', age=30, students=[Student&#123;name='julia', age=16, isValid=true&#125;, Student&#123;name='fan', age=17, isValid=false&#125;]&#125;</span></span><br><span class=\"line\"><span class=\"comment\">julia</span></span><br><span class=\"line\"><span class=\"comment\">fan</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-fastjson-和-json-lib-对比\"><a href=\"#4-fastjson-和-json-lib-对比\" class=\"headerlink\" title=\"4. fastjson 和 json-lib 对比\"></a>4. fastjson 和 json-lib 对比</h2><p>就以上三种使用途径来看，fastjson 确实更加方便。</p>\n<h2 id=\"5-json-数据的传输与接收\"><a href=\"#5-json-数据的传输与接收\" class=\"headerlink\" title=\"5. json 数据的传输与接收\"></a>5. json 数据的传输与接收</h2><p>JSON 通常用于与服务端交换数据，在向服务器发送数据时一般是字符串。我们可以使用 <code>JSON.stringify()</code> 方法将 JavaScript 对象转换为字符串。</p>\n<p>向服务器发送请求：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> param = <span class=\"built_in\">JSON</span>.stringify(searchList);</span><br><span class=\"line\">$.post(url, &#123;</span><br><span class=\"line\">            searchList:param</span><br><span class=\"line\">        &#125;,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">/*...*/</span></span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>springboot 后台 controller 接收：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/search\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map <span class=\"title\">search</span><span class=\"params\">(String searchList)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将前台接收的 json 数组转化为实体SearchList的列表</span></span><br><span class=\"line\">    List&lt;SearchList&gt; lists = JSONArray.parseArray(searchList, SearchList<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*...*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-参考文献\"><a href=\"#6-参考文献\" class=\"headerlink\" title=\"6. 参考文献\"></a>6. 参考文献</h2><ol>\n<li><a href=\"https://www.runoob.com/json/json-tutorial.html\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/json/json-tutorial.html</a></li>\n</ol>\n","site":{"data":{}},"length":7675,"excerpt":"<p>本文简要介绍了 JSON 的定义、语法规则，同时总结了两个把 JSON 字符串转为 JavaBean 的库分别是 json-lib、fastjson，另外还有 json 数据的传输与接收的简单使用。</p>\n<h2 id=\"1-JSON\"><a href=\"#1-JSON\" class=\"headerlink\" title=\"1. JSON\"></a>1. JSON</h2><h3 id=\"1-1-什么是-JSON？\"><a href=\"#1-1-什么是-JSON？\" class=\"headerlink\" title=\"1.1 什么是 JSON？\"></a>1.1 什么是 JSON？</h3><p><strong>JSON（JavaScript Object Notation，JavaScript对象表示法）：</strong>（from Wikipedia）是一种由道格拉斯·克罗克福特构想和设计、<em>轻量级的数据交换语言</em>，该语言以易于让人阅读的文字为基础，用来传输由属性值或者序列性的值组成的数据对象。尽管JSON是JavaScript的一个子集，但JSON是<em>独立于语言的文本格式</em>，并且采用了类似于C语言家族的一些习惯。</p>\n<p>JSON 数据格式与语言无关。即便它源自JavaScript，但当前很多编程语言都支持 JSON 格式数据的生成和解析。JSON 的官方 MIME 类型是 application/json，文件扩展名是 .json。</p>","more":"<h3 id=\"1-2-JSON-语法规则\"><a href=\"#1-2-JSON-语法规则\" class=\"headerlink\" title=\"1.2 JSON 语法规则\"></a>1.2 JSON 语法规则</h3><ul>\n<li>数据格式为 键/值 对（一个名称对应一个值）</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"name\":\"julia\"</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>数据由逗号分隔</li>\n<li>大括号保存对象（对象可以保存多个键值对）</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"julia\"</span>, <span class=\"attr\">\"url\"</span>:<span class=\"string\">\"juliajiang7.github.io/\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方括号保存数组，数组可以包含对象</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"sites\":[</span><br><span class=\"line\">    &#123;\"name\":\"julia\", \"url\":\"juliajiang7.github.io\"&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"Google\"</span>, <span class=\"attr\">\"url\"</span>:<span class=\"string\">\"www.google.com\"</span>&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>详细请参考 <a href=\"https://www.runoob.com/json/json-tutorial.html\" target=\"_blank\" rel=\"noopener\">JSON教程</a></p>\n<h2 id=\"2-使用-json-lib\"><a href=\"#2-使用-json-lib\" class=\"headerlink\" title=\"2. 使用 json-lib\"></a>2. 使用 json-lib</h2><p><a href=\"http://json-lib.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">http://json-lib.sourceforge.net/</a></p>\n<p>JSON-lib is a java library for transforming beans, maps, collections, java arrays and XML to JSON and back again to beans and DynaBeans.<br>It is based on the work by Douglas Crockford in <a href=\"http://www.json.org/java\" target=\"_blank\" rel=\"noopener\">http://www.json.org/java</a>.</p>\n<h3 id=\"2-1-引入-maven\"><a href=\"#2-1-引入-maven\" class=\"headerlink\" title=\"2.1 引入 maven\"></a>2.1 引入 maven</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>net.sf.json-lib<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>json-lib<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">classifier</span>&gt;</span>jdk15<span class=\"tag\">&lt;/<span class=\"name\">classifier</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-json-对象转为-Java-对象\"><a href=\"#2-2-json-对象转为-Java-对象\" class=\"headerlink\" title=\"2.2 json 对象转为 Java 对象\"></a>2.2 json 对象转为 Java 对象</h3><h4 id=\"2-2-1-创建实体-Student\"><a href=\"#2-2-1-创建实体-Student\" class=\"headerlink\" title=\"2.2.1 创建实体 Student\"></a>2.2.1 创建实体 Student</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean isValid;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">getIsValid</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isValid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setIsValid</span><span class=\"params\">(Boolean valid)</span> </span>&#123;</span><br><span class=\"line\">        isValid = valid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-2-转换对象\"><a href=\"#2-2-2-转换对象\" class=\"headerlink\" title=\"2.2.2 转换对象\"></a>2.2.2 转换对象</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    String jsonStr = <span class=\"string\">\"&#123;\\\"name\\\":\\\"julia\\\", \\\"age\\\":16, \\\"isValid\\\":true&#125;\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将json字符串转为JSONObject对象</span></span><br><span class=\"line\">    JSONObject jsonObject = JSONObject.fromObject(jsonStr);</span><br><span class=\"line\">    <span class=\"comment\">// 将JSONObject对象转为Student对象</span></span><br><span class=\"line\">    Student student = (Student) JSONObject.toBean(jsonObject, Student<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    System.out.println(student);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"><span class=\"comment\">// Student&#123;name='julia', age=16, isValid=true&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-json-数组转为-Java-的-List-lt-T-gt\"><a href=\"#2-3-json-数组转为-Java-的-List-lt-T-gt\" class=\"headerlink\" title=\"2.3 json 数组转为 Java 的 List&lt;T&gt;\"></a>2.3 json 数组转为 Java 的 List&lt;T&gt;</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    String jsonStr = <span class=\"string\">\"[&#123;\\\"name\\\":\\\"julia\\\", \\\"age\\\":16, \\\"isValid\\\":true&#125;, \"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"&#123;\\\"name\\\":\\\"fan\\\", \\\"age\\\":17, \\\"isValid\\\":false&#125;, \"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"&#123;\\\"name\\\":\\\"jiang\\\", \\\"age\\\":18, \\\"isValid\\\":true&#125;]\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将json数组转为JSONArray对象</span></span><br><span class=\"line\">    JSONArray jsonArray = JSONArray.fromObject(jsonStr);</span><br><span class=\"line\">    <span class=\"comment\">// 将JSONArray对象转为List</span></span><br><span class=\"line\">    List&lt;Student&gt; students = (List&lt;Student&gt;) JSONArray.toCollection(jsonArray, Student<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    System.out.println(students);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"><span class=\"comment\">// [Student&#123;name='julia', age=16, isValid=true&#125;, Student&#123;name='fan', age=17, isValid=false&#125;, Student&#123;name='jiang', age=18, isValid=true&#125;]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-json-复杂数据转为-JavaBean-对象\"><a href=\"#2-4-json-复杂数据转为-JavaBean-对象\" class=\"headerlink\" title=\"2.4 json 复杂数据转为 JavaBean 对象\"></a>2.4 json 复杂数据转为 JavaBean 对象</h3><p>如果 json 对象中包含数组，这个数组中包含 json 对象，如下所示：</p>\n<p><img src=\"/pictures/image-20200514143731277-1595486755603.png\" alt=\"image-20200514143731277\"></p>\n<p>要将这个 json 字符串转为 JavaBean 对象，实体类需要有 List&lt;Student&gt; 属性。定义实体来 Teacher 如下：</p>\n<h4 id=\"2-4-1-创建-Teacher-对象\"><a href=\"#2-4-1-创建-Teacher-对象\" class=\"headerlink\" title=\"2.4.1 创建 Teacher 对象\"></a>2.4.1 创建 Teacher 对象</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    List&lt;Student&gt; students;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Student&gt; <span class=\"title\">getStudents</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> students;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStudents</span><span class=\"params\">(List&lt;Student&gt; students)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.students = students;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-2-转换对象\"><a href=\"#2-4-2-转换对象\" class=\"headerlink\" title=\"2.4.2 转换对象\"></a>2.4.2 转换对象</h4><p>我们还是采用前面的方式进行转换，发现在获取 <code>student.getName()</code> 时报错<strong>net.sf.ezmorph.bean.MorphDynaBean cannot be cast to</strong> 如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    String jsonStr = <span class=\"string\">\"&#123;\\\"name\\\":\\\"teacher\\\", \\\"age\\\":30, \\\"students\\\":\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"[&#123;\\\"name\\\":\\\"julia\\\",\\\"age\\\":16,\\\"isValid\\\":true&#125;,\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"&#123;\\\"name\\\":\\\"fan\\\",\\\"age\\\":17,\\\"isValid\\\":false&#125;]&#125;\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将json数组转为JSONArray对象</span></span><br><span class=\"line\">    JSONObject jsonObject = JSONObject.fromObject(jsonStr);</span><br><span class=\"line\">    Teacher teacher = (Teacher) JSONObject.toBean(jsonObject, Teacher<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    System.out.println(teacher);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Student student : teacher.getStudents()) &#123;</span><br><span class=\"line\">        System.out.println(student.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">Teacher&#123;name='teacher', age=30, students=[net.sf.ezmorph.bean.MorphDynaBean@3c6aa04a[</span></span><br><span class=\"line\"><span class=\"comment\">  &#123;isValid=true, name=julia, age=16&#125;</span></span><br><span class=\"line\"><span class=\"comment\">], net.sf.ezmorph.bean.MorphDynaBean@2257fadf[</span></span><br><span class=\"line\"><span class=\"comment\">  &#123;isValid=false, name=fan, age=17&#125;</span></span><br><span class=\"line\"><span class=\"comment\">]]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">java.lang.ClassCastException: net.sf.ezmorph.bean.MorphDynaBean cannot be cast to com.juliajiang.blogtest.entity.Student</span></span><br><span class=\"line\"><span class=\"comment\">...</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>这是因为：在操作 json 数据时，如果没有指明数据类型，那么只能是基本类型（比如上述Integer、Boolean等）或者String类型，不能出现复杂数据类型。</p>\n<p>应该采用如下方式转换：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    String jsonStr = <span class=\"string\">\"&#123;\\\"name\\\":\\\"teacher\\\", \\\"age\\\":30, \\\"students\\\":\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"[&#123;\\\"name\\\":\\\"julia\\\",\\\"age\\\":16,\\\"isValid\\\":true&#125;,\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"&#123;\\\"name\\\":\\\"fan\\\",\\\"age\\\":17,\\\"isValid\\\":false&#125;]&#125;\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将json数组转为JSONArray对象</span></span><br><span class=\"line\">    JSONObject jsonObject = JSONObject.fromObject(jsonStr);</span><br><span class=\"line\">    Map&lt;String, Class&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">\"students\"</span>, Student<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 添加map</span></span><br><span class=\"line\">    Teacher teacher = (Teacher) JSONObject.toBean(jsonObject, Teacher<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">map</span>)</span>;</span><br><span class=\"line\">    System.out.println(teacher);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Student student : teacher.getStudents()) &#123;</span><br><span class=\"line\">        System.out.println(student.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">Teacher&#123;name='teacher', age=30, students=[Student&#123;name='julia', age=16, isValid=true&#125;, Student&#123;name='fan', age=17, isValid=false&#125;]&#125;</span></span><br><span class=\"line\"><span class=\"comment\">julia</span></span><br><span class=\"line\"><span class=\"comment\">fan</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>其中 map 对象是 Teacher 中各个属性的类型，map 的 key 是属性的名，value 是属性的类型。</p>\n<h2 id=\"3-使用-fastjson\"><a href=\"#3-使用-fastjson\" class=\"headerlink\" title=\"3. 使用 fastjson\"></a>3. 使用 fastjson</h2><p>fastjson 中文WiKi：<a href=\"https://github.com/alibaba/fastjson/wiki/Quick-Start-CN\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/fastjson/wiki/Quick-Start-CN</a></p>\n<h3 id=\"3-1-什么是-fastjson\"><a href=\"#3-1-什么是-fastjson\" class=\"headerlink\" title=\"3.1 什么是 fastjson?\"></a>3.1 什么是 fastjson?</h3><p>fastjson是阿里巴巴的开源JSON解析库，它可以解析JSON格式的字符串，支持将Java Bean序列化为JSON字符串，也可以从JSON字符串反序列化到JavaBean。</p>\n<h3 id=\"3-2-引入-maven\"><a href=\"#3-2-引入-maven\" class=\"headerlink\" title=\"3.2 引入 maven\"></a>3.2 引入 maven</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.28<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-json-字符串与-Java-对象互转\"><a href=\"#3-3-json-字符串与-Java-对象互转\" class=\"headerlink\" title=\"3.3 json 字符串与 Java 对象互转\"></a>3.3 json 字符串与 Java 对象互转</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test4</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Student student = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"julia\"</span>, <span class=\"number\">16</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 将Java对象转为json字符串</span></span><br><span class=\"line\">    String jsonString = JSON.toJSONString(student);</span><br><span class=\"line\">    System.out.println(jsonString);</span><br><span class=\"line\">    <span class=\"comment\">// 将json字符串转为Java对象</span></span><br><span class=\"line\">    Student student1 = JSON.parseObject(jsonString, Student<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    System.out.println(student1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 输出：</span></span><br><span class=\"line\"><span class=\"comment\">&#123;\"age\":16,\"isValid\":true,\"name\":\"julia\"&#125;</span></span><br><span class=\"line\"><span class=\"comment\">Student&#123;name='julia', age=16, isValid=true&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-json-数组转为-List-lt-T-gt\"><a href=\"#3-4-json-数组转为-List-lt-T-gt\" class=\"headerlink\" title=\"3.4 json 数组转为 List&lt;T&gt;\"></a>3.4 json 数组转为 List&lt;T&gt;</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    String jsonStr = <span class=\"string\">\"[&#123;\\\"name\\\":\\\"julia\\\", \\\"age\\\":16, \\\"isValid\\\":true&#125;, \"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"&#123;\\\"name\\\":\\\"fan\\\", \\\"age\\\":17, \\\"isValid\\\":false&#125;, \"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"&#123;\\\"name\\\":\\\"jiang\\\", \\\"age\\\":18, \\\"isValid\\\":true&#125;]\"</span>;</span><br><span class=\"line\">    List&lt;Student&gt; students = JSONArray.parseArray(jsonStr, Student<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    System.out.println(students);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">输出：</span></span><br><span class=\"line\"><span class=\"comment\">[Student&#123;name='julia', age=16, isValid=true&#125;, Student&#123;name='fan', age=17, isValid=false&#125;, Student&#123;name='jiang', age=18, isValid=true&#125;]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-5-json-复杂数据转为-Java-对象\"><a href=\"#3-5-json-复杂数据转为-Java-对象\" class=\"headerlink\" title=\"3.5 json 复杂数据转为 Java 对象\"></a>3.5 json 复杂数据转为 Java 对象</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    String jsonStr = <span class=\"string\">\"&#123;\\\"name\\\":\\\"teacher\\\", \\\"age\\\":30, \\\"students\\\":\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"[&#123;\\\"name\\\":\\\"julia\\\",\\\"age\\\":16,\\\"isValid\\\":true&#125;,\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"&#123;\\\"name\\\":\\\"fan\\\",\\\"age\\\":17,\\\"isValid\\\":false&#125;]&#125;\"</span>;</span><br><span class=\"line\">    Teacher teacher = JSON.parseObject(jsonStr, Teacher<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    System.out.println(teacher);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Student student : teacher.getStudents()) &#123;</span><br><span class=\"line\">        System.out.println(student.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*输出：</span></span><br><span class=\"line\"><span class=\"comment\">Teacher&#123;name='teacher', age=30, students=[Student&#123;name='julia', age=16, isValid=true&#125;, Student&#123;name='fan', age=17, isValid=false&#125;]&#125;</span></span><br><span class=\"line\"><span class=\"comment\">julia</span></span><br><span class=\"line\"><span class=\"comment\">fan</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-fastjson-和-json-lib-对比\"><a href=\"#4-fastjson-和-json-lib-对比\" class=\"headerlink\" title=\"4. fastjson 和 json-lib 对比\"></a>4. fastjson 和 json-lib 对比</h2><p>就以上三种使用途径来看，fastjson 确实更加方便。</p>\n<h2 id=\"5-json-数据的传输与接收\"><a href=\"#5-json-数据的传输与接收\" class=\"headerlink\" title=\"5. json 数据的传输与接收\"></a>5. json 数据的传输与接收</h2><p>JSON 通常用于与服务端交换数据，在向服务器发送数据时一般是字符串。我们可以使用 <code>JSON.stringify()</code> 方法将 JavaScript 对象转换为字符串。</p>\n<p>向服务器发送请求：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> param = <span class=\"built_in\">JSON</span>.stringify(searchList);</span><br><span class=\"line\">$.post(url, &#123;</span><br><span class=\"line\">            searchList:param</span><br><span class=\"line\">        &#125;,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">/*...*/</span></span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>springboot 后台 controller 接收：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/search\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map <span class=\"title\">search</span><span class=\"params\">(String searchList)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将前台接收的 json 数组转化为实体SearchList的列表</span></span><br><span class=\"line\">    List&lt;SearchList&gt; lists = JSONArray.parseArray(searchList, SearchList<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*...*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-参考文献\"><a href=\"#6-参考文献\" class=\"headerlink\" title=\"6. 参考文献\"></a>6. 参考文献</h2><ol>\n<li><a href=\"https://www.runoob.com/json/json-tutorial.html\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/json/json-tutorial.html</a></li>\n</ol>"},{"title":"KMP算法","date":"2020-09-27T08:17:33.000Z","typora-copy-images-to":"..\\pictures","_content":"\n本文主要介绍了 KMP算法的基本思想、代码、优化以及时间复杂度分析。\n\n## 1. KMP算法思想\n\n### 1.1 简介\n\n**字符串匹配** 是计算机的基本任务之一。举例来说，即有一个字符串\"BBC ABCDAB ABCDABCDABDE\"，判断该字符串中是否包含另一个字符串\"ABCDABD\"？许多算法可以完成这个任务，[Knuth-Morris-Pratt算法](https://zh.wikipedia.org/wiki/克努斯-莫里斯-普拉特算法)（简称KMP）是最常用的之一。它以三个发明者命名，其中K代表著名科学家Donald Knuth。KMP算法可在一个字符串S内查找一个词P的出现位置，如果有返回P的起始索引，否则返回-1.\n\n接下来，我会先举例对KMP算法的思路进行解释（不涉及任何代码）。\n\n<!--more-->\n\n### 1.2 基本思路\n\n1. 首先，字符串\"BBC ABCDAB ABCDABCDABDE\"（称为文本串）的第一个字符与模式串\"ABCDABD\"的第一个字符，进行比较。因为B与A不匹配，所以搜索词后移一位。\n\n   <img src=\"/pictures/bg2013050103.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n2. 因为B与A不匹配，模式串再往后移。\n\n   <img src=\"/pictures/bg2013050104.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n3. 就这样，直到文本串有一个字符，与模式串的第一个字符相同为止。\n\n   <img src=\"/pictures/bg2013050105.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n4. 接着比较文本串和模式串的下一个字符，还是相同。\n\n   <img src=\"/pictures/bg2013050106.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n5. 直到字符串有一个字符，与搜索词对应的字符不相同为止。\n\n   <img src=\"/pictures/bg2013050107.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n6. 这时，最自然的反应是，将搜索词整个后移一位，再从头逐个比较。这样做固然可行，但是效率很差，因为你要把\"搜索位置\"移到已经比较过的位置，重比一遍。\n\n   <img src=\"/pictures/bg2013050108.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n7. 一个基本事实是，当空格与D不匹配时，你其实知道前面六个字符是\"ABCDAB\"。KMP算法的想法是，**设法利用这个已知信息，不要把\"搜索位置\"移回已经比较过的位置，继续把它向后移，这样就提高了效率**。\n\n   <img src=\"/pictures/bg2013050107-1594975043794.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n8. 怎么做到这一点呢？可以针对搜索词，算出一张《部分匹配表》（Partial Match Table）。这张表是如何产生的，后面再介绍，这里只要会用就可以了。\n\n   <img src=\"/pictures/bg2013050109.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n9. 已知空格与D不匹配时，前面六个字符\"ABCDAB\"是匹配的。查表可知，最后一个匹配字符B（不匹配字符的前一个字符）对应的\"部分匹配值\"为2，因此按照下面的公式算出向后移动的位数：\n\n   ```java\n   移动位数 = 已匹配的字符数 - 失配字符的前一位字符的部分匹配值\n   ```\n\n   因为 6 - 2 等于4，所以将搜索词向后移动4位。\n\n10. 因为空格与Ｃ不匹配，搜索词还要继续往后移。这时，已匹配的字符数为2（\"AB\"），对应的\"部分匹配值\"为0。所以，移动位数 = 2 - 0，结果为 2，于是将搜索词向后移2位。\n\n    <img src=\"/pictures/bg2013050110.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n11. 因为空格与A不匹配，继续后移一位。\n\n    <img src=\"/pictures/bg2013050111.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n12. 逐位比较，直到发现C与D不匹配。于是，移动位数 = 6 - 2，继续将搜索词向后移动4位。\n\n    <img src=\"/pictures/bg2013050112.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n13. 逐位比较，直到搜索词的最后一位，发现完全匹配，于是搜索完成。如果还要继续搜索（即找出全部匹配），移动位数 = 7 - 0，再将搜索词向后移动7位，这里就不再重复了。\n\n    <img src=\"/pictures/bg2013050113.png\" alt=\"img\" style=\"zoom: 67%;\" />\n\n14. 下面介绍《部分匹配表》是如何产生的。\n\n    首先，要了解两个概念：\"前缀\"和\"后缀\"。 \"前缀\"指除了最后一个字符以外，一个字符串的全部头部组合；\"后缀\"指除了第一个字符以外，一个字符串的全部尾部组合。\n\n    <img src=\"/pictures/bg2013050114.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n15. \"部分匹配值\"就是\"前缀\"和\"后缀\"的最大公共元素长度。以\"ABCDABD\"为例，计算过程如下：\n\n    ![img](/pictures/20140725231726921)\n    \n16. \"部分匹配\"的实质是，有时候，字符串头部和尾部会有重复。比如，\"ABCDAB\"之中有两个\"AB\"，那么它的\"部分匹配值\"就是2（\"AB\"的长度）。搜索词移动的时候，第一个\"AB\"向后移动4位（字符串长度-部分匹配值），就可以来到第二个\"AB\"的位置。\n\n    <img src=\"/pictures/bg2013050112-1594975805920.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n到此，我们对于KMP的基本思路有了一个大致的了解，下一部分介绍KMP具体算法细节、代码及优化。\n\n## 2. KMP算法代码及优化\n\n假设现在我们面临这样一个问题：有一个文本串S，和一个模式串P，现在要查找P在S中的位置，怎么查找呢？\n\n### 2.1 暴力匹配算法\n\n如果用暴力匹配的思路，并假设现在文本串S匹配到 i 位置，模式串P匹配到 j 位置，则有：\n\n- 如果当前字符匹配成功（即S[i] == P[j]），则i++，j++，继续匹配下一个字符；\n- 如果失配（即S[i]! = P[j]），令i = i - (j - 1)，j = 0。相当于每次匹配失败时，i 回溯，j 被置为0。\n\n暴力匹配代码如下：\n\n```java\nprivate int ViolentMatch(char[] s, char[] p){\n    int sLen = s.length;\n    int pLen = p.length;\n\n    int i = 0, j = 0;\n    while (i < sLen && j < pLen){\n        if(s[i] == p[j]){\n            i++;\n            j++;\n        }else{\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if(j == pLen){\n        return i - j;\n    }else{\n        return -1;\n    }\n}\n```\n\n### 2.2 KMP算法\n\n#### 2.2.1 求解 next 数组\n\n##### 2.2.1.1 基本思路\n\n前文已经计算过“部分匹配表”，即前缀和后缀的最大公共元素长度，如下图所示：\n\n![img](/pictures/20140725231726921)\n\n由前文可知，失配时，模式串向右移动的位数公式为：\n\n```bash\n移动位数 = 已匹配的字符数 - 失配字符的前一位字符的最大公共元素长度\n```\n\n由此我们发现，当匹配一个字符失配时，我们并不会考虑当前字符，而是看失配字符的前一个字符的最大公共元素长度，如此，便引出了next数组。**next 数组相当于最大长度值整体向右移动一位，然后初值赋为-1.** 因而，对于给定的模式串，它的最大长度及next数组分别如下：\n\n![img](/pictures/20140728110939595)\n\n求得next数组之后，失配时模式串向右移动的位数为：\n\n```bash\n移动位数 = 失配字符所在位置 - 失配字符对应的next值\n```\n\n##### 2.2.1.2 代码计算 next 数组\n\n1. 如果**对于值 k, 已有 p0 p1, ..., pk-1 = pj-k pj-k+1, ..., pj-1，相当于next[j] = k**。究其本质，**next[j] = k 代表p[j] 之前的模式串子串中，有长度为k 的相同前缀和后缀**。有了这个next 数组，在KMP匹配中，当模式串中 j 处的字符失配时，下一步用next[j]处的字符继续跟文本串匹配，相当于模式串向右移动 j - next[j] 位。\n\n2. 下面的问题是：已知next [0, ..., j]，如何求出next [j + 1]呢？\n\n   - 若p[k] == p[j]，则next[j + 1] = next [j] + 1 = k + 1。\n\n     如下图所示，假定给定模式串ABCDABCE，且已知next [j] = k（相当于“p0 pk-1” = “pj-k pj-1” = AB，可以看出k为2），现要求next [j + 1]等于多少？因为pk = pj = C，所以next[j + 1] = next[j] + 1 = k + 1（可以看出next[j + 1] = 3）。代表字符E前的模式串中，有长度k+1 的相同前缀后缀。\n\n     ![img](/pictures/20140729182154066)\n\n   - 若p[k ] ≠ p[j]，如果此时 p[next[k] ] == p[j]，则next[ j + 1 ] =  next[k] + 1，否则继续递归前缀索引k = next[k]，而后重复此过程。\n\n     如下图所示，当pk != pj后，字符E前有多大长度的相同前缀后缀呢？很明显，因为C不同于D，所以ABC 跟 ABD不相同，即字符E前的模式串没有长度为k+1的相同前缀后缀，也就不能再简单的令：next[j + 1] = next[j] + 1 。所以，咱们只能去寻找长度更短一点的相同前缀后缀。  \n     ![img](/pictures/20140729181940812)   \n\n     结合上图来讲，若能在前缀“ p0 pk-1 pk ” 中不断的递归前缀索引k = next [k]，找到一个字符pk’ 也为D，代表pk’ = pj，且满足p0 pk'-1 pk' = pj-k' pj-1 pj，则最大相同的前缀后缀长度为k' + 1，从而next [j + 1] = k’ + 1 = next [k' ] + 1。否则前缀中没有D，则代表没有相同的前缀后缀，next [j + 1] = 0。\n\n     那为何递归前缀索引k = next[k]，就能找到长度更短的相同前缀后缀呢？ 这又归根到next数组的含义。**我们拿前缀 p0 pk-1 pk 去跟后缀pj-k pj-1 pj匹配，如果pk 跟pj 失配，下一步就是用p[next[k]] 去跟pj 继续匹配，如果p[ next[k] ]跟pj还是不匹配，则需要寻找长度更短的相同前缀后缀，即下一步用p[ next[ next[k] ] ]去跟pj匹配。**\n\n3. 综上，可以通过递推求得 next 数组，代码如下：\n\n   ```java\n   public int[] getNext(char[] p){\n       int pLen = p.length;\n       int[] next = new int[pLen];\n       next[0] = -1;\n       int k = -1;\n       int j = 0;\n       while (j < pLen - 1){\n           // p[k] 表示前缀；p[j] 表示后缀\n           if(k == -1 || p[j] == p[k]){\n               ++k;\n               next[++j] = k;\n           }else{\n               k = next[k];\n           }\n       }\n       return next;\n   }\n   ```\n\n##### 2.2.1.3 总结 next 数组含义\n\n1. 代表失配字符之前的字符串中，有多大长度的相同前缀后缀。\n2. 在某个字符失配后，next 值会告诉你下一步匹配中，模式串应该跳到哪个位置。如果next [j] 等于0或 -1，则跳到模式串的开头字符；若next [j] = k 且 k > 0，代表下次匹配跳到 j 之前的某个字符，而不是跳到开头，且具体跳过了k 个字符。\n\n#### 2.2.2 KMP 算法\n\n根据上文的分析，KMP算法的代码如下：\n\n```java\npublic int kmp(char[] s, char[] p, int[] next){\n    int i = 0, j = 0;\n    int sLen = s.length;\n    int pLen = p.length;\n    while (i < sLen && j < pLen){\n        if(j == -1 || s[i] == p[j]){\n            i++;\n            j++;\n        }else{\n            j = next[j];\n        }\n    }\n    if(j == pLen){\n        return i - j;\n    }else{\n        return -1;\n    }\n}\n```\n\n#### 2.2.3 next 数组的优化\n\n行文至此，我们全面了解了KMP算法的基本思路、流程、代码以及next 数组的求解，但忽略了一个小问题。\n\n比如，如果用之前的next 数组方法求模式串“abab”的 next 数组，可得其 next 数组为 -1 0 0 1，当它跟下图中的文本串去匹配的时候，发现 b 跟 c 失配，于是模式串右移 j - next[j] = 3 - 1 = 2位。\n\n<img src=\"/pictures/8394323_1308075859Zfue.jpg\" alt=\"8394323_1308075859Zfue\" style=\"zoom:67%;\" />\n\n右移2位后，b又跟c失配。事实上，因为在上一步的匹配中，已经得知p[3] = b，与s[3] = c失配，而右移两位之后，让p[ next[3] ] = p[1] = b 再跟s[3]匹配时，必然失配。问题出在哪呢？\n\n<img src=\"/pictures/8394323_13080758591kyV-1595069195969.jpg\" alt=\"8394323_13080758591kyV\" style=\"zoom:67%;\" />\n\n问题出在不该出现p[j] = p[ next[j] ]。为什么呢？理由是：当p[j] != s[i] 时，下次匹配必然是p[ next [j]] 跟s[i]匹配，如果p[j] = p[ next[j] ]，必然导致后一步匹配失败（因为p[j]已经跟s[i]失配，然后你还用跟p[j]等同的值p[next[j]]去跟s[i]匹配，很显然，必然失配），所以不能允许p[j] = p[ next[j ]]。如果出现了p[j] = p[ next[j] ]咋办呢？如果出现了，则需要再次递归，即令next[j] = next[ next[j] ]。\n\n因此，求解 next 数组的代码优化如下：\n\n```java\npublic int[] getNextval(char[] p){\n    int pLen = p.length;\n    int[] next = new int[pLen];\n    next[0] = -1;\n    int k = -1;\n    int j = 0;\n    while (j < pLen - 1){\n        // p[k] 表示前缀；p[j] 表示后缀\n        if(k == -1 || p[j] == p[k]){\n            ++k;\n            ++j;\n            if(p[j] != p[k]){\n                next[j] = k;\n            }else{\n                // 因为不能出现p[j] = p[next[j]]，所以当出现时需要继续递归，k = next[k] = next[next[k]]\n                next[j] = next[k];\n            }\n\n        }else{\n            k = next[k];\n        }\n    }\n    return next;\n}\n```\n\n## 3. KMP 算法时间复杂度分析\n\n我们先来回顾一下KMP算法的流程，假设现在文本串S匹配到 i 位置，模式串P匹配到 j 位置：\n\n1. 如果j = -1，或者当前字符匹配成功（即S[i] == P[j]），都令i++，j++，继续匹配下一个字符；\n2. 如果j != -1，且当前字符匹配失败（即S[i] != P[j]），则令 i 不变，j = next[j]。此举意味着失配时，模式串P相对于文本串S向右移动了j - next [j] 位。\n\n我们发现如果某个字符匹配成功，模式串首字符的位置保持不动，仅仅是i++、j++；如果匹配失配，i 不变（即 i 不回溯），模式串会跳过匹配过的next [j]个字符。整个算法最坏的情况是，当模式串首字符位于i - j的位置时才匹配成功，算法结束。\n\n所以，如果文本串的长度为n，模式串的长度为m，那么匹配过程的时间复杂度为O(n)，算上计算next的O(m)时间，KMP的整体时间复杂度为O(m + n)。\n\n## 4. 例题：实现 strStr() [28]\n\n题目来源：[28. 实现 strStr()](https://leetcode-cn.com/problems/implement-strstr/)；另一种动态规划在我的另一篇博客：[这里]().\n\n### 题目描述\n\n实现 strStr() 函数。\n\n给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。\n\n示例 1:\n\n```bash\n输入: haystack = \"hello\", needle = \"ll\"\n输出: 2\n```\n\n示例 2:\n\n```bash\n输入: haystack = \"aaaaa\", needle = \"bba\"\n输出: -1\n```\n\n\n说明:\n\n当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。\n\n对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。\n\n### 代码\n\n````java\npublic int strStr(String haystack, String needle) {\n    if(needle.length() == 0){return 0;}\n    char[] s = haystack.toCharArray();\n    char[] p = needle.toCharArray();\n    int[] next = getNextval(p);\n    return kmp(s, p, next);\n}\n\nprivate int kmp(char[] s, char[] p, int[] next){\n    int i = 0, j = 0;\n    int sLen = s.length;\n    int pLen = p.length;\n    while (i < sLen && j < pLen){\n        if(j == -1 || s[i] == p[j]){\n            i++;\n            j++;\n        }else{\n            j = next[j];\n        }\n    }\n    if(j == pLen){\n        return i - j;\n    }else{\n        return -1;\n    }\n}\n\nprivate int[] getNextval(char[] p){\n    int pLen = p.length;\n    int[] next = new int[pLen];\n    next[0] = -1;\n    int k = -1;\n    int j = 0;\n    while (j < pLen - 1){\n        // p[k] 表示前缀；p[j] 表示后缀\n        if(k == -1 || p[j] == p[k]){\n            ++k;\n            ++j;\n            if(p[j] != p[k]){\n                next[j] = k;\n            }else{\n                // 因为不能出现p[j] = p[next[j]]，所以当出现时需要继续递归，k = next[k] = next[next[k]]\n                next[j] = next[k];\n            }\n\n        }else{\n            k = next[k];\n        }\n    }\n    return next;\n}\n````\n\n## 5. 参考引用\n\n1. https://blog.csdn.net/v_july_v/article/details/7041827\n\n2. [http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html](http://www.ruanyifeng.com/blog/2013/05/Knuth–Morris–Pratt_algorithm.html)\n\n\n\n","source":"_posts/KMP算法.md","raw":"---\ntitle: KMP算法\ndate: 2020-09-27 16:17:33\ntags:\n  - String\n  - Algorithm\n  - KMP\ncategories: Algorithm\ntypora-copy-images-to: ..\\pictures\n---\n\n本文主要介绍了 KMP算法的基本思想、代码、优化以及时间复杂度分析。\n\n## 1. KMP算法思想\n\n### 1.1 简介\n\n**字符串匹配** 是计算机的基本任务之一。举例来说，即有一个字符串\"BBC ABCDAB ABCDABCDABDE\"，判断该字符串中是否包含另一个字符串\"ABCDABD\"？许多算法可以完成这个任务，[Knuth-Morris-Pratt算法](https://zh.wikipedia.org/wiki/克努斯-莫里斯-普拉特算法)（简称KMP）是最常用的之一。它以三个发明者命名，其中K代表著名科学家Donald Knuth。KMP算法可在一个字符串S内查找一个词P的出现位置，如果有返回P的起始索引，否则返回-1.\n\n接下来，我会先举例对KMP算法的思路进行解释（不涉及任何代码）。\n\n<!--more-->\n\n### 1.2 基本思路\n\n1. 首先，字符串\"BBC ABCDAB ABCDABCDABDE\"（称为文本串）的第一个字符与模式串\"ABCDABD\"的第一个字符，进行比较。因为B与A不匹配，所以搜索词后移一位。\n\n   <img src=\"/pictures/bg2013050103.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n2. 因为B与A不匹配，模式串再往后移。\n\n   <img src=\"/pictures/bg2013050104.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n3. 就这样，直到文本串有一个字符，与模式串的第一个字符相同为止。\n\n   <img src=\"/pictures/bg2013050105.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n4. 接着比较文本串和模式串的下一个字符，还是相同。\n\n   <img src=\"/pictures/bg2013050106.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n5. 直到字符串有一个字符，与搜索词对应的字符不相同为止。\n\n   <img src=\"/pictures/bg2013050107.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n6. 这时，最自然的反应是，将搜索词整个后移一位，再从头逐个比较。这样做固然可行，但是效率很差，因为你要把\"搜索位置\"移到已经比较过的位置，重比一遍。\n\n   <img src=\"/pictures/bg2013050108.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n7. 一个基本事实是，当空格与D不匹配时，你其实知道前面六个字符是\"ABCDAB\"。KMP算法的想法是，**设法利用这个已知信息，不要把\"搜索位置\"移回已经比较过的位置，继续把它向后移，这样就提高了效率**。\n\n   <img src=\"/pictures/bg2013050107-1594975043794.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n8. 怎么做到这一点呢？可以针对搜索词，算出一张《部分匹配表》（Partial Match Table）。这张表是如何产生的，后面再介绍，这里只要会用就可以了。\n\n   <img src=\"/pictures/bg2013050109.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n9. 已知空格与D不匹配时，前面六个字符\"ABCDAB\"是匹配的。查表可知，最后一个匹配字符B（不匹配字符的前一个字符）对应的\"部分匹配值\"为2，因此按照下面的公式算出向后移动的位数：\n\n   ```java\n   移动位数 = 已匹配的字符数 - 失配字符的前一位字符的部分匹配值\n   ```\n\n   因为 6 - 2 等于4，所以将搜索词向后移动4位。\n\n10. 因为空格与Ｃ不匹配，搜索词还要继续往后移。这时，已匹配的字符数为2（\"AB\"），对应的\"部分匹配值\"为0。所以，移动位数 = 2 - 0，结果为 2，于是将搜索词向后移2位。\n\n    <img src=\"/pictures/bg2013050110.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n11. 因为空格与A不匹配，继续后移一位。\n\n    <img src=\"/pictures/bg2013050111.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n12. 逐位比较，直到发现C与D不匹配。于是，移动位数 = 6 - 2，继续将搜索词向后移动4位。\n\n    <img src=\"/pictures/bg2013050112.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n13. 逐位比较，直到搜索词的最后一位，发现完全匹配，于是搜索完成。如果还要继续搜索（即找出全部匹配），移动位数 = 7 - 0，再将搜索词向后移动7位，这里就不再重复了。\n\n    <img src=\"/pictures/bg2013050113.png\" alt=\"img\" style=\"zoom: 67%;\" />\n\n14. 下面介绍《部分匹配表》是如何产生的。\n\n    首先，要了解两个概念：\"前缀\"和\"后缀\"。 \"前缀\"指除了最后一个字符以外，一个字符串的全部头部组合；\"后缀\"指除了第一个字符以外，一个字符串的全部尾部组合。\n\n    <img src=\"/pictures/bg2013050114.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n15. \"部分匹配值\"就是\"前缀\"和\"后缀\"的最大公共元素长度。以\"ABCDABD\"为例，计算过程如下：\n\n    ![img](/pictures/20140725231726921)\n    \n16. \"部分匹配\"的实质是，有时候，字符串头部和尾部会有重复。比如，\"ABCDAB\"之中有两个\"AB\"，那么它的\"部分匹配值\"就是2（\"AB\"的长度）。搜索词移动的时候，第一个\"AB\"向后移动4位（字符串长度-部分匹配值），就可以来到第二个\"AB\"的位置。\n\n    <img src=\"/pictures/bg2013050112-1594975805920.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n到此，我们对于KMP的基本思路有了一个大致的了解，下一部分介绍KMP具体算法细节、代码及优化。\n\n## 2. KMP算法代码及优化\n\n假设现在我们面临这样一个问题：有一个文本串S，和一个模式串P，现在要查找P在S中的位置，怎么查找呢？\n\n### 2.1 暴力匹配算法\n\n如果用暴力匹配的思路，并假设现在文本串S匹配到 i 位置，模式串P匹配到 j 位置，则有：\n\n- 如果当前字符匹配成功（即S[i] == P[j]），则i++，j++，继续匹配下一个字符；\n- 如果失配（即S[i]! = P[j]），令i = i - (j - 1)，j = 0。相当于每次匹配失败时，i 回溯，j 被置为0。\n\n暴力匹配代码如下：\n\n```java\nprivate int ViolentMatch(char[] s, char[] p){\n    int sLen = s.length;\n    int pLen = p.length;\n\n    int i = 0, j = 0;\n    while (i < sLen && j < pLen){\n        if(s[i] == p[j]){\n            i++;\n            j++;\n        }else{\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if(j == pLen){\n        return i - j;\n    }else{\n        return -1;\n    }\n}\n```\n\n### 2.2 KMP算法\n\n#### 2.2.1 求解 next 数组\n\n##### 2.2.1.1 基本思路\n\n前文已经计算过“部分匹配表”，即前缀和后缀的最大公共元素长度，如下图所示：\n\n![img](/pictures/20140725231726921)\n\n由前文可知，失配时，模式串向右移动的位数公式为：\n\n```bash\n移动位数 = 已匹配的字符数 - 失配字符的前一位字符的最大公共元素长度\n```\n\n由此我们发现，当匹配一个字符失配时，我们并不会考虑当前字符，而是看失配字符的前一个字符的最大公共元素长度，如此，便引出了next数组。**next 数组相当于最大长度值整体向右移动一位，然后初值赋为-1.** 因而，对于给定的模式串，它的最大长度及next数组分别如下：\n\n![img](/pictures/20140728110939595)\n\n求得next数组之后，失配时模式串向右移动的位数为：\n\n```bash\n移动位数 = 失配字符所在位置 - 失配字符对应的next值\n```\n\n##### 2.2.1.2 代码计算 next 数组\n\n1. 如果**对于值 k, 已有 p0 p1, ..., pk-1 = pj-k pj-k+1, ..., pj-1，相当于next[j] = k**。究其本质，**next[j] = k 代表p[j] 之前的模式串子串中，有长度为k 的相同前缀和后缀**。有了这个next 数组，在KMP匹配中，当模式串中 j 处的字符失配时，下一步用next[j]处的字符继续跟文本串匹配，相当于模式串向右移动 j - next[j] 位。\n\n2. 下面的问题是：已知next [0, ..., j]，如何求出next [j + 1]呢？\n\n   - 若p[k] == p[j]，则next[j + 1] = next [j] + 1 = k + 1。\n\n     如下图所示，假定给定模式串ABCDABCE，且已知next [j] = k（相当于“p0 pk-1” = “pj-k pj-1” = AB，可以看出k为2），现要求next [j + 1]等于多少？因为pk = pj = C，所以next[j + 1] = next[j] + 1 = k + 1（可以看出next[j + 1] = 3）。代表字符E前的模式串中，有长度k+1 的相同前缀后缀。\n\n     ![img](/pictures/20140729182154066)\n\n   - 若p[k ] ≠ p[j]，如果此时 p[next[k] ] == p[j]，则next[ j + 1 ] =  next[k] + 1，否则继续递归前缀索引k = next[k]，而后重复此过程。\n\n     如下图所示，当pk != pj后，字符E前有多大长度的相同前缀后缀呢？很明显，因为C不同于D，所以ABC 跟 ABD不相同，即字符E前的模式串没有长度为k+1的相同前缀后缀，也就不能再简单的令：next[j + 1] = next[j] + 1 。所以，咱们只能去寻找长度更短一点的相同前缀后缀。  \n     ![img](/pictures/20140729181940812)   \n\n     结合上图来讲，若能在前缀“ p0 pk-1 pk ” 中不断的递归前缀索引k = next [k]，找到一个字符pk’ 也为D，代表pk’ = pj，且满足p0 pk'-1 pk' = pj-k' pj-1 pj，则最大相同的前缀后缀长度为k' + 1，从而next [j + 1] = k’ + 1 = next [k' ] + 1。否则前缀中没有D，则代表没有相同的前缀后缀，next [j + 1] = 0。\n\n     那为何递归前缀索引k = next[k]，就能找到长度更短的相同前缀后缀呢？ 这又归根到next数组的含义。**我们拿前缀 p0 pk-1 pk 去跟后缀pj-k pj-1 pj匹配，如果pk 跟pj 失配，下一步就是用p[next[k]] 去跟pj 继续匹配，如果p[ next[k] ]跟pj还是不匹配，则需要寻找长度更短的相同前缀后缀，即下一步用p[ next[ next[k] ] ]去跟pj匹配。**\n\n3. 综上，可以通过递推求得 next 数组，代码如下：\n\n   ```java\n   public int[] getNext(char[] p){\n       int pLen = p.length;\n       int[] next = new int[pLen];\n       next[0] = -1;\n       int k = -1;\n       int j = 0;\n       while (j < pLen - 1){\n           // p[k] 表示前缀；p[j] 表示后缀\n           if(k == -1 || p[j] == p[k]){\n               ++k;\n               next[++j] = k;\n           }else{\n               k = next[k];\n           }\n       }\n       return next;\n   }\n   ```\n\n##### 2.2.1.3 总结 next 数组含义\n\n1. 代表失配字符之前的字符串中，有多大长度的相同前缀后缀。\n2. 在某个字符失配后，next 值会告诉你下一步匹配中，模式串应该跳到哪个位置。如果next [j] 等于0或 -1，则跳到模式串的开头字符；若next [j] = k 且 k > 0，代表下次匹配跳到 j 之前的某个字符，而不是跳到开头，且具体跳过了k 个字符。\n\n#### 2.2.2 KMP 算法\n\n根据上文的分析，KMP算法的代码如下：\n\n```java\npublic int kmp(char[] s, char[] p, int[] next){\n    int i = 0, j = 0;\n    int sLen = s.length;\n    int pLen = p.length;\n    while (i < sLen && j < pLen){\n        if(j == -1 || s[i] == p[j]){\n            i++;\n            j++;\n        }else{\n            j = next[j];\n        }\n    }\n    if(j == pLen){\n        return i - j;\n    }else{\n        return -1;\n    }\n}\n```\n\n#### 2.2.3 next 数组的优化\n\n行文至此，我们全面了解了KMP算法的基本思路、流程、代码以及next 数组的求解，但忽略了一个小问题。\n\n比如，如果用之前的next 数组方法求模式串“abab”的 next 数组，可得其 next 数组为 -1 0 0 1，当它跟下图中的文本串去匹配的时候，发现 b 跟 c 失配，于是模式串右移 j - next[j] = 3 - 1 = 2位。\n\n<img src=\"/pictures/8394323_1308075859Zfue.jpg\" alt=\"8394323_1308075859Zfue\" style=\"zoom:67%;\" />\n\n右移2位后，b又跟c失配。事实上，因为在上一步的匹配中，已经得知p[3] = b，与s[3] = c失配，而右移两位之后，让p[ next[3] ] = p[1] = b 再跟s[3]匹配时，必然失配。问题出在哪呢？\n\n<img src=\"/pictures/8394323_13080758591kyV-1595069195969.jpg\" alt=\"8394323_13080758591kyV\" style=\"zoom:67%;\" />\n\n问题出在不该出现p[j] = p[ next[j] ]。为什么呢？理由是：当p[j] != s[i] 时，下次匹配必然是p[ next [j]] 跟s[i]匹配，如果p[j] = p[ next[j] ]，必然导致后一步匹配失败（因为p[j]已经跟s[i]失配，然后你还用跟p[j]等同的值p[next[j]]去跟s[i]匹配，很显然，必然失配），所以不能允许p[j] = p[ next[j ]]。如果出现了p[j] = p[ next[j] ]咋办呢？如果出现了，则需要再次递归，即令next[j] = next[ next[j] ]。\n\n因此，求解 next 数组的代码优化如下：\n\n```java\npublic int[] getNextval(char[] p){\n    int pLen = p.length;\n    int[] next = new int[pLen];\n    next[0] = -1;\n    int k = -1;\n    int j = 0;\n    while (j < pLen - 1){\n        // p[k] 表示前缀；p[j] 表示后缀\n        if(k == -1 || p[j] == p[k]){\n            ++k;\n            ++j;\n            if(p[j] != p[k]){\n                next[j] = k;\n            }else{\n                // 因为不能出现p[j] = p[next[j]]，所以当出现时需要继续递归，k = next[k] = next[next[k]]\n                next[j] = next[k];\n            }\n\n        }else{\n            k = next[k];\n        }\n    }\n    return next;\n}\n```\n\n## 3. KMP 算法时间复杂度分析\n\n我们先来回顾一下KMP算法的流程，假设现在文本串S匹配到 i 位置，模式串P匹配到 j 位置：\n\n1. 如果j = -1，或者当前字符匹配成功（即S[i] == P[j]），都令i++，j++，继续匹配下一个字符；\n2. 如果j != -1，且当前字符匹配失败（即S[i] != P[j]），则令 i 不变，j = next[j]。此举意味着失配时，模式串P相对于文本串S向右移动了j - next [j] 位。\n\n我们发现如果某个字符匹配成功，模式串首字符的位置保持不动，仅仅是i++、j++；如果匹配失配，i 不变（即 i 不回溯），模式串会跳过匹配过的next [j]个字符。整个算法最坏的情况是，当模式串首字符位于i - j的位置时才匹配成功，算法结束。\n\n所以，如果文本串的长度为n，模式串的长度为m，那么匹配过程的时间复杂度为O(n)，算上计算next的O(m)时间，KMP的整体时间复杂度为O(m + n)。\n\n## 4. 例题：实现 strStr() [28]\n\n题目来源：[28. 实现 strStr()](https://leetcode-cn.com/problems/implement-strstr/)；另一种动态规划在我的另一篇博客：[这里]().\n\n### 题目描述\n\n实现 strStr() 函数。\n\n给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。\n\n示例 1:\n\n```bash\n输入: haystack = \"hello\", needle = \"ll\"\n输出: 2\n```\n\n示例 2:\n\n```bash\n输入: haystack = \"aaaaa\", needle = \"bba\"\n输出: -1\n```\n\n\n说明:\n\n当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。\n\n对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。\n\n### 代码\n\n````java\npublic int strStr(String haystack, String needle) {\n    if(needle.length() == 0){return 0;}\n    char[] s = haystack.toCharArray();\n    char[] p = needle.toCharArray();\n    int[] next = getNextval(p);\n    return kmp(s, p, next);\n}\n\nprivate int kmp(char[] s, char[] p, int[] next){\n    int i = 0, j = 0;\n    int sLen = s.length;\n    int pLen = p.length;\n    while (i < sLen && j < pLen){\n        if(j == -1 || s[i] == p[j]){\n            i++;\n            j++;\n        }else{\n            j = next[j];\n        }\n    }\n    if(j == pLen){\n        return i - j;\n    }else{\n        return -1;\n    }\n}\n\nprivate int[] getNextval(char[] p){\n    int pLen = p.length;\n    int[] next = new int[pLen];\n    next[0] = -1;\n    int k = -1;\n    int j = 0;\n    while (j < pLen - 1){\n        // p[k] 表示前缀；p[j] 表示后缀\n        if(k == -1 || p[j] == p[k]){\n            ++k;\n            ++j;\n            if(p[j] != p[k]){\n                next[j] = k;\n            }else{\n                // 因为不能出现p[j] = p[next[j]]，所以当出现时需要继续递归，k = next[k] = next[next[k]]\n                next[j] = next[k];\n            }\n\n        }else{\n            k = next[k];\n        }\n    }\n    return next;\n}\n````\n\n## 5. 参考引用\n\n1. https://blog.csdn.net/v_july_v/article/details/7041827\n\n2. [http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html](http://www.ruanyifeng.com/blog/2013/05/Knuth–Morris–Pratt_algorithm.html)\n\n\n\n","slug":"KMP算法","published":1,"updated":"2020-12-26T12:26:49.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5mkvr0009nyl19wmfdl6l","content":"<p>本文主要介绍了 KMP算法的基本思想、代码、优化以及时间复杂度分析。</p>\n<h2 id=\"1-KMP算法思想\"><a href=\"#1-KMP算法思想\" class=\"headerlink\" title=\"1. KMP算法思想\"></a>1. KMP算法思想</h2><h3 id=\"1-1-简介\"><a href=\"#1-1-简介\" class=\"headerlink\" title=\"1.1 简介\"></a>1.1 简介</h3><p><strong>字符串匹配</strong> 是计算机的基本任务之一。举例来说，即有一个字符串”BBC ABCDAB ABCDABCDABDE”，判断该字符串中是否包含另一个字符串”ABCDABD”？许多算法可以完成这个任务，<a href=\"https://zh.wikipedia.org/wiki/克努斯-莫里斯-普拉特算法\" target=\"_blank\" rel=\"noopener\">Knuth-Morris-Pratt算法</a>（简称KMP）是最常用的之一。它以三个发明者命名，其中K代表著名科学家Donald Knuth。KMP算法可在一个字符串S内查找一个词P的出现位置，如果有返回P的起始索引，否则返回-1.</p>\n<p>接下来，我会先举例对KMP算法的思路进行解释（不涉及任何代码）。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"1-2-基本思路\"><a href=\"#1-2-基本思路\" class=\"headerlink\" title=\"1.2 基本思路\"></a>1.2 基本思路</h3><ol>\n<li><p>首先，字符串”BBC ABCDAB ABCDABCDABDE”（称为文本串）的第一个字符与模式串”ABCDABD”的第一个字符，进行比较。因为B与A不匹配，所以搜索词后移一位。</p>\n<img src=\"/pictures/bg2013050103.png\" alt=\"img\" style=\"zoom:67%;\" />\n</li>\n<li><p>因为B与A不匹配，模式串再往后移。</p>\n<img src=\"/pictures/bg2013050104.png\" alt=\"img\" style=\"zoom:67%;\" />\n</li>\n<li><p>就这样，直到文本串有一个字符，与模式串的第一个字符相同为止。</p>\n<img src=\"/pictures/bg2013050105.png\" alt=\"img\" style=\"zoom:67%;\" />\n</li>\n<li><p>接着比较文本串和模式串的下一个字符，还是相同。</p>\n<img src=\"/pictures/bg2013050106.png\" alt=\"img\" style=\"zoom:67%;\" />\n</li>\n<li><p>直到字符串有一个字符，与搜索词对应的字符不相同为止。</p>\n<img src=\"/pictures/bg2013050107.png\" alt=\"img\" style=\"zoom:67%;\" />\n</li>\n<li><p>这时，最自然的反应是，将搜索词整个后移一位，再从头逐个比较。这样做固然可行，但是效率很差，因为你要把”搜索位置”移到已经比较过的位置，重比一遍。</p>\n<img src=\"/pictures/bg2013050108.png\" alt=\"img\" style=\"zoom:67%;\" />\n</li>\n<li><p>一个基本事实是，当空格与D不匹配时，你其实知道前面六个字符是”ABCDAB”。KMP算法的想法是，<strong>设法利用这个已知信息，不要把”搜索位置”移回已经比较过的位置，继续把它向后移，这样就提高了效率</strong>。</p>\n<img src=\"/pictures/bg2013050107-1594975043794.png\" alt=\"img\" style=\"zoom:67%;\" />\n</li>\n<li><p>怎么做到这一点呢？可以针对搜索词，算出一张《部分匹配表》（Partial Match Table）。这张表是如何产生的，后面再介绍，这里只要会用就可以了。</p>\n<img src=\"/pictures/bg2013050109.png\" alt=\"img\" style=\"zoom:67%;\" />\n</li>\n<li><p>已知空格与D不匹配时，前面六个字符”ABCDAB”是匹配的。查表可知，最后一个匹配字符B（不匹配字符的前一个字符）对应的”部分匹配值”为2，因此按照下面的公式算出向后移动的位数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">移动位数 = 已匹配的字符数 - 失配字符的前一位字符的部分匹配值</span><br></pre></td></tr></table></figure>\n\n<p>因为 6 - 2 等于4，所以将搜索词向后移动4位。</p>\n</li>\n<li><p>因为空格与Ｃ不匹配，搜索词还要继续往后移。这时，已匹配的字符数为2（”AB”），对应的”部分匹配值”为0。所以，移动位数 = 2 - 0，结果为 2，于是将搜索词向后移2位。</p>\n<img src=\"/pictures/bg2013050110.png\" alt=\"img\" style=\"zoom:67%;\" />\n</li>\n<li><p>因为空格与A不匹配，继续后移一位。</p>\n<img src=\"/pictures/bg2013050111.png\" alt=\"img\" style=\"zoom:67%;\" />\n</li>\n<li><p>逐位比较，直到发现C与D不匹配。于是，移动位数 = 6 - 2，继续将搜索词向后移动4位。</p>\n<img src=\"/pictures/bg2013050112.png\" alt=\"img\" style=\"zoom:67%;\" />\n</li>\n<li><p>逐位比较，直到搜索词的最后一位，发现完全匹配，于是搜索完成。如果还要继续搜索（即找出全部匹配），移动位数 = 7 - 0，再将搜索词向后移动7位，这里就不再重复了。</p>\n<img src=\"/pictures/bg2013050113.png\" alt=\"img\" style=\"zoom: 67%;\" />\n</li>\n<li><p>下面介绍《部分匹配表》是如何产生的。</p>\n<p>首先，要了解两个概念：”前缀”和”后缀”。 “前缀”指除了最后一个字符以外，一个字符串的全部头部组合；”后缀”指除了第一个字符以外，一个字符串的全部尾部组合。</p>\n<img src=\"/pictures/bg2013050114.png\" alt=\"img\" style=\"zoom:67%;\" />\n</li>\n<li><p>“部分匹配值”就是”前缀”和”后缀”的最大公共元素长度。以”ABCDABD”为例，计算过程如下：</p>\n<p><img src=\"/pictures/20140725231726921\" alt=\"img\"></p>\n</li>\n<li><p>“部分匹配”的实质是，有时候，字符串头部和尾部会有重复。比如，”ABCDAB”之中有两个”AB”，那么它的”部分匹配值”就是2（”AB”的长度）。搜索词移动的时候，第一个”AB”向后移动4位（字符串长度-部分匹配值），就可以来到第二个”AB”的位置。</p>\n<img src=\"/pictures/bg2013050112-1594975805920.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n</li>\n</ol>\n<p>到此，我们对于KMP的基本思路有了一个大致的了解，下一部分介绍KMP具体算法细节、代码及优化。</p>\n<h2 id=\"2-KMP算法代码及优化\"><a href=\"#2-KMP算法代码及优化\" class=\"headerlink\" title=\"2. KMP算法代码及优化\"></a>2. KMP算法代码及优化</h2><p>假设现在我们面临这样一个问题：有一个文本串S，和一个模式串P，现在要查找P在S中的位置，怎么查找呢？</p>\n<h3 id=\"2-1-暴力匹配算法\"><a href=\"#2-1-暴力匹配算法\" class=\"headerlink\" title=\"2.1 暴力匹配算法\"></a>2.1 暴力匹配算法</h3><p>如果用暴力匹配的思路，并假设现在文本串S匹配到 i 位置，模式串P匹配到 j 位置，则有：</p>\n<ul>\n<li>如果当前字符匹配成功（即S[i] == P[j]），则i++，j++，继续匹配下一个字符；</li>\n<li>如果失配（即S[i]! = P[j]），令i = i - (j - 1)，j = 0。相当于每次匹配失败时，i 回溯，j 被置为0。</li>\n</ul>\n<p>暴力匹配代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">ViolentMatch</span><span class=\"params\">(<span class=\"keyword\">char</span>[] s, <span class=\"keyword\">char</span>[] p)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sLen = s.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pLen = p.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; sLen &amp;&amp; j &lt; pLen)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] == p[j])&#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            i = i - j + <span class=\"number\">1</span>;</span><br><span class=\"line\">            j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j == pLen)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i - j;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-KMP算法\"><a href=\"#2-2-KMP算法\" class=\"headerlink\" title=\"2.2 KMP算法\"></a>2.2 KMP算法</h3><h4 id=\"2-2-1-求解-next-数组\"><a href=\"#2-2-1-求解-next-数组\" class=\"headerlink\" title=\"2.2.1 求解 next 数组\"></a>2.2.1 求解 next 数组</h4><h5 id=\"2-2-1-1-基本思路\"><a href=\"#2-2-1-1-基本思路\" class=\"headerlink\" title=\"2.2.1.1 基本思路\"></a>2.2.1.1 基本思路</h5><p>前文已经计算过“部分匹配表”，即前缀和后缀的最大公共元素长度，如下图所示：</p>\n<p><img src=\"/pictures/20140725231726921\" alt=\"img\"></p>\n<p>由前文可知，失配时，模式串向右移动的位数公式为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">移动位数 = 已匹配的字符数 - 失配字符的前一位字符的最大公共元素长度</span><br></pre></td></tr></table></figure>\n\n<p>由此我们发现，当匹配一个字符失配时，我们并不会考虑当前字符，而是看失配字符的前一个字符的最大公共元素长度，如此，便引出了next数组。<strong>next 数组相当于最大长度值整体向右移动一位，然后初值赋为-1.</strong> 因而，对于给定的模式串，它的最大长度及next数组分别如下：</p>\n<p><img src=\"/pictures/20140728110939595\" alt=\"img\"></p>\n<p>求得next数组之后，失配时模式串向右移动的位数为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">移动位数 = 失配字符所在位置 - 失配字符对应的next值</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-2-1-2-代码计算-next-数组\"><a href=\"#2-2-1-2-代码计算-next-数组\" class=\"headerlink\" title=\"2.2.1.2 代码计算 next 数组\"></a>2.2.1.2 代码计算 next 数组</h5><ol>\n<li><p>如果<strong>对于值 k, 已有 p0 p1, …, pk-1 = pj-k pj-k+1, …, pj-1，相当于next[j] = k</strong>。究其本质，<strong>next[j] = k 代表p[j] 之前的模式串子串中，有长度为k 的相同前缀和后缀</strong>。有了这个next 数组，在KMP匹配中，当模式串中 j 处的字符失配时，下一步用next[j]处的字符继续跟文本串匹配，相当于模式串向右移动 j - next[j] 位。</p>\n</li>\n<li><p>下面的问题是：已知next [0, …, j]，如何求出next [j + 1]呢？</p>\n<ul>\n<li><p>若p[k] == p[j]，则next[j + 1] = next [j] + 1 = k + 1。</p>\n<p>如下图所示，假定给定模式串ABCDABCE，且已知next [j] = k（相当于“p0 pk-1” = “pj-k pj-1” = AB，可以看出k为2），现要求next [j + 1]等于多少？因为pk = pj = C，所以next[j + 1] = next[j] + 1 = k + 1（可以看出next[j + 1] = 3）。代表字符E前的模式串中，有长度k+1 的相同前缀后缀。</p>\n<p><img src=\"/pictures/20140729182154066\" alt=\"img\"></p>\n</li>\n<li><p>若p[k ] ≠ p[j]，如果此时 p[next[k] ] == p[j]，则next[ j + 1 ] =  next[k] + 1，否则继续递归前缀索引k = next[k]，而后重复此过程。</p>\n<p>如下图所示，当pk != pj后，字符E前有多大长度的相同前缀后缀呢？很明显，因为C不同于D，所以ABC 跟 ABD不相同，即字符E前的模式串没有长度为k+1的相同前缀后缀，也就不能再简单的令：next[j + 1] = next[j] + 1 。所以，咱们只能去寻找长度更短一点的相同前缀后缀。<br><img src=\"/pictures/20140729181940812\" alt=\"img\">   </p>\n<p>结合上图来讲，若能在前缀“ p0 pk-1 pk ” 中不断的递归前缀索引k = next [k]，找到一个字符pk’ 也为D，代表pk’ = pj，且满足p0 pk’-1 pk’ = pj-k’ pj-1 pj，则最大相同的前缀后缀长度为k’ + 1，从而next [j + 1] = k’ + 1 = next [k’ ] + 1。否则前缀中没有D，则代表没有相同的前缀后缀，next [j + 1] = 0。</p>\n<p>那为何递归前缀索引k = next[k]，就能找到长度更短的相同前缀后缀呢？ 这又归根到next数组的含义。<strong>我们拿前缀 p0 pk-1 pk 去跟后缀pj-k pj-1 pj匹配，如果pk 跟pj 失配，下一步就是用p[next[k]] 去跟pj 继续匹配，如果p[ next[k] ]跟pj还是不匹配，则需要寻找长度更短的相同前缀后缀，即下一步用p[ next[ next[k] ] ]去跟pj匹配。</strong></p>\n</li>\n</ul>\n</li>\n<li><p>综上，可以通过递推求得 next 数组，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] getNext(<span class=\"keyword\">char</span>[] p)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pLen = p.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] next = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[pLen];</span><br><span class=\"line\">    next[<span class=\"number\">0</span>] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &lt; pLen - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// p[k] 表示前缀；p[j] 表示后缀</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k == -<span class=\"number\">1</span> || p[j] == p[k])&#123;</span><br><span class=\"line\">            ++k;</span><br><span class=\"line\">            next[++j] = k;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            k = next[k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h5 id=\"2-2-1-3-总结-next-数组含义\"><a href=\"#2-2-1-3-总结-next-数组含义\" class=\"headerlink\" title=\"2.2.1.3 总结 next 数组含义\"></a>2.2.1.3 总结 next 数组含义</h5><ol>\n<li>代表失配字符之前的字符串中，有多大长度的相同前缀后缀。</li>\n<li>在某个字符失配后，next 值会告诉你下一步匹配中，模式串应该跳到哪个位置。如果next [j] 等于0或 -1，则跳到模式串的开头字符；若next [j] = k 且 k &gt; 0，代表下次匹配跳到 j 之前的某个字符，而不是跳到开头，且具体跳过了k 个字符。</li>\n</ol>\n<h4 id=\"2-2-2-KMP-算法\"><a href=\"#2-2-2-KMP-算法\" class=\"headerlink\" title=\"2.2.2 KMP 算法\"></a>2.2.2 KMP 算法</h4><p>根据上文的分析，KMP算法的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">kmp</span><span class=\"params\">(<span class=\"keyword\">char</span>[] s, <span class=\"keyword\">char</span>[] p, <span class=\"keyword\">int</span>[] next)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sLen = s.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pLen = p.length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; sLen &amp;&amp; j &lt; pLen)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j == -<span class=\"number\">1</span> || s[i] == p[j])&#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            j = next[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j == pLen)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i - j;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-3-next-数组的优化\"><a href=\"#2-2-3-next-数组的优化\" class=\"headerlink\" title=\"2.2.3 next 数组的优化\"></a>2.2.3 next 数组的优化</h4><p>行文至此，我们全面了解了KMP算法的基本思路、流程、代码以及next 数组的求解，但忽略了一个小问题。</p>\n<p>比如，如果用之前的next 数组方法求模式串“abab”的 next 数组，可得其 next 数组为 -1 0 0 1，当它跟下图中的文本串去匹配的时候，发现 b 跟 c 失配，于是模式串右移 j - next[j] = 3 - 1 = 2位。</p>\n<img src=\"/pictures/8394323_1308075859Zfue.jpg\" alt=\"8394323_1308075859Zfue\" style=\"zoom:67%;\" />\n\n<p>右移2位后，b又跟c失配。事实上，因为在上一步的匹配中，已经得知p[3] = b，与s[3] = c失配，而右移两位之后，让p[ next[3] ] = p[1] = b 再跟s[3]匹配时，必然失配。问题出在哪呢？</p>\n<img src=\"/pictures/8394323_13080758591kyV-1595069195969.jpg\" alt=\"8394323_13080758591kyV\" style=\"zoom:67%;\" />\n\n<p>问题出在不该出现p[j] = p[ next[j] ]。为什么呢？理由是：当p[j] != s[i] 时，下次匹配必然是p[ next [j]] 跟s[i]匹配，如果p[j] = p[ next[j] ]，必然导致后一步匹配失败（因为p[j]已经跟s[i]失配，然后你还用跟p[j]等同的值p[next[j]]去跟s[i]匹配，很显然，必然失配），所以不能允许p[j] = p[ next[j ]]。如果出现了p[j] = p[ next[j] ]咋办呢？如果出现了，则需要再次递归，即令next[j] = next[ next[j] ]。</p>\n<p>因此，求解 next 数组的代码优化如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] getNextval(<span class=\"keyword\">char</span>[] p)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pLen = p.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] next = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[pLen];</span><br><span class=\"line\">    next[<span class=\"number\">0</span>] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &lt; pLen - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// p[k] 表示前缀；p[j] 表示后缀</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k == -<span class=\"number\">1</span> || p[j] == p[k])&#123;</span><br><span class=\"line\">            ++k;</span><br><span class=\"line\">            ++j;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p[j] != p[k])&#123;</span><br><span class=\"line\">                next[j] = k;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 因为不能出现p[j] = p[next[j]]，所以当出现时需要继续递归，k = next[k] = next[next[k]]</span></span><br><span class=\"line\">                next[j] = next[k];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            k = next[k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-KMP-算法时间复杂度分析\"><a href=\"#3-KMP-算法时间复杂度分析\" class=\"headerlink\" title=\"3. KMP 算法时间复杂度分析\"></a>3. KMP 算法时间复杂度分析</h2><p>我们先来回顾一下KMP算法的流程，假设现在文本串S匹配到 i 位置，模式串P匹配到 j 位置：</p>\n<ol>\n<li>如果j = -1，或者当前字符匹配成功（即S[i] == P[j]），都令i++，j++，继续匹配下一个字符；</li>\n<li>如果j != -1，且当前字符匹配失败（即S[i] != P[j]），则令 i 不变，j = next[j]。此举意味着失配时，模式串P相对于文本串S向右移动了j - next [j] 位。</li>\n</ol>\n<p>我们发现如果某个字符匹配成功，模式串首字符的位置保持不动，仅仅是i++、j++；如果匹配失配，i 不变（即 i 不回溯），模式串会跳过匹配过的next [j]个字符。整个算法最坏的情况是，当模式串首字符位于i - j的位置时才匹配成功，算法结束。</p>\n<p>所以，如果文本串的长度为n，模式串的长度为m，那么匹配过程的时间复杂度为O(n)，算上计算next的O(m)时间，KMP的整体时间复杂度为O(m + n)。</p>\n<h2 id=\"4-例题：实现-strStr-28\"><a href=\"#4-例题：实现-strStr-28\" class=\"headerlink\" title=\"4. 例题：实现 strStr() [28]\"></a>4. 例题：实现 strStr() [28]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/implement-strstr/\" target=\"_blank\" rel=\"noopener\">28. 实现 strStr()</a>；另一种动态规划在我的另一篇博客：<a href=\"\">这里</a>.</p>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>实现 strStr() 函数。</p>\n<p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。</p>\n<p>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: haystack = <span class=\"string\">\"hello\"</span>, needle = <span class=\"string\">\"ll\"</span></span><br><span class=\"line\">输出: 2</span><br></pre></td></tr></table></figure>\n\n<p>示例 2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: haystack = <span class=\"string\">\"aaaaa\"</span>, needle = <span class=\"string\">\"bba\"</span></span><br><span class=\"line\">输出: -1</span><br></pre></td></tr></table></figure>\n\n\n<p>说明:</p>\n<p>当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</p>\n<p>对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">strStr</span><span class=\"params\">(String haystack, String needle)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(needle.length() == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] s = haystack.toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] p = needle.toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] next = getNextval(p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> kmp(s, p, next);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">kmp</span><span class=\"params\">(<span class=\"keyword\">char</span>[] s, <span class=\"keyword\">char</span>[] p, <span class=\"keyword\">int</span>[] next)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sLen = s.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pLen = p.length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; sLen &amp;&amp; j &lt; pLen)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j == -<span class=\"number\">1</span> || s[i] == p[j])&#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            j = next[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j == pLen)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i - j;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] getNextval(<span class=\"keyword\">char</span>[] p)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pLen = p.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] next = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[pLen];</span><br><span class=\"line\">    next[<span class=\"number\">0</span>] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &lt; pLen - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// p[k] 表示前缀；p[j] 表示后缀</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k == -<span class=\"number\">1</span> || p[j] == p[k])&#123;</span><br><span class=\"line\">            ++k;</span><br><span class=\"line\">            ++j;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p[j] != p[k])&#123;</span><br><span class=\"line\">                next[j] = k;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 因为不能出现p[j] = p[next[j]]，所以当出现时需要继续递归，k = next[k] = next[next[k]]</span></span><br><span class=\"line\">                next[j] = next[k];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            k = next[k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-参考引用\"><a href=\"#5-参考引用\" class=\"headerlink\" title=\"5. 参考引用\"></a>5. 参考引用</h2><ol>\n<li><p><a href=\"https://blog.csdn.net/v_july_v/article/details/7041827\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/v_july_v/article/details/7041827</a></p>\n</li>\n<li><p><a href=\"http://www.ruanyifeng.com/blog/2013/05/Knuth–Morris–Pratt_algorithm.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html</a></p>\n</li>\n</ol>\n","site":{"data":{}},"length":6717,"excerpt":"<p>本文主要介绍了 KMP算法的基本思想、代码、优化以及时间复杂度分析。</p>\n<h2 id=\"1-KMP算法思想\"><a href=\"#1-KMP算法思想\" class=\"headerlink\" title=\"1. KMP算法思想\"></a>1. KMP算法思想</h2><h3 id=\"1-1-简介\"><a href=\"#1-1-简介\" class=\"headerlink\" title=\"1.1 简介\"></a>1.1 简介</h3><p><strong>字符串匹配</strong> 是计算机的基本任务之一。举例来说，即有一个字符串”BBC ABCDAB ABCDABCDABDE”，判断该字符串中是否包含另一个字符串”ABCDABD”？许多算法可以完成这个任务，<a href=\"https://zh.wikipedia.org/wiki/克努斯-莫里斯-普拉特算法\" target=\"_blank\" rel=\"noopener\">Knuth-Morris-Pratt算法</a>（简称KMP）是最常用的之一。它以三个发明者命名，其中K代表著名科学家Donald Knuth。KMP算法可在一个字符串S内查找一个词P的出现位置，如果有返回P的起始索引，否则返回-1.</p>\n<p>接下来，我会先举例对KMP算法的思路进行解释（不涉及任何代码）。</p>","more":"<h3 id=\"1-2-基本思路\"><a href=\"#1-2-基本思路\" class=\"headerlink\" title=\"1.2 基本思路\"></a>1.2 基本思路</h3><ol>\n<li><p>首先，字符串”BBC ABCDAB ABCDABCDABDE”（称为文本串）的第一个字符与模式串”ABCDABD”的第一个字符，进行比较。因为B与A不匹配，所以搜索词后移一位。</p>\n<img src=\"/pictures/bg2013050103.png\" alt=\"img\" style=\"zoom:67%;\" />\n</li>\n<li><p>因为B与A不匹配，模式串再往后移。</p>\n<img src=\"/pictures/bg2013050104.png\" alt=\"img\" style=\"zoom:67%;\" />\n</li>\n<li><p>就这样，直到文本串有一个字符，与模式串的第一个字符相同为止。</p>\n<img src=\"/pictures/bg2013050105.png\" alt=\"img\" style=\"zoom:67%;\" />\n</li>\n<li><p>接着比较文本串和模式串的下一个字符，还是相同。</p>\n<img src=\"/pictures/bg2013050106.png\" alt=\"img\" style=\"zoom:67%;\" />\n</li>\n<li><p>直到字符串有一个字符，与搜索词对应的字符不相同为止。</p>\n<img src=\"/pictures/bg2013050107.png\" alt=\"img\" style=\"zoom:67%;\" />\n</li>\n<li><p>这时，最自然的反应是，将搜索词整个后移一位，再从头逐个比较。这样做固然可行，但是效率很差，因为你要把”搜索位置”移到已经比较过的位置，重比一遍。</p>\n<img src=\"/pictures/bg2013050108.png\" alt=\"img\" style=\"zoom:67%;\" />\n</li>\n<li><p>一个基本事实是，当空格与D不匹配时，你其实知道前面六个字符是”ABCDAB”。KMP算法的想法是，<strong>设法利用这个已知信息，不要把”搜索位置”移回已经比较过的位置，继续把它向后移，这样就提高了效率</strong>。</p>\n<img src=\"/pictures/bg2013050107-1594975043794.png\" alt=\"img\" style=\"zoom:67%;\" />\n</li>\n<li><p>怎么做到这一点呢？可以针对搜索词，算出一张《部分匹配表》（Partial Match Table）。这张表是如何产生的，后面再介绍，这里只要会用就可以了。</p>\n<img src=\"/pictures/bg2013050109.png\" alt=\"img\" style=\"zoom:67%;\" />\n</li>\n<li><p>已知空格与D不匹配时，前面六个字符”ABCDAB”是匹配的。查表可知，最后一个匹配字符B（不匹配字符的前一个字符）对应的”部分匹配值”为2，因此按照下面的公式算出向后移动的位数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">移动位数 = 已匹配的字符数 - 失配字符的前一位字符的部分匹配值</span><br></pre></td></tr></table></figure>\n\n<p>因为 6 - 2 等于4，所以将搜索词向后移动4位。</p>\n</li>\n<li><p>因为空格与Ｃ不匹配，搜索词还要继续往后移。这时，已匹配的字符数为2（”AB”），对应的”部分匹配值”为0。所以，移动位数 = 2 - 0，结果为 2，于是将搜索词向后移2位。</p>\n<img src=\"/pictures/bg2013050110.png\" alt=\"img\" style=\"zoom:67%;\" />\n</li>\n<li><p>因为空格与A不匹配，继续后移一位。</p>\n<img src=\"/pictures/bg2013050111.png\" alt=\"img\" style=\"zoom:67%;\" />\n</li>\n<li><p>逐位比较，直到发现C与D不匹配。于是，移动位数 = 6 - 2，继续将搜索词向后移动4位。</p>\n<img src=\"/pictures/bg2013050112.png\" alt=\"img\" style=\"zoom:67%;\" />\n</li>\n<li><p>逐位比较，直到搜索词的最后一位，发现完全匹配，于是搜索完成。如果还要继续搜索（即找出全部匹配），移动位数 = 7 - 0，再将搜索词向后移动7位，这里就不再重复了。</p>\n<img src=\"/pictures/bg2013050113.png\" alt=\"img\" style=\"zoom: 67%;\" />\n</li>\n<li><p>下面介绍《部分匹配表》是如何产生的。</p>\n<p>首先，要了解两个概念：”前缀”和”后缀”。 “前缀”指除了最后一个字符以外，一个字符串的全部头部组合；”后缀”指除了第一个字符以外，一个字符串的全部尾部组合。</p>\n<img src=\"/pictures/bg2013050114.png\" alt=\"img\" style=\"zoom:67%;\" />\n</li>\n<li><p>“部分匹配值”就是”前缀”和”后缀”的最大公共元素长度。以”ABCDABD”为例，计算过程如下：</p>\n<p><img src=\"/pictures/20140725231726921\" alt=\"img\"></p>\n</li>\n<li><p>“部分匹配”的实质是，有时候，字符串头部和尾部会有重复。比如，”ABCDAB”之中有两个”AB”，那么它的”部分匹配值”就是2（”AB”的长度）。搜索词移动的时候，第一个”AB”向后移动4位（字符串长度-部分匹配值），就可以来到第二个”AB”的位置。</p>\n<img src=\"/pictures/bg2013050112-1594975805920.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n</li>\n</ol>\n<p>到此，我们对于KMP的基本思路有了一个大致的了解，下一部分介绍KMP具体算法细节、代码及优化。</p>\n<h2 id=\"2-KMP算法代码及优化\"><a href=\"#2-KMP算法代码及优化\" class=\"headerlink\" title=\"2. KMP算法代码及优化\"></a>2. KMP算法代码及优化</h2><p>假设现在我们面临这样一个问题：有一个文本串S，和一个模式串P，现在要查找P在S中的位置，怎么查找呢？</p>\n<h3 id=\"2-1-暴力匹配算法\"><a href=\"#2-1-暴力匹配算法\" class=\"headerlink\" title=\"2.1 暴力匹配算法\"></a>2.1 暴力匹配算法</h3><p>如果用暴力匹配的思路，并假设现在文本串S匹配到 i 位置，模式串P匹配到 j 位置，则有：</p>\n<ul>\n<li>如果当前字符匹配成功（即S[i] == P[j]），则i++，j++，继续匹配下一个字符；</li>\n<li>如果失配（即S[i]! = P[j]），令i = i - (j - 1)，j = 0。相当于每次匹配失败时，i 回溯，j 被置为0。</li>\n</ul>\n<p>暴力匹配代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">ViolentMatch</span><span class=\"params\">(<span class=\"keyword\">char</span>[] s, <span class=\"keyword\">char</span>[] p)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sLen = s.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pLen = p.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; sLen &amp;&amp; j &lt; pLen)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] == p[j])&#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            i = i - j + <span class=\"number\">1</span>;</span><br><span class=\"line\">            j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j == pLen)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i - j;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-KMP算法\"><a href=\"#2-2-KMP算法\" class=\"headerlink\" title=\"2.2 KMP算法\"></a>2.2 KMP算法</h3><h4 id=\"2-2-1-求解-next-数组\"><a href=\"#2-2-1-求解-next-数组\" class=\"headerlink\" title=\"2.2.1 求解 next 数组\"></a>2.2.1 求解 next 数组</h4><h5 id=\"2-2-1-1-基本思路\"><a href=\"#2-2-1-1-基本思路\" class=\"headerlink\" title=\"2.2.1.1 基本思路\"></a>2.2.1.1 基本思路</h5><p>前文已经计算过“部分匹配表”，即前缀和后缀的最大公共元素长度，如下图所示：</p>\n<p><img src=\"/pictures/20140725231726921\" alt=\"img\"></p>\n<p>由前文可知，失配时，模式串向右移动的位数公式为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">移动位数 = 已匹配的字符数 - 失配字符的前一位字符的最大公共元素长度</span><br></pre></td></tr></table></figure>\n\n<p>由此我们发现，当匹配一个字符失配时，我们并不会考虑当前字符，而是看失配字符的前一个字符的最大公共元素长度，如此，便引出了next数组。<strong>next 数组相当于最大长度值整体向右移动一位，然后初值赋为-1.</strong> 因而，对于给定的模式串，它的最大长度及next数组分别如下：</p>\n<p><img src=\"/pictures/20140728110939595\" alt=\"img\"></p>\n<p>求得next数组之后，失配时模式串向右移动的位数为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">移动位数 = 失配字符所在位置 - 失配字符对应的next值</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-2-1-2-代码计算-next-数组\"><a href=\"#2-2-1-2-代码计算-next-数组\" class=\"headerlink\" title=\"2.2.1.2 代码计算 next 数组\"></a>2.2.1.2 代码计算 next 数组</h5><ol>\n<li><p>如果<strong>对于值 k, 已有 p0 p1, …, pk-1 = pj-k pj-k+1, …, pj-1，相当于next[j] = k</strong>。究其本质，<strong>next[j] = k 代表p[j] 之前的模式串子串中，有长度为k 的相同前缀和后缀</strong>。有了这个next 数组，在KMP匹配中，当模式串中 j 处的字符失配时，下一步用next[j]处的字符继续跟文本串匹配，相当于模式串向右移动 j - next[j] 位。</p>\n</li>\n<li><p>下面的问题是：已知next [0, …, j]，如何求出next [j + 1]呢？</p>\n<ul>\n<li><p>若p[k] == p[j]，则next[j + 1] = next [j] + 1 = k + 1。</p>\n<p>如下图所示，假定给定模式串ABCDABCE，且已知next [j] = k（相当于“p0 pk-1” = “pj-k pj-1” = AB，可以看出k为2），现要求next [j + 1]等于多少？因为pk = pj = C，所以next[j + 1] = next[j] + 1 = k + 1（可以看出next[j + 1] = 3）。代表字符E前的模式串中，有长度k+1 的相同前缀后缀。</p>\n<p><img src=\"/pictures/20140729182154066\" alt=\"img\"></p>\n</li>\n<li><p>若p[k ] ≠ p[j]，如果此时 p[next[k] ] == p[j]，则next[ j + 1 ] =  next[k] + 1，否则继续递归前缀索引k = next[k]，而后重复此过程。</p>\n<p>如下图所示，当pk != pj后，字符E前有多大长度的相同前缀后缀呢？很明显，因为C不同于D，所以ABC 跟 ABD不相同，即字符E前的模式串没有长度为k+1的相同前缀后缀，也就不能再简单的令：next[j + 1] = next[j] + 1 。所以，咱们只能去寻找长度更短一点的相同前缀后缀。<br><img src=\"/pictures/20140729181940812\" alt=\"img\">   </p>\n<p>结合上图来讲，若能在前缀“ p0 pk-1 pk ” 中不断的递归前缀索引k = next [k]，找到一个字符pk’ 也为D，代表pk’ = pj，且满足p0 pk’-1 pk’ = pj-k’ pj-1 pj，则最大相同的前缀后缀长度为k’ + 1，从而next [j + 1] = k’ + 1 = next [k’ ] + 1。否则前缀中没有D，则代表没有相同的前缀后缀，next [j + 1] = 0。</p>\n<p>那为何递归前缀索引k = next[k]，就能找到长度更短的相同前缀后缀呢？ 这又归根到next数组的含义。<strong>我们拿前缀 p0 pk-1 pk 去跟后缀pj-k pj-1 pj匹配，如果pk 跟pj 失配，下一步就是用p[next[k]] 去跟pj 继续匹配，如果p[ next[k] ]跟pj还是不匹配，则需要寻找长度更短的相同前缀后缀，即下一步用p[ next[ next[k] ] ]去跟pj匹配。</strong></p>\n</li>\n</ul>\n</li>\n<li><p>综上，可以通过递推求得 next 数组，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] getNext(<span class=\"keyword\">char</span>[] p)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pLen = p.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] next = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[pLen];</span><br><span class=\"line\">    next[<span class=\"number\">0</span>] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &lt; pLen - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// p[k] 表示前缀；p[j] 表示后缀</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k == -<span class=\"number\">1</span> || p[j] == p[k])&#123;</span><br><span class=\"line\">            ++k;</span><br><span class=\"line\">            next[++j] = k;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            k = next[k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h5 id=\"2-2-1-3-总结-next-数组含义\"><a href=\"#2-2-1-3-总结-next-数组含义\" class=\"headerlink\" title=\"2.2.1.3 总结 next 数组含义\"></a>2.2.1.3 总结 next 数组含义</h5><ol>\n<li>代表失配字符之前的字符串中，有多大长度的相同前缀后缀。</li>\n<li>在某个字符失配后，next 值会告诉你下一步匹配中，模式串应该跳到哪个位置。如果next [j] 等于0或 -1，则跳到模式串的开头字符；若next [j] = k 且 k &gt; 0，代表下次匹配跳到 j 之前的某个字符，而不是跳到开头，且具体跳过了k 个字符。</li>\n</ol>\n<h4 id=\"2-2-2-KMP-算法\"><a href=\"#2-2-2-KMP-算法\" class=\"headerlink\" title=\"2.2.2 KMP 算法\"></a>2.2.2 KMP 算法</h4><p>根据上文的分析，KMP算法的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">kmp</span><span class=\"params\">(<span class=\"keyword\">char</span>[] s, <span class=\"keyword\">char</span>[] p, <span class=\"keyword\">int</span>[] next)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sLen = s.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pLen = p.length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; sLen &amp;&amp; j &lt; pLen)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j == -<span class=\"number\">1</span> || s[i] == p[j])&#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            j = next[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j == pLen)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i - j;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-3-next-数组的优化\"><a href=\"#2-2-3-next-数组的优化\" class=\"headerlink\" title=\"2.2.3 next 数组的优化\"></a>2.2.3 next 数组的优化</h4><p>行文至此，我们全面了解了KMP算法的基本思路、流程、代码以及next 数组的求解，但忽略了一个小问题。</p>\n<p>比如，如果用之前的next 数组方法求模式串“abab”的 next 数组，可得其 next 数组为 -1 0 0 1，当它跟下图中的文本串去匹配的时候，发现 b 跟 c 失配，于是模式串右移 j - next[j] = 3 - 1 = 2位。</p>\n<img src=\"/pictures/8394323_1308075859Zfue.jpg\" alt=\"8394323_1308075859Zfue\" style=\"zoom:67%;\" />\n\n<p>右移2位后，b又跟c失配。事实上，因为在上一步的匹配中，已经得知p[3] = b，与s[3] = c失配，而右移两位之后，让p[ next[3] ] = p[1] = b 再跟s[3]匹配时，必然失配。问题出在哪呢？</p>\n<img src=\"/pictures/8394323_13080758591kyV-1595069195969.jpg\" alt=\"8394323_13080758591kyV\" style=\"zoom:67%;\" />\n\n<p>问题出在不该出现p[j] = p[ next[j] ]。为什么呢？理由是：当p[j] != s[i] 时，下次匹配必然是p[ next [j]] 跟s[i]匹配，如果p[j] = p[ next[j] ]，必然导致后一步匹配失败（因为p[j]已经跟s[i]失配，然后你还用跟p[j]等同的值p[next[j]]去跟s[i]匹配，很显然，必然失配），所以不能允许p[j] = p[ next[j ]]。如果出现了p[j] = p[ next[j] ]咋办呢？如果出现了，则需要再次递归，即令next[j] = next[ next[j] ]。</p>\n<p>因此，求解 next 数组的代码优化如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] getNextval(<span class=\"keyword\">char</span>[] p)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pLen = p.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] next = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[pLen];</span><br><span class=\"line\">    next[<span class=\"number\">0</span>] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &lt; pLen - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// p[k] 表示前缀；p[j] 表示后缀</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k == -<span class=\"number\">1</span> || p[j] == p[k])&#123;</span><br><span class=\"line\">            ++k;</span><br><span class=\"line\">            ++j;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p[j] != p[k])&#123;</span><br><span class=\"line\">                next[j] = k;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 因为不能出现p[j] = p[next[j]]，所以当出现时需要继续递归，k = next[k] = next[next[k]]</span></span><br><span class=\"line\">                next[j] = next[k];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            k = next[k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-KMP-算法时间复杂度分析\"><a href=\"#3-KMP-算法时间复杂度分析\" class=\"headerlink\" title=\"3. KMP 算法时间复杂度分析\"></a>3. KMP 算法时间复杂度分析</h2><p>我们先来回顾一下KMP算法的流程，假设现在文本串S匹配到 i 位置，模式串P匹配到 j 位置：</p>\n<ol>\n<li>如果j = -1，或者当前字符匹配成功（即S[i] == P[j]），都令i++，j++，继续匹配下一个字符；</li>\n<li>如果j != -1，且当前字符匹配失败（即S[i] != P[j]），则令 i 不变，j = next[j]。此举意味着失配时，模式串P相对于文本串S向右移动了j - next [j] 位。</li>\n</ol>\n<p>我们发现如果某个字符匹配成功，模式串首字符的位置保持不动，仅仅是i++、j++；如果匹配失配，i 不变（即 i 不回溯），模式串会跳过匹配过的next [j]个字符。整个算法最坏的情况是，当模式串首字符位于i - j的位置时才匹配成功，算法结束。</p>\n<p>所以，如果文本串的长度为n，模式串的长度为m，那么匹配过程的时间复杂度为O(n)，算上计算next的O(m)时间，KMP的整体时间复杂度为O(m + n)。</p>\n<h2 id=\"4-例题：实现-strStr-28\"><a href=\"#4-例题：实现-strStr-28\" class=\"headerlink\" title=\"4. 例题：实现 strStr() [28]\"></a>4. 例题：实现 strStr() [28]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/implement-strstr/\" target=\"_blank\" rel=\"noopener\">28. 实现 strStr()</a>；另一种动态规划在我的另一篇博客：<a href=\"\">这里</a>.</p>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>实现 strStr() 函数。</p>\n<p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。</p>\n<p>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: haystack = <span class=\"string\">\"hello\"</span>, needle = <span class=\"string\">\"ll\"</span></span><br><span class=\"line\">输出: 2</span><br></pre></td></tr></table></figure>\n\n<p>示例 2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: haystack = <span class=\"string\">\"aaaaa\"</span>, needle = <span class=\"string\">\"bba\"</span></span><br><span class=\"line\">输出: -1</span><br></pre></td></tr></table></figure>\n\n\n<p>说明:</p>\n<p>当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</p>\n<p>对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">strStr</span><span class=\"params\">(String haystack, String needle)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(needle.length() == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] s = haystack.toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] p = needle.toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] next = getNextval(p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> kmp(s, p, next);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">kmp</span><span class=\"params\">(<span class=\"keyword\">char</span>[] s, <span class=\"keyword\">char</span>[] p, <span class=\"keyword\">int</span>[] next)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sLen = s.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pLen = p.length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; sLen &amp;&amp; j &lt; pLen)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j == -<span class=\"number\">1</span> || s[i] == p[j])&#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            j = next[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j == pLen)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i - j;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] getNextval(<span class=\"keyword\">char</span>[] p)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pLen = p.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] next = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[pLen];</span><br><span class=\"line\">    next[<span class=\"number\">0</span>] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &lt; pLen - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// p[k] 表示前缀；p[j] 表示后缀</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k == -<span class=\"number\">1</span> || p[j] == p[k])&#123;</span><br><span class=\"line\">            ++k;</span><br><span class=\"line\">            ++j;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p[j] != p[k])&#123;</span><br><span class=\"line\">                next[j] = k;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 因为不能出现p[j] = p[next[j]]，所以当出现时需要继续递归，k = next[k] = next[next[k]]</span></span><br><span class=\"line\">                next[j] = next[k];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            k = next[k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-参考引用\"><a href=\"#5-参考引用\" class=\"headerlink\" title=\"5. 参考引用\"></a>5. 参考引用</h2><ol>\n<li><p><a href=\"https://blog.csdn.net/v_july_v/article/details/7041827\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/v_july_v/article/details/7041827</a></p>\n</li>\n<li><p><a href=\"http://www.ruanyifeng.com/blog/2013/05/Knuth–Morris–Pratt_algorithm.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html</a></p>\n</li>\n</ol>"},{"title":"String的特点以及方法","date":"2020-04-04T15:24:48.000Z","visible":"hide","typora-copy-images-to":"..\\..\\juliajiang\\source\\pictures","_content":"\n本文主要从源码出发，介绍了 String 的一些特点和方法。包括了 String 的底层实现，源码中的几个重要方法实现，String 使用 final 修饰的原因，String 与 StringBuilder、StringBuffered 的区别，String 在 JVM 中的存储，intern() 方法，不可变性，+ 的重载以及编译器使用 StringBuilder 的优化。\n\n<!--more-->\n\n## 1. String 如何实现\n\n以主流的 JDK 版本 1.8 来说，String 内部实际存储结构为 char 数组，源码如下：\n\n```java\npublic final class String\n    implements java.io.Serializable, Comparable<String>, CharSequence {\n    /** The value is used for character storage. 用于储存字符串的值*/\n    private final char value[];\n\n    /** Cache the hash code for the string 缓存字符串的Hash Code*/\n    private int hash; // Default to 0\n    .....\n```\n\n在 Java 9 之后，String 类的实现改用 byte 数组存储字符串 `private final byte[] value`\n\n## 2. String 源码中的几个重要方法\n\n### 2.1 多构造方法\n\n如下选出源码中 String 比较重要的几个构造方法：\n\n``` java\n// String 为参数的构造方法\npublic String(String original) {\n    this.value = original.value;\n    this.hash = original.hash;\n}\n// char[] 为参数构造方法\npublic String(char value[]) {\n    this.value = Arrays.copyOf(value, value.length);\n}\n// StringBuffer 为参数的构造方法\npublic String(StringBuffer buffer) {\n    synchronized(buffer) {\n        this.value = Arrays.copyOf(buffer.getValue(), buffer.length());\n    }\n}\n// StringBuilder 为参数的构造方法\npublic String(StringBuilder builder) {\n    this.value = Arrays.copyOf(builder.getValue(), builder.length());\n}\n```\n\n### 2.2 equals() 比较两个字符串是否相等\n\n[Object 的 equals 方法以及与 == de 区别更详细解释请参考](https://www.cnblogs.com/skywang12345/p/3324958.html)\n\nObject 的 equals() 方法源码如下：\n\n```java\npublic boolean equals(Object obj) {\n    return (this == obj);\n}\n```\n\nString 的 equals() 方法重写了 Object 的 equals() 方法，equals() 方法需要传递一个 Object 类型的参数值，在比较时先判断对比的值是否为 String 类型，如果不是直接返回false，如果是继续判断，具体源码如下：\n\n```java\npublic boolean equals(Object anObject) {\n    //对象引用相同，直接返回\n    if (this == anObject) {\n        return true;\n    }\n    //判断对比的值是否为String类型\n    if (anObject instanceof String) {\n        String anotherString = (String)anObject;\n        int n = value.length;\n        if (n == anotherString.value.length) {\n            //把两个字符串转为 char[] 数组对比\n            char v1[] = value;\n            char v2[] = anotherString.value;\n            int i = 0;\n            while (n-- != 0) {\n                if (v1[i] != v2[i])\n                    return false;\n                i++;\n            }\n            return true;\n        }\n    }\n    return false;\n}\n```\n\n还有一个和 equals() 比较类似的方法 equalsIgnoreCase()，它是用于忽略字符串的大小写之后进行字符串对比。\n\n**equals() 和 == 的区别：**\n\n1. == 对于基本数据类型来说，是比较**值**是否相等的；对于引用类型来说，是用于比较**引用地址**是否相等的\n2. 从 Object 的 equals() 方法源码来看，对于 Object 而言，equals() 方法其实就是 ==, 而 String 重写了 equals() 方法，用于比较两个字符串的值是否相等。\n\n### 2.3 compareTo() 比较两个字符串\n\n用于两个字符串的字典序比较，返回 int 类型的值，源码如下：\n\n```java\npublic int compareTo(String anotherString) {\n    int len1 = value.length;\n    int len2 = anotherString.value.length;\n    int lim = Math.min(len1, len2);\n    char v1[] = value;\n    char v2[] = anotherString.value;\n\n    int k = 0;\n    while (k < lim) {\n        char c1 = v1[k];\n        char c2 = v2[k];\n        if (c1 != c2) {\n            return c1 - c2;\n        }\n        k++;\n    }\n    return len1 - len2;\n}\n```\n\n还有一个和 compareTo() 比较类似的方法 compareToIgnoreCase()，用于忽略大小写后比较两个字符串。\n\n**equals() 和 compareTo() 方法的区别：**\n\n1. equals() 可以接收一个Object类型的参数，而compareTo() 只接受String\n2. equals 返回值为 boolean, compareTo 返回 int\n\n### 2.4 其他重要方法\n\n```bash\nindexOf()：查询字符串首次出现的下标位置\nlastIndexOf()：查询字符串最后出现的下标位置\ncontains()：查询字符串中是否包含另一个字符串\ntoLowerCase()：把字符串全部转换成小写\ntoUpperCase()：把字符串全部转换成大写\nlength()：查询字符串的长度\ntrim()：去掉字符串首尾空格\nreplace()：替换字符串中的某些字符\nsplit()：把字符串分割并返回字符串数组\njoin()：把字符串数组转为字符串\n```\n\n## 3. 为什么 String 类型用 final 修饰？\n\n从 String 类的源码来看，String 是被 final 修饰的不可继承类，源码如下：\n\n```java\npublic final class String\n    implements java.io.Serializable, Comparable<String>, CharSequence {\n    ...\n```\n\n那这样设计有什么好处呢？\n\nJava 语言之父 James Gosling 的回答是，他会更倾向于使用 final，因为它能够缓存结果，当你在传参时，不需要考虑谁会修改它的值；如果是可变的话，则有可能需要重新拷贝出来一个新值进行传参，这样在性能上有一定的损失。\n\nJames Gosling 还说迫使 String 类设计成不可变的另一个原因是**安全**。当你在调用其他方法时，比如在调用一些系统级操作指令之前，可能会有一系列校验，如果是可变的话，可能在你校验之后，它的内部值又被改变了，这样可能引起严重的系统崩溃问题，这是迫使 String 类设计为不可变类的一个重要原因。\n\n总结来说，使用 final 修饰的第一个好处是**安全**，第二个好处是**高效**。我们以 JVM 中的字符串常量池为例，有如下两个变量：\n\n```java \nString s1 = \"java\";\nString s2 = \"java\";\n```\n\n只有字符串是不可变时，我们才能实现字符串常量池，它可以为我们缓存字符串，提高程序运行效率。\n\n![微信截图_20200405164821](../pictures/微信截图_20200405164821-1586080520904.png)\n\n试想如果 String 是可变的，那当 s1 的值修改之后，s2 的值也会跟着改变，这样就和我们预期的结果不符合，因此也就没有办法实现字符串常量池的功能了。\n\n## 4. String 和 StringBuilder、StringBuffer 的区别\n\n### （1） 可变性\n\n上文提到，String 类中使用 final 关键字修饰字符数组来保存字符串，`private final char value[]`，所以 String 对象是不可变的。\n\n但StringBuilder 与 StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder 中也是使用字符数组保存字符串`char[]value` 但是没有用 final 关键字修饰，StringBuilder 与 StringBuffer 的构造方法都是调用父类构造方法，所以这两种对象都是可变的。AbstractStringBuilder 的源码如下：\n\n```java\nabstract class AbstractStringBuilder implements Appendable, CharSequence {\n    /**\n     * The value is used for character storage.\n     */\n    char[] value;\n\n    /**\n     * The count is the number of characters used.\n     */\n    int count;\n    ...\n```\n\n### （2）线程安全性\n\nString 中的对象是不可变的，也就可以理解为常量，线程安全。AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。\n\nStringBuffer 对方法加了同步锁或者对调用的方法加了同步锁 synchronized，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。源码如下：\n\n```java\n// StringBuffer 截取部分源码\n@Override\npublic synchronized StringBuffer append(String str) {\n    toStringCache = null;\n    super.append(str);\n    return this;\n}\n// StringBuilder 截取部分源码\n@Override\npublic StringBuilder append(String str) {\n    super.append(str);\n    return this;\n}\n```\n\n### （3）性能\n\n因为 String 类型是不可变的，所以每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将引用指向新的 String 对象。StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 StringBuilder 相比使用 StringBuffer 性能更高一些，但却线程不安全的风险，因而我们可以再非并发操作的环境下使用 StringBuilder 操作字符串。\n\n### （4）对于三者使用的总结\n\n\t\t\t- 操作少量的数据: 适用 String\n\t\t\t- 单线程操作字符串缓冲区下操作大量数据: 适用 StringBuilder\n\t\t\t- 多线程操作字符串缓冲区下操作大量数据: 适用 StringBuffer\n\n## 5. String 在 JVM（Java虚拟机）中是如何存储的？\n\nString常见的创建方式有两种，直接赋值的方式``Strings1 = \"Java\";``和``Strings2 = new String(\"Java\");``的方式，但两者在JVM的存储区域却截然不同，在JDK1.8中，变量 s1 会先去**字符串常量池**中找字符串“Java”，如果有相同的字符则直接返回**常量句柄**（一个唯一的整数，作为对象的身份id, 区分不同的对象和同类中的不同实例），如果没有此字符串则会先在常量池中创建此字符串，然后再返回常量句柄；而变量 s2 是直接在堆上创建一个变量，如果调用 intern 方法才会把此字符串保存到常量池中，它们在 JVM 中的存储位置如下图所示：\n\n![image-20200405194407416](../pictures/image-20200405194407416.png)\n\n代码演示如下：\n\n```java\nStrings1 = newString(\"Java\");\nStrings2 = s1.intern();\nStrings3 = \"Java\";\nSystem.out.println(s1 == s2); // false\nSystem.out.println(s2 == s3); // true\n```\n\n## 6. String 的 intern 方法有什么含义?\n\npublic String **intern**() 返回字符串对象的规范化表示形式，返回值是一个字符串，内容与此字符串相等，但它保证来自字符串池中。\n\n一个初始为空的字符串池，它由类 String 私有地维护。当调用 intern 方法时，如果字符串池中已经包含一个等于此 String 对象的字符串（是否等于由 String 的 equals 方法来确定），则返回池中的字符串；否则将此 String 对象添加到池中，并且返回此 String 对象的引用。所有的字面值字符串和字符串赋值常量表达式都是内部的。\n\n如下例子中，变量 str1 会先去字符串常量池中找字符串 \"ab\", 如果有相同的字符串则直接返回常量句柄，如果没有此字符串则会先在常量池中创建此字符串，然后再返回常量句柄；而变量 str2 是直接在堆上创建一个变量，如果调用 intern 方法才会把此字符串保存到常量池中。\n\n字符串相加的时候，都是静态字符串的结果会添加到字符串池，如果其中含有变量（如 str3 str4）则不会进入字符串池中。\n\n```java\nString str1 = \"ab\";\nString str2 = new String(\"ab\");\nSystem.out.println(str1 == str2);           //false 引用地址不同\nSystem.out.println(str1.equals(str2));      //true 字符串值相同\nSystem.out.println(str1 == str2.intern());  //true\nString str3 = \"a\";\nString str4 = \"b\";\nSystem.out.println(str3 + str4 == str1);    //false\nSystem.out.println(\"a\" + \"b\" == str1);      //true\n```\n\n前文中说明了 equals 和 == 的区别，对于 String 而言，== 判断的是引用地址，那么什么时候会出现引用地址相同的情况呢？现在来看，如果给变量赋值的是静态字符串，就会在字符串中找相同字符串，如果有返回引用，这时候就存在相同的引用地址；而 new String 构造的字符串用 == 判断一定是 false。\n\n```java\nString str5 = new String(\"ab\");\nSystem.out.println(str2 == str5);           //false\nString str6 = \"ab\";\nSystem.out.println(str1 ==str6);            //true\n```\n\n## 7. String 的不可变\n\nString 对象是不可变的。从 JDK 文档可以发现，String 类中每一个看起来会修改 String 值的方法，实际上都是创建了一个全新的 String 对象来包含修改后的字符串内容，而最初的 String 对象纹丝未动。\n\n例如下面的代码：\n\n```java\npublic static String upcase(String s) {\n    return s.toUpperCase();\n}\npublic static void main(String[] args) {\n    String q = \"howdy\";\n    System.out.println(q); // howdy \n    String qq = upcase(q);\n    System.out.println(qq); // HOWDY \n    System.out.println(q); // howdy \n}\n```\n\n当把 ``q``传递给``upcase()``方法时，实际传递的是引用的一个拷贝。每当 String 对象作为方法的参数时，都会复制一份引用，而该引用所指的对象一直在物理位置上没有任何变化。\n\n回到 upcase() 的定义，传入其中的引用有了名字 s, 只有 upcase() 方法运行时局部引用 s 才存在。一旦 upcase() 结束，s 就消失了。其返回值也就指向了一个新的对象，而 q 仍然在原来的位置。\n\n## 8. + 的重载与 StringBuilder\n\nString 对象是不可变的，你可以给一个 String 对象添加任意多的别名，因为 String 是只读的，所以指向它的任何引用都不可能修改它的值，这样也就不会影响到其他引用。\n\n不可变性会带来一定的效率问题。为 String 对象重载的 + 操作符就是一个例子：操作符 + 可以连接 String。当使用 + 操作符时，编译器会做一定的优化，例如在下面的代码中：\n\n```java\nString mango = \"mango\"; \nString s = \"abc\" + mango + \"def\" + 47; \n```\n\n编译器会自动引入``java.lang.StringBuilder``类（虽然源代码中并没有使用 StringBuilder 类，但因为其高效，编译器会使用它），先创建一个 StringBuilder 对象，对每个字符串调用一次 append 方法，共4次，最后调用 toString() 方法，存为 s。\n\n现在你可能觉得可以随意使用 String 对象，反正编译器会为你做性能优化。在这之前让我们深入看看编译器会为我们优化到什么程度。下面例子中采用两种方式生成 String：\n\n```java\npublic class WhitherStringBuilder { \n    public String implicit(String[] fields) { \n        String result = \"\"; \n        for(String field : fields) { \n            result += field;\n        }\n        return result; \n    }\n    public String explicit(String[] fields) { \n        StringBuilder result = new StringBuilder(); \n        for(String field : fields) { \n            result.append(field); \n        } \n        return result.toString(); \n    }\n}\n```\n\n第一种方式中，StringBuilder 是在循环体内部创建的，这意味着每进行一次循环，就会创建一个 StringBuilder 对象。第二种显示定义 StringBuilder 只生成一个 StringBuilder 对象。因此如果使用循环，且可能存在性能问题，那么最好自己创建一个 StringBuilder 对象。\n\n","source":"_posts/String的特点以及方法.md","raw":"---\ntitle: String的特点以及方法\ndate: 2020-04-04 23:24:48\ntags:\n  - String\n  - Java\ncategories: Java\nvisible: hide\ntypora-copy-images-to: ..\\..\\juliajiang\\source\\pictures\n\n---\n\n本文主要从源码出发，介绍了 String 的一些特点和方法。包括了 String 的底层实现，源码中的几个重要方法实现，String 使用 final 修饰的原因，String 与 StringBuilder、StringBuffered 的区别，String 在 JVM 中的存储，intern() 方法，不可变性，+ 的重载以及编译器使用 StringBuilder 的优化。\n\n<!--more-->\n\n## 1. String 如何实现\n\n以主流的 JDK 版本 1.8 来说，String 内部实际存储结构为 char 数组，源码如下：\n\n```java\npublic final class String\n    implements java.io.Serializable, Comparable<String>, CharSequence {\n    /** The value is used for character storage. 用于储存字符串的值*/\n    private final char value[];\n\n    /** Cache the hash code for the string 缓存字符串的Hash Code*/\n    private int hash; // Default to 0\n    .....\n```\n\n在 Java 9 之后，String 类的实现改用 byte 数组存储字符串 `private final byte[] value`\n\n## 2. String 源码中的几个重要方法\n\n### 2.1 多构造方法\n\n如下选出源码中 String 比较重要的几个构造方法：\n\n``` java\n// String 为参数的构造方法\npublic String(String original) {\n    this.value = original.value;\n    this.hash = original.hash;\n}\n// char[] 为参数构造方法\npublic String(char value[]) {\n    this.value = Arrays.copyOf(value, value.length);\n}\n// StringBuffer 为参数的构造方法\npublic String(StringBuffer buffer) {\n    synchronized(buffer) {\n        this.value = Arrays.copyOf(buffer.getValue(), buffer.length());\n    }\n}\n// StringBuilder 为参数的构造方法\npublic String(StringBuilder builder) {\n    this.value = Arrays.copyOf(builder.getValue(), builder.length());\n}\n```\n\n### 2.2 equals() 比较两个字符串是否相等\n\n[Object 的 equals 方法以及与 == de 区别更详细解释请参考](https://www.cnblogs.com/skywang12345/p/3324958.html)\n\nObject 的 equals() 方法源码如下：\n\n```java\npublic boolean equals(Object obj) {\n    return (this == obj);\n}\n```\n\nString 的 equals() 方法重写了 Object 的 equals() 方法，equals() 方法需要传递一个 Object 类型的参数值，在比较时先判断对比的值是否为 String 类型，如果不是直接返回false，如果是继续判断，具体源码如下：\n\n```java\npublic boolean equals(Object anObject) {\n    //对象引用相同，直接返回\n    if (this == anObject) {\n        return true;\n    }\n    //判断对比的值是否为String类型\n    if (anObject instanceof String) {\n        String anotherString = (String)anObject;\n        int n = value.length;\n        if (n == anotherString.value.length) {\n            //把两个字符串转为 char[] 数组对比\n            char v1[] = value;\n            char v2[] = anotherString.value;\n            int i = 0;\n            while (n-- != 0) {\n                if (v1[i] != v2[i])\n                    return false;\n                i++;\n            }\n            return true;\n        }\n    }\n    return false;\n}\n```\n\n还有一个和 equals() 比较类似的方法 equalsIgnoreCase()，它是用于忽略字符串的大小写之后进行字符串对比。\n\n**equals() 和 == 的区别：**\n\n1. == 对于基本数据类型来说，是比较**值**是否相等的；对于引用类型来说，是用于比较**引用地址**是否相等的\n2. 从 Object 的 equals() 方法源码来看，对于 Object 而言，equals() 方法其实就是 ==, 而 String 重写了 equals() 方法，用于比较两个字符串的值是否相等。\n\n### 2.3 compareTo() 比较两个字符串\n\n用于两个字符串的字典序比较，返回 int 类型的值，源码如下：\n\n```java\npublic int compareTo(String anotherString) {\n    int len1 = value.length;\n    int len2 = anotherString.value.length;\n    int lim = Math.min(len1, len2);\n    char v1[] = value;\n    char v2[] = anotherString.value;\n\n    int k = 0;\n    while (k < lim) {\n        char c1 = v1[k];\n        char c2 = v2[k];\n        if (c1 != c2) {\n            return c1 - c2;\n        }\n        k++;\n    }\n    return len1 - len2;\n}\n```\n\n还有一个和 compareTo() 比较类似的方法 compareToIgnoreCase()，用于忽略大小写后比较两个字符串。\n\n**equals() 和 compareTo() 方法的区别：**\n\n1. equals() 可以接收一个Object类型的参数，而compareTo() 只接受String\n2. equals 返回值为 boolean, compareTo 返回 int\n\n### 2.4 其他重要方法\n\n```bash\nindexOf()：查询字符串首次出现的下标位置\nlastIndexOf()：查询字符串最后出现的下标位置\ncontains()：查询字符串中是否包含另一个字符串\ntoLowerCase()：把字符串全部转换成小写\ntoUpperCase()：把字符串全部转换成大写\nlength()：查询字符串的长度\ntrim()：去掉字符串首尾空格\nreplace()：替换字符串中的某些字符\nsplit()：把字符串分割并返回字符串数组\njoin()：把字符串数组转为字符串\n```\n\n## 3. 为什么 String 类型用 final 修饰？\n\n从 String 类的源码来看，String 是被 final 修饰的不可继承类，源码如下：\n\n```java\npublic final class String\n    implements java.io.Serializable, Comparable<String>, CharSequence {\n    ...\n```\n\n那这样设计有什么好处呢？\n\nJava 语言之父 James Gosling 的回答是，他会更倾向于使用 final，因为它能够缓存结果，当你在传参时，不需要考虑谁会修改它的值；如果是可变的话，则有可能需要重新拷贝出来一个新值进行传参，这样在性能上有一定的损失。\n\nJames Gosling 还说迫使 String 类设计成不可变的另一个原因是**安全**。当你在调用其他方法时，比如在调用一些系统级操作指令之前，可能会有一系列校验，如果是可变的话，可能在你校验之后，它的内部值又被改变了，这样可能引起严重的系统崩溃问题，这是迫使 String 类设计为不可变类的一个重要原因。\n\n总结来说，使用 final 修饰的第一个好处是**安全**，第二个好处是**高效**。我们以 JVM 中的字符串常量池为例，有如下两个变量：\n\n```java \nString s1 = \"java\";\nString s2 = \"java\";\n```\n\n只有字符串是不可变时，我们才能实现字符串常量池，它可以为我们缓存字符串，提高程序运行效率。\n\n![微信截图_20200405164821](../pictures/微信截图_20200405164821-1586080520904.png)\n\n试想如果 String 是可变的，那当 s1 的值修改之后，s2 的值也会跟着改变，这样就和我们预期的结果不符合，因此也就没有办法实现字符串常量池的功能了。\n\n## 4. String 和 StringBuilder、StringBuffer 的区别\n\n### （1） 可变性\n\n上文提到，String 类中使用 final 关键字修饰字符数组来保存字符串，`private final char value[]`，所以 String 对象是不可变的。\n\n但StringBuilder 与 StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder 中也是使用字符数组保存字符串`char[]value` 但是没有用 final 关键字修饰，StringBuilder 与 StringBuffer 的构造方法都是调用父类构造方法，所以这两种对象都是可变的。AbstractStringBuilder 的源码如下：\n\n```java\nabstract class AbstractStringBuilder implements Appendable, CharSequence {\n    /**\n     * The value is used for character storage.\n     */\n    char[] value;\n\n    /**\n     * The count is the number of characters used.\n     */\n    int count;\n    ...\n```\n\n### （2）线程安全性\n\nString 中的对象是不可变的，也就可以理解为常量，线程安全。AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。\n\nStringBuffer 对方法加了同步锁或者对调用的方法加了同步锁 synchronized，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。源码如下：\n\n```java\n// StringBuffer 截取部分源码\n@Override\npublic synchronized StringBuffer append(String str) {\n    toStringCache = null;\n    super.append(str);\n    return this;\n}\n// StringBuilder 截取部分源码\n@Override\npublic StringBuilder append(String str) {\n    super.append(str);\n    return this;\n}\n```\n\n### （3）性能\n\n因为 String 类型是不可变的，所以每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将引用指向新的 String 对象。StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 StringBuilder 相比使用 StringBuffer 性能更高一些，但却线程不安全的风险，因而我们可以再非并发操作的环境下使用 StringBuilder 操作字符串。\n\n### （4）对于三者使用的总结\n\n\t\t\t- 操作少量的数据: 适用 String\n\t\t\t- 单线程操作字符串缓冲区下操作大量数据: 适用 StringBuilder\n\t\t\t- 多线程操作字符串缓冲区下操作大量数据: 适用 StringBuffer\n\n## 5. String 在 JVM（Java虚拟机）中是如何存储的？\n\nString常见的创建方式有两种，直接赋值的方式``Strings1 = \"Java\";``和``Strings2 = new String(\"Java\");``的方式，但两者在JVM的存储区域却截然不同，在JDK1.8中，变量 s1 会先去**字符串常量池**中找字符串“Java”，如果有相同的字符则直接返回**常量句柄**（一个唯一的整数，作为对象的身份id, 区分不同的对象和同类中的不同实例），如果没有此字符串则会先在常量池中创建此字符串，然后再返回常量句柄；而变量 s2 是直接在堆上创建一个变量，如果调用 intern 方法才会把此字符串保存到常量池中，它们在 JVM 中的存储位置如下图所示：\n\n![image-20200405194407416](../pictures/image-20200405194407416.png)\n\n代码演示如下：\n\n```java\nStrings1 = newString(\"Java\");\nStrings2 = s1.intern();\nStrings3 = \"Java\";\nSystem.out.println(s1 == s2); // false\nSystem.out.println(s2 == s3); // true\n```\n\n## 6. String 的 intern 方法有什么含义?\n\npublic String **intern**() 返回字符串对象的规范化表示形式，返回值是一个字符串，内容与此字符串相等，但它保证来自字符串池中。\n\n一个初始为空的字符串池，它由类 String 私有地维护。当调用 intern 方法时，如果字符串池中已经包含一个等于此 String 对象的字符串（是否等于由 String 的 equals 方法来确定），则返回池中的字符串；否则将此 String 对象添加到池中，并且返回此 String 对象的引用。所有的字面值字符串和字符串赋值常量表达式都是内部的。\n\n如下例子中，变量 str1 会先去字符串常量池中找字符串 \"ab\", 如果有相同的字符串则直接返回常量句柄，如果没有此字符串则会先在常量池中创建此字符串，然后再返回常量句柄；而变量 str2 是直接在堆上创建一个变量，如果调用 intern 方法才会把此字符串保存到常量池中。\n\n字符串相加的时候，都是静态字符串的结果会添加到字符串池，如果其中含有变量（如 str3 str4）则不会进入字符串池中。\n\n```java\nString str1 = \"ab\";\nString str2 = new String(\"ab\");\nSystem.out.println(str1 == str2);           //false 引用地址不同\nSystem.out.println(str1.equals(str2));      //true 字符串值相同\nSystem.out.println(str1 == str2.intern());  //true\nString str3 = \"a\";\nString str4 = \"b\";\nSystem.out.println(str3 + str4 == str1);    //false\nSystem.out.println(\"a\" + \"b\" == str1);      //true\n```\n\n前文中说明了 equals 和 == 的区别，对于 String 而言，== 判断的是引用地址，那么什么时候会出现引用地址相同的情况呢？现在来看，如果给变量赋值的是静态字符串，就会在字符串中找相同字符串，如果有返回引用，这时候就存在相同的引用地址；而 new String 构造的字符串用 == 判断一定是 false。\n\n```java\nString str5 = new String(\"ab\");\nSystem.out.println(str2 == str5);           //false\nString str6 = \"ab\";\nSystem.out.println(str1 ==str6);            //true\n```\n\n## 7. String 的不可变\n\nString 对象是不可变的。从 JDK 文档可以发现，String 类中每一个看起来会修改 String 值的方法，实际上都是创建了一个全新的 String 对象来包含修改后的字符串内容，而最初的 String 对象纹丝未动。\n\n例如下面的代码：\n\n```java\npublic static String upcase(String s) {\n    return s.toUpperCase();\n}\npublic static void main(String[] args) {\n    String q = \"howdy\";\n    System.out.println(q); // howdy \n    String qq = upcase(q);\n    System.out.println(qq); // HOWDY \n    System.out.println(q); // howdy \n}\n```\n\n当把 ``q``传递给``upcase()``方法时，实际传递的是引用的一个拷贝。每当 String 对象作为方法的参数时，都会复制一份引用，而该引用所指的对象一直在物理位置上没有任何变化。\n\n回到 upcase() 的定义，传入其中的引用有了名字 s, 只有 upcase() 方法运行时局部引用 s 才存在。一旦 upcase() 结束，s 就消失了。其返回值也就指向了一个新的对象，而 q 仍然在原来的位置。\n\n## 8. + 的重载与 StringBuilder\n\nString 对象是不可变的，你可以给一个 String 对象添加任意多的别名，因为 String 是只读的，所以指向它的任何引用都不可能修改它的值，这样也就不会影响到其他引用。\n\n不可变性会带来一定的效率问题。为 String 对象重载的 + 操作符就是一个例子：操作符 + 可以连接 String。当使用 + 操作符时，编译器会做一定的优化，例如在下面的代码中：\n\n```java\nString mango = \"mango\"; \nString s = \"abc\" + mango + \"def\" + 47; \n```\n\n编译器会自动引入``java.lang.StringBuilder``类（虽然源代码中并没有使用 StringBuilder 类，但因为其高效，编译器会使用它），先创建一个 StringBuilder 对象，对每个字符串调用一次 append 方法，共4次，最后调用 toString() 方法，存为 s。\n\n现在你可能觉得可以随意使用 String 对象，反正编译器会为你做性能优化。在这之前让我们深入看看编译器会为我们优化到什么程度。下面例子中采用两种方式生成 String：\n\n```java\npublic class WhitherStringBuilder { \n    public String implicit(String[] fields) { \n        String result = \"\"; \n        for(String field : fields) { \n            result += field;\n        }\n        return result; \n    }\n    public String explicit(String[] fields) { \n        StringBuilder result = new StringBuilder(); \n        for(String field : fields) { \n            result.append(field); \n        } \n        return result.toString(); \n    }\n}\n```\n\n第一种方式中，StringBuilder 是在循环体内部创建的，这意味着每进行一次循环，就会创建一个 StringBuilder 对象。第二种显示定义 StringBuilder 只生成一个 StringBuilder 对象。因此如果使用循环，且可能存在性能问题，那么最好自己创建一个 StringBuilder 对象。\n\n","slug":"String的特点以及方法","published":1,"updated":"2020-12-26T12:26:49.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5mkvr000bnyl1aebx7u72","content":"<p>本文主要从源码出发，介绍了 String 的一些特点和方法。包括了 String 的底层实现，源码中的几个重要方法实现，String 使用 final 修饰的原因，String 与 StringBuilder、StringBuffered 的区别，String 在 JVM 中的存储，intern() 方法，不可变性，+ 的重载以及编译器使用 StringBuilder 的优化。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"1-String-如何实现\"><a href=\"#1-String-如何实现\" class=\"headerlink\" title=\"1. String 如何实现\"></a>1. String 如何实现</h2><p>以主流的 JDK 版本 1.8 来说，String 内部实际存储结构为 char 数组，源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">String</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span>, <span class=\"title\">Comparable</span>&lt;<span class=\"title\">String</span>&gt;, <span class=\"title\">CharSequence</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** The value is used for character storage. 用于储存字符串的值*/</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> value[];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Cache the hash code for the string 缓存字符串的Hash Code*/</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> hash; <span class=\"comment\">// Default to 0</span></span><br><span class=\"line\">    .....</span><br></pre></td></tr></table></figure>\n\n<p>在 Java 9 之后，String 类的实现改用 byte 数组存储字符串 <code>private final byte[] value</code></p>\n<h2 id=\"2-String-源码中的几个重要方法\"><a href=\"#2-String-源码中的几个重要方法\" class=\"headerlink\" title=\"2. String 源码中的几个重要方法\"></a>2. String 源码中的几个重要方法</h2><h3 id=\"2-1-多构造方法\"><a href=\"#2-1-多构造方法\" class=\"headerlink\" title=\"2.1 多构造方法\"></a>2.1 多构造方法</h3><p>如下选出源码中 String 比较重要的几个构造方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// String 为参数的构造方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(String original)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = original.value;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.hash = original.hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// char[] 为参数构造方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(<span class=\"keyword\">char</span> value[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = Arrays.copyOf(value, value.length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// StringBuffer 为参数的构造方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(StringBuffer buffer)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(buffer) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = Arrays.copyOf(buffer.getValue(), buffer.length());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// StringBuilder 为参数的构造方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(StringBuilder builder)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = Arrays.copyOf(builder.getValue(), builder.length());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-equals-比较两个字符串是否相等\"><a href=\"#2-2-equals-比较两个字符串是否相等\" class=\"headerlink\" title=\"2.2 equals() 比较两个字符串是否相等\"></a>2.2 equals() 比较两个字符串是否相等</h3><p><a href=\"https://www.cnblogs.com/skywang12345/p/3324958.html\" target=\"_blank\" rel=\"noopener\">Object 的 equals 方法以及与 == de 区别更详细解释请参考</a></p>\n<p>Object 的 equals() 方法源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span> == obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>String 的 equals() 方法重写了 Object 的 equals() 方法，equals() 方法需要传递一个 Object 类型的参数值，在比较时先判断对比的值是否为 String 类型，如果不是直接返回false，如果是继续判断，具体源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object anObject)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//对象引用相同，直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == anObject) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//判断对比的值是否为String类型</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (anObject <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">        String anotherString = (String)anObject;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = value.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == anotherString.value.length) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//把两个字符串转为 char[] 数组对比</span></span><br><span class=\"line\">            <span class=\"keyword\">char</span> v1[] = value;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> v2[] = anotherString.value;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (n-- != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (v1[i] != v2[i])</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还有一个和 equals() 比较类似的方法 equalsIgnoreCase()，它是用于忽略字符串的大小写之后进行字符串对比。</p>\n<p><strong>equals() 和 == 的区别：</strong></p>\n<ol>\n<li>== 对于基本数据类型来说，是比较<strong>值</strong>是否相等的；对于引用类型来说，是用于比较<strong>引用地址</strong>是否相等的</li>\n<li>从 Object 的 equals() 方法源码来看，对于 Object 而言，equals() 方法其实就是 ==, 而 String 重写了 equals() 方法，用于比较两个字符串的值是否相等。</li>\n</ol>\n<h3 id=\"2-3-compareTo-比较两个字符串\"><a href=\"#2-3-compareTo-比较两个字符串\" class=\"headerlink\" title=\"2.3 compareTo() 比较两个字符串\"></a>2.3 compareTo() 比较两个字符串</h3><p>用于两个字符串的字典序比较，返回 int 类型的值，源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(String anotherString)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len1 = value.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len2 = anotherString.value.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lim = Math.min(len1, len2);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> v1[] = value;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> v2[] = anotherString.value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (k &lt; lim) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c1 = v1[k];</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c2 = v2[k];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c1 != c2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c1 - c2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> len1 - len2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还有一个和 compareTo() 比较类似的方法 compareToIgnoreCase()，用于忽略大小写后比较两个字符串。</p>\n<p><strong>equals() 和 compareTo() 方法的区别：</strong></p>\n<ol>\n<li>equals() 可以接收一个Object类型的参数，而compareTo() 只接受String</li>\n<li>equals 返回值为 boolean, compareTo 返回 int</li>\n</ol>\n<h3 id=\"2-4-其他重要方法\"><a href=\"#2-4-其他重要方法\" class=\"headerlink\" title=\"2.4 其他重要方法\"></a>2.4 其他重要方法</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">indexOf()：查询字符串首次出现的下标位置</span><br><span class=\"line\">lastIndexOf()：查询字符串最后出现的下标位置</span><br><span class=\"line\">contains()：查询字符串中是否包含另一个字符串</span><br><span class=\"line\">toLowerCase()：把字符串全部转换成小写</span><br><span class=\"line\">toUpperCase()：把字符串全部转换成大写</span><br><span class=\"line\">length()：查询字符串的长度</span><br><span class=\"line\">trim()：去掉字符串首尾空格</span><br><span class=\"line\">replace()：替换字符串中的某些字符</span><br><span class=\"line\">split()：把字符串分割并返回字符串数组</span><br><span class=\"line\">join()：把字符串数组转为字符串</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-为什么-String-类型用-final-修饰？\"><a href=\"#3-为什么-String-类型用-final-修饰？\" class=\"headerlink\" title=\"3. 为什么 String 类型用 final 修饰？\"></a>3. 为什么 String 类型用 final 修饰？</h2><p>从 String 类的源码来看，String 是被 final 修饰的不可继承类，源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">String</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span>, <span class=\"title\">Comparable</span>&lt;<span class=\"title\">String</span>&gt;, <span class=\"title\">CharSequence</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n\n<p>那这样设计有什么好处呢？</p>\n<p>Java 语言之父 James Gosling 的回答是，他会更倾向于使用 final，因为它能够缓存结果，当你在传参时，不需要考虑谁会修改它的值；如果是可变的话，则有可能需要重新拷贝出来一个新值进行传参，这样在性能上有一定的损失。</p>\n<p>James Gosling 还说迫使 String 类设计成不可变的另一个原因是<strong>安全</strong>。当你在调用其他方法时，比如在调用一些系统级操作指令之前，可能会有一系列校验，如果是可变的话，可能在你校验之后，它的内部值又被改变了，这样可能引起严重的系统崩溃问题，这是迫使 String 类设计为不可变类的一个重要原因。</p>\n<p>总结来说，使用 final 修饰的第一个好处是<strong>安全</strong>，第二个好处是<strong>高效</strong>。我们以 JVM 中的字符串常量池为例，有如下两个变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = <span class=\"string\">\"java\"</span>;</span><br><span class=\"line\">String s2 = <span class=\"string\">\"java\"</span>;</span><br></pre></td></tr></table></figure>\n\n<p>只有字符串是不可变时，我们才能实现字符串常量池，它可以为我们缓存字符串，提高程序运行效率。</p>\n<p><img src=\"../pictures/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200405164821-1586080520904.png\" alt=\"微信截图_20200405164821\"></p>\n<p>试想如果 String 是可变的，那当 s1 的值修改之后，s2 的值也会跟着改变，这样就和我们预期的结果不符合，因此也就没有办法实现字符串常量池的功能了。</p>\n<h2 id=\"4-String-和-StringBuilder、StringBuffer-的区别\"><a href=\"#4-String-和-StringBuilder、StringBuffer-的区别\" class=\"headerlink\" title=\"4. String 和 StringBuilder、StringBuffer 的区别\"></a>4. String 和 StringBuilder、StringBuffer 的区别</h2><h3 id=\"（1）-可变性\"><a href=\"#（1）-可变性\" class=\"headerlink\" title=\"（1） 可变性\"></a>（1） 可变性</h3><p>上文提到，String 类中使用 final 关键字修饰字符数组来保存字符串，<code>private final char value[]</code>，所以 String 对象是不可变的。</p>\n<p>但StringBuilder 与 StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder 中也是使用字符数组保存字符串<code>char[]value</code> 但是没有用 final 关键字修饰，StringBuilder 与 StringBuffer 的构造方法都是调用父类构造方法，所以这两种对象都是可变的。AbstractStringBuilder 的源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractStringBuilder</span> <span class=\"keyword\">implements</span> <span class=\"title\">Appendable</span>, <span class=\"title\">CharSequence</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The value is used for character storage.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The count is the number of characters used.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"（2）线程安全性\"><a href=\"#（2）线程安全性\" class=\"headerlink\" title=\"（2）线程安全性\"></a>（2）线程安全性</h3><p>String 中的对象是不可变的，也就可以理解为常量，线程安全。AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。</p>\n<p>StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁 synchronized，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// StringBuffer 截取部分源码</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> StringBuffer <span class=\"title\">append</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    toStringCache = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.append(str);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// StringBuilder 截取部分源码</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> StringBuilder <span class=\"title\">append</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.append(str);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"（3）性能\"><a href=\"#（3）性能\" class=\"headerlink\" title=\"（3）性能\"></a>（3）性能</h3><p>因为 String 类型是不可变的，所以每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将引用指向新的 String 对象。StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 StringBuilder 相比使用 StringBuffer 性能更高一些，但却线程不安全的风险，因而我们可以再非并发操作的环境下使用 StringBuilder 操作字符串。</p>\n<h3 id=\"（4）对于三者使用的总结\"><a href=\"#（4）对于三者使用的总结\" class=\"headerlink\" title=\"（4）对于三者使用的总结\"></a>（4）对于三者使用的总结</h3><pre><code>- 操作少量的数据: 适用 String\n- 单线程操作字符串缓冲区下操作大量数据: 适用 StringBuilder\n- 多线程操作字符串缓冲区下操作大量数据: 适用 StringBuffer</code></pre><h2 id=\"5-String-在-JVM（Java虚拟机）中是如何存储的？\"><a href=\"#5-String-在-JVM（Java虚拟机）中是如何存储的？\" class=\"headerlink\" title=\"5. String 在 JVM（Java虚拟机）中是如何存储的？\"></a>5. String 在 JVM（Java虚拟机）中是如何存储的？</h2><p>String常见的创建方式有两种，直接赋值的方式<code>Strings1 = &quot;Java&quot;;</code>和<code>Strings2 = new String(&quot;Java&quot;);</code>的方式，但两者在JVM的存储区域却截然不同，在JDK1.8中，变量 s1 会先去<strong>字符串常量池</strong>中找字符串“Java”，如果有相同的字符则直接返回<strong>常量句柄</strong>（一个唯一的整数，作为对象的身份id, 区分不同的对象和同类中的不同实例），如果没有此字符串则会先在常量池中创建此字符串，然后再返回常量句柄；而变量 s2 是直接在堆上创建一个变量，如果调用 intern 方法才会把此字符串保存到常量池中，它们在 JVM 中的存储位置如下图所示：</p>\n<p><img src=\"../pictures/image-20200405194407416.png\" alt=\"image-20200405194407416\"></p>\n<p>代码演示如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Strings1 = newString(<span class=\"string\">\"Java\"</span>);</span><br><span class=\"line\">Strings2 = s1.intern();</span><br><span class=\"line\">Strings3 = <span class=\"string\">\"Java\"</span>;</span><br><span class=\"line\">System.out.println(s1 == s2); <span class=\"comment\">// false</span></span><br><span class=\"line\">System.out.println(s2 == s3); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-String-的-intern-方法有什么含义\"><a href=\"#6-String-的-intern-方法有什么含义\" class=\"headerlink\" title=\"6. String 的 intern 方法有什么含义?\"></a>6. String 的 intern 方法有什么含义?</h2><p>public String <strong>intern</strong>() 返回字符串对象的规范化表示形式，返回值是一个字符串，内容与此字符串相等，但它保证来自字符串池中。</p>\n<p>一个初始为空的字符串池，它由类 String 私有地维护。当调用 intern 方法时，如果字符串池中已经包含一个等于此 String 对象的字符串（是否等于由 String 的 equals 方法来确定），则返回池中的字符串；否则将此 String 对象添加到池中，并且返回此 String 对象的引用。所有的字面值字符串和字符串赋值常量表达式都是内部的。</p>\n<p>如下例子中，变量 str1 会先去字符串常量池中找字符串 “ab”, 如果有相同的字符串则直接返回常量句柄，如果没有此字符串则会先在常量池中创建此字符串，然后再返回常量句柄；而变量 str2 是直接在堆上创建一个变量，如果调用 intern 方法才会把此字符串保存到常量池中。</p>\n<p>字符串相加的时候，都是静态字符串的结果会添加到字符串池，如果其中含有变量（如 str3 str4）则不会进入字符串池中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str1 = <span class=\"string\">\"ab\"</span>;</span><br><span class=\"line\">String str2 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"ab\"</span>);</span><br><span class=\"line\">System.out.println(str1 == str2);           <span class=\"comment\">//false 引用地址不同</span></span><br><span class=\"line\">System.out.println(str1.equals(str2));      <span class=\"comment\">//true 字符串值相同</span></span><br><span class=\"line\">System.out.println(str1 == str2.intern());  <span class=\"comment\">//true</span></span><br><span class=\"line\">String str3 = <span class=\"string\">\"a\"</span>;</span><br><span class=\"line\">String str4 = <span class=\"string\">\"b\"</span>;</span><br><span class=\"line\">System.out.println(str3 + str4 == str1);    <span class=\"comment\">//false</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"a\"</span> + <span class=\"string\">\"b\"</span> == str1);      <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>前文中说明了 equals 和 == 的区别，对于 String 而言，== 判断的是引用地址，那么什么时候会出现引用地址相同的情况呢？现在来看，如果给变量赋值的是静态字符串，就会在字符串中找相同字符串，如果有返回引用，这时候就存在相同的引用地址；而 new String 构造的字符串用 == 判断一定是 false。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str5 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"ab\"</span>);</span><br><span class=\"line\">System.out.println(str2 == str5);           <span class=\"comment\">//false</span></span><br><span class=\"line\">String str6 = <span class=\"string\">\"ab\"</span>;</span><br><span class=\"line\">System.out.println(str1 ==str6);            <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-String-的不可变\"><a href=\"#7-String-的不可变\" class=\"headerlink\" title=\"7. String 的不可变\"></a>7. String 的不可变</h2><p>String 对象是不可变的。从 JDK 文档可以发现，String 类中每一个看起来会修改 String 值的方法，实际上都是创建了一个全新的 String 对象来包含修改后的字符串内容，而最初的 String 对象纹丝未动。</p>\n<p>例如下面的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">upcase</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.toUpperCase();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    String q = <span class=\"string\">\"howdy\"</span>;</span><br><span class=\"line\">    System.out.println(q); <span class=\"comment\">// howdy </span></span><br><span class=\"line\">    String qq = upcase(q);</span><br><span class=\"line\">    System.out.println(qq); <span class=\"comment\">// HOWDY </span></span><br><span class=\"line\">    System.out.println(q); <span class=\"comment\">// howdy </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当把 <code>q</code>传递给<code>upcase()</code>方法时，实际传递的是引用的一个拷贝。每当 String 对象作为方法的参数时，都会复制一份引用，而该引用所指的对象一直在物理位置上没有任何变化。</p>\n<p>回到 upcase() 的定义，传入其中的引用有了名字 s, 只有 upcase() 方法运行时局部引用 s 才存在。一旦 upcase() 结束，s 就消失了。其返回值也就指向了一个新的对象，而 q 仍然在原来的位置。</p>\n<h2 id=\"8-的重载与-StringBuilder\"><a href=\"#8-的重载与-StringBuilder\" class=\"headerlink\" title=\"8. + 的重载与 StringBuilder\"></a>8. + 的重载与 StringBuilder</h2><p>String 对象是不可变的，你可以给一个 String 对象添加任意多的别名，因为 String 是只读的，所以指向它的任何引用都不可能修改它的值，这样也就不会影响到其他引用。</p>\n<p>不可变性会带来一定的效率问题。为 String 对象重载的 + 操作符就是一个例子：操作符 + 可以连接 String。当使用 + 操作符时，编译器会做一定的优化，例如在下面的代码中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String mango = <span class=\"string\">\"mango\"</span>; </span><br><span class=\"line\">String s = <span class=\"string\">\"abc\"</span> + mango + <span class=\"string\">\"def\"</span> + <span class=\"number\">47</span>;</span><br></pre></td></tr></table></figure>\n\n<p>编译器会自动引入<code>java.lang.StringBuilder</code>类（虽然源代码中并没有使用 StringBuilder 类，但因为其高效，编译器会使用它），先创建一个 StringBuilder 对象，对每个字符串调用一次 append 方法，共4次，最后调用 toString() 方法，存为 s。</p>\n<p>现在你可能觉得可以随意使用 String 对象，反正编译器会为你做性能优化。在这之前让我们深入看看编译器会为我们优化到什么程度。下面例子中采用两种方式生成 String：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WhitherStringBuilder</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">implicit</span><span class=\"params\">(String[] fields)</span> </span>&#123; </span><br><span class=\"line\">        String result = <span class=\"string\">\"\"</span>; </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String field : fields) &#123; </span><br><span class=\"line\">            result += field;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">explicit</span><span class=\"params\">(String[] fields)</span> </span>&#123; </span><br><span class=\"line\">        StringBuilder result = <span class=\"keyword\">new</span> StringBuilder(); </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String field : fields) &#123; </span><br><span class=\"line\">            result.append(field); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> result.toString(); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第一种方式中，StringBuilder 是在循环体内部创建的，这意味着每进行一次循环，就会创建一个 StringBuilder 对象。第二种显示定义 StringBuilder 只生成一个 StringBuilder 对象。因此如果使用循环，且可能存在性能问题，那么最好自己创建一个 StringBuilder 对象。</p>\n","site":{"data":{}},"length":7795,"excerpt":"<p>本文主要从源码出发，介绍了 String 的一些特点和方法。包括了 String 的底层实现，源码中的几个重要方法实现，String 使用 final 修饰的原因，String 与 StringBuilder、StringBuffered 的区别，String 在 JVM 中的存储，intern() 方法，不可变性，+ 的重载以及编译器使用 StringBuilder 的优化。</p>","more":"<h2 id=\"1-String-如何实现\"><a href=\"#1-String-如何实现\" class=\"headerlink\" title=\"1. String 如何实现\"></a>1. String 如何实现</h2><p>以主流的 JDK 版本 1.8 来说，String 内部实际存储结构为 char 数组，源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">String</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span>, <span class=\"title\">Comparable</span>&lt;<span class=\"title\">String</span>&gt;, <span class=\"title\">CharSequence</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** The value is used for character storage. 用于储存字符串的值*/</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> value[];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Cache the hash code for the string 缓存字符串的Hash Code*/</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> hash; <span class=\"comment\">// Default to 0</span></span><br><span class=\"line\">    .....</span><br></pre></td></tr></table></figure>\n\n<p>在 Java 9 之后，String 类的实现改用 byte 数组存储字符串 <code>private final byte[] value</code></p>\n<h2 id=\"2-String-源码中的几个重要方法\"><a href=\"#2-String-源码中的几个重要方法\" class=\"headerlink\" title=\"2. String 源码中的几个重要方法\"></a>2. String 源码中的几个重要方法</h2><h3 id=\"2-1-多构造方法\"><a href=\"#2-1-多构造方法\" class=\"headerlink\" title=\"2.1 多构造方法\"></a>2.1 多构造方法</h3><p>如下选出源码中 String 比较重要的几个构造方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// String 为参数的构造方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(String original)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = original.value;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.hash = original.hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// char[] 为参数构造方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(<span class=\"keyword\">char</span> value[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = Arrays.copyOf(value, value.length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// StringBuffer 为参数的构造方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(StringBuffer buffer)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(buffer) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = Arrays.copyOf(buffer.getValue(), buffer.length());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// StringBuilder 为参数的构造方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(StringBuilder builder)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = Arrays.copyOf(builder.getValue(), builder.length());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-equals-比较两个字符串是否相等\"><a href=\"#2-2-equals-比较两个字符串是否相等\" class=\"headerlink\" title=\"2.2 equals() 比较两个字符串是否相等\"></a>2.2 equals() 比较两个字符串是否相等</h3><p><a href=\"https://www.cnblogs.com/skywang12345/p/3324958.html\" target=\"_blank\" rel=\"noopener\">Object 的 equals 方法以及与 == de 区别更详细解释请参考</a></p>\n<p>Object 的 equals() 方法源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span> == obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>String 的 equals() 方法重写了 Object 的 equals() 方法，equals() 方法需要传递一个 Object 类型的参数值，在比较时先判断对比的值是否为 String 类型，如果不是直接返回false，如果是继续判断，具体源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object anObject)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//对象引用相同，直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == anObject) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//判断对比的值是否为String类型</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (anObject <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">        String anotherString = (String)anObject;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = value.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == anotherString.value.length) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//把两个字符串转为 char[] 数组对比</span></span><br><span class=\"line\">            <span class=\"keyword\">char</span> v1[] = value;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> v2[] = anotherString.value;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (n-- != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (v1[i] != v2[i])</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还有一个和 equals() 比较类似的方法 equalsIgnoreCase()，它是用于忽略字符串的大小写之后进行字符串对比。</p>\n<p><strong>equals() 和 == 的区别：</strong></p>\n<ol>\n<li>== 对于基本数据类型来说，是比较<strong>值</strong>是否相等的；对于引用类型来说，是用于比较<strong>引用地址</strong>是否相等的</li>\n<li>从 Object 的 equals() 方法源码来看，对于 Object 而言，equals() 方法其实就是 ==, 而 String 重写了 equals() 方法，用于比较两个字符串的值是否相等。</li>\n</ol>\n<h3 id=\"2-3-compareTo-比较两个字符串\"><a href=\"#2-3-compareTo-比较两个字符串\" class=\"headerlink\" title=\"2.3 compareTo() 比较两个字符串\"></a>2.3 compareTo() 比较两个字符串</h3><p>用于两个字符串的字典序比较，返回 int 类型的值，源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(String anotherString)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len1 = value.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len2 = anotherString.value.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lim = Math.min(len1, len2);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> v1[] = value;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> v2[] = anotherString.value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (k &lt; lim) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c1 = v1[k];</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c2 = v2[k];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c1 != c2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c1 - c2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> len1 - len2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还有一个和 compareTo() 比较类似的方法 compareToIgnoreCase()，用于忽略大小写后比较两个字符串。</p>\n<p><strong>equals() 和 compareTo() 方法的区别：</strong></p>\n<ol>\n<li>equals() 可以接收一个Object类型的参数，而compareTo() 只接受String</li>\n<li>equals 返回值为 boolean, compareTo 返回 int</li>\n</ol>\n<h3 id=\"2-4-其他重要方法\"><a href=\"#2-4-其他重要方法\" class=\"headerlink\" title=\"2.4 其他重要方法\"></a>2.4 其他重要方法</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">indexOf()：查询字符串首次出现的下标位置</span><br><span class=\"line\">lastIndexOf()：查询字符串最后出现的下标位置</span><br><span class=\"line\">contains()：查询字符串中是否包含另一个字符串</span><br><span class=\"line\">toLowerCase()：把字符串全部转换成小写</span><br><span class=\"line\">toUpperCase()：把字符串全部转换成大写</span><br><span class=\"line\">length()：查询字符串的长度</span><br><span class=\"line\">trim()：去掉字符串首尾空格</span><br><span class=\"line\">replace()：替换字符串中的某些字符</span><br><span class=\"line\">split()：把字符串分割并返回字符串数组</span><br><span class=\"line\">join()：把字符串数组转为字符串</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-为什么-String-类型用-final-修饰？\"><a href=\"#3-为什么-String-类型用-final-修饰？\" class=\"headerlink\" title=\"3. 为什么 String 类型用 final 修饰？\"></a>3. 为什么 String 类型用 final 修饰？</h2><p>从 String 类的源码来看，String 是被 final 修饰的不可继承类，源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">String</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span>, <span class=\"title\">Comparable</span>&lt;<span class=\"title\">String</span>&gt;, <span class=\"title\">CharSequence</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n\n<p>那这样设计有什么好处呢？</p>\n<p>Java 语言之父 James Gosling 的回答是，他会更倾向于使用 final，因为它能够缓存结果，当你在传参时，不需要考虑谁会修改它的值；如果是可变的话，则有可能需要重新拷贝出来一个新值进行传参，这样在性能上有一定的损失。</p>\n<p>James Gosling 还说迫使 String 类设计成不可变的另一个原因是<strong>安全</strong>。当你在调用其他方法时，比如在调用一些系统级操作指令之前，可能会有一系列校验，如果是可变的话，可能在你校验之后，它的内部值又被改变了，这样可能引起严重的系统崩溃问题，这是迫使 String 类设计为不可变类的一个重要原因。</p>\n<p>总结来说，使用 final 修饰的第一个好处是<strong>安全</strong>，第二个好处是<strong>高效</strong>。我们以 JVM 中的字符串常量池为例，有如下两个变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = <span class=\"string\">\"java\"</span>;</span><br><span class=\"line\">String s2 = <span class=\"string\">\"java\"</span>;</span><br></pre></td></tr></table></figure>\n\n<p>只有字符串是不可变时，我们才能实现字符串常量池，它可以为我们缓存字符串，提高程序运行效率。</p>\n<p><img src=\"../pictures/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200405164821-1586080520904.png\" alt=\"微信截图_20200405164821\"></p>\n<p>试想如果 String 是可变的，那当 s1 的值修改之后，s2 的值也会跟着改变，这样就和我们预期的结果不符合，因此也就没有办法实现字符串常量池的功能了。</p>\n<h2 id=\"4-String-和-StringBuilder、StringBuffer-的区别\"><a href=\"#4-String-和-StringBuilder、StringBuffer-的区别\" class=\"headerlink\" title=\"4. String 和 StringBuilder、StringBuffer 的区别\"></a>4. String 和 StringBuilder、StringBuffer 的区别</h2><h3 id=\"（1）-可变性\"><a href=\"#（1）-可变性\" class=\"headerlink\" title=\"（1） 可变性\"></a>（1） 可变性</h3><p>上文提到，String 类中使用 final 关键字修饰字符数组来保存字符串，<code>private final char value[]</code>，所以 String 对象是不可变的。</p>\n<p>但StringBuilder 与 StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder 中也是使用字符数组保存字符串<code>char[]value</code> 但是没有用 final 关键字修饰，StringBuilder 与 StringBuffer 的构造方法都是调用父类构造方法，所以这两种对象都是可变的。AbstractStringBuilder 的源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractStringBuilder</span> <span class=\"keyword\">implements</span> <span class=\"title\">Appendable</span>, <span class=\"title\">CharSequence</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The value is used for character storage.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The count is the number of characters used.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"（2）线程安全性\"><a href=\"#（2）线程安全性\" class=\"headerlink\" title=\"（2）线程安全性\"></a>（2）线程安全性</h3><p>String 中的对象是不可变的，也就可以理解为常量，线程安全。AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。</p>\n<p>StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁 synchronized，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// StringBuffer 截取部分源码</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> StringBuffer <span class=\"title\">append</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    toStringCache = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.append(str);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// StringBuilder 截取部分源码</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> StringBuilder <span class=\"title\">append</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.append(str);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"（3）性能\"><a href=\"#（3）性能\" class=\"headerlink\" title=\"（3）性能\"></a>（3）性能</h3><p>因为 String 类型是不可变的，所以每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将引用指向新的 String 对象。StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 StringBuilder 相比使用 StringBuffer 性能更高一些，但却线程不安全的风险，因而我们可以再非并发操作的环境下使用 StringBuilder 操作字符串。</p>\n<h3 id=\"（4）对于三者使用的总结\"><a href=\"#（4）对于三者使用的总结\" class=\"headerlink\" title=\"（4）对于三者使用的总结\"></a>（4）对于三者使用的总结</h3><pre><code>- 操作少量的数据: 适用 String\n- 单线程操作字符串缓冲区下操作大量数据: 适用 StringBuilder\n- 多线程操作字符串缓冲区下操作大量数据: 适用 StringBuffer</code></pre><h2 id=\"5-String-在-JVM（Java虚拟机）中是如何存储的？\"><a href=\"#5-String-在-JVM（Java虚拟机）中是如何存储的？\" class=\"headerlink\" title=\"5. String 在 JVM（Java虚拟机）中是如何存储的？\"></a>5. String 在 JVM（Java虚拟机）中是如何存储的？</h2><p>String常见的创建方式有两种，直接赋值的方式<code>Strings1 = &quot;Java&quot;;</code>和<code>Strings2 = new String(&quot;Java&quot;);</code>的方式，但两者在JVM的存储区域却截然不同，在JDK1.8中，变量 s1 会先去<strong>字符串常量池</strong>中找字符串“Java”，如果有相同的字符则直接返回<strong>常量句柄</strong>（一个唯一的整数，作为对象的身份id, 区分不同的对象和同类中的不同实例），如果没有此字符串则会先在常量池中创建此字符串，然后再返回常量句柄；而变量 s2 是直接在堆上创建一个变量，如果调用 intern 方法才会把此字符串保存到常量池中，它们在 JVM 中的存储位置如下图所示：</p>\n<p><img src=\"../pictures/image-20200405194407416.png\" alt=\"image-20200405194407416\"></p>\n<p>代码演示如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Strings1 = newString(<span class=\"string\">\"Java\"</span>);</span><br><span class=\"line\">Strings2 = s1.intern();</span><br><span class=\"line\">Strings3 = <span class=\"string\">\"Java\"</span>;</span><br><span class=\"line\">System.out.println(s1 == s2); <span class=\"comment\">// false</span></span><br><span class=\"line\">System.out.println(s2 == s3); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-String-的-intern-方法有什么含义\"><a href=\"#6-String-的-intern-方法有什么含义\" class=\"headerlink\" title=\"6. String 的 intern 方法有什么含义?\"></a>6. String 的 intern 方法有什么含义?</h2><p>public String <strong>intern</strong>() 返回字符串对象的规范化表示形式，返回值是一个字符串，内容与此字符串相等，但它保证来自字符串池中。</p>\n<p>一个初始为空的字符串池，它由类 String 私有地维护。当调用 intern 方法时，如果字符串池中已经包含一个等于此 String 对象的字符串（是否等于由 String 的 equals 方法来确定），则返回池中的字符串；否则将此 String 对象添加到池中，并且返回此 String 对象的引用。所有的字面值字符串和字符串赋值常量表达式都是内部的。</p>\n<p>如下例子中，变量 str1 会先去字符串常量池中找字符串 “ab”, 如果有相同的字符串则直接返回常量句柄，如果没有此字符串则会先在常量池中创建此字符串，然后再返回常量句柄；而变量 str2 是直接在堆上创建一个变量，如果调用 intern 方法才会把此字符串保存到常量池中。</p>\n<p>字符串相加的时候，都是静态字符串的结果会添加到字符串池，如果其中含有变量（如 str3 str4）则不会进入字符串池中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str1 = <span class=\"string\">\"ab\"</span>;</span><br><span class=\"line\">String str2 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"ab\"</span>);</span><br><span class=\"line\">System.out.println(str1 == str2);           <span class=\"comment\">//false 引用地址不同</span></span><br><span class=\"line\">System.out.println(str1.equals(str2));      <span class=\"comment\">//true 字符串值相同</span></span><br><span class=\"line\">System.out.println(str1 == str2.intern());  <span class=\"comment\">//true</span></span><br><span class=\"line\">String str3 = <span class=\"string\">\"a\"</span>;</span><br><span class=\"line\">String str4 = <span class=\"string\">\"b\"</span>;</span><br><span class=\"line\">System.out.println(str3 + str4 == str1);    <span class=\"comment\">//false</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"a\"</span> + <span class=\"string\">\"b\"</span> == str1);      <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>前文中说明了 equals 和 == 的区别，对于 String 而言，== 判断的是引用地址，那么什么时候会出现引用地址相同的情况呢？现在来看，如果给变量赋值的是静态字符串，就会在字符串中找相同字符串，如果有返回引用，这时候就存在相同的引用地址；而 new String 构造的字符串用 == 判断一定是 false。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str5 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"ab\"</span>);</span><br><span class=\"line\">System.out.println(str2 == str5);           <span class=\"comment\">//false</span></span><br><span class=\"line\">String str6 = <span class=\"string\">\"ab\"</span>;</span><br><span class=\"line\">System.out.println(str1 ==str6);            <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-String-的不可变\"><a href=\"#7-String-的不可变\" class=\"headerlink\" title=\"7. String 的不可变\"></a>7. String 的不可变</h2><p>String 对象是不可变的。从 JDK 文档可以发现，String 类中每一个看起来会修改 String 值的方法，实际上都是创建了一个全新的 String 对象来包含修改后的字符串内容，而最初的 String 对象纹丝未动。</p>\n<p>例如下面的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">upcase</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.toUpperCase();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    String q = <span class=\"string\">\"howdy\"</span>;</span><br><span class=\"line\">    System.out.println(q); <span class=\"comment\">// howdy </span></span><br><span class=\"line\">    String qq = upcase(q);</span><br><span class=\"line\">    System.out.println(qq); <span class=\"comment\">// HOWDY </span></span><br><span class=\"line\">    System.out.println(q); <span class=\"comment\">// howdy </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当把 <code>q</code>传递给<code>upcase()</code>方法时，实际传递的是引用的一个拷贝。每当 String 对象作为方法的参数时，都会复制一份引用，而该引用所指的对象一直在物理位置上没有任何变化。</p>\n<p>回到 upcase() 的定义，传入其中的引用有了名字 s, 只有 upcase() 方法运行时局部引用 s 才存在。一旦 upcase() 结束，s 就消失了。其返回值也就指向了一个新的对象，而 q 仍然在原来的位置。</p>\n<h2 id=\"8-的重载与-StringBuilder\"><a href=\"#8-的重载与-StringBuilder\" class=\"headerlink\" title=\"8. + 的重载与 StringBuilder\"></a>8. + 的重载与 StringBuilder</h2><p>String 对象是不可变的，你可以给一个 String 对象添加任意多的别名，因为 String 是只读的，所以指向它的任何引用都不可能修改它的值，这样也就不会影响到其他引用。</p>\n<p>不可变性会带来一定的效率问题。为 String 对象重载的 + 操作符就是一个例子：操作符 + 可以连接 String。当使用 + 操作符时，编译器会做一定的优化，例如在下面的代码中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String mango = <span class=\"string\">\"mango\"</span>; </span><br><span class=\"line\">String s = <span class=\"string\">\"abc\"</span> + mango + <span class=\"string\">\"def\"</span> + <span class=\"number\">47</span>;</span><br></pre></td></tr></table></figure>\n\n<p>编译器会自动引入<code>java.lang.StringBuilder</code>类（虽然源代码中并没有使用 StringBuilder 类，但因为其高效，编译器会使用它），先创建一个 StringBuilder 对象，对每个字符串调用一次 append 方法，共4次，最后调用 toString() 方法，存为 s。</p>\n<p>现在你可能觉得可以随意使用 String 对象，反正编译器会为你做性能优化。在这之前让我们深入看看编译器会为我们优化到什么程度。下面例子中采用两种方式生成 String：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WhitherStringBuilder</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">implicit</span><span class=\"params\">(String[] fields)</span> </span>&#123; </span><br><span class=\"line\">        String result = <span class=\"string\">\"\"</span>; </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String field : fields) &#123; </span><br><span class=\"line\">            result += field;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">explicit</span><span class=\"params\">(String[] fields)</span> </span>&#123; </span><br><span class=\"line\">        StringBuilder result = <span class=\"keyword\">new</span> StringBuilder(); </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String field : fields) &#123; </span><br><span class=\"line\">            result.append(field); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> result.toString(); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第一种方式中，StringBuilder 是在循环体内部创建的，这意味着每进行一次循环，就会创建一个 StringBuilder 对象。第二种显示定义 StringBuilder 只生成一个 StringBuilder 对象。因此如果使用循环，且可能存在性能问题，那么最好自己创建一个 StringBuilder 对象。</p>"},{"title":"设计数据库的一些认识","date":"2020-07-12T02:58:22.000Z","_content":"\n近期把之前一个小项目重新进行了规整，发现之前数据库设计存在很多问题。本文参考了一些数据库设计的基本规范以及经验等等，谈一些自己对于数据库设计的认识吧。\n\n## 1. 关系数据库的范式\n\n**[数据库规范化]([https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%84%E8%8C%83%E5%8C%96](https://zh.wikipedia.org/wiki/数据库规范化))**，又称正规化、标准化，是数据库设计的一系列原理和技术，以减少数据库中数据冗余，增进数据的一致性。\n\n关系数据库的范式有：第一范式、第二范式、第三范式、BC范式（第三范式的改进范式），除外还包括针对多值依赖的第四范式，连接依赖的第五范式、DK范式和第六范式。\n\n<!--more-->\n\n现在数据库设计最多满足3NF，普遍认为范式过高，虽然具有对数据关系更好的约束性，但也导致数据关系表增加而令数据库IO更易繁忙，原来交由数据库处理的关系约束现更多在数据库使用程序中完成。\n\n![image-20200426223214696](/pictures/image-20200426223214696.png)\n\n### 1.1. 第一范式\n\n[第一范式（1NF）]([https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%B8%80%E6%AD%A3%E8%A6%8F%E5%8C%96](https://zh.wikipedia.org/wiki/第一正規化)) 是数据库正规化所使用的正规形式。第一范式是为了要排除 *重复组* 的出现，所采用的方法是要求数据库的每个列的值域都是由 **原子值** 组成；每个字段的值都只能是单一值。\n\n不符合第一范式的情况：\n\n1. 重复组\n\n   重复组通常会出现在会计账上，每一笔记录可能有不定个数的值。举例来说：\n\n   <img src=\"/pictures/image-20200426223643952.png\"/>\n\n   “数量”就是所谓的重复组了，而在这种情况下这份数据就不符合第一范式。想要消除重复组的话，只要把每笔记录都转化为单一记录即可：\n\n   <img src=\"/pictures/image-20200426223715720.png\" />\n\n2. 缺乏唯一标识符\n\n   一样是在交易这个例子中，同一天同一个人买了同样的数量，这样的交易做了两次：\n\n   <img src=\"/pictures/image-20200426224653184.png\" />\n\n   如上所示，这两笔交易可以说是一模一样，也就是说如果只靠这些数据我们没有办法分辨这两笔记录。我们之所以说它不符合第一范式，是因为上面这样的表示法欠缺一个唯一标识符，可以是一个字段，也可以是一组字段，而且可以保证在这个数据中唯一标识符不会重复出现。要将它正规化到符合第一范式的原则只需要加入一个唯一标识符即可：\n\n   <img src=\"/pictures/image-20200426224741598.png\"  />\n\n3. 单一字段中有多个有意义的值\n\n   在单一字段中存放多个值是违反第一范式的做法，下面这个就是很好的例子，它把多个值用逗号分开来表示：\n\n   <img src=\"/pictures/image-20200426225059906.png\" />\n\n   以这样的设计看来，想要知道有什么人不喜欢某样特定的东西是很不容易的。不过可以把这个数据表转化成下面这种符合第一范式的型式：\n\n   <img src=\"/pictures/image-20200426225223170.png\" />\n\n4. 用很多字段来表达同一个事实\n\n   在同一个数据表里用多个字段来表达同一个事情也是违反第一范式的：\n\n   <img src=\"/pictures/image-20200426225402284.png\" />\n\n   就算我们能确定每个人不喜欢吃的食物最多不会超过三样，这还是一个很糟的设计。举例来说，我们想要知道所有不喜欢同一种食物的人的组合的话，这就不是件容易的事，因为食物有可能出现在任何一个字段，也就是说每一次的查询都要去检查 9 (3 x 3) 组不同的字段组合。\n\n### 1.2. 第二范式\n\n**[第二范式（2NF）]([https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%BA%8C%E6%AD%A3%E8%A6%8F%E5%8C%96](https://zh.wikipedia.org/wiki/第二正規化))** 是数据库正规化所使用的正规形式。规则是要求数据表里的所有数据都要和该数据表的键（主键与*候选键 [下文有介绍 ]*）有完全依赖关系：每个非键属性必须独立于任意一个候选键的任意一部分属性。如果有哪些数据只和一个键的一部分有关的话，就得把它们独立出来变成另一个数据表。如果一个数据表的键只有单个字段的话，它就一定符合第二范式。\n\n一个数据表符合第二范式当且仅当：\n\n- 它符合第一范式\n- 所有非键字段都不能是候选键非全体字段的函数\n\n示例：\n\n有一个数据表记录了设备组件的信息，如下所示\n\n<img src=\"/pictures/image-20200426230751958.png\"  />\n\n这个数据表的每个值都是单一值，所以它符合第一范式。因为同一个组件有可能由不同的供应商提供，所以得把组件 ID 和供应商 ID 合在一起组成一个主键。\n\n组件（关键词）和价格之间的关系很正确：同一个组件在不同供应商有可能会有不同的报价，所以价格确实和主键完全相关（完全依赖）。\n\n另一方面，供应商的名称和住址就只和供应商 ID 有关（部分依赖），这不符合第二范式的原则。仔细看就会发现 \"Stylized Parts\" 这个名称和 \"VA\" 这个住址重复出现了两次；要是它改名了或是被其他公司并购了怎么办？这时候最好把这些数据存到第二个数据表中：\n\n<img src=\"/pictures/image-20200426230943516.png\" />\n\n这么一来，原本的 \"组件来源\" 数据表就得要做相对应的改动：\n\n<img src=\"/pictures/image-20200426231044849.png\" />\n\n检查数据表里的每个字段，确认它们是不是都和关键词完全相关， 这样才能知道这个数据表是不是符合第二范式； 如果不是的话，就把那些不完全相关的字段移到独立的数据表里。 接下来的步骤是要确保所有不是键的字段都和彼此没有相依关系，这就叫做 [第三范式](https://zh.wikipedia.org/wiki/第三正規化)。\n\n### 1.3. 第三范式\n\n**[第三范式（3NF）]([https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%B8%89%E6%AD%A3%E8%A6%8F%E5%8C%96](https://zh.wikipedia.org/wiki/第三正規化))** 是数据库正规化所使用的正规形式，要求所有非主键属性都只和候选键有相关性，也就是说非主键属性之间应该是独立无关的。如果再对第三范式做进一步加强就成了[BC正规化](https://zh.wikipedia.org/wiki/BC正規化)，强调的重点在于“数据间的关系是奠基在主键上、以整个主键为考量、而且除了主键之外不考虑其他因素”。\n\n以下面这个定义机械组件的关系为例：\n\n<img src=\"/pictures/image-20200427232114257.png\" />\n\n本例中制造商地址很明显地不该被列在这个关系里面，因为和组件本身比起来，制造商地址应该和制造商比较有关系；正确的做法应该是把独立成为一个新的数据表：\n\n<img src=\"/pictures/image-20200427232353749.png\" />\n\n然后把原本的数据表改成这样：\n\n<img src=\"/pictures/image-20200427232447340.png\" />\n\n先前那个数据表的问题在于每提到一次制造商名称就要多存一次它的地址，而这就不符合第三范式的原则。\n\n下面提供了另一个例子：\n\n<img src=\"/pictures/image-20200427232554631.png\" />\n\n在本例中，非主键字段完全依赖于主键订单编号，也就是说唯一的订单编号能导出唯一非主键字段值，符合第二范式。第三范式要求非主键字段之间不能有依赖关系，显然本例中小计依赖于非主键字段“单价”和“数量”，不符合第三范式。小计不应该放在这个数据表里面，只要把单价乘上数量就可以得到小计了；如果想要符合第三范式的话，就把小计拿掉吧 (不过在做查询的时候，本来用 SELECT Order.Total FROM Order 就要改成用 SELECT UnitPrice * Quantity FROM Order 了)。\n\n<img src=\"/pictures/image-20200427232650317.png\" />\n\n### 1.4. 第四范式\n\n**[第四正规化（4NF）]([https://zh.wikipedia.org/wiki/%E7%AC%AC%E5%9B%9B%E6%AD%A3%E8%A6%8F%E5%8C%96](https://zh.wikipedia.org/wiki/第四正規化))** 是数据库正规化中所使用的一种正规形式，是BC范式之后的另一层次的规范化。第二范式、第三范式、BC范式关注于属性集合之间的函数依赖；而第四范式关注更一般形式称作 **多值依赖**。\n\n例子：\n\n<img src=\"/pictures/image-20200428230552342.png\" />\n\n每一行指出一家饭店能提供一种披萨与一个配货地区。\n\n该表没有非键属性，因为它仅有的键是{Restaurant, Pizza Variety, Delivery Area}。因此，它满足到BC范式为止的所有范式。如果假设，饭店提供的披萨种类与配货地区无关。也即饭店为所有的供货地区提供它能制作的所有披萨类型。那么，这个表不满足第四范式。因为这个表在{Restaurant}属性（它不是超键）上提供了两个非平凡的多值依赖:\n\n- {Restaurant} -> {Pizza Variety}\n- {Restaurant} -> {Delivery Area}\n\n这些在一个非超键上的非平凡多值依赖说明了饭店提供的披萨的多样性独立于饭店的供货地区。这导致了该表中的数据冗余：例如，A1 Pizza供货 Stuffed Crust就重复了3遍；如果A1 Pizza开始生产Cheese Crust pizzas那么向表中增加多行，A1 Pizza的每个供货地区都需要一行。这就可能在给A1 Pizza的每个供货地区增加一行Cheese Crust披萨时，遗漏了一个供货地区，从而导致不满足于多值依赖{Restaurant}->{Pizza Variety}。\n\n为了避免上述的错误发生，需要把披萨的多样性与供货地区放置在不同的表中，产生了两张满足第四范式的表：\n\n<img src=\"/pictures/image-20200428231345713.png\" />\n\n如果披萨的种类随着供货地区不同而变化，那么最初的三列的表就满足第四范式。\n\n### 1.5. 第五范式\n\n**[第五范式 (5NF)]([https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%BA%94%E8%8C%83%E5%BC%8F](https://zh.wikipedia.org/wiki/第五范式))**，也称投影-连接范式（project-join normal form，PJ/NF）是数据库规范化的一个级别，以去除多个关系之间的语义相关。一张表满足第五范式当且仅当它的每个连接依赖可由候选键推出。\n\n例子：\n\n<img src=\"/pictures/image-20200428232129091.png\" />\n\n三列共同组成了主键。该表也满足第四范式，因为不存在多值依赖。\n\n如果没有任何规则限制上门推销员、品牌、产品类型的组合，那么上述三个属性的表是必须的以描述这些数据。但是，如果假定存在下述规则：如果上门推销员经营某个品牌与某个产品类型，那么该推销员必须经营该品牌制造的该产品类型的商品。这种情形下，可以把上表分为三个表：\n\n![image-20200428232253846](/pictures/image-20200428232253846.png)\n\n在这种情形下，如果上门推销员推销Acme的其它类型的产品也推销其它品牌的真空吸尘器，则他Louis Ferguson不可能拒绝销售由ACME制造的真空吸尘器（Vacuum Cleaner）。\n\n注意这种方式是如何去除数据冗余。假设经营面包箱与真空吸尘器的上门推销员Jack Schneider开始新增销售Robusto品牌。在最初的那张表中，需要增加两行： (<Jack Schneider, Robusto, Breadboxes>, <Jack Schneider, Robusto, Vacuum Cleaners>)。而在分解后的三张表的设计中，仅需要在表“Brands By Traveling Salesman”中增加一行：(<Jack Schneider, Robusto>)。\n\n用途：\n\n仅在很少情况下满足第四范式的表可能会不满足第五范式。这发生在复杂的真实世界的约束限定了属性的有效组合，但不能在满足第四范式的表的结构中体现出来。这种表如果不能规范化为第五范式，就需要应用程序通过插入、修改、删除等操作来维护表中的数据的逻辑一致性。相反，满足第五范式的表的设计排除了这种不一致性。\n\n## 2. 关系键\n\n**[关系键]([https://zh.wikipedia.org/wiki/%E5%85%B3%E7%B3%BB%E9%94%AE](https://zh.wikipedia.org/wiki/关系键))** 是关系数据库的重要组成部分。关系键是一个表中的一个或几个属性，用来标识该表的每一行或与另一个表产生联系。\n\n![img](/pictures/280px-PrimaryKey_zht.svg.png)\n\n## 3. 书写高质量SQL的建议\n\n[MySQL高性能优化规范建议](https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485117&idx=1&sn=92361755b7c3de488b415ec4c5f46d73&chksm=cea24976f9d5c060babe50c3747616cce63df5d50947903a262704988143c2eeb4069ae45420&token=79317275&lang=zh_CN#rd)\n\n","source":"_posts/设计数据库的一些认识.md","raw":"---\ntitle: 设计数据库的一些认识\ndate: 2020-07-12 10:58:22\ntags:\n  - Database\ncategories: Database\n---\n\n近期把之前一个小项目重新进行了规整，发现之前数据库设计存在很多问题。本文参考了一些数据库设计的基本规范以及经验等等，谈一些自己对于数据库设计的认识吧。\n\n## 1. 关系数据库的范式\n\n**[数据库规范化]([https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%84%E8%8C%83%E5%8C%96](https://zh.wikipedia.org/wiki/数据库规范化))**，又称正规化、标准化，是数据库设计的一系列原理和技术，以减少数据库中数据冗余，增进数据的一致性。\n\n关系数据库的范式有：第一范式、第二范式、第三范式、BC范式（第三范式的改进范式），除外还包括针对多值依赖的第四范式，连接依赖的第五范式、DK范式和第六范式。\n\n<!--more-->\n\n现在数据库设计最多满足3NF，普遍认为范式过高，虽然具有对数据关系更好的约束性，但也导致数据关系表增加而令数据库IO更易繁忙，原来交由数据库处理的关系约束现更多在数据库使用程序中完成。\n\n![image-20200426223214696](/pictures/image-20200426223214696.png)\n\n### 1.1. 第一范式\n\n[第一范式（1NF）]([https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%B8%80%E6%AD%A3%E8%A6%8F%E5%8C%96](https://zh.wikipedia.org/wiki/第一正規化)) 是数据库正规化所使用的正规形式。第一范式是为了要排除 *重复组* 的出现，所采用的方法是要求数据库的每个列的值域都是由 **原子值** 组成；每个字段的值都只能是单一值。\n\n不符合第一范式的情况：\n\n1. 重复组\n\n   重复组通常会出现在会计账上，每一笔记录可能有不定个数的值。举例来说：\n\n   <img src=\"/pictures/image-20200426223643952.png\"/>\n\n   “数量”就是所谓的重复组了，而在这种情况下这份数据就不符合第一范式。想要消除重复组的话，只要把每笔记录都转化为单一记录即可：\n\n   <img src=\"/pictures/image-20200426223715720.png\" />\n\n2. 缺乏唯一标识符\n\n   一样是在交易这个例子中，同一天同一个人买了同样的数量，这样的交易做了两次：\n\n   <img src=\"/pictures/image-20200426224653184.png\" />\n\n   如上所示，这两笔交易可以说是一模一样，也就是说如果只靠这些数据我们没有办法分辨这两笔记录。我们之所以说它不符合第一范式，是因为上面这样的表示法欠缺一个唯一标识符，可以是一个字段，也可以是一组字段，而且可以保证在这个数据中唯一标识符不会重复出现。要将它正规化到符合第一范式的原则只需要加入一个唯一标识符即可：\n\n   <img src=\"/pictures/image-20200426224741598.png\"  />\n\n3. 单一字段中有多个有意义的值\n\n   在单一字段中存放多个值是违反第一范式的做法，下面这个就是很好的例子，它把多个值用逗号分开来表示：\n\n   <img src=\"/pictures/image-20200426225059906.png\" />\n\n   以这样的设计看来，想要知道有什么人不喜欢某样特定的东西是很不容易的。不过可以把这个数据表转化成下面这种符合第一范式的型式：\n\n   <img src=\"/pictures/image-20200426225223170.png\" />\n\n4. 用很多字段来表达同一个事实\n\n   在同一个数据表里用多个字段来表达同一个事情也是违反第一范式的：\n\n   <img src=\"/pictures/image-20200426225402284.png\" />\n\n   就算我们能确定每个人不喜欢吃的食物最多不会超过三样，这还是一个很糟的设计。举例来说，我们想要知道所有不喜欢同一种食物的人的组合的话，这就不是件容易的事，因为食物有可能出现在任何一个字段，也就是说每一次的查询都要去检查 9 (3 x 3) 组不同的字段组合。\n\n### 1.2. 第二范式\n\n**[第二范式（2NF）]([https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%BA%8C%E6%AD%A3%E8%A6%8F%E5%8C%96](https://zh.wikipedia.org/wiki/第二正規化))** 是数据库正规化所使用的正规形式。规则是要求数据表里的所有数据都要和该数据表的键（主键与*候选键 [下文有介绍 ]*）有完全依赖关系：每个非键属性必须独立于任意一个候选键的任意一部分属性。如果有哪些数据只和一个键的一部分有关的话，就得把它们独立出来变成另一个数据表。如果一个数据表的键只有单个字段的话，它就一定符合第二范式。\n\n一个数据表符合第二范式当且仅当：\n\n- 它符合第一范式\n- 所有非键字段都不能是候选键非全体字段的函数\n\n示例：\n\n有一个数据表记录了设备组件的信息，如下所示\n\n<img src=\"/pictures/image-20200426230751958.png\"  />\n\n这个数据表的每个值都是单一值，所以它符合第一范式。因为同一个组件有可能由不同的供应商提供，所以得把组件 ID 和供应商 ID 合在一起组成一个主键。\n\n组件（关键词）和价格之间的关系很正确：同一个组件在不同供应商有可能会有不同的报价，所以价格确实和主键完全相关（完全依赖）。\n\n另一方面，供应商的名称和住址就只和供应商 ID 有关（部分依赖），这不符合第二范式的原则。仔细看就会发现 \"Stylized Parts\" 这个名称和 \"VA\" 这个住址重复出现了两次；要是它改名了或是被其他公司并购了怎么办？这时候最好把这些数据存到第二个数据表中：\n\n<img src=\"/pictures/image-20200426230943516.png\" />\n\n这么一来，原本的 \"组件来源\" 数据表就得要做相对应的改动：\n\n<img src=\"/pictures/image-20200426231044849.png\" />\n\n检查数据表里的每个字段，确认它们是不是都和关键词完全相关， 这样才能知道这个数据表是不是符合第二范式； 如果不是的话，就把那些不完全相关的字段移到独立的数据表里。 接下来的步骤是要确保所有不是键的字段都和彼此没有相依关系，这就叫做 [第三范式](https://zh.wikipedia.org/wiki/第三正規化)。\n\n### 1.3. 第三范式\n\n**[第三范式（3NF）]([https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%B8%89%E6%AD%A3%E8%A6%8F%E5%8C%96](https://zh.wikipedia.org/wiki/第三正規化))** 是数据库正规化所使用的正规形式，要求所有非主键属性都只和候选键有相关性，也就是说非主键属性之间应该是独立无关的。如果再对第三范式做进一步加强就成了[BC正规化](https://zh.wikipedia.org/wiki/BC正規化)，强调的重点在于“数据间的关系是奠基在主键上、以整个主键为考量、而且除了主键之外不考虑其他因素”。\n\n以下面这个定义机械组件的关系为例：\n\n<img src=\"/pictures/image-20200427232114257.png\" />\n\n本例中制造商地址很明显地不该被列在这个关系里面，因为和组件本身比起来，制造商地址应该和制造商比较有关系；正确的做法应该是把独立成为一个新的数据表：\n\n<img src=\"/pictures/image-20200427232353749.png\" />\n\n然后把原本的数据表改成这样：\n\n<img src=\"/pictures/image-20200427232447340.png\" />\n\n先前那个数据表的问题在于每提到一次制造商名称就要多存一次它的地址，而这就不符合第三范式的原则。\n\n下面提供了另一个例子：\n\n<img src=\"/pictures/image-20200427232554631.png\" />\n\n在本例中，非主键字段完全依赖于主键订单编号，也就是说唯一的订单编号能导出唯一非主键字段值，符合第二范式。第三范式要求非主键字段之间不能有依赖关系，显然本例中小计依赖于非主键字段“单价”和“数量”，不符合第三范式。小计不应该放在这个数据表里面，只要把单价乘上数量就可以得到小计了；如果想要符合第三范式的话，就把小计拿掉吧 (不过在做查询的时候，本来用 SELECT Order.Total FROM Order 就要改成用 SELECT UnitPrice * Quantity FROM Order 了)。\n\n<img src=\"/pictures/image-20200427232650317.png\" />\n\n### 1.4. 第四范式\n\n**[第四正规化（4NF）]([https://zh.wikipedia.org/wiki/%E7%AC%AC%E5%9B%9B%E6%AD%A3%E8%A6%8F%E5%8C%96](https://zh.wikipedia.org/wiki/第四正規化))** 是数据库正规化中所使用的一种正规形式，是BC范式之后的另一层次的规范化。第二范式、第三范式、BC范式关注于属性集合之间的函数依赖；而第四范式关注更一般形式称作 **多值依赖**。\n\n例子：\n\n<img src=\"/pictures/image-20200428230552342.png\" />\n\n每一行指出一家饭店能提供一种披萨与一个配货地区。\n\n该表没有非键属性，因为它仅有的键是{Restaurant, Pizza Variety, Delivery Area}。因此，它满足到BC范式为止的所有范式。如果假设，饭店提供的披萨种类与配货地区无关。也即饭店为所有的供货地区提供它能制作的所有披萨类型。那么，这个表不满足第四范式。因为这个表在{Restaurant}属性（它不是超键）上提供了两个非平凡的多值依赖:\n\n- {Restaurant} -> {Pizza Variety}\n- {Restaurant} -> {Delivery Area}\n\n这些在一个非超键上的非平凡多值依赖说明了饭店提供的披萨的多样性独立于饭店的供货地区。这导致了该表中的数据冗余：例如，A1 Pizza供货 Stuffed Crust就重复了3遍；如果A1 Pizza开始生产Cheese Crust pizzas那么向表中增加多行，A1 Pizza的每个供货地区都需要一行。这就可能在给A1 Pizza的每个供货地区增加一行Cheese Crust披萨时，遗漏了一个供货地区，从而导致不满足于多值依赖{Restaurant}->{Pizza Variety}。\n\n为了避免上述的错误发生，需要把披萨的多样性与供货地区放置在不同的表中，产生了两张满足第四范式的表：\n\n<img src=\"/pictures/image-20200428231345713.png\" />\n\n如果披萨的种类随着供货地区不同而变化，那么最初的三列的表就满足第四范式。\n\n### 1.5. 第五范式\n\n**[第五范式 (5NF)]([https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%BA%94%E8%8C%83%E5%BC%8F](https://zh.wikipedia.org/wiki/第五范式))**，也称投影-连接范式（project-join normal form，PJ/NF）是数据库规范化的一个级别，以去除多个关系之间的语义相关。一张表满足第五范式当且仅当它的每个连接依赖可由候选键推出。\n\n例子：\n\n<img src=\"/pictures/image-20200428232129091.png\" />\n\n三列共同组成了主键。该表也满足第四范式，因为不存在多值依赖。\n\n如果没有任何规则限制上门推销员、品牌、产品类型的组合，那么上述三个属性的表是必须的以描述这些数据。但是，如果假定存在下述规则：如果上门推销员经营某个品牌与某个产品类型，那么该推销员必须经营该品牌制造的该产品类型的商品。这种情形下，可以把上表分为三个表：\n\n![image-20200428232253846](/pictures/image-20200428232253846.png)\n\n在这种情形下，如果上门推销员推销Acme的其它类型的产品也推销其它品牌的真空吸尘器，则他Louis Ferguson不可能拒绝销售由ACME制造的真空吸尘器（Vacuum Cleaner）。\n\n注意这种方式是如何去除数据冗余。假设经营面包箱与真空吸尘器的上门推销员Jack Schneider开始新增销售Robusto品牌。在最初的那张表中，需要增加两行： (<Jack Schneider, Robusto, Breadboxes>, <Jack Schneider, Robusto, Vacuum Cleaners>)。而在分解后的三张表的设计中，仅需要在表“Brands By Traveling Salesman”中增加一行：(<Jack Schneider, Robusto>)。\n\n用途：\n\n仅在很少情况下满足第四范式的表可能会不满足第五范式。这发生在复杂的真实世界的约束限定了属性的有效组合，但不能在满足第四范式的表的结构中体现出来。这种表如果不能规范化为第五范式，就需要应用程序通过插入、修改、删除等操作来维护表中的数据的逻辑一致性。相反，满足第五范式的表的设计排除了这种不一致性。\n\n## 2. 关系键\n\n**[关系键]([https://zh.wikipedia.org/wiki/%E5%85%B3%E7%B3%BB%E9%94%AE](https://zh.wikipedia.org/wiki/关系键))** 是关系数据库的重要组成部分。关系键是一个表中的一个或几个属性，用来标识该表的每一行或与另一个表产生联系。\n\n![img](/pictures/280px-PrimaryKey_zht.svg.png)\n\n## 3. 书写高质量SQL的建议\n\n[MySQL高性能优化规范建议](https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485117&idx=1&sn=92361755b7c3de488b415ec4c5f46d73&chksm=cea24976f9d5c060babe50c3747616cce63df5d50947903a262704988143c2eeb4069ae45420&token=79317275&lang=zh_CN#rd)\n\n","slug":"设计数据库的一些认识","published":1,"updated":"2020-12-26T12:26:49.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5mkvs000dnyl1e9gxclra","content":"<p>近期把之前一个小项目重新进行了规整，发现之前数据库设计存在很多问题。本文参考了一些数据库设计的基本规范以及经验等等，谈一些自己对于数据库设计的认识吧。</p>\n<h2 id=\"1-关系数据库的范式\"><a href=\"#1-关系数据库的范式\" class=\"headerlink\" title=\"1. 关系数据库的范式\"></a>1. 关系数据库的范式</h2><p><strong><a href=\"[https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%84%E8%8C%83%E5%8C%96](https://zh.wikipedia.org/wiki/数据库规范化)\">数据库规范化</a></strong>，又称正规化、标准化，是数据库设计的一系列原理和技术，以减少数据库中数据冗余，增进数据的一致性。</p>\n<p>关系数据库的范式有：第一范式、第二范式、第三范式、BC范式（第三范式的改进范式），除外还包括针对多值依赖的第四范式，连接依赖的第五范式、DK范式和第六范式。</p>\n<a id=\"more\"></a>\n\n<p>现在数据库设计最多满足3NF，普遍认为范式过高，虽然具有对数据关系更好的约束性，但也导致数据关系表增加而令数据库IO更易繁忙，原来交由数据库处理的关系约束现更多在数据库使用程序中完成。</p>\n<p><img src=\"/pictures/image-20200426223214696.png\" alt=\"image-20200426223214696\"></p>\n<h3 id=\"1-1-第一范式\"><a href=\"#1-1-第一范式\" class=\"headerlink\" title=\"1.1. 第一范式\"></a>1.1. 第一范式</h3><p><a href=\"[https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%B8%80%E6%AD%A3%E8%A6%8F%E5%8C%96](https://zh.wikipedia.org/wiki/第一正規化)\">第一范式（1NF）</a> 是数据库正规化所使用的正规形式。第一范式是为了要排除 <em>重复组</em> 的出现，所采用的方法是要求数据库的每个列的值域都是由 <strong>原子值</strong> 组成；每个字段的值都只能是单一值。</p>\n<p>不符合第一范式的情况：</p>\n<ol>\n<li><p>重复组</p>\n<p>重复组通常会出现在会计账上，每一笔记录可能有不定个数的值。举例来说：</p>\n<img src=\"/pictures/image-20200426223643952.png\"/>\n\n<p>“数量”就是所谓的重复组了，而在这种情况下这份数据就不符合第一范式。想要消除重复组的话，只要把每笔记录都转化为单一记录即可：</p>\n<img src=\"/pictures/image-20200426223715720.png\" />\n</li>\n<li><p>缺乏唯一标识符</p>\n<p>一样是在交易这个例子中，同一天同一个人买了同样的数量，这样的交易做了两次：</p>\n<img src=\"/pictures/image-20200426224653184.png\" />\n\n<p>如上所示，这两笔交易可以说是一模一样，也就是说如果只靠这些数据我们没有办法分辨这两笔记录。我们之所以说它不符合第一范式，是因为上面这样的表示法欠缺一个唯一标识符，可以是一个字段，也可以是一组字段，而且可以保证在这个数据中唯一标识符不会重复出现。要将它正规化到符合第一范式的原则只需要加入一个唯一标识符即可：</p>\n<img src=\"/pictures/image-20200426224741598.png\"  />\n</li>\n<li><p>单一字段中有多个有意义的值</p>\n<p>在单一字段中存放多个值是违反第一范式的做法，下面这个就是很好的例子，它把多个值用逗号分开来表示：</p>\n<img src=\"/pictures/image-20200426225059906.png\" />\n\n<p>以这样的设计看来，想要知道有什么人不喜欢某样特定的东西是很不容易的。不过可以把这个数据表转化成下面这种符合第一范式的型式：</p>\n<img src=\"/pictures/image-20200426225223170.png\" />\n</li>\n<li><p>用很多字段来表达同一个事实</p>\n<p>在同一个数据表里用多个字段来表达同一个事情也是违反第一范式的：</p>\n<img src=\"/pictures/image-20200426225402284.png\" />\n\n<p>就算我们能确定每个人不喜欢吃的食物最多不会超过三样，这还是一个很糟的设计。举例来说，我们想要知道所有不喜欢同一种食物的人的组合的话，这就不是件容易的事，因为食物有可能出现在任何一个字段，也就是说每一次的查询都要去检查 9 (3 x 3) 组不同的字段组合。</p>\n</li>\n</ol>\n<h3 id=\"1-2-第二范式\"><a href=\"#1-2-第二范式\" class=\"headerlink\" title=\"1.2. 第二范式\"></a>1.2. 第二范式</h3><p><strong><a href=\"[https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%BA%8C%E6%AD%A3%E8%A6%8F%E5%8C%96](https://zh.wikipedia.org/wiki/第二正規化)\">第二范式（2NF）</a></strong> 是数据库正规化所使用的正规形式。规则是要求数据表里的所有数据都要和该数据表的键（主键与<em>候选键 [下文有介绍 ]</em>）有完全依赖关系：每个非键属性必须独立于任意一个候选键的任意一部分属性。如果有哪些数据只和一个键的一部分有关的话，就得把它们独立出来变成另一个数据表。如果一个数据表的键只有单个字段的话，它就一定符合第二范式。</p>\n<p>一个数据表符合第二范式当且仅当：</p>\n<ul>\n<li>它符合第一范式</li>\n<li>所有非键字段都不能是候选键非全体字段的函数</li>\n</ul>\n<p>示例：</p>\n<p>有一个数据表记录了设备组件的信息，如下所示</p>\n<img src=\"/pictures/image-20200426230751958.png\"  />\n\n<p>这个数据表的每个值都是单一值，所以它符合第一范式。因为同一个组件有可能由不同的供应商提供，所以得把组件 ID 和供应商 ID 合在一起组成一个主键。</p>\n<p>组件（关键词）和价格之间的关系很正确：同一个组件在不同供应商有可能会有不同的报价，所以价格确实和主键完全相关（完全依赖）。</p>\n<p>另一方面，供应商的名称和住址就只和供应商 ID 有关（部分依赖），这不符合第二范式的原则。仔细看就会发现 “Stylized Parts” 这个名称和 “VA” 这个住址重复出现了两次；要是它改名了或是被其他公司并购了怎么办？这时候最好把这些数据存到第二个数据表中：</p>\n<img src=\"/pictures/image-20200426230943516.png\" />\n\n<p>这么一来，原本的 “组件来源” 数据表就得要做相对应的改动：</p>\n<img src=\"/pictures/image-20200426231044849.png\" />\n\n<p>检查数据表里的每个字段，确认它们是不是都和关键词完全相关， 这样才能知道这个数据表是不是符合第二范式； 如果不是的话，就把那些不完全相关的字段移到独立的数据表里。 接下来的步骤是要确保所有不是键的字段都和彼此没有相依关系，这就叫做 <a href=\"https://zh.wikipedia.org/wiki/第三正規化\" target=\"_blank\" rel=\"noopener\">第三范式</a>。</p>\n<h3 id=\"1-3-第三范式\"><a href=\"#1-3-第三范式\" class=\"headerlink\" title=\"1.3. 第三范式\"></a>1.3. 第三范式</h3><p><strong><a href=\"[https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%B8%89%E6%AD%A3%E8%A6%8F%E5%8C%96](https://zh.wikipedia.org/wiki/第三正規化)\">第三范式（3NF）</a></strong> 是数据库正规化所使用的正规形式，要求所有非主键属性都只和候选键有相关性，也就是说非主键属性之间应该是独立无关的。如果再对第三范式做进一步加强就成了<a href=\"https://zh.wikipedia.org/wiki/BC正規化\" target=\"_blank\" rel=\"noopener\">BC正规化</a>，强调的重点在于“数据间的关系是奠基在主键上、以整个主键为考量、而且除了主键之外不考虑其他因素”。</p>\n<p>以下面这个定义机械组件的关系为例：</p>\n<img src=\"/pictures/image-20200427232114257.png\" />\n\n<p>本例中制造商地址很明显地不该被列在这个关系里面，因为和组件本身比起来，制造商地址应该和制造商比较有关系；正确的做法应该是把独立成为一个新的数据表：</p>\n<img src=\"/pictures/image-20200427232353749.png\" />\n\n<p>然后把原本的数据表改成这样：</p>\n<img src=\"/pictures/image-20200427232447340.png\" />\n\n<p>先前那个数据表的问题在于每提到一次制造商名称就要多存一次它的地址，而这就不符合第三范式的原则。</p>\n<p>下面提供了另一个例子：</p>\n<img src=\"/pictures/image-20200427232554631.png\" />\n\n<p>在本例中，非主键字段完全依赖于主键订单编号，也就是说唯一的订单编号能导出唯一非主键字段值，符合第二范式。第三范式要求非主键字段之间不能有依赖关系，显然本例中小计依赖于非主键字段“单价”和“数量”，不符合第三范式。小计不应该放在这个数据表里面，只要把单价乘上数量就可以得到小计了；如果想要符合第三范式的话，就把小计拿掉吧 (不过在做查询的时候，本来用 SELECT Order.Total FROM Order 就要改成用 SELECT UnitPrice * Quantity FROM Order 了)。</p>\n<img src=\"/pictures/image-20200427232650317.png\" />\n\n<h3 id=\"1-4-第四范式\"><a href=\"#1-4-第四范式\" class=\"headerlink\" title=\"1.4. 第四范式\"></a>1.4. 第四范式</h3><p><strong><a href=\"[https://zh.wikipedia.org/wiki/%E7%AC%AC%E5%9B%9B%E6%AD%A3%E8%A6%8F%E5%8C%96](https://zh.wikipedia.org/wiki/第四正規化)\">第四正规化（4NF）</a></strong> 是数据库正规化中所使用的一种正规形式，是BC范式之后的另一层次的规范化。第二范式、第三范式、BC范式关注于属性集合之间的函数依赖；而第四范式关注更一般形式称作 <strong>多值依赖</strong>。</p>\n<p>例子：</p>\n<img src=\"/pictures/image-20200428230552342.png\" />\n\n<p>每一行指出一家饭店能提供一种披萨与一个配货地区。</p>\n<p>该表没有非键属性，因为它仅有的键是{Restaurant, Pizza Variety, Delivery Area}。因此，它满足到BC范式为止的所有范式。如果假设，饭店提供的披萨种类与配货地区无关。也即饭店为所有的供货地区提供它能制作的所有披萨类型。那么，这个表不满足第四范式。因为这个表在{Restaurant}属性（它不是超键）上提供了两个非平凡的多值依赖:</p>\n<ul>\n<li>{Restaurant} -&gt; {Pizza Variety}</li>\n<li>{Restaurant} -&gt; {Delivery Area}</li>\n</ul>\n<p>这些在一个非超键上的非平凡多值依赖说明了饭店提供的披萨的多样性独立于饭店的供货地区。这导致了该表中的数据冗余：例如，A1 Pizza供货 Stuffed Crust就重复了3遍；如果A1 Pizza开始生产Cheese Crust pizzas那么向表中增加多行，A1 Pizza的每个供货地区都需要一行。这就可能在给A1 Pizza的每个供货地区增加一行Cheese Crust披萨时，遗漏了一个供货地区，从而导致不满足于多值依赖{Restaurant}-&gt;{Pizza Variety}。</p>\n<p>为了避免上述的错误发生，需要把披萨的多样性与供货地区放置在不同的表中，产生了两张满足第四范式的表：</p>\n<img src=\"/pictures/image-20200428231345713.png\" />\n\n<p>如果披萨的种类随着供货地区不同而变化，那么最初的三列的表就满足第四范式。</p>\n<h3 id=\"1-5-第五范式\"><a href=\"#1-5-第五范式\" class=\"headerlink\" title=\"1.5. 第五范式\"></a>1.5. 第五范式</h3><p><strong><a href=\"[https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%BA%94%E8%8C%83%E5%BC%8F](https://zh.wikipedia.org/wiki/第五范式)\">第五范式 (5NF)</a></strong>，也称投影-连接范式（project-join normal form，PJ/NF）是数据库规范化的一个级别，以去除多个关系之间的语义相关。一张表满足第五范式当且仅当它的每个连接依赖可由候选键推出。</p>\n<p>例子：</p>\n<img src=\"/pictures/image-20200428232129091.png\" />\n\n<p>三列共同组成了主键。该表也满足第四范式，因为不存在多值依赖。</p>\n<p>如果没有任何规则限制上门推销员、品牌、产品类型的组合，那么上述三个属性的表是必须的以描述这些数据。但是，如果假定存在下述规则：如果上门推销员经营某个品牌与某个产品类型，那么该推销员必须经营该品牌制造的该产品类型的商品。这种情形下，可以把上表分为三个表：</p>\n<p><img src=\"/pictures/image-20200428232253846.png\" alt=\"image-20200428232253846\"></p>\n<p>在这种情形下，如果上门推销员推销Acme的其它类型的产品也推销其它品牌的真空吸尘器，则他Louis Ferguson不可能拒绝销售由ACME制造的真空吸尘器（Vacuum Cleaner）。</p>\n<p>注意这种方式是如何去除数据冗余。假设经营面包箱与真空吸尘器的上门推销员Jack Schneider开始新增销售Robusto品牌。在最初的那张表中，需要增加两行： (&lt;Jack Schneider, Robusto, Breadboxes&gt;, &lt;Jack Schneider, Robusto, Vacuum Cleaners&gt;)。而在分解后的三张表的设计中，仅需要在表“Brands By Traveling Salesman”中增加一行：(&lt;Jack Schneider, Robusto&gt;)。</p>\n<p>用途：</p>\n<p>仅在很少情况下满足第四范式的表可能会不满足第五范式。这发生在复杂的真实世界的约束限定了属性的有效组合，但不能在满足第四范式的表的结构中体现出来。这种表如果不能规范化为第五范式，就需要应用程序通过插入、修改、删除等操作来维护表中的数据的逻辑一致性。相反，满足第五范式的表的设计排除了这种不一致性。</p>\n<h2 id=\"2-关系键\"><a href=\"#2-关系键\" class=\"headerlink\" title=\"2. 关系键\"></a>2. 关系键</h2><p><strong><a href=\"[https://zh.wikipedia.org/wiki/%E5%85%B3%E7%B3%BB%E9%94%AE](https://zh.wikipedia.org/wiki/关系键)\">关系键</a></strong> 是关系数据库的重要组成部分。关系键是一个表中的一个或几个属性，用来标识该表的每一行或与另一个表产生联系。</p>\n<p><img src=\"/pictures/280px-PrimaryKey_zht.svg.png\" alt=\"img\"></p>\n<h2 id=\"3-书写高质量SQL的建议\"><a href=\"#3-书写高质量SQL的建议\" class=\"headerlink\" title=\"3. 书写高质量SQL的建议\"></a>3. 书写高质量SQL的建议</h2><p><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485117&idx=1&sn=92361755b7c3de488b415ec4c5f46d73&chksm=cea24976f9d5c060babe50c3747616cce63df5d50947903a262704988143c2eeb4069ae45420&token=79317275&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">MySQL高性能优化规范建议</a></p>\n","site":{"data":{}},"length":3736,"excerpt":"<p>近期把之前一个小项目重新进行了规整，发现之前数据库设计存在很多问题。本文参考了一些数据库设计的基本规范以及经验等等，谈一些自己对于数据库设计的认识吧。</p>\n<h2 id=\"1-关系数据库的范式\"><a href=\"#1-关系数据库的范式\" class=\"headerlink\" title=\"1. 关系数据库的范式\"></a>1. 关系数据库的范式</h2><p><strong><a href=\"[https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%84%E8%8C%83%E5%8C%96](https://zh.wikipedia.org/wiki/数据库规范化)\">数据库规范化</a></strong>，又称正规化、标准化，是数据库设计的一系列原理和技术，以减少数据库中数据冗余，增进数据的一致性。</p>\n<p>关系数据库的范式有：第一范式、第二范式、第三范式、BC范式（第三范式的改进范式），除外还包括针对多值依赖的第四范式，连接依赖的第五范式、DK范式和第六范式。</p>","more":"<p>现在数据库设计最多满足3NF，普遍认为范式过高，虽然具有对数据关系更好的约束性，但也导致数据关系表增加而令数据库IO更易繁忙，原来交由数据库处理的关系约束现更多在数据库使用程序中完成。</p>\n<p><img src=\"/pictures/image-20200426223214696.png\" alt=\"image-20200426223214696\"></p>\n<h3 id=\"1-1-第一范式\"><a href=\"#1-1-第一范式\" class=\"headerlink\" title=\"1.1. 第一范式\"></a>1.1. 第一范式</h3><p><a href=\"[https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%B8%80%E6%AD%A3%E8%A6%8F%E5%8C%96](https://zh.wikipedia.org/wiki/第一正規化)\">第一范式（1NF）</a> 是数据库正规化所使用的正规形式。第一范式是为了要排除 <em>重复组</em> 的出现，所采用的方法是要求数据库的每个列的值域都是由 <strong>原子值</strong> 组成；每个字段的值都只能是单一值。</p>\n<p>不符合第一范式的情况：</p>\n<ol>\n<li><p>重复组</p>\n<p>重复组通常会出现在会计账上，每一笔记录可能有不定个数的值。举例来说：</p>\n<img src=\"/pictures/image-20200426223643952.png\"/>\n\n<p>“数量”就是所谓的重复组了，而在这种情况下这份数据就不符合第一范式。想要消除重复组的话，只要把每笔记录都转化为单一记录即可：</p>\n<img src=\"/pictures/image-20200426223715720.png\" />\n</li>\n<li><p>缺乏唯一标识符</p>\n<p>一样是在交易这个例子中，同一天同一个人买了同样的数量，这样的交易做了两次：</p>\n<img src=\"/pictures/image-20200426224653184.png\" />\n\n<p>如上所示，这两笔交易可以说是一模一样，也就是说如果只靠这些数据我们没有办法分辨这两笔记录。我们之所以说它不符合第一范式，是因为上面这样的表示法欠缺一个唯一标识符，可以是一个字段，也可以是一组字段，而且可以保证在这个数据中唯一标识符不会重复出现。要将它正规化到符合第一范式的原则只需要加入一个唯一标识符即可：</p>\n<img src=\"/pictures/image-20200426224741598.png\"  />\n</li>\n<li><p>单一字段中有多个有意义的值</p>\n<p>在单一字段中存放多个值是违反第一范式的做法，下面这个就是很好的例子，它把多个值用逗号分开来表示：</p>\n<img src=\"/pictures/image-20200426225059906.png\" />\n\n<p>以这样的设计看来，想要知道有什么人不喜欢某样特定的东西是很不容易的。不过可以把这个数据表转化成下面这种符合第一范式的型式：</p>\n<img src=\"/pictures/image-20200426225223170.png\" />\n</li>\n<li><p>用很多字段来表达同一个事实</p>\n<p>在同一个数据表里用多个字段来表达同一个事情也是违反第一范式的：</p>\n<img src=\"/pictures/image-20200426225402284.png\" />\n\n<p>就算我们能确定每个人不喜欢吃的食物最多不会超过三样，这还是一个很糟的设计。举例来说，我们想要知道所有不喜欢同一种食物的人的组合的话，这就不是件容易的事，因为食物有可能出现在任何一个字段，也就是说每一次的查询都要去检查 9 (3 x 3) 组不同的字段组合。</p>\n</li>\n</ol>\n<h3 id=\"1-2-第二范式\"><a href=\"#1-2-第二范式\" class=\"headerlink\" title=\"1.2. 第二范式\"></a>1.2. 第二范式</h3><p><strong><a href=\"[https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%BA%8C%E6%AD%A3%E8%A6%8F%E5%8C%96](https://zh.wikipedia.org/wiki/第二正規化)\">第二范式（2NF）</a></strong> 是数据库正规化所使用的正规形式。规则是要求数据表里的所有数据都要和该数据表的键（主键与<em>候选键 [下文有介绍 ]</em>）有完全依赖关系：每个非键属性必须独立于任意一个候选键的任意一部分属性。如果有哪些数据只和一个键的一部分有关的话，就得把它们独立出来变成另一个数据表。如果一个数据表的键只有单个字段的话，它就一定符合第二范式。</p>\n<p>一个数据表符合第二范式当且仅当：</p>\n<ul>\n<li>它符合第一范式</li>\n<li>所有非键字段都不能是候选键非全体字段的函数</li>\n</ul>\n<p>示例：</p>\n<p>有一个数据表记录了设备组件的信息，如下所示</p>\n<img src=\"/pictures/image-20200426230751958.png\"  />\n\n<p>这个数据表的每个值都是单一值，所以它符合第一范式。因为同一个组件有可能由不同的供应商提供，所以得把组件 ID 和供应商 ID 合在一起组成一个主键。</p>\n<p>组件（关键词）和价格之间的关系很正确：同一个组件在不同供应商有可能会有不同的报价，所以价格确实和主键完全相关（完全依赖）。</p>\n<p>另一方面，供应商的名称和住址就只和供应商 ID 有关（部分依赖），这不符合第二范式的原则。仔细看就会发现 “Stylized Parts” 这个名称和 “VA” 这个住址重复出现了两次；要是它改名了或是被其他公司并购了怎么办？这时候最好把这些数据存到第二个数据表中：</p>\n<img src=\"/pictures/image-20200426230943516.png\" />\n\n<p>这么一来，原本的 “组件来源” 数据表就得要做相对应的改动：</p>\n<img src=\"/pictures/image-20200426231044849.png\" />\n\n<p>检查数据表里的每个字段，确认它们是不是都和关键词完全相关， 这样才能知道这个数据表是不是符合第二范式； 如果不是的话，就把那些不完全相关的字段移到独立的数据表里。 接下来的步骤是要确保所有不是键的字段都和彼此没有相依关系，这就叫做 <a href=\"https://zh.wikipedia.org/wiki/第三正規化\" target=\"_blank\" rel=\"noopener\">第三范式</a>。</p>\n<h3 id=\"1-3-第三范式\"><a href=\"#1-3-第三范式\" class=\"headerlink\" title=\"1.3. 第三范式\"></a>1.3. 第三范式</h3><p><strong><a href=\"[https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%B8%89%E6%AD%A3%E8%A6%8F%E5%8C%96](https://zh.wikipedia.org/wiki/第三正規化)\">第三范式（3NF）</a></strong> 是数据库正规化所使用的正规形式，要求所有非主键属性都只和候选键有相关性，也就是说非主键属性之间应该是独立无关的。如果再对第三范式做进一步加强就成了<a href=\"https://zh.wikipedia.org/wiki/BC正規化\" target=\"_blank\" rel=\"noopener\">BC正规化</a>，强调的重点在于“数据间的关系是奠基在主键上、以整个主键为考量、而且除了主键之外不考虑其他因素”。</p>\n<p>以下面这个定义机械组件的关系为例：</p>\n<img src=\"/pictures/image-20200427232114257.png\" />\n\n<p>本例中制造商地址很明显地不该被列在这个关系里面，因为和组件本身比起来，制造商地址应该和制造商比较有关系；正确的做法应该是把独立成为一个新的数据表：</p>\n<img src=\"/pictures/image-20200427232353749.png\" />\n\n<p>然后把原本的数据表改成这样：</p>\n<img src=\"/pictures/image-20200427232447340.png\" />\n\n<p>先前那个数据表的问题在于每提到一次制造商名称就要多存一次它的地址，而这就不符合第三范式的原则。</p>\n<p>下面提供了另一个例子：</p>\n<img src=\"/pictures/image-20200427232554631.png\" />\n\n<p>在本例中，非主键字段完全依赖于主键订单编号，也就是说唯一的订单编号能导出唯一非主键字段值，符合第二范式。第三范式要求非主键字段之间不能有依赖关系，显然本例中小计依赖于非主键字段“单价”和“数量”，不符合第三范式。小计不应该放在这个数据表里面，只要把单价乘上数量就可以得到小计了；如果想要符合第三范式的话，就把小计拿掉吧 (不过在做查询的时候，本来用 SELECT Order.Total FROM Order 就要改成用 SELECT UnitPrice * Quantity FROM Order 了)。</p>\n<img src=\"/pictures/image-20200427232650317.png\" />\n\n<h3 id=\"1-4-第四范式\"><a href=\"#1-4-第四范式\" class=\"headerlink\" title=\"1.4. 第四范式\"></a>1.4. 第四范式</h3><p><strong><a href=\"[https://zh.wikipedia.org/wiki/%E7%AC%AC%E5%9B%9B%E6%AD%A3%E8%A6%8F%E5%8C%96](https://zh.wikipedia.org/wiki/第四正規化)\">第四正规化（4NF）</a></strong> 是数据库正规化中所使用的一种正规形式，是BC范式之后的另一层次的规范化。第二范式、第三范式、BC范式关注于属性集合之间的函数依赖；而第四范式关注更一般形式称作 <strong>多值依赖</strong>。</p>\n<p>例子：</p>\n<img src=\"/pictures/image-20200428230552342.png\" />\n\n<p>每一行指出一家饭店能提供一种披萨与一个配货地区。</p>\n<p>该表没有非键属性，因为它仅有的键是{Restaurant, Pizza Variety, Delivery Area}。因此，它满足到BC范式为止的所有范式。如果假设，饭店提供的披萨种类与配货地区无关。也即饭店为所有的供货地区提供它能制作的所有披萨类型。那么，这个表不满足第四范式。因为这个表在{Restaurant}属性（它不是超键）上提供了两个非平凡的多值依赖:</p>\n<ul>\n<li>{Restaurant} -&gt; {Pizza Variety}</li>\n<li>{Restaurant} -&gt; {Delivery Area}</li>\n</ul>\n<p>这些在一个非超键上的非平凡多值依赖说明了饭店提供的披萨的多样性独立于饭店的供货地区。这导致了该表中的数据冗余：例如，A1 Pizza供货 Stuffed Crust就重复了3遍；如果A1 Pizza开始生产Cheese Crust pizzas那么向表中增加多行，A1 Pizza的每个供货地区都需要一行。这就可能在给A1 Pizza的每个供货地区增加一行Cheese Crust披萨时，遗漏了一个供货地区，从而导致不满足于多值依赖{Restaurant}-&gt;{Pizza Variety}。</p>\n<p>为了避免上述的错误发生，需要把披萨的多样性与供货地区放置在不同的表中，产生了两张满足第四范式的表：</p>\n<img src=\"/pictures/image-20200428231345713.png\" />\n\n<p>如果披萨的种类随着供货地区不同而变化，那么最初的三列的表就满足第四范式。</p>\n<h3 id=\"1-5-第五范式\"><a href=\"#1-5-第五范式\" class=\"headerlink\" title=\"1.5. 第五范式\"></a>1.5. 第五范式</h3><p><strong><a href=\"[https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%BA%94%E8%8C%83%E5%BC%8F](https://zh.wikipedia.org/wiki/第五范式)\">第五范式 (5NF)</a></strong>，也称投影-连接范式（project-join normal form，PJ/NF）是数据库规范化的一个级别，以去除多个关系之间的语义相关。一张表满足第五范式当且仅当它的每个连接依赖可由候选键推出。</p>\n<p>例子：</p>\n<img src=\"/pictures/image-20200428232129091.png\" />\n\n<p>三列共同组成了主键。该表也满足第四范式，因为不存在多值依赖。</p>\n<p>如果没有任何规则限制上门推销员、品牌、产品类型的组合，那么上述三个属性的表是必须的以描述这些数据。但是，如果假定存在下述规则：如果上门推销员经营某个品牌与某个产品类型，那么该推销员必须经营该品牌制造的该产品类型的商品。这种情形下，可以把上表分为三个表：</p>\n<p><img src=\"/pictures/image-20200428232253846.png\" alt=\"image-20200428232253846\"></p>\n<p>在这种情形下，如果上门推销员推销Acme的其它类型的产品也推销其它品牌的真空吸尘器，则他Louis Ferguson不可能拒绝销售由ACME制造的真空吸尘器（Vacuum Cleaner）。</p>\n<p>注意这种方式是如何去除数据冗余。假设经营面包箱与真空吸尘器的上门推销员Jack Schneider开始新增销售Robusto品牌。在最初的那张表中，需要增加两行： (&lt;Jack Schneider, Robusto, Breadboxes&gt;, &lt;Jack Schneider, Robusto, Vacuum Cleaners&gt;)。而在分解后的三张表的设计中，仅需要在表“Brands By Traveling Salesman”中增加一行：(&lt;Jack Schneider, Robusto&gt;)。</p>\n<p>用途：</p>\n<p>仅在很少情况下满足第四范式的表可能会不满足第五范式。这发生在复杂的真实世界的约束限定了属性的有效组合，但不能在满足第四范式的表的结构中体现出来。这种表如果不能规范化为第五范式，就需要应用程序通过插入、修改、删除等操作来维护表中的数据的逻辑一致性。相反，满足第五范式的表的设计排除了这种不一致性。</p>\n<h2 id=\"2-关系键\"><a href=\"#2-关系键\" class=\"headerlink\" title=\"2. 关系键\"></a>2. 关系键</h2><p><strong><a href=\"[https://zh.wikipedia.org/wiki/%E5%85%B3%E7%B3%BB%E9%94%AE](https://zh.wikipedia.org/wiki/关系键)\">关系键</a></strong> 是关系数据库的重要组成部分。关系键是一个表中的一个或几个属性，用来标识该表的每一行或与另一个表产生联系。</p>\n<p><img src=\"/pictures/280px-PrimaryKey_zht.svg.png\" alt=\"img\"></p>\n<h2 id=\"3-书写高质量SQL的建议\"><a href=\"#3-书写高质量SQL的建议\" class=\"headerlink\" title=\"3. 书写高质量SQL的建议\"></a>3. 书写高质量SQL的建议</h2><p><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485117&idx=1&sn=92361755b7c3de488b415ec4c5f46d73&chksm=cea24976f9d5c060babe50c3747616cce63df5d50947903a262704988143c2eeb4069ae45420&token=79317275&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">MySQL高性能优化规范建议</a></p>"},{"title":"链表总结","date":"2020-08-17T02:37:43.000Z","visible":"hide","typora-copy-images-to":"..\\pictures","_content":"\n本文主要总结了 LeetCode 上链表相关的题目，会持续更新~\n\n## 1. 链表相关的题目列表\n\n本文的题目列表如下：\n\n<!--more-->\n\n|  #   |                            Title                             | Remark |\n| :--: | :----------------------------------------------------------: | :----: |\n|  83  | [删除排序链表中的重复元素](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/) |        |\n|  82  | [删除排序链表中的重复元素 II](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/) |  Hard  |\n|  86  | [分隔链表](https://leetcode-cn.com/problems/partition-list/) |        |\n|  2   |                                                              |        |\n|  25  |                                                              |        |\n|  61  |                                                              |        |\n| 206  | [反转链表](https://leetcode-cn.com/problems/reverse-linked-list/) |        |\n|  92  | [反转链表 II](https://leetcode-cn.com/problems/reverse-linked-list-ii/) |        |\n\n## 2. 删除排序链表中的重复元素 [83]\n\n题目来源：[83. 删除排序链表中的重复元素](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/)\n\n### 2.1. 题目描述\n\n![image-20200818094630464](/pictures/image-20200818094630464.png)\n\n### 2.2. 方法一：迭代\n\n保存前一个节点 pre, 遇到与 pre 相同的节点就往后移，找到不同的节点，接到 pre 的后面。\n\n```java\npublic ListNode deleteDuplicates(ListNode head) {\n    if(head == null || head.next == null){return head;}\n\n    ListNode pre = head, curr = head.next;\n    while (curr != null){\n        while (curr != null && curr.val == pre.val){\n            curr = curr.next;\n        }\n        pre.next = curr;\n        pre = curr;\n        if(curr != null){\n            curr = curr.next;\n        }\n    }\n    return head;\n}\n```\n\n### 2.3. 方法二：迭代（去掉 pre）\n\n参考 [这里](https://leetcode.wang/leetCode-83-Remove-Duplicates-from-Sorted-List.html) 解法二。这道题其实不用 pre 节点也可以完成，不用找到所有重复的数字进行删除，即遇到一个重复数字，删除一个。这样代码看起来更加简洁了：\n\n```java\npublic ListNode deleteDuplicates(ListNode head) {\n    ListNode cur = head;\n    while (cur != null && cur.next != null){\n        if(cur.val == cur.next.val){\n            cur.next = cur.next.next;\n        }else{\n            cur = cur.next;\n        }\n    }\n    return head;\n}\n```\n\n## 3. 删除排序链表中的重复元素 II [82]\n\n题目来源：[82. 删除排序链表中的重复元素 II](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/)\n\n### 3.1. 题目描述\n\n![image-20200818100806984](/pictures/image-20200818100806984.png)\n\n注意：和上一题相比，本题要求只要是重复的元素需要全部删除，一个不留。\n\n### 3.2. 迭代\n\n这道题自己写了很久...还是没写出来..\n\n参考 [这里](https://leetcode.wang/leetCode-82-Remove-Duplicates-from-Sorted-ListII.html) 的解法一。对于链表的操作，如果头结点可能删除，可以使用 dummy 节点，指向 head，最终返回 dummy.next 节点即可，这样可以简化边界问题，不用单独处理。\n\n```java\npublic ListNode deleteDuplicates(ListNode head) {\n    // 定义dummy节点\n    ListNode pre = new ListNode(0);\n    ListNode dummy = pre;\n    pre.next = head;\n\n    ListNode curr = head;\n    while (curr != null && curr.next != null){\n        boolean equal = false;\n        // cur 和 cur.next 一直相等，一直后移\n        while (curr.next != null && curr.val == curr.next.val){\n            curr = curr.next;\n            equal = true;\n        }\n        // 如果相等\n        // pre.next 直接指向 cur.next 删除所有重复数字\n        if(equal){\n            pre.next = curr.next;\n\n            // 如果不相等\n            // pre 移到 cur 的地方\n        }else{\n            pre = curr;\n        }\n\n        // cur 后移\n        curr = curr.next;\n    }\n    return dummy.next;\n}\n```\n\n## 4. 分隔链表 [86]\n\n题目来源：[86. 分隔链表](https://leetcode-cn.com/problems/partition-list/)\n\n### 4.1. 题目描述\n\n![image-20200818112245505](/pictures/image-20200818112245505.png)\n\n### 4.2. 解法一：分成两个链表\n\n注意链表出现环的情况，参考 [这里](https://leetcode.wang/leetCode-86-Partition-List.html) 的解法二。\n\n```java\npublic ListNode partition(ListNode head, int x) {\n    // 小于x的链表\n    ListNode lowDummy = new ListNode(0);\n    ListNode lowCur = lowDummy;\n    // 大于等于x的链表\n    ListNode highDummy = new ListNode(0);\n    ListNode highCur = highDummy;\n\n    ListNode cur = head;\n    while (cur != null){\n        if(cur.val < x){\n            lowCur.next = cur;\n            lowCur = lowCur.next;\n        }else{\n            highCur.next = cur;\n            highCur = highCur.next;\n        }\n        cur = cur.next;\n    }\n    // 一定要注意添加这一步，不然链表会出现环\n    highCur.next = null;\n    // 链表拼接\n    lowCur.next = highDummy.next;\n    return lowDummy.next;\n}\n```\n\n### 4.3. 解法二：头插法\n\n遍历整个链表，找到小于 x 的节点，插入到前面。前面和后面都需要一个 pre 节点保存应该插入和删除的位置。（自己想的..）\n\n```java\npublic ListNode partition(ListNode head, int x) {\n    if(head == null){return head;}\n    ListNode dummy = new ListNode(0);\n    dummy.next = head;\n    // pre 表示遍历节点cur的前一个，用于删除\n    ListNode cur = head, pre = dummy;\n    // pre2 表示插入位置的前一个\n    ListNode pre2 = dummy;\n    while (cur != null){\n        int s = cur.val;\n        if(cur.val < x){\n            // 删除原位置元素\n            pre.next = cur.next;\n            pre = pre.next;\n            // 插入到前面位置\n            cur.next = pre2.next;\n            pre2.next = cur;\n            pre2 = cur;\n\n        }\n        pre = cur;\n        cur = cur.next;\n    }\n    return dummy.next;\n}\n```\n\n链表的题目，一定要仔细。\n\n## 5. 反转链表 [206]\n\n题目来源：[206. 反转链表](https://leetcode-cn.com/problems/reverse-linked-list/)\n\n### 5.1. 题目描述\n\n![image-20200826094442518](/pictures/image-20200826094442518.png)\n\n### 5.2. 方法一：迭代\n\n迭代方法比较好想，添加一个 dummy 节点更好理解。\n\n```java\npublic ListNode reverseList(ListNode head) {\n    if(head == null){return null;}\n    ListNode dummy = new ListNode(0);\n    dummy.next = null;\n\n    ListNode cur = head;\n    while (cur != null){\n        ListNode tmp = cur.next;\n        cur.next = dummy.next;\n        dummy.next = cur;\n        cur = tmp;\n    }\n    return dummy.next;\n}\n```\n\n### 5.3. 方法二：递归\n\n思路参考：[这里](https://leetcode.wang/leetcode-206-Reverse-Linked-List.html)。\n\n```java\npublic ListNode reverseList(ListNode head) {\n    // 递归出口\n    if(head == null || head.next == null){\n        return head;\n    }\n    // 大问题变为小问题：head.next作为剩余部分的头指针\n    ListNode newHead = reverseList(head.next);\n    // head.next 代表新链表的尾，将他的 next 置为 head，即就是把 head 加到末尾\n    head.next.next = head;\n    head.next = null;\n    return newHead;\n}\n```\n\n## 6. 反转链表 II [92]\n\n题目来源：[92. 反转链表 II](https://leetcode-cn.com/problems/reverse-linked-list-ii/)\n\n### 6.1. 题目描述\n\n![image-20200826101920949](/pictures/image-20200826101920949.png)\n\n### 6.2. 代码\n\n头结点需要单独处理，使用 dummy 节点。这题不难，仔细一点注意节点指向即可。\n\n```java\npublic ListNode reverseBetween(ListNode head, int m, int n) {\n    int count = 1;\n    ListNode dummy = new ListNode(0);\n    dummy.next = null;\n    ListNode cur = head;\n    ListNode pre = dummy;\n    while (cur != null){\n        if (m == count){\n            ListNode pre2 = pre;\n            pre = cur;\n            for(; count <= n; count++){\n                ListNode next = cur.next;\n                cur.next = pre2.next;\n                pre2.next = cur;\n                cur = next;\n            }\n        }else{\n            ListNode tmp = cur.next;\n            cur.next = pre.next;\n            pre.next = cur;\n            pre = cur;\n            cur = tmp;\n            count++;\n        }\n\n    }\n    return dummy.next;\n}\n```\n\n## 7. 参考引用\n\n1. https://leetcode.wang/leetCode-83-Remove-Duplicates-from-Sorted-List.html\n2. https://leetcode.wang/leetCode-86-Partition-List.html\n3. https://leetcode.wang/leetcode-206-Reverse-Linked-List.html","source":"_posts/链表总结.md","raw":"---\ntitle: 链表总结\ndate: 2020-08-17 10:37:43\ntags:\n  - Algorithm\n  - Java\n  - 链表\ncategories: Algorithm\nvisible: hide\ntypora-copy-images-to: ..\\pictures\n---\n\n本文主要总结了 LeetCode 上链表相关的题目，会持续更新~\n\n## 1. 链表相关的题目列表\n\n本文的题目列表如下：\n\n<!--more-->\n\n|  #   |                            Title                             | Remark |\n| :--: | :----------------------------------------------------------: | :----: |\n|  83  | [删除排序链表中的重复元素](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/) |        |\n|  82  | [删除排序链表中的重复元素 II](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/) |  Hard  |\n|  86  | [分隔链表](https://leetcode-cn.com/problems/partition-list/) |        |\n|  2   |                                                              |        |\n|  25  |                                                              |        |\n|  61  |                                                              |        |\n| 206  | [反转链表](https://leetcode-cn.com/problems/reverse-linked-list/) |        |\n|  92  | [反转链表 II](https://leetcode-cn.com/problems/reverse-linked-list-ii/) |        |\n\n## 2. 删除排序链表中的重复元素 [83]\n\n题目来源：[83. 删除排序链表中的重复元素](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/)\n\n### 2.1. 题目描述\n\n![image-20200818094630464](/pictures/image-20200818094630464.png)\n\n### 2.2. 方法一：迭代\n\n保存前一个节点 pre, 遇到与 pre 相同的节点就往后移，找到不同的节点，接到 pre 的后面。\n\n```java\npublic ListNode deleteDuplicates(ListNode head) {\n    if(head == null || head.next == null){return head;}\n\n    ListNode pre = head, curr = head.next;\n    while (curr != null){\n        while (curr != null && curr.val == pre.val){\n            curr = curr.next;\n        }\n        pre.next = curr;\n        pre = curr;\n        if(curr != null){\n            curr = curr.next;\n        }\n    }\n    return head;\n}\n```\n\n### 2.3. 方法二：迭代（去掉 pre）\n\n参考 [这里](https://leetcode.wang/leetCode-83-Remove-Duplicates-from-Sorted-List.html) 解法二。这道题其实不用 pre 节点也可以完成，不用找到所有重复的数字进行删除，即遇到一个重复数字，删除一个。这样代码看起来更加简洁了：\n\n```java\npublic ListNode deleteDuplicates(ListNode head) {\n    ListNode cur = head;\n    while (cur != null && cur.next != null){\n        if(cur.val == cur.next.val){\n            cur.next = cur.next.next;\n        }else{\n            cur = cur.next;\n        }\n    }\n    return head;\n}\n```\n\n## 3. 删除排序链表中的重复元素 II [82]\n\n题目来源：[82. 删除排序链表中的重复元素 II](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/)\n\n### 3.1. 题目描述\n\n![image-20200818100806984](/pictures/image-20200818100806984.png)\n\n注意：和上一题相比，本题要求只要是重复的元素需要全部删除，一个不留。\n\n### 3.2. 迭代\n\n这道题自己写了很久...还是没写出来..\n\n参考 [这里](https://leetcode.wang/leetCode-82-Remove-Duplicates-from-Sorted-ListII.html) 的解法一。对于链表的操作，如果头结点可能删除，可以使用 dummy 节点，指向 head，最终返回 dummy.next 节点即可，这样可以简化边界问题，不用单独处理。\n\n```java\npublic ListNode deleteDuplicates(ListNode head) {\n    // 定义dummy节点\n    ListNode pre = new ListNode(0);\n    ListNode dummy = pre;\n    pre.next = head;\n\n    ListNode curr = head;\n    while (curr != null && curr.next != null){\n        boolean equal = false;\n        // cur 和 cur.next 一直相等，一直后移\n        while (curr.next != null && curr.val == curr.next.val){\n            curr = curr.next;\n            equal = true;\n        }\n        // 如果相等\n        // pre.next 直接指向 cur.next 删除所有重复数字\n        if(equal){\n            pre.next = curr.next;\n\n            // 如果不相等\n            // pre 移到 cur 的地方\n        }else{\n            pre = curr;\n        }\n\n        // cur 后移\n        curr = curr.next;\n    }\n    return dummy.next;\n}\n```\n\n## 4. 分隔链表 [86]\n\n题目来源：[86. 分隔链表](https://leetcode-cn.com/problems/partition-list/)\n\n### 4.1. 题目描述\n\n![image-20200818112245505](/pictures/image-20200818112245505.png)\n\n### 4.2. 解法一：分成两个链表\n\n注意链表出现环的情况，参考 [这里](https://leetcode.wang/leetCode-86-Partition-List.html) 的解法二。\n\n```java\npublic ListNode partition(ListNode head, int x) {\n    // 小于x的链表\n    ListNode lowDummy = new ListNode(0);\n    ListNode lowCur = lowDummy;\n    // 大于等于x的链表\n    ListNode highDummy = new ListNode(0);\n    ListNode highCur = highDummy;\n\n    ListNode cur = head;\n    while (cur != null){\n        if(cur.val < x){\n            lowCur.next = cur;\n            lowCur = lowCur.next;\n        }else{\n            highCur.next = cur;\n            highCur = highCur.next;\n        }\n        cur = cur.next;\n    }\n    // 一定要注意添加这一步，不然链表会出现环\n    highCur.next = null;\n    // 链表拼接\n    lowCur.next = highDummy.next;\n    return lowDummy.next;\n}\n```\n\n### 4.3. 解法二：头插法\n\n遍历整个链表，找到小于 x 的节点，插入到前面。前面和后面都需要一个 pre 节点保存应该插入和删除的位置。（自己想的..）\n\n```java\npublic ListNode partition(ListNode head, int x) {\n    if(head == null){return head;}\n    ListNode dummy = new ListNode(0);\n    dummy.next = head;\n    // pre 表示遍历节点cur的前一个，用于删除\n    ListNode cur = head, pre = dummy;\n    // pre2 表示插入位置的前一个\n    ListNode pre2 = dummy;\n    while (cur != null){\n        int s = cur.val;\n        if(cur.val < x){\n            // 删除原位置元素\n            pre.next = cur.next;\n            pre = pre.next;\n            // 插入到前面位置\n            cur.next = pre2.next;\n            pre2.next = cur;\n            pre2 = cur;\n\n        }\n        pre = cur;\n        cur = cur.next;\n    }\n    return dummy.next;\n}\n```\n\n链表的题目，一定要仔细。\n\n## 5. 反转链表 [206]\n\n题目来源：[206. 反转链表](https://leetcode-cn.com/problems/reverse-linked-list/)\n\n### 5.1. 题目描述\n\n![image-20200826094442518](/pictures/image-20200826094442518.png)\n\n### 5.2. 方法一：迭代\n\n迭代方法比较好想，添加一个 dummy 节点更好理解。\n\n```java\npublic ListNode reverseList(ListNode head) {\n    if(head == null){return null;}\n    ListNode dummy = new ListNode(0);\n    dummy.next = null;\n\n    ListNode cur = head;\n    while (cur != null){\n        ListNode tmp = cur.next;\n        cur.next = dummy.next;\n        dummy.next = cur;\n        cur = tmp;\n    }\n    return dummy.next;\n}\n```\n\n### 5.3. 方法二：递归\n\n思路参考：[这里](https://leetcode.wang/leetcode-206-Reverse-Linked-List.html)。\n\n```java\npublic ListNode reverseList(ListNode head) {\n    // 递归出口\n    if(head == null || head.next == null){\n        return head;\n    }\n    // 大问题变为小问题：head.next作为剩余部分的头指针\n    ListNode newHead = reverseList(head.next);\n    // head.next 代表新链表的尾，将他的 next 置为 head，即就是把 head 加到末尾\n    head.next.next = head;\n    head.next = null;\n    return newHead;\n}\n```\n\n## 6. 反转链表 II [92]\n\n题目来源：[92. 反转链表 II](https://leetcode-cn.com/problems/reverse-linked-list-ii/)\n\n### 6.1. 题目描述\n\n![image-20200826101920949](/pictures/image-20200826101920949.png)\n\n### 6.2. 代码\n\n头结点需要单独处理，使用 dummy 节点。这题不难，仔细一点注意节点指向即可。\n\n```java\npublic ListNode reverseBetween(ListNode head, int m, int n) {\n    int count = 1;\n    ListNode dummy = new ListNode(0);\n    dummy.next = null;\n    ListNode cur = head;\n    ListNode pre = dummy;\n    while (cur != null){\n        if (m == count){\n            ListNode pre2 = pre;\n            pre = cur;\n            for(; count <= n; count++){\n                ListNode next = cur.next;\n                cur.next = pre2.next;\n                pre2.next = cur;\n                cur = next;\n            }\n        }else{\n            ListNode tmp = cur.next;\n            cur.next = pre.next;\n            pre.next = cur;\n            pre = cur;\n            cur = tmp;\n            count++;\n        }\n\n    }\n    return dummy.next;\n}\n```\n\n## 7. 参考引用\n\n1. https://leetcode.wang/leetCode-83-Remove-Duplicates-from-Sorted-List.html\n2. https://leetcode.wang/leetCode-86-Partition-List.html\n3. https://leetcode.wang/leetcode-206-Reverse-Linked-List.html","slug":"链表总结","published":1,"updated":"2020-12-26T12:26:49.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5mkvt000fnyl1ack38yph","content":"<p>本文主要总结了 LeetCode 上链表相关的题目，会持续更新~</p>\n<h2 id=\"1-链表相关的题目列表\"><a href=\"#1-链表相关的题目列表\" class=\"headerlink\" title=\"1. 链表相关的题目列表\"></a>1. 链表相关的题目列表</h2><p>本文的题目列表如下：</p>\n<a id=\"more\"></a>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">#</th>\n<th align=\"center\">Title</th>\n<th align=\"center\">Remark</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">83</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/\" target=\"_blank\" rel=\"noopener\">删除排序链表中的重复元素</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">82</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/\" target=\"_blank\" rel=\"noopener\">删除排序链表中的重复元素 II</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">86</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/partition-list/\" target=\"_blank\" rel=\"noopener\">分隔链表</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">25</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">61</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">206</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/reverse-linked-list/\" target=\"_blank\" rel=\"noopener\">反转链表</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">92</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/reverse-linked-list-ii/\" target=\"_blank\" rel=\"noopener\">反转链表 II</a></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"2-删除排序链表中的重复元素-83\"><a href=\"#2-删除排序链表中的重复元素-83\" class=\"headerlink\" title=\"2. 删除排序链表中的重复元素 [83]\"></a>2. 删除排序链表中的重复元素 [83]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/\" target=\"_blank\" rel=\"noopener\">83. 删除排序链表中的重复元素</a></p>\n<h3 id=\"2-1-题目描述\"><a href=\"#2-1-题目描述\" class=\"headerlink\" title=\"2.1. 题目描述\"></a>2.1. 题目描述</h3><p><img src=\"/pictures/image-20200818094630464.png\" alt=\"image-20200818094630464\"></p>\n<h3 id=\"2-2-方法一：迭代\"><a href=\"#2-2-方法一：迭代\" class=\"headerlink\" title=\"2.2. 方法一：迭代\"></a>2.2. 方法一：迭代</h3><p>保存前一个节点 pre, 遇到与 pre 相同的节点就往后移，找到不同的节点，接到 pre 的后面。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">deleteDuplicates</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span> || head.next == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> head;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode pre = head, curr = head.next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span> &amp;&amp; curr.val == pre.val)&#123;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre.next = curr;</span><br><span class=\"line\">        pre = curr;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(curr != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-方法二：迭代（去掉-pre）\"><a href=\"#2-3-方法二：迭代（去掉-pre）\" class=\"headerlink\" title=\"2.3. 方法二：迭代（去掉 pre）\"></a>2.3. 方法二：迭代（去掉 pre）</h3><p>参考 <a href=\"https://leetcode.wang/leetCode-83-Remove-Duplicates-from-Sorted-List.html\" target=\"_blank\" rel=\"noopener\">这里</a> 解法二。这道题其实不用 pre 节点也可以完成，不用找到所有重复的数字进行删除，即遇到一个重复数字，删除一个。这样代码看起来更加简洁了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">deleteDuplicates</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    ListNode cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span> &amp;&amp; cur.next != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.val == cur.next.val)&#123;</span><br><span class=\"line\">            cur.next = cur.next.next;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-删除排序链表中的重复元素-II-82\"><a href=\"#3-删除排序链表中的重复元素-II-82\" class=\"headerlink\" title=\"3. 删除排序链表中的重复元素 II [82]\"></a>3. 删除排序链表中的重复元素 II [82]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/\" target=\"_blank\" rel=\"noopener\">82. 删除排序链表中的重复元素 II</a></p>\n<h3 id=\"3-1-题目描述\"><a href=\"#3-1-题目描述\" class=\"headerlink\" title=\"3.1. 题目描述\"></a>3.1. 题目描述</h3><p><img src=\"/pictures/image-20200818100806984.png\" alt=\"image-20200818100806984\"></p>\n<p>注意：和上一题相比，本题要求只要是重复的元素需要全部删除，一个不留。</p>\n<h3 id=\"3-2-迭代\"><a href=\"#3-2-迭代\" class=\"headerlink\" title=\"3.2. 迭代\"></a>3.2. 迭代</h3><p>这道题自己写了很久…还是没写出来..</p>\n<p>参考 <a href=\"https://leetcode.wang/leetCode-82-Remove-Duplicates-from-Sorted-ListII.html\" target=\"_blank\" rel=\"noopener\">这里</a> 的解法一。对于链表的操作，如果头结点可能删除，可以使用 dummy 节点，指向 head，最终返回 dummy.next 节点即可，这样可以简化边界问题，不用单独处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">deleteDuplicates</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义dummy节点</span></span><br><span class=\"line\">    ListNode pre = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    ListNode dummy = pre;</span><br><span class=\"line\">    pre.next = head;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode curr = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span> &amp;&amp; curr.next != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> equal = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// cur 和 cur.next 一直相等，一直后移</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr.next != <span class=\"keyword\">null</span> &amp;&amp; curr.val == curr.next.val)&#123;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">            equal = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果相等</span></span><br><span class=\"line\">        <span class=\"comment\">// pre.next 直接指向 cur.next 删除所有重复数字</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(equal)&#123;</span><br><span class=\"line\">            pre.next = curr.next;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 如果不相等</span></span><br><span class=\"line\">            <span class=\"comment\">// pre 移到 cur 的地方</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            pre = curr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// cur 后移</span></span><br><span class=\"line\">        curr = curr.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummy.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-分隔链表-86\"><a href=\"#4-分隔链表-86\" class=\"headerlink\" title=\"4. 分隔链表 [86]\"></a>4. 分隔链表 [86]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/partition-list/\" target=\"_blank\" rel=\"noopener\">86. 分隔链表</a></p>\n<h3 id=\"4-1-题目描述\"><a href=\"#4-1-题目描述\" class=\"headerlink\" title=\"4.1. 题目描述\"></a>4.1. 题目描述</h3><p><img src=\"/pictures/image-20200818112245505.png\" alt=\"image-20200818112245505\"></p>\n<h3 id=\"4-2-解法一：分成两个链表\"><a href=\"#4-2-解法一：分成两个链表\" class=\"headerlink\" title=\"4.2. 解法一：分成两个链表\"></a>4.2. 解法一：分成两个链表</h3><p>注意链表出现环的情况，参考 <a href=\"https://leetcode.wang/leetCode-86-Partition-List.html\" target=\"_blank\" rel=\"noopener\">这里</a> 的解法二。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">partition</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 小于x的链表</span></span><br><span class=\"line\">    ListNode lowDummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    ListNode lowCur = lowDummy;</span><br><span class=\"line\">    <span class=\"comment\">// 大于等于x的链表</span></span><br><span class=\"line\">    ListNode highDummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    ListNode highCur = highDummy;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.val &lt; x)&#123;</span><br><span class=\"line\">            lowCur.next = cur;</span><br><span class=\"line\">            lowCur = lowCur.next;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            highCur.next = cur;</span><br><span class=\"line\">            highCur = highCur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cur = cur.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 一定要注意添加这一步，不然链表会出现环</span></span><br><span class=\"line\">    highCur.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 链表拼接</span></span><br><span class=\"line\">    lowCur.next = highDummy.next;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lowDummy.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-解法二：头插法\"><a href=\"#4-3-解法二：头插法\" class=\"headerlink\" title=\"4.3. 解法二：头插法\"></a>4.3. 解法二：头插法</h3><p>遍历整个链表，找到小于 x 的节点，插入到前面。前面和后面都需要一个 pre 节点保存应该插入和删除的位置。（自己想的..）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">partition</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> head;&#125;</span><br><span class=\"line\">    ListNode dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    dummy.next = head;</span><br><span class=\"line\">    <span class=\"comment\">// pre 表示遍历节点cur的前一个，用于删除</span></span><br><span class=\"line\">    ListNode cur = head, pre = dummy;</span><br><span class=\"line\">    <span class=\"comment\">// pre2 表示插入位置的前一个</span></span><br><span class=\"line\">    ListNode pre2 = dummy;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> s = cur.val;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.val &lt; x)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 删除原位置元素</span></span><br><span class=\"line\">            pre.next = cur.next;</span><br><span class=\"line\">            pre = pre.next;</span><br><span class=\"line\">            <span class=\"comment\">// 插入到前面位置</span></span><br><span class=\"line\">            cur.next = pre2.next;</span><br><span class=\"line\">            pre2.next = cur;</span><br><span class=\"line\">            pre2 = cur;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre = cur;</span><br><span class=\"line\">        cur = cur.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummy.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>链表的题目，一定要仔细。</p>\n<h2 id=\"5-反转链表-206\"><a href=\"#5-反转链表-206\" class=\"headerlink\" title=\"5. 反转链表 [206]\"></a>5. 反转链表 [206]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/reverse-linked-list/\" target=\"_blank\" rel=\"noopener\">206. 反转链表</a></p>\n<h3 id=\"5-1-题目描述\"><a href=\"#5-1-题目描述\" class=\"headerlink\" title=\"5.1. 题目描述\"></a>5.1. 题目描述</h3><p><img src=\"/pictures/image-20200826094442518.png\" alt=\"image-20200826094442518\"></p>\n<h3 id=\"5-2-方法一：迭代\"><a href=\"#5-2-方法一：迭代\" class=\"headerlink\" title=\"5.2. 方法一：迭代\"></a>5.2. 方法一：迭代</h3><p>迭代方法比较好想，添加一个 dummy 节点更好理解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;&#125;</span><br><span class=\"line\">    ListNode dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    dummy.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        ListNode tmp = cur.next;</span><br><span class=\"line\">        cur.next = dummy.next;</span><br><span class=\"line\">        dummy.next = cur;</span><br><span class=\"line\">        cur = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummy.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-3-方法二：递归\"><a href=\"#5-3-方法二：递归\" class=\"headerlink\" title=\"5.3. 方法二：递归\"></a>5.3. 方法二：递归</h3><p>思路参考：<a href=\"https://leetcode.wang/leetcode-206-Reverse-Linked-List.html\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 递归出口</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span> || head.next == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 大问题变为小问题：head.next作为剩余部分的头指针</span></span><br><span class=\"line\">    ListNode newHead = reverseList(head.next);</span><br><span class=\"line\">    <span class=\"comment\">// head.next 代表新链表的尾，将他的 next 置为 head，即就是把 head 加到末尾</span></span><br><span class=\"line\">    head.next.next = head;</span><br><span class=\"line\">    head.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-反转链表-II-92\"><a href=\"#6-反转链表-II-92\" class=\"headerlink\" title=\"6. 反转链表 II [92]\"></a>6. 反转链表 II [92]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/reverse-linked-list-ii/\" target=\"_blank\" rel=\"noopener\">92. 反转链表 II</a></p>\n<h3 id=\"6-1-题目描述\"><a href=\"#6-1-题目描述\" class=\"headerlink\" title=\"6.1. 题目描述\"></a>6.1. 题目描述</h3><p><img src=\"/pictures/image-20200826101920949.png\" alt=\"image-20200826101920949\"></p>\n<h3 id=\"6-2-代码\"><a href=\"#6-2-代码\" class=\"headerlink\" title=\"6.2. 代码\"></a>6.2. 代码</h3><p>头结点需要单独处理，使用 dummy 节点。这题不难，仔细一点注意节点指向即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseBetween</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">    ListNode dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    dummy.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    ListNode cur = head;</span><br><span class=\"line\">    ListNode pre = dummy;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m == count)&#123;</span><br><span class=\"line\">            ListNode pre2 = pre;</span><br><span class=\"line\">            pre = cur;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(; count &lt;= n; count++)&#123;</span><br><span class=\"line\">                ListNode next = cur.next;</span><br><span class=\"line\">                cur.next = pre2.next;</span><br><span class=\"line\">                pre2.next = cur;</span><br><span class=\"line\">                cur = next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            ListNode tmp = cur.next;</span><br><span class=\"line\">            cur.next = pre.next;</span><br><span class=\"line\">            pre.next = cur;</span><br><span class=\"line\">            pre = cur;</span><br><span class=\"line\">            cur = tmp;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummy.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-参考引用\"><a href=\"#7-参考引用\" class=\"headerlink\" title=\"7. 参考引用\"></a>7. 参考引用</h2><ol>\n<li><a href=\"https://leetcode.wang/leetCode-83-Remove-Duplicates-from-Sorted-List.html\" target=\"_blank\" rel=\"noopener\">https://leetcode.wang/leetCode-83-Remove-Duplicates-from-Sorted-List.html</a></li>\n<li><a href=\"https://leetcode.wang/leetCode-86-Partition-List.html\" target=\"_blank\" rel=\"noopener\">https://leetcode.wang/leetCode-86-Partition-List.html</a></li>\n<li><a href=\"https://leetcode.wang/leetcode-206-Reverse-Linked-List.html\" target=\"_blank\" rel=\"noopener\">https://leetcode.wang/leetcode-206-Reverse-Linked-List.html</a></li>\n</ol>\n","site":{"data":{}},"length":4133,"excerpt":"<p>本文主要总结了 LeetCode 上链表相关的题目，会持续更新~</p>\n<h2 id=\"1-链表相关的题目列表\"><a href=\"#1-链表相关的题目列表\" class=\"headerlink\" title=\"1. 链表相关的题目列表\"></a>1. 链表相关的题目列表</h2><p>本文的题目列表如下：</p>","more":"<table>\n<thead>\n<tr>\n<th align=\"center\">#</th>\n<th align=\"center\">Title</th>\n<th align=\"center\">Remark</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">83</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/\" target=\"_blank\" rel=\"noopener\">删除排序链表中的重复元素</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">82</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/\" target=\"_blank\" rel=\"noopener\">删除排序链表中的重复元素 II</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">86</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/partition-list/\" target=\"_blank\" rel=\"noopener\">分隔链表</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">25</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">61</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">206</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/reverse-linked-list/\" target=\"_blank\" rel=\"noopener\">反转链表</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">92</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/reverse-linked-list-ii/\" target=\"_blank\" rel=\"noopener\">反转链表 II</a></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"2-删除排序链表中的重复元素-83\"><a href=\"#2-删除排序链表中的重复元素-83\" class=\"headerlink\" title=\"2. 删除排序链表中的重复元素 [83]\"></a>2. 删除排序链表中的重复元素 [83]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/\" target=\"_blank\" rel=\"noopener\">83. 删除排序链表中的重复元素</a></p>\n<h3 id=\"2-1-题目描述\"><a href=\"#2-1-题目描述\" class=\"headerlink\" title=\"2.1. 题目描述\"></a>2.1. 题目描述</h3><p><img src=\"/pictures/image-20200818094630464.png\" alt=\"image-20200818094630464\"></p>\n<h3 id=\"2-2-方法一：迭代\"><a href=\"#2-2-方法一：迭代\" class=\"headerlink\" title=\"2.2. 方法一：迭代\"></a>2.2. 方法一：迭代</h3><p>保存前一个节点 pre, 遇到与 pre 相同的节点就往后移，找到不同的节点，接到 pre 的后面。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">deleteDuplicates</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span> || head.next == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> head;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode pre = head, curr = head.next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span> &amp;&amp; curr.val == pre.val)&#123;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre.next = curr;</span><br><span class=\"line\">        pre = curr;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(curr != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-方法二：迭代（去掉-pre）\"><a href=\"#2-3-方法二：迭代（去掉-pre）\" class=\"headerlink\" title=\"2.3. 方法二：迭代（去掉 pre）\"></a>2.3. 方法二：迭代（去掉 pre）</h3><p>参考 <a href=\"https://leetcode.wang/leetCode-83-Remove-Duplicates-from-Sorted-List.html\" target=\"_blank\" rel=\"noopener\">这里</a> 解法二。这道题其实不用 pre 节点也可以完成，不用找到所有重复的数字进行删除，即遇到一个重复数字，删除一个。这样代码看起来更加简洁了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">deleteDuplicates</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    ListNode cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span> &amp;&amp; cur.next != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.val == cur.next.val)&#123;</span><br><span class=\"line\">            cur.next = cur.next.next;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-删除排序链表中的重复元素-II-82\"><a href=\"#3-删除排序链表中的重复元素-II-82\" class=\"headerlink\" title=\"3. 删除排序链表中的重复元素 II [82]\"></a>3. 删除排序链表中的重复元素 II [82]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/\" target=\"_blank\" rel=\"noopener\">82. 删除排序链表中的重复元素 II</a></p>\n<h3 id=\"3-1-题目描述\"><a href=\"#3-1-题目描述\" class=\"headerlink\" title=\"3.1. 题目描述\"></a>3.1. 题目描述</h3><p><img src=\"/pictures/image-20200818100806984.png\" alt=\"image-20200818100806984\"></p>\n<p>注意：和上一题相比，本题要求只要是重复的元素需要全部删除，一个不留。</p>\n<h3 id=\"3-2-迭代\"><a href=\"#3-2-迭代\" class=\"headerlink\" title=\"3.2. 迭代\"></a>3.2. 迭代</h3><p>这道题自己写了很久…还是没写出来..</p>\n<p>参考 <a href=\"https://leetcode.wang/leetCode-82-Remove-Duplicates-from-Sorted-ListII.html\" target=\"_blank\" rel=\"noopener\">这里</a> 的解法一。对于链表的操作，如果头结点可能删除，可以使用 dummy 节点，指向 head，最终返回 dummy.next 节点即可，这样可以简化边界问题，不用单独处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">deleteDuplicates</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义dummy节点</span></span><br><span class=\"line\">    ListNode pre = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    ListNode dummy = pre;</span><br><span class=\"line\">    pre.next = head;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode curr = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span> &amp;&amp; curr.next != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> equal = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// cur 和 cur.next 一直相等，一直后移</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr.next != <span class=\"keyword\">null</span> &amp;&amp; curr.val == curr.next.val)&#123;</span><br><span class=\"line\">            curr = curr.next;</span><br><span class=\"line\">            equal = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果相等</span></span><br><span class=\"line\">        <span class=\"comment\">// pre.next 直接指向 cur.next 删除所有重复数字</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(equal)&#123;</span><br><span class=\"line\">            pre.next = curr.next;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 如果不相等</span></span><br><span class=\"line\">            <span class=\"comment\">// pre 移到 cur 的地方</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            pre = curr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// cur 后移</span></span><br><span class=\"line\">        curr = curr.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummy.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-分隔链表-86\"><a href=\"#4-分隔链表-86\" class=\"headerlink\" title=\"4. 分隔链表 [86]\"></a>4. 分隔链表 [86]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/partition-list/\" target=\"_blank\" rel=\"noopener\">86. 分隔链表</a></p>\n<h3 id=\"4-1-题目描述\"><a href=\"#4-1-题目描述\" class=\"headerlink\" title=\"4.1. 题目描述\"></a>4.1. 题目描述</h3><p><img src=\"/pictures/image-20200818112245505.png\" alt=\"image-20200818112245505\"></p>\n<h3 id=\"4-2-解法一：分成两个链表\"><a href=\"#4-2-解法一：分成两个链表\" class=\"headerlink\" title=\"4.2. 解法一：分成两个链表\"></a>4.2. 解法一：分成两个链表</h3><p>注意链表出现环的情况，参考 <a href=\"https://leetcode.wang/leetCode-86-Partition-List.html\" target=\"_blank\" rel=\"noopener\">这里</a> 的解法二。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">partition</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 小于x的链表</span></span><br><span class=\"line\">    ListNode lowDummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    ListNode lowCur = lowDummy;</span><br><span class=\"line\">    <span class=\"comment\">// 大于等于x的链表</span></span><br><span class=\"line\">    ListNode highDummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    ListNode highCur = highDummy;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.val &lt; x)&#123;</span><br><span class=\"line\">            lowCur.next = cur;</span><br><span class=\"line\">            lowCur = lowCur.next;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            highCur.next = cur;</span><br><span class=\"line\">            highCur = highCur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cur = cur.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 一定要注意添加这一步，不然链表会出现环</span></span><br><span class=\"line\">    highCur.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 链表拼接</span></span><br><span class=\"line\">    lowCur.next = highDummy.next;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lowDummy.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-解法二：头插法\"><a href=\"#4-3-解法二：头插法\" class=\"headerlink\" title=\"4.3. 解法二：头插法\"></a>4.3. 解法二：头插法</h3><p>遍历整个链表，找到小于 x 的节点，插入到前面。前面和后面都需要一个 pre 节点保存应该插入和删除的位置。（自己想的..）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">partition</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> head;&#125;</span><br><span class=\"line\">    ListNode dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    dummy.next = head;</span><br><span class=\"line\">    <span class=\"comment\">// pre 表示遍历节点cur的前一个，用于删除</span></span><br><span class=\"line\">    ListNode cur = head, pre = dummy;</span><br><span class=\"line\">    <span class=\"comment\">// pre2 表示插入位置的前一个</span></span><br><span class=\"line\">    ListNode pre2 = dummy;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> s = cur.val;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.val &lt; x)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 删除原位置元素</span></span><br><span class=\"line\">            pre.next = cur.next;</span><br><span class=\"line\">            pre = pre.next;</span><br><span class=\"line\">            <span class=\"comment\">// 插入到前面位置</span></span><br><span class=\"line\">            cur.next = pre2.next;</span><br><span class=\"line\">            pre2.next = cur;</span><br><span class=\"line\">            pre2 = cur;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre = cur;</span><br><span class=\"line\">        cur = cur.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummy.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>链表的题目，一定要仔细。</p>\n<h2 id=\"5-反转链表-206\"><a href=\"#5-反转链表-206\" class=\"headerlink\" title=\"5. 反转链表 [206]\"></a>5. 反转链表 [206]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/reverse-linked-list/\" target=\"_blank\" rel=\"noopener\">206. 反转链表</a></p>\n<h3 id=\"5-1-题目描述\"><a href=\"#5-1-题目描述\" class=\"headerlink\" title=\"5.1. 题目描述\"></a>5.1. 题目描述</h3><p><img src=\"/pictures/image-20200826094442518.png\" alt=\"image-20200826094442518\"></p>\n<h3 id=\"5-2-方法一：迭代\"><a href=\"#5-2-方法一：迭代\" class=\"headerlink\" title=\"5.2. 方法一：迭代\"></a>5.2. 方法一：迭代</h3><p>迭代方法比较好想，添加一个 dummy 节点更好理解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;&#125;</span><br><span class=\"line\">    ListNode dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    dummy.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        ListNode tmp = cur.next;</span><br><span class=\"line\">        cur.next = dummy.next;</span><br><span class=\"line\">        dummy.next = cur;</span><br><span class=\"line\">        cur = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummy.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-3-方法二：递归\"><a href=\"#5-3-方法二：递归\" class=\"headerlink\" title=\"5.3. 方法二：递归\"></a>5.3. 方法二：递归</h3><p>思路参考：<a href=\"https://leetcode.wang/leetcode-206-Reverse-Linked-List.html\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 递归出口</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span> || head.next == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 大问题变为小问题：head.next作为剩余部分的头指针</span></span><br><span class=\"line\">    ListNode newHead = reverseList(head.next);</span><br><span class=\"line\">    <span class=\"comment\">// head.next 代表新链表的尾，将他的 next 置为 head，即就是把 head 加到末尾</span></span><br><span class=\"line\">    head.next.next = head;</span><br><span class=\"line\">    head.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-反转链表-II-92\"><a href=\"#6-反转链表-II-92\" class=\"headerlink\" title=\"6. 反转链表 II [92]\"></a>6. 反转链表 II [92]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/reverse-linked-list-ii/\" target=\"_blank\" rel=\"noopener\">92. 反转链表 II</a></p>\n<h3 id=\"6-1-题目描述\"><a href=\"#6-1-题目描述\" class=\"headerlink\" title=\"6.1. 题目描述\"></a>6.1. 题目描述</h3><p><img src=\"/pictures/image-20200826101920949.png\" alt=\"image-20200826101920949\"></p>\n<h3 id=\"6-2-代码\"><a href=\"#6-2-代码\" class=\"headerlink\" title=\"6.2. 代码\"></a>6.2. 代码</h3><p>头结点需要单独处理，使用 dummy 节点。这题不难，仔细一点注意节点指向即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseBetween</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">    ListNode dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    dummy.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    ListNode cur = head;</span><br><span class=\"line\">    ListNode pre = dummy;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m == count)&#123;</span><br><span class=\"line\">            ListNode pre2 = pre;</span><br><span class=\"line\">            pre = cur;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(; count &lt;= n; count++)&#123;</span><br><span class=\"line\">                ListNode next = cur.next;</span><br><span class=\"line\">                cur.next = pre2.next;</span><br><span class=\"line\">                pre2.next = cur;</span><br><span class=\"line\">                cur = next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            ListNode tmp = cur.next;</span><br><span class=\"line\">            cur.next = pre.next;</span><br><span class=\"line\">            pre.next = cur;</span><br><span class=\"line\">            pre = cur;</span><br><span class=\"line\">            cur = tmp;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummy.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-参考引用\"><a href=\"#7-参考引用\" class=\"headerlink\" title=\"7. 参考引用\"></a>7. 参考引用</h2><ol>\n<li><a href=\"https://leetcode.wang/leetCode-83-Remove-Duplicates-from-Sorted-List.html\" target=\"_blank\" rel=\"noopener\">https://leetcode.wang/leetCode-83-Remove-Duplicates-from-Sorted-List.html</a></li>\n<li><a href=\"https://leetcode.wang/leetCode-86-Partition-List.html\" target=\"_blank\" rel=\"noopener\">https://leetcode.wang/leetCode-86-Partition-List.html</a></li>\n<li><a href=\"https://leetcode.wang/leetcode-206-Reverse-Linked-List.html\" target=\"_blank\" rel=\"noopener\">https://leetcode.wang/leetcode-206-Reverse-Linked-List.html</a></li>\n</ol>"},{"title":"贪心算法总结","date":"2020-08-01T02:30:29.000Z","_content":"\n本文主要介绍了贪心算法以及 LeetCode 的相关题目。\n\n## 1. 什么是贪心算法？\n\n[维基定义](https://zh.wikipedia.org/wiki/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95)：（英语：greedy algorithm），又称**贪婪算法**，是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法。比如在 [旅行推销员问题](https://zh.wikipedia.org/wiki/旅行推销员问题) 中，如果旅行员每次都选择最近的城市，那这就是一种贪心算法。\n\n贪心算法在有最优子结构的问题中尤为有效。最优子结构的意思是局部最优解能决定全局最优解。简单地说，问题能够分解成子问题来解决，子问题的最优解能递推到最终问题的最优解。\n\n**贪心算法与动态规划的不同在于它对每个子问题的解决方案都做出选择，不能回退。动态规划则会保存以前的运算结果，并根据以前的结果对当前进行选择，有回退功能。**\n\n<!--more-->\n\n参考 [这里](https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/tan-xin-suan-fa-zhi-qu-jian-tiao-du-wen-ti) 给出对于贪心算法的理解：\n\n什么是贪心算法呢？贪心算法可以认为是动态规划算法的一个特例，相比动态规划，使用贪心算法需要满足更多的条件（贪心选择性质），但是效率比动态规划要高。\n\n比如说一个算法问题使用暴力解法需要指数级时间，如果能使用动态规划消除重叠子问题，就可以降到多项式级别的时间，如果满足贪心选择性质，那么可以进一步降低时间复杂度，达到线性级别的。\n\n什么是贪心选择性质呢，简单说就是：每一步都做出一个局部最优的选择，最终的结果就是全局最优。注意哦，这是一种特殊性质，其实只有一部分问题拥有这个性质。\n\n比如你面前放着 100 张人民币，你只能拿十张，怎么才能拿最多的面额？显然每次选择剩下钞票中面值最大的一张，最后你的选择一定是最优的。\n\n然而，大部分问题明显不具有贪心选择性质。比如打斗地主，对手出对儿三，按照贪心策略，你应该出尽可能小的牌刚好压制住对方，但现实情况我们甚至可能会出王炸。这种情况就不能用贪心算法，而得使用动态规划解决。\n\n## 2. 区间调度问题\n\n参考 [这里](https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/tan-xin-suan-fa-zhi-qu-jian-tiao-du-wen-ti) .\n\n### 2.1. 问题描述\n\n首先解决一个很经典的贪心算法问题：区间调度问题（Interval Scheduling）。给出形如 ``[start, end]`` 的闭区间，设计一个算法，求出这些区间 **最多有几个互不相交的区间** 。\n\n```java\nint intervalSchedule(int[][] intvs) {}\n```\n\n举个例子，`intvs = [[1,3], [2,4], [3,6]]`，这些区间最多有 2 个区间互不相交，即 `[[1,3], [3,6]]`，你的算法应该返回 2。注意边界相同并不算相交。\n\n这个问题在生活中的应用广泛，比如你今天有好几个活动，每个活动都可以用区间 `[start, end]` 表示开始和结束的时间，请问你今天**最多能参加几个活动呢？**显然你一个人不能同时参加两个活动，所以说这个问题就是求这些时间区间的最大不相交子集。\n\n### 2.2. 题目分析\n\n这个问题有许多看起来不错的贪心思路，却都不能得到正确答案。比如说：\n\n也许我们可以每次选择可选区间中开始最早的那个？但是可能存在某些区间开始很早，但是很长，使得我们错误地错过了一些短的区间。或者我们每次选择可选区间中最短的那个？或者选择出现冲突最少的那个区间？这些方案都能很容易举出反例，不是正确的方案。\n\n正确的思路其实很简单，可以分为以下三步：\n\n1. 从区间集合 intvs 中选择一个区间 x，这个 x 是在当前所有区间中**结束最早的**（end 最小）。\n2. 把所有与 x 区间相交的区间从区间集合 intvs 中删除。\n3. 重复步骤 1 和 2，直到 intvs 为空为止。之前选出的那些 x 就是最大不相交子集。\n\n把这个思路实现成算法的话，可以按每个区间的 `end` 数值升序排序，因为这样处理之后实现步骤 1 和步骤 2 都方便很多。如下图所示：\n\n<img src=\"/pictures/image-20200912154659563.png\" alt=\"image-20200912154659563\" style=\"zoom:67%;\" />\n\n前三个区间属于相交区间，count 不用 +1，第四个区间就是一个新的不相交区间，访问到第四个区间时，count 需要+1，并且更新 end。\n\n这种思路的贪心算法体现在：在上图中，第一个区间和第二个区间属于相交区间，肯定是二选一的，如何选择呢？当然是选择第一个。因为第一个给后面区间的选择留有更大的空间，这就属于当前情况下的最优选择，之后的选择就在这个选择的基础上，进行选择。\n\n### 2.3. 代码\n\n参考博客的代码，做了一些修改，这样可以和后面两个题统一。\n\n```java\npublic int intervalSchedule(int[][] intvs) {\n    if(intvs.length == 0){return 0;}\n    // 按 end 排序\n    Arrays.sort(intvs, new Comparator<int[]>() {\n        @Override\n        public int compare(int[] a, int[] b) {\n            return a[1] - b[1];\n        }\n    });\n\n    // 初始时，至少有一个区间不相交\n    int count = 1;\n    int end = intvs[0][1];\n\n    for(int i = 1; i < intvs.length; i++){\n        if(intvs[i][0] >= end){\n            count++;\n            end = intvs[i][1];\n        }\n    }\n\n    return count;\n}\n```\n\n## 3. 无重叠区间 [435]\n\n题目来源：[435. 无重叠区间](https://leetcode-cn.com/problems/non-overlapping-intervals/)\n\n### 3.1. 题目描述\n\n![image-20200912101636226](/pictures/image-20200912101636226.png)\n\n### 3.2. 方法一：区间调度算法（推荐）\n\n使用本文第 2 小节的区间调度问题的思路即可。上文中，区间调度问题求的是最多不相交的区间个数，这里求移除几个区间后，区间互不重叠，即就是返回 ``总的区间数 - 不重叠的区间数`` 。\n\n```java\npublic int eraseOverlapIntervals(int[][] intervals) {\n    if(intervals.length == 0){return 0;}\n    Arrays.sort(intervals, new Comparator<int[]>() {\n        @Override\n        public int compare(int[] a, int[] b) {\n            return a[1] - b[1];\n        }\n    });\n    // 互补重叠的区间数量（能留下的区间数量），初值为 1\n    int count = 1;\n    int end = intervals[0][1];\n    for(int i = 1; i < intervals.length; i++){\n        if(intervals[i][0] >= end){\n            end = intervals[i][1];\n            count++;\n        }\n    }\n    return intervals.length - count;\n}\n```\n\n### 3.2. 方法二：从起点的贪心算法\n\n参考 [这里](https://leetcode-cn.com/problems/non-overlapping-intervals/solution/wu-zhong-die-qu-jian-by-leetcode/) .\n\n方法一是从终点的贪心算法。这里按照起点对区间进行排序。当按照起点先后顺序考虑区间的时候。我们利用一个 prev 指针追踪刚刚添加到最终列表中的区间。遍历的时候，可能遇到图中的三种情况：\n\n![image-20200912104507992](/pictures/image-20200912104507992.png)\n\n- 情况一：当前考虑的两个区间不重叠。在这种情况下，不移除任何区间，将 prev*p**r**e**v* 赋值为后面的区间，移除区间数量不变。\n- 情况二：两个区间重叠，后一个区间的终点在前一个终点之前，即前一个区间包含后一个区间。显然，前一个区间的长度更小，会给后面留下更多空间，因此，prev 更新为当前区间，移除区间数量 +1.\n- 情况三：两个区间重叠，后一个区间的终点在前一个终点之后，这种情况下，我们用贪心策略处理，直接移除后一个区间。（官方解释没看懂...）。我的理解是：这里如果移除前一个区间，会留出 A 的额外空间，但这部分空间是用不到的，不是当前的最优解；但如果移除后一个空间，会留出 B 的额外空间，给后面的区间留下了更多的空间。\n\n最终代码如下：\n\n```java\npublic int eraseOverlapIntervals(int[][] intervals) {\n    if(intervals.length == 0){return 0;}\n    // 按照 start 排序\n    Arrays.sort(intervals, new Comparator<int[]>() {\n        @Override\n        public int compare(int[] a, int[] b) {\n            return a[0] - b[0];\n        }\n    });\n    // prev 指针追踪刚刚添加到最终列表中的区间\n    int prev = 0;\n    // 需要移除的数量\n    int count = 0;\n    for(int i = 1; i < intervals.length; i++){\n        if(intervals[prev][1] > intervals[i][0]){\n            // case 2\n            if(intervals[prev][1] > intervals[i][1]){\n                prev = i;\n            }\n            // case 3\n            count++;\n        }else{\n            // case 1\n            prev = i;\n        }\n    }\n    return count;\n}\n```\n\n## 4. 用最少数量的箭引爆气球 [452]\n\n题目来源：[452. 用最少数量的箭引爆气球](https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/)\n\n### 4.1. 题目描述\n\n![image-20200912114154510](/pictures/image-20200912114154510.png)\n\n### 4.2. 方法一：区间调度算法\n\n参考 [这里]。\n\n仔细思考后，这个问题和区间调度算法一模一样。如果最多有 n 个不重叠的区间，那么就至少需要 n 个箭头穿透所有区间，如下图所示：\n\n<img src=\"/pictures/image-20200912160847665.png\" alt=\"image-20200912160847665\" style=\"zoom: 67%;\" />\n\n只是有一点不一样，在 `intervalSchedule` 算法中，如果两个区间的边界触碰，不算重叠；而按照这道题目的描述，箭头如果碰到气球的边界气球也会爆炸，所以说相当于区间的边界触碰也算重叠：\n\n<img src=\"/pictures/image-20200912161028162.png\" alt=\"image-20200912161028162\" style=\"zoom:67%;\" />\n\n所以只需要将区间调度算法稍作修改，就可以得到题目代码：\n\n```java\npublic int findMinArrowShots(int[][] points) {\n    if(points.length == 0){return 0;}\n    // 按照 end 排序\n    Arrays.sort(points, new Comparator<int[]>() {\n        @Override\n        public int compare(int[] a, int[] b) {\n            return a[1] - b[1];\n        }\n    });\n    // 互不重叠的区间数量（射箭数量，选中第一个区间时，肯定会射一箭）\n    int count = 1;\n    int end = points[0][1];\n\n    for(int i = 1; i < points.length; i++){\n        // 注意：这里把首尾相接的视为相交，去掉等号\n        if(points[i][0] > end){\n            end = points[i][1];\n            count++;\n        }\n    }\n    return count;\n}\n```\n\n## 5. 使用贪心算法的题目列表\n\n本文中使用贪心算法解决的 LeetCode 题目列表如下，持续更新中~\n\n|  #   |                            Title                             | Remark |\n| :--: | :----------------------------------------------------------: | :----: |\n| 435  | [无重叠区间](https://leetcode-cn.com/problems/non-overlapping-intervals/) |  Hard  |\n| 452  | [用最少数量的箭引爆气球](https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/) |  Hard  |\n| 122  | [买卖股票的最佳时机 II](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/) |  Hard  |\n\n## 6. 买卖股票的最佳时机 II [122]\n\n题目来源：[122. 买卖股票的最佳时机 II](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/)\n\n### 6.1. 题目描述\n\n![image-20200911103413418](/pictures/image-20200911103413418.png)\n\n### 6.2. 贪心算法\n\n参考 [这里](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/tan-xin-suan-fa-by-liweiwei1419-2/) 的方法二。\n\n这道题使用贪心算法的流程是这样的：从第 i 天（这里 i >= 1）开始，与第 i - 1 的股价进行比较，如果股价有上升（严格上升），就将升高的股价（ prices[i] - prices[i- 1] ）记入总利润，按照这种算法，得到的结果就是符合题意的最大利润。下面对这个算法进行几点说明：\n\n1. 该算法仅可以用于计算，但计算的过程并不是真正交易的过程，但可以用贪心算法计算题目要求的最大利润。下面说明这个等价性：以 [1, 2, 3, 4] 为例，这 4 天的股价依次上升，按照贪心算法，得到的最大利润是：\n\n   ```java\n   res =  (prices[3] - prices[2]) + (prices[2] - prices[1]) + (prices[1] - prices[0])\n       =  prices[3] - prices[0]\n   ```\n\n   仔细观察上面的式子，按照贪心算法，在索引为 1、2、3 的这三天，我们做的操作应该是买进昨天的，卖出今天的，虽然这种操作题目并不允许，但是它等价于：“在索引为 0 的那一天买入，在索引为 3 的那一天卖出”。\n\n2. 解释一下，它为什么叫做贪心算法？\n\n   “贪心算法” 在每一步总是做出在当前看来最好的选择。\n\n   因此，\n\n   - “贪心算法” 和 “动态规划”、“回溯搜索” 算法一样，完成一件事情，是分步决策的；\n   - “贪心算法” 在每一步总是做出在当前看来最好的选择，我是这样理解 “最好” 这两个字的意思：\n     - “最好” 的意思往往根据题目而来，可能是 “最小”，也可能是 “最大”；\n\n   - 贪心算法和动态规划相比，它既不看前面（也就是说它不需要从前面的状态转移过来），也不看后面（无后效性，后面的选择不会对前面的选择有影响），因此贪心算法时间复杂度一般是线性的，空间复杂度是常数级别的。\n   - 这道题 “贪心” 的地方在于，对于 “今天的股价 - 昨天的股价”，得到的结果有 3 种可能：（1）正数（2）0（3）负数。**贪心算法的决策是：只加正数** 。\n\n最终代码如下：\n\n```java\npublic int maxProfit(int[] prices) {\n    int res = 0;\n    int len = prices.length;\n    for(int i = 0; i < len - 1; i++){\n        int diff = prices[i + 1] - prices[i];\n        if(diff > 0){\n            res += diff;\n        }\n    }\n    return res;\n}\n```\n\n## 7. 参考引用\n\n1. [Wikipedia](https://zh.wikipedia.org/wiki/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95)\n2. https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/tan-xin-suan-fa-zhi-qu-jian-tiao-du-wen-ti\n3. https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/tan-xin-suan-fa-by-liweiwei1419-2/\n\n","source":"_posts/贪心算法总结.md","raw":"---\ntitle: 贪心算法总结\ndate: 2020-08-01 10:30:29\ntags:\n  - Algorithm\n  - Java\n  - 贪心算法\ncategories: Algorithm\n---\n\n本文主要介绍了贪心算法以及 LeetCode 的相关题目。\n\n## 1. 什么是贪心算法？\n\n[维基定义](https://zh.wikipedia.org/wiki/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95)：（英语：greedy algorithm），又称**贪婪算法**，是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法。比如在 [旅行推销员问题](https://zh.wikipedia.org/wiki/旅行推销员问题) 中，如果旅行员每次都选择最近的城市，那这就是一种贪心算法。\n\n贪心算法在有最优子结构的问题中尤为有效。最优子结构的意思是局部最优解能决定全局最优解。简单地说，问题能够分解成子问题来解决，子问题的最优解能递推到最终问题的最优解。\n\n**贪心算法与动态规划的不同在于它对每个子问题的解决方案都做出选择，不能回退。动态规划则会保存以前的运算结果，并根据以前的结果对当前进行选择，有回退功能。**\n\n<!--more-->\n\n参考 [这里](https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/tan-xin-suan-fa-zhi-qu-jian-tiao-du-wen-ti) 给出对于贪心算法的理解：\n\n什么是贪心算法呢？贪心算法可以认为是动态规划算法的一个特例，相比动态规划，使用贪心算法需要满足更多的条件（贪心选择性质），但是效率比动态规划要高。\n\n比如说一个算法问题使用暴力解法需要指数级时间，如果能使用动态规划消除重叠子问题，就可以降到多项式级别的时间，如果满足贪心选择性质，那么可以进一步降低时间复杂度，达到线性级别的。\n\n什么是贪心选择性质呢，简单说就是：每一步都做出一个局部最优的选择，最终的结果就是全局最优。注意哦，这是一种特殊性质，其实只有一部分问题拥有这个性质。\n\n比如你面前放着 100 张人民币，你只能拿十张，怎么才能拿最多的面额？显然每次选择剩下钞票中面值最大的一张，最后你的选择一定是最优的。\n\n然而，大部分问题明显不具有贪心选择性质。比如打斗地主，对手出对儿三，按照贪心策略，你应该出尽可能小的牌刚好压制住对方，但现实情况我们甚至可能会出王炸。这种情况就不能用贪心算法，而得使用动态规划解决。\n\n## 2. 区间调度问题\n\n参考 [这里](https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/tan-xin-suan-fa-zhi-qu-jian-tiao-du-wen-ti) .\n\n### 2.1. 问题描述\n\n首先解决一个很经典的贪心算法问题：区间调度问题（Interval Scheduling）。给出形如 ``[start, end]`` 的闭区间，设计一个算法，求出这些区间 **最多有几个互不相交的区间** 。\n\n```java\nint intervalSchedule(int[][] intvs) {}\n```\n\n举个例子，`intvs = [[1,3], [2,4], [3,6]]`，这些区间最多有 2 个区间互不相交，即 `[[1,3], [3,6]]`，你的算法应该返回 2。注意边界相同并不算相交。\n\n这个问题在生活中的应用广泛，比如你今天有好几个活动，每个活动都可以用区间 `[start, end]` 表示开始和结束的时间，请问你今天**最多能参加几个活动呢？**显然你一个人不能同时参加两个活动，所以说这个问题就是求这些时间区间的最大不相交子集。\n\n### 2.2. 题目分析\n\n这个问题有许多看起来不错的贪心思路，却都不能得到正确答案。比如说：\n\n也许我们可以每次选择可选区间中开始最早的那个？但是可能存在某些区间开始很早，但是很长，使得我们错误地错过了一些短的区间。或者我们每次选择可选区间中最短的那个？或者选择出现冲突最少的那个区间？这些方案都能很容易举出反例，不是正确的方案。\n\n正确的思路其实很简单，可以分为以下三步：\n\n1. 从区间集合 intvs 中选择一个区间 x，这个 x 是在当前所有区间中**结束最早的**（end 最小）。\n2. 把所有与 x 区间相交的区间从区间集合 intvs 中删除。\n3. 重复步骤 1 和 2，直到 intvs 为空为止。之前选出的那些 x 就是最大不相交子集。\n\n把这个思路实现成算法的话，可以按每个区间的 `end` 数值升序排序，因为这样处理之后实现步骤 1 和步骤 2 都方便很多。如下图所示：\n\n<img src=\"/pictures/image-20200912154659563.png\" alt=\"image-20200912154659563\" style=\"zoom:67%;\" />\n\n前三个区间属于相交区间，count 不用 +1，第四个区间就是一个新的不相交区间，访问到第四个区间时，count 需要+1，并且更新 end。\n\n这种思路的贪心算法体现在：在上图中，第一个区间和第二个区间属于相交区间，肯定是二选一的，如何选择呢？当然是选择第一个。因为第一个给后面区间的选择留有更大的空间，这就属于当前情况下的最优选择，之后的选择就在这个选择的基础上，进行选择。\n\n### 2.3. 代码\n\n参考博客的代码，做了一些修改，这样可以和后面两个题统一。\n\n```java\npublic int intervalSchedule(int[][] intvs) {\n    if(intvs.length == 0){return 0;}\n    // 按 end 排序\n    Arrays.sort(intvs, new Comparator<int[]>() {\n        @Override\n        public int compare(int[] a, int[] b) {\n            return a[1] - b[1];\n        }\n    });\n\n    // 初始时，至少有一个区间不相交\n    int count = 1;\n    int end = intvs[0][1];\n\n    for(int i = 1; i < intvs.length; i++){\n        if(intvs[i][0] >= end){\n            count++;\n            end = intvs[i][1];\n        }\n    }\n\n    return count;\n}\n```\n\n## 3. 无重叠区间 [435]\n\n题目来源：[435. 无重叠区间](https://leetcode-cn.com/problems/non-overlapping-intervals/)\n\n### 3.1. 题目描述\n\n![image-20200912101636226](/pictures/image-20200912101636226.png)\n\n### 3.2. 方法一：区间调度算法（推荐）\n\n使用本文第 2 小节的区间调度问题的思路即可。上文中，区间调度问题求的是最多不相交的区间个数，这里求移除几个区间后，区间互不重叠，即就是返回 ``总的区间数 - 不重叠的区间数`` 。\n\n```java\npublic int eraseOverlapIntervals(int[][] intervals) {\n    if(intervals.length == 0){return 0;}\n    Arrays.sort(intervals, new Comparator<int[]>() {\n        @Override\n        public int compare(int[] a, int[] b) {\n            return a[1] - b[1];\n        }\n    });\n    // 互补重叠的区间数量（能留下的区间数量），初值为 1\n    int count = 1;\n    int end = intervals[0][1];\n    for(int i = 1; i < intervals.length; i++){\n        if(intervals[i][0] >= end){\n            end = intervals[i][1];\n            count++;\n        }\n    }\n    return intervals.length - count;\n}\n```\n\n### 3.2. 方法二：从起点的贪心算法\n\n参考 [这里](https://leetcode-cn.com/problems/non-overlapping-intervals/solution/wu-zhong-die-qu-jian-by-leetcode/) .\n\n方法一是从终点的贪心算法。这里按照起点对区间进行排序。当按照起点先后顺序考虑区间的时候。我们利用一个 prev 指针追踪刚刚添加到最终列表中的区间。遍历的时候，可能遇到图中的三种情况：\n\n![image-20200912104507992](/pictures/image-20200912104507992.png)\n\n- 情况一：当前考虑的两个区间不重叠。在这种情况下，不移除任何区间，将 prev*p**r**e**v* 赋值为后面的区间，移除区间数量不变。\n- 情况二：两个区间重叠，后一个区间的终点在前一个终点之前，即前一个区间包含后一个区间。显然，前一个区间的长度更小，会给后面留下更多空间，因此，prev 更新为当前区间，移除区间数量 +1.\n- 情况三：两个区间重叠，后一个区间的终点在前一个终点之后，这种情况下，我们用贪心策略处理，直接移除后一个区间。（官方解释没看懂...）。我的理解是：这里如果移除前一个区间，会留出 A 的额外空间，但这部分空间是用不到的，不是当前的最优解；但如果移除后一个空间，会留出 B 的额外空间，给后面的区间留下了更多的空间。\n\n最终代码如下：\n\n```java\npublic int eraseOverlapIntervals(int[][] intervals) {\n    if(intervals.length == 0){return 0;}\n    // 按照 start 排序\n    Arrays.sort(intervals, new Comparator<int[]>() {\n        @Override\n        public int compare(int[] a, int[] b) {\n            return a[0] - b[0];\n        }\n    });\n    // prev 指针追踪刚刚添加到最终列表中的区间\n    int prev = 0;\n    // 需要移除的数量\n    int count = 0;\n    for(int i = 1; i < intervals.length; i++){\n        if(intervals[prev][1] > intervals[i][0]){\n            // case 2\n            if(intervals[prev][1] > intervals[i][1]){\n                prev = i;\n            }\n            // case 3\n            count++;\n        }else{\n            // case 1\n            prev = i;\n        }\n    }\n    return count;\n}\n```\n\n## 4. 用最少数量的箭引爆气球 [452]\n\n题目来源：[452. 用最少数量的箭引爆气球](https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/)\n\n### 4.1. 题目描述\n\n![image-20200912114154510](/pictures/image-20200912114154510.png)\n\n### 4.2. 方法一：区间调度算法\n\n参考 [这里]。\n\n仔细思考后，这个问题和区间调度算法一模一样。如果最多有 n 个不重叠的区间，那么就至少需要 n 个箭头穿透所有区间，如下图所示：\n\n<img src=\"/pictures/image-20200912160847665.png\" alt=\"image-20200912160847665\" style=\"zoom: 67%;\" />\n\n只是有一点不一样，在 `intervalSchedule` 算法中，如果两个区间的边界触碰，不算重叠；而按照这道题目的描述，箭头如果碰到气球的边界气球也会爆炸，所以说相当于区间的边界触碰也算重叠：\n\n<img src=\"/pictures/image-20200912161028162.png\" alt=\"image-20200912161028162\" style=\"zoom:67%;\" />\n\n所以只需要将区间调度算法稍作修改，就可以得到题目代码：\n\n```java\npublic int findMinArrowShots(int[][] points) {\n    if(points.length == 0){return 0;}\n    // 按照 end 排序\n    Arrays.sort(points, new Comparator<int[]>() {\n        @Override\n        public int compare(int[] a, int[] b) {\n            return a[1] - b[1];\n        }\n    });\n    // 互不重叠的区间数量（射箭数量，选中第一个区间时，肯定会射一箭）\n    int count = 1;\n    int end = points[0][1];\n\n    for(int i = 1; i < points.length; i++){\n        // 注意：这里把首尾相接的视为相交，去掉等号\n        if(points[i][0] > end){\n            end = points[i][1];\n            count++;\n        }\n    }\n    return count;\n}\n```\n\n## 5. 使用贪心算法的题目列表\n\n本文中使用贪心算法解决的 LeetCode 题目列表如下，持续更新中~\n\n|  #   |                            Title                             | Remark |\n| :--: | :----------------------------------------------------------: | :----: |\n| 435  | [无重叠区间](https://leetcode-cn.com/problems/non-overlapping-intervals/) |  Hard  |\n| 452  | [用最少数量的箭引爆气球](https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/) |  Hard  |\n| 122  | [买卖股票的最佳时机 II](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/) |  Hard  |\n\n## 6. 买卖股票的最佳时机 II [122]\n\n题目来源：[122. 买卖股票的最佳时机 II](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/)\n\n### 6.1. 题目描述\n\n![image-20200911103413418](/pictures/image-20200911103413418.png)\n\n### 6.2. 贪心算法\n\n参考 [这里](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/tan-xin-suan-fa-by-liweiwei1419-2/) 的方法二。\n\n这道题使用贪心算法的流程是这样的：从第 i 天（这里 i >= 1）开始，与第 i - 1 的股价进行比较，如果股价有上升（严格上升），就将升高的股价（ prices[i] - prices[i- 1] ）记入总利润，按照这种算法，得到的结果就是符合题意的最大利润。下面对这个算法进行几点说明：\n\n1. 该算法仅可以用于计算，但计算的过程并不是真正交易的过程，但可以用贪心算法计算题目要求的最大利润。下面说明这个等价性：以 [1, 2, 3, 4] 为例，这 4 天的股价依次上升，按照贪心算法，得到的最大利润是：\n\n   ```java\n   res =  (prices[3] - prices[2]) + (prices[2] - prices[1]) + (prices[1] - prices[0])\n       =  prices[3] - prices[0]\n   ```\n\n   仔细观察上面的式子，按照贪心算法，在索引为 1、2、3 的这三天，我们做的操作应该是买进昨天的，卖出今天的，虽然这种操作题目并不允许，但是它等价于：“在索引为 0 的那一天买入，在索引为 3 的那一天卖出”。\n\n2. 解释一下，它为什么叫做贪心算法？\n\n   “贪心算法” 在每一步总是做出在当前看来最好的选择。\n\n   因此，\n\n   - “贪心算法” 和 “动态规划”、“回溯搜索” 算法一样，完成一件事情，是分步决策的；\n   - “贪心算法” 在每一步总是做出在当前看来最好的选择，我是这样理解 “最好” 这两个字的意思：\n     - “最好” 的意思往往根据题目而来，可能是 “最小”，也可能是 “最大”；\n\n   - 贪心算法和动态规划相比，它既不看前面（也就是说它不需要从前面的状态转移过来），也不看后面（无后效性，后面的选择不会对前面的选择有影响），因此贪心算法时间复杂度一般是线性的，空间复杂度是常数级别的。\n   - 这道题 “贪心” 的地方在于，对于 “今天的股价 - 昨天的股价”，得到的结果有 3 种可能：（1）正数（2）0（3）负数。**贪心算法的决策是：只加正数** 。\n\n最终代码如下：\n\n```java\npublic int maxProfit(int[] prices) {\n    int res = 0;\n    int len = prices.length;\n    for(int i = 0; i < len - 1; i++){\n        int diff = prices[i + 1] - prices[i];\n        if(diff > 0){\n            res += diff;\n        }\n    }\n    return res;\n}\n```\n\n## 7. 参考引用\n\n1. [Wikipedia](https://zh.wikipedia.org/wiki/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95)\n2. https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/tan-xin-suan-fa-zhi-qu-jian-tiao-du-wen-ti\n3. https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/tan-xin-suan-fa-by-liweiwei1419-2/\n\n","slug":"贪心算法总结","published":1,"updated":"2021-02-23T12:35:30.890Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5mkvt000inyl1hsk3gcob","content":"<p>本文主要介绍了贪心算法以及 LeetCode 的相关题目。</p>\n<h2 id=\"1-什么是贪心算法？\"><a href=\"#1-什么是贪心算法？\" class=\"headerlink\" title=\"1. 什么是贪心算法？\"></a>1. 什么是贪心算法？</h2><p><a href=\"https://zh.wikipedia.org/wiki/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener\">维基定义</a>：（英语：greedy algorithm），又称<strong>贪婪算法</strong>，是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法。比如在 <a href=\"https://zh.wikipedia.org/wiki/旅行推销员问题\" target=\"_blank\" rel=\"noopener\">旅行推销员问题</a> 中，如果旅行员每次都选择最近的城市，那这就是一种贪心算法。</p>\n<p>贪心算法在有最优子结构的问题中尤为有效。最优子结构的意思是局部最优解能决定全局最优解。简单地说，问题能够分解成子问题来解决，子问题的最优解能递推到最终问题的最优解。</p>\n<p><strong>贪心算法与动态规划的不同在于它对每个子问题的解决方案都做出选择，不能回退。动态规划则会保存以前的运算结果，并根据以前的结果对当前进行选择，有回退功能。</strong></p>\n<a id=\"more\"></a>\n\n<p>参考 <a href=\"https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/tan-xin-suan-fa-zhi-qu-jian-tiao-du-wen-ti\" target=\"_blank\" rel=\"noopener\">这里</a> 给出对于贪心算法的理解：</p>\n<p>什么是贪心算法呢？贪心算法可以认为是动态规划算法的一个特例，相比动态规划，使用贪心算法需要满足更多的条件（贪心选择性质），但是效率比动态规划要高。</p>\n<p>比如说一个算法问题使用暴力解法需要指数级时间，如果能使用动态规划消除重叠子问题，就可以降到多项式级别的时间，如果满足贪心选择性质，那么可以进一步降低时间复杂度，达到线性级别的。</p>\n<p>什么是贪心选择性质呢，简单说就是：每一步都做出一个局部最优的选择，最终的结果就是全局最优。注意哦，这是一种特殊性质，其实只有一部分问题拥有这个性质。</p>\n<p>比如你面前放着 100 张人民币，你只能拿十张，怎么才能拿最多的面额？显然每次选择剩下钞票中面值最大的一张，最后你的选择一定是最优的。</p>\n<p>然而，大部分问题明显不具有贪心选择性质。比如打斗地主，对手出对儿三，按照贪心策略，你应该出尽可能小的牌刚好压制住对方，但现实情况我们甚至可能会出王炸。这种情况就不能用贪心算法，而得使用动态规划解决。</p>\n<h2 id=\"2-区间调度问题\"><a href=\"#2-区间调度问题\" class=\"headerlink\" title=\"2. 区间调度问题\"></a>2. 区间调度问题</h2><p>参考 <a href=\"https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/tan-xin-suan-fa-zhi-qu-jian-tiao-du-wen-ti\" target=\"_blank\" rel=\"noopener\">这里</a> .</p>\n<h3 id=\"2-1-问题描述\"><a href=\"#2-1-问题描述\" class=\"headerlink\" title=\"2.1. 问题描述\"></a>2.1. 问题描述</h3><p>首先解决一个很经典的贪心算法问题：区间调度问题（Interval Scheduling）。给出形如 <code>[start, end]</code> 的闭区间，设计一个算法，求出这些区间 <strong>最多有几个互不相交的区间</strong> 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">intervalSchedule</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] intvs)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>举个例子，<code>intvs = [[1,3], [2,4], [3,6]]</code>，这些区间最多有 2 个区间互不相交，即 <code>[[1,3], [3,6]]</code>，你的算法应该返回 2。注意边界相同并不算相交。</p>\n<p>这个问题在生活中的应用广泛，比如你今天有好几个活动，每个活动都可以用区间 <code>[start, end]</code> 表示开始和结束的时间，请问你今天<strong>最多能参加几个活动呢？</strong>显然你一个人不能同时参加两个活动，所以说这个问题就是求这些时间区间的最大不相交子集。</p>\n<h3 id=\"2-2-题目分析\"><a href=\"#2-2-题目分析\" class=\"headerlink\" title=\"2.2. 题目分析\"></a>2.2. 题目分析</h3><p>这个问题有许多看起来不错的贪心思路，却都不能得到正确答案。比如说：</p>\n<p>也许我们可以每次选择可选区间中开始最早的那个？但是可能存在某些区间开始很早，但是很长，使得我们错误地错过了一些短的区间。或者我们每次选择可选区间中最短的那个？或者选择出现冲突最少的那个区间？这些方案都能很容易举出反例，不是正确的方案。</p>\n<p>正确的思路其实很简单，可以分为以下三步：</p>\n<ol>\n<li>从区间集合 intvs 中选择一个区间 x，这个 x 是在当前所有区间中<strong>结束最早的</strong>（end 最小）。</li>\n<li>把所有与 x 区间相交的区间从区间集合 intvs 中删除。</li>\n<li>重复步骤 1 和 2，直到 intvs 为空为止。之前选出的那些 x 就是最大不相交子集。</li>\n</ol>\n<p>把这个思路实现成算法的话，可以按每个区间的 <code>end</code> 数值升序排序，因为这样处理之后实现步骤 1 和步骤 2 都方便很多。如下图所示：</p>\n<img src=\"/pictures/image-20200912154659563.png\" alt=\"image-20200912154659563\" style=\"zoom:67%;\" />\n\n<p>前三个区间属于相交区间，count 不用 +1，第四个区间就是一个新的不相交区间，访问到第四个区间时，count 需要+1，并且更新 end。</p>\n<p>这种思路的贪心算法体现在：在上图中，第一个区间和第二个区间属于相交区间，肯定是二选一的，如何选择呢？当然是选择第一个。因为第一个给后面区间的选择留有更大的空间，这就属于当前情况下的最优选择，之后的选择就在这个选择的基础上，进行选择。</p>\n<h3 id=\"2-3-代码\"><a href=\"#2-3-代码\" class=\"headerlink\" title=\"2.3. 代码\"></a>2.3. 代码</h3><p>参考博客的代码，做了一些修改，这样可以和后面两个题统一。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">intervalSchedule</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] intvs)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(intvs.length == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 按 end 排序</span></span><br><span class=\"line\">    Arrays.sort(intvs, <span class=\"keyword\">new</span> Comparator&lt;<span class=\"keyword\">int</span>[]&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span>[] b)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a[<span class=\"number\">1</span>] - b[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始时，至少有一个区间不相交</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = intvs[<span class=\"number\">0</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; intvs.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(intvs[i][<span class=\"number\">0</span>] &gt;= end)&#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            end = intvs[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-无重叠区间-435\"><a href=\"#3-无重叠区间-435\" class=\"headerlink\" title=\"3. 无重叠区间 [435]\"></a>3. 无重叠区间 [435]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/non-overlapping-intervals/\" target=\"_blank\" rel=\"noopener\">435. 无重叠区间</a></p>\n<h3 id=\"3-1-题目描述\"><a href=\"#3-1-题目描述\" class=\"headerlink\" title=\"3.1. 题目描述\"></a>3.1. 题目描述</h3><p><img src=\"/pictures/image-20200912101636226.png\" alt=\"image-20200912101636226\"></p>\n<h3 id=\"3-2-方法一：区间调度算法（推荐）\"><a href=\"#3-2-方法一：区间调度算法（推荐）\" class=\"headerlink\" title=\"3.2. 方法一：区间调度算法（推荐）\"></a>3.2. 方法一：区间调度算法（推荐）</h3><p>使用本文第 2 小节的区间调度问题的思路即可。上文中，区间调度问题求的是最多不相交的区间个数，这里求移除几个区间后，区间互不重叠，即就是返回 <code>总的区间数 - 不重叠的区间数</code> 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">eraseOverlapIntervals</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] intervals)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(intervals.length == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    Arrays.sort(intervals, <span class=\"keyword\">new</span> Comparator&lt;<span class=\"keyword\">int</span>[]&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span>[] b)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a[<span class=\"number\">1</span>] - b[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 互补重叠的区间数量（能留下的区间数量），初值为 1</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = intervals[<span class=\"number\">0</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; intervals.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(intervals[i][<span class=\"number\">0</span>] &gt;= end)&#123;</span><br><span class=\"line\">            end = intervals[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> intervals.length - count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-方法二：从起点的贪心算法\"><a href=\"#3-2-方法二：从起点的贪心算法\" class=\"headerlink\" title=\"3.2. 方法二：从起点的贪心算法\"></a>3.2. 方法二：从起点的贪心算法</h3><p>参考 <a href=\"https://leetcode-cn.com/problems/non-overlapping-intervals/solution/wu-zhong-die-qu-jian-by-leetcode/\" target=\"_blank\" rel=\"noopener\">这里</a> .</p>\n<p>方法一是从终点的贪心算法。这里按照起点对区间进行排序。当按照起点先后顺序考虑区间的时候。我们利用一个 prev 指针追踪刚刚添加到最终列表中的区间。遍历的时候，可能遇到图中的三种情况：</p>\n<p><img src=\"/pictures/image-20200912104507992.png\" alt=\"image-20200912104507992\"></p>\n<ul>\n<li>情况一：当前考虑的两个区间不重叠。在这种情况下，不移除任何区间，将 prev<em>p<strong>r</strong>e**v</em> 赋值为后面的区间，移除区间数量不变。</li>\n<li>情况二：两个区间重叠，后一个区间的终点在前一个终点之前，即前一个区间包含后一个区间。显然，前一个区间的长度更小，会给后面留下更多空间，因此，prev 更新为当前区间，移除区间数量 +1.</li>\n<li>情况三：两个区间重叠，后一个区间的终点在前一个终点之后，这种情况下，我们用贪心策略处理，直接移除后一个区间。（官方解释没看懂…）。我的理解是：这里如果移除前一个区间，会留出 A 的额外空间，但这部分空间是用不到的，不是当前的最优解；但如果移除后一个空间，会留出 B 的额外空间，给后面的区间留下了更多的空间。</li>\n</ul>\n<p>最终代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">eraseOverlapIntervals</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] intervals)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(intervals.length == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 按照 start 排序</span></span><br><span class=\"line\">    Arrays.sort(intervals, <span class=\"keyword\">new</span> Comparator&lt;<span class=\"keyword\">int</span>[]&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span>[] b)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a[<span class=\"number\">0</span>] - b[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// prev 指针追踪刚刚添加到最终列表中的区间</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> prev = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 需要移除的数量</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; intervals.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(intervals[prev][<span class=\"number\">1</span>] &gt; intervals[i][<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">            <span class=\"comment\">// case 2</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(intervals[prev][<span class=\"number\">1</span>] &gt; intervals[i][<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                prev = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// case 3</span></span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// case 1</span></span><br><span class=\"line\">            prev = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-用最少数量的箭引爆气球-452\"><a href=\"#4-用最少数量的箭引爆气球-452\" class=\"headerlink\" title=\"4. 用最少数量的箭引爆气球 [452]\"></a>4. 用最少数量的箭引爆气球 [452]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/\" target=\"_blank\" rel=\"noopener\">452. 用最少数量的箭引爆气球</a></p>\n<h3 id=\"4-1-题目描述\"><a href=\"#4-1-题目描述\" class=\"headerlink\" title=\"4.1. 题目描述\"></a>4.1. 题目描述</h3><p><img src=\"/pictures/image-20200912114154510.png\" alt=\"image-20200912114154510\"></p>\n<h3 id=\"4-2-方法一：区间调度算法\"><a href=\"#4-2-方法一：区间调度算法\" class=\"headerlink\" title=\"4.2. 方法一：区间调度算法\"></a>4.2. 方法一：区间调度算法</h3><p>参考 [这里]。</p>\n<p>仔细思考后，这个问题和区间调度算法一模一样。如果最多有 n 个不重叠的区间，那么就至少需要 n 个箭头穿透所有区间，如下图所示：</p>\n<img src=\"/pictures/image-20200912160847665.png\" alt=\"image-20200912160847665\" style=\"zoom: 67%;\" />\n\n<p>只是有一点不一样，在 <code>intervalSchedule</code> 算法中，如果两个区间的边界触碰，不算重叠；而按照这道题目的描述，箭头如果碰到气球的边界气球也会爆炸，所以说相当于区间的边界触碰也算重叠：</p>\n<img src=\"/pictures/image-20200912161028162.png\" alt=\"image-20200912161028162\" style=\"zoom:67%;\" />\n\n<p>所以只需要将区间调度算法稍作修改，就可以得到题目代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findMinArrowShots</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] points)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(points.length == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 按照 end 排序</span></span><br><span class=\"line\">    Arrays.sort(points, <span class=\"keyword\">new</span> Comparator&lt;<span class=\"keyword\">int</span>[]&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span>[] b)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a[<span class=\"number\">1</span>] - b[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 互不重叠的区间数量（射箭数量，选中第一个区间时，肯定会射一箭）</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = points[<span class=\"number\">0</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; points.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 注意：这里把首尾相接的视为相交，去掉等号</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(points[i][<span class=\"number\">0</span>] &gt; end)&#123;</span><br><span class=\"line\">            end = points[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-使用贪心算法的题目列表\"><a href=\"#5-使用贪心算法的题目列表\" class=\"headerlink\" title=\"5. 使用贪心算法的题目列表\"></a>5. 使用贪心算法的题目列表</h2><p>本文中使用贪心算法解决的 LeetCode 题目列表如下，持续更新中~</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">#</th>\n<th align=\"center\">Title</th>\n<th align=\"center\">Remark</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">435</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/non-overlapping-intervals/\" target=\"_blank\" rel=\"noopener\">无重叠区间</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">452</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/\" target=\"_blank\" rel=\"noopener\">用最少数量的箭引爆气球</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">122</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/\" target=\"_blank\" rel=\"noopener\">买卖股票的最佳时机 II</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n</tbody></table>\n<h2 id=\"6-买卖股票的最佳时机-II-122\"><a href=\"#6-买卖股票的最佳时机-II-122\" class=\"headerlink\" title=\"6. 买卖股票的最佳时机 II [122]\"></a>6. 买卖股票的最佳时机 II [122]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/\" target=\"_blank\" rel=\"noopener\">122. 买卖股票的最佳时机 II</a></p>\n<h3 id=\"6-1-题目描述\"><a href=\"#6-1-题目描述\" class=\"headerlink\" title=\"6.1. 题目描述\"></a>6.1. 题目描述</h3><p><img src=\"/pictures/image-20200911103413418.png\" alt=\"image-20200911103413418\"></p>\n<h3 id=\"6-2-贪心算法\"><a href=\"#6-2-贪心算法\" class=\"headerlink\" title=\"6.2. 贪心算法\"></a>6.2. 贪心算法</h3><p>参考 <a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/tan-xin-suan-fa-by-liweiwei1419-2/\" target=\"_blank\" rel=\"noopener\">这里</a> 的方法二。</p>\n<p>这道题使用贪心算法的流程是这样的：从第 i 天（这里 i &gt;= 1）开始，与第 i - 1 的股价进行比较，如果股价有上升（严格上升），就将升高的股价（ prices[i] - prices[i- 1] ）记入总利润，按照这种算法，得到的结果就是符合题意的最大利润。下面对这个算法进行几点说明：</p>\n<ol>\n<li><p>该算法仅可以用于计算，但计算的过程并不是真正交易的过程，但可以用贪心算法计算题目要求的最大利润。下面说明这个等价性：以 [1, 2, 3, 4] 为例，这 4 天的股价依次上升，按照贪心算法，得到的最大利润是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res =  (prices[<span class=\"number\">3</span>] - prices[<span class=\"number\">2</span>]) + (prices[<span class=\"number\">2</span>] - prices[<span class=\"number\">1</span>]) + (prices[<span class=\"number\">1</span>] - prices[<span class=\"number\">0</span>])</span><br><span class=\"line\">    =  prices[<span class=\"number\">3</span>] - prices[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<p>仔细观察上面的式子，按照贪心算法，在索引为 1、2、3 的这三天，我们做的操作应该是买进昨天的，卖出今天的，虽然这种操作题目并不允许，但是它等价于：“在索引为 0 的那一天买入，在索引为 3 的那一天卖出”。</p>\n</li>\n<li><p>解释一下，它为什么叫做贪心算法？</p>\n<p>“贪心算法” 在每一步总是做出在当前看来最好的选择。</p>\n<p>因此，</p>\n<ul>\n<li><p>“贪心算法” 和 “动态规划”、“回溯搜索” 算法一样，完成一件事情，是分步决策的；</p>\n</li>\n<li><p>“贪心算法” 在每一步总是做出在当前看来最好的选择，我是这样理解 “最好” 这两个字的意思：</p>\n<ul>\n<li>“最好” 的意思往往根据题目而来，可能是 “最小”，也可能是 “最大”；</li>\n</ul>\n</li>\n<li><p>贪心算法和动态规划相比，它既不看前面（也就是说它不需要从前面的状态转移过来），也不看后面（无后效性，后面的选择不会对前面的选择有影响），因此贪心算法时间复杂度一般是线性的，空间复杂度是常数级别的。</p>\n</li>\n<li><p>这道题 “贪心” 的地方在于，对于 “今天的股价 - 昨天的股价”，得到的结果有 3 种可能：（1）正数（2）0（3）负数。<strong>贪心算法的决策是：只加正数</strong> 。</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>最终代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"keyword\">int</span>[] prices)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = prices.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> diff = prices[i + <span class=\"number\">1</span>] - prices[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(diff &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            res += diff;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-参考引用\"><a href=\"#7-参考引用\" class=\"headerlink\" title=\"7. 参考引用\"></a>7. 参考引用</h2><ol>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener\">Wikipedia</a></li>\n<li><a href=\"https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/tan-xin-suan-fa-zhi-qu-jian-tiao-du-wen-ti\" target=\"_blank\" rel=\"noopener\">https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/tan-xin-suan-fa-zhi-qu-jian-tiao-du-wen-ti</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/tan-xin-suan-fa-by-liweiwei1419-2/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/tan-xin-suan-fa-by-liweiwei1419-2/</a></li>\n</ol>\n","site":{"data":{}},"length":5742,"excerpt":"<p>本文主要介绍了贪心算法以及 LeetCode 的相关题目。</p>\n<h2 id=\"1-什么是贪心算法？\"><a href=\"#1-什么是贪心算法？\" class=\"headerlink\" title=\"1. 什么是贪心算法？\"></a>1. 什么是贪心算法？</h2><p><a href=\"https://zh.wikipedia.org/wiki/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener\">维基定义</a>：（英语：greedy algorithm），又称<strong>贪婪算法</strong>，是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法。比如在 <a href=\"https://zh.wikipedia.org/wiki/旅行推销员问题\" target=\"_blank\" rel=\"noopener\">旅行推销员问题</a> 中，如果旅行员每次都选择最近的城市，那这就是一种贪心算法。</p>\n<p>贪心算法在有最优子结构的问题中尤为有效。最优子结构的意思是局部最优解能决定全局最优解。简单地说，问题能够分解成子问题来解决，子问题的最优解能递推到最终问题的最优解。</p>\n<p><strong>贪心算法与动态规划的不同在于它对每个子问题的解决方案都做出选择，不能回退。动态规划则会保存以前的运算结果，并根据以前的结果对当前进行选择，有回退功能。</strong></p>","more":"<p>参考 <a href=\"https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/tan-xin-suan-fa-zhi-qu-jian-tiao-du-wen-ti\" target=\"_blank\" rel=\"noopener\">这里</a> 给出对于贪心算法的理解：</p>\n<p>什么是贪心算法呢？贪心算法可以认为是动态规划算法的一个特例，相比动态规划，使用贪心算法需要满足更多的条件（贪心选择性质），但是效率比动态规划要高。</p>\n<p>比如说一个算法问题使用暴力解法需要指数级时间，如果能使用动态规划消除重叠子问题，就可以降到多项式级别的时间，如果满足贪心选择性质，那么可以进一步降低时间复杂度，达到线性级别的。</p>\n<p>什么是贪心选择性质呢，简单说就是：每一步都做出一个局部最优的选择，最终的结果就是全局最优。注意哦，这是一种特殊性质，其实只有一部分问题拥有这个性质。</p>\n<p>比如你面前放着 100 张人民币，你只能拿十张，怎么才能拿最多的面额？显然每次选择剩下钞票中面值最大的一张，最后你的选择一定是最优的。</p>\n<p>然而，大部分问题明显不具有贪心选择性质。比如打斗地主，对手出对儿三，按照贪心策略，你应该出尽可能小的牌刚好压制住对方，但现实情况我们甚至可能会出王炸。这种情况就不能用贪心算法，而得使用动态规划解决。</p>\n<h2 id=\"2-区间调度问题\"><a href=\"#2-区间调度问题\" class=\"headerlink\" title=\"2. 区间调度问题\"></a>2. 区间调度问题</h2><p>参考 <a href=\"https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/tan-xin-suan-fa-zhi-qu-jian-tiao-du-wen-ti\" target=\"_blank\" rel=\"noopener\">这里</a> .</p>\n<h3 id=\"2-1-问题描述\"><a href=\"#2-1-问题描述\" class=\"headerlink\" title=\"2.1. 问题描述\"></a>2.1. 问题描述</h3><p>首先解决一个很经典的贪心算法问题：区间调度问题（Interval Scheduling）。给出形如 <code>[start, end]</code> 的闭区间，设计一个算法，求出这些区间 <strong>最多有几个互不相交的区间</strong> 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">intervalSchedule</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] intvs)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>举个例子，<code>intvs = [[1,3], [2,4], [3,6]]</code>，这些区间最多有 2 个区间互不相交，即 <code>[[1,3], [3,6]]</code>，你的算法应该返回 2。注意边界相同并不算相交。</p>\n<p>这个问题在生活中的应用广泛，比如你今天有好几个活动，每个活动都可以用区间 <code>[start, end]</code> 表示开始和结束的时间，请问你今天<strong>最多能参加几个活动呢？</strong>显然你一个人不能同时参加两个活动，所以说这个问题就是求这些时间区间的最大不相交子集。</p>\n<h3 id=\"2-2-题目分析\"><a href=\"#2-2-题目分析\" class=\"headerlink\" title=\"2.2. 题目分析\"></a>2.2. 题目分析</h3><p>这个问题有许多看起来不错的贪心思路，却都不能得到正确答案。比如说：</p>\n<p>也许我们可以每次选择可选区间中开始最早的那个？但是可能存在某些区间开始很早，但是很长，使得我们错误地错过了一些短的区间。或者我们每次选择可选区间中最短的那个？或者选择出现冲突最少的那个区间？这些方案都能很容易举出反例，不是正确的方案。</p>\n<p>正确的思路其实很简单，可以分为以下三步：</p>\n<ol>\n<li>从区间集合 intvs 中选择一个区间 x，这个 x 是在当前所有区间中<strong>结束最早的</strong>（end 最小）。</li>\n<li>把所有与 x 区间相交的区间从区间集合 intvs 中删除。</li>\n<li>重复步骤 1 和 2，直到 intvs 为空为止。之前选出的那些 x 就是最大不相交子集。</li>\n</ol>\n<p>把这个思路实现成算法的话，可以按每个区间的 <code>end</code> 数值升序排序，因为这样处理之后实现步骤 1 和步骤 2 都方便很多。如下图所示：</p>\n<img src=\"/pictures/image-20200912154659563.png\" alt=\"image-20200912154659563\" style=\"zoom:67%;\" />\n\n<p>前三个区间属于相交区间，count 不用 +1，第四个区间就是一个新的不相交区间，访问到第四个区间时，count 需要+1，并且更新 end。</p>\n<p>这种思路的贪心算法体现在：在上图中，第一个区间和第二个区间属于相交区间，肯定是二选一的，如何选择呢？当然是选择第一个。因为第一个给后面区间的选择留有更大的空间，这就属于当前情况下的最优选择，之后的选择就在这个选择的基础上，进行选择。</p>\n<h3 id=\"2-3-代码\"><a href=\"#2-3-代码\" class=\"headerlink\" title=\"2.3. 代码\"></a>2.3. 代码</h3><p>参考博客的代码，做了一些修改，这样可以和后面两个题统一。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">intervalSchedule</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] intvs)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(intvs.length == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 按 end 排序</span></span><br><span class=\"line\">    Arrays.sort(intvs, <span class=\"keyword\">new</span> Comparator&lt;<span class=\"keyword\">int</span>[]&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span>[] b)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a[<span class=\"number\">1</span>] - b[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始时，至少有一个区间不相交</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = intvs[<span class=\"number\">0</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; intvs.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(intvs[i][<span class=\"number\">0</span>] &gt;= end)&#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            end = intvs[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-无重叠区间-435\"><a href=\"#3-无重叠区间-435\" class=\"headerlink\" title=\"3. 无重叠区间 [435]\"></a>3. 无重叠区间 [435]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/non-overlapping-intervals/\" target=\"_blank\" rel=\"noopener\">435. 无重叠区间</a></p>\n<h3 id=\"3-1-题目描述\"><a href=\"#3-1-题目描述\" class=\"headerlink\" title=\"3.1. 题目描述\"></a>3.1. 题目描述</h3><p><img src=\"/pictures/image-20200912101636226.png\" alt=\"image-20200912101636226\"></p>\n<h3 id=\"3-2-方法一：区间调度算法（推荐）\"><a href=\"#3-2-方法一：区间调度算法（推荐）\" class=\"headerlink\" title=\"3.2. 方法一：区间调度算法（推荐）\"></a>3.2. 方法一：区间调度算法（推荐）</h3><p>使用本文第 2 小节的区间调度问题的思路即可。上文中，区间调度问题求的是最多不相交的区间个数，这里求移除几个区间后，区间互不重叠，即就是返回 <code>总的区间数 - 不重叠的区间数</code> 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">eraseOverlapIntervals</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] intervals)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(intervals.length == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    Arrays.sort(intervals, <span class=\"keyword\">new</span> Comparator&lt;<span class=\"keyword\">int</span>[]&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span>[] b)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a[<span class=\"number\">1</span>] - b[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 互补重叠的区间数量（能留下的区间数量），初值为 1</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = intervals[<span class=\"number\">0</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; intervals.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(intervals[i][<span class=\"number\">0</span>] &gt;= end)&#123;</span><br><span class=\"line\">            end = intervals[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> intervals.length - count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-方法二：从起点的贪心算法\"><a href=\"#3-2-方法二：从起点的贪心算法\" class=\"headerlink\" title=\"3.2. 方法二：从起点的贪心算法\"></a>3.2. 方法二：从起点的贪心算法</h3><p>参考 <a href=\"https://leetcode-cn.com/problems/non-overlapping-intervals/solution/wu-zhong-die-qu-jian-by-leetcode/\" target=\"_blank\" rel=\"noopener\">这里</a> .</p>\n<p>方法一是从终点的贪心算法。这里按照起点对区间进行排序。当按照起点先后顺序考虑区间的时候。我们利用一个 prev 指针追踪刚刚添加到最终列表中的区间。遍历的时候，可能遇到图中的三种情况：</p>\n<p><img src=\"/pictures/image-20200912104507992.png\" alt=\"image-20200912104507992\"></p>\n<ul>\n<li>情况一：当前考虑的两个区间不重叠。在这种情况下，不移除任何区间，将 prev<em>p<strong>r</strong>e**v</em> 赋值为后面的区间，移除区间数量不变。</li>\n<li>情况二：两个区间重叠，后一个区间的终点在前一个终点之前，即前一个区间包含后一个区间。显然，前一个区间的长度更小，会给后面留下更多空间，因此，prev 更新为当前区间，移除区间数量 +1.</li>\n<li>情况三：两个区间重叠，后一个区间的终点在前一个终点之后，这种情况下，我们用贪心策略处理，直接移除后一个区间。（官方解释没看懂…）。我的理解是：这里如果移除前一个区间，会留出 A 的额外空间，但这部分空间是用不到的，不是当前的最优解；但如果移除后一个空间，会留出 B 的额外空间，给后面的区间留下了更多的空间。</li>\n</ul>\n<p>最终代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">eraseOverlapIntervals</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] intervals)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(intervals.length == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 按照 start 排序</span></span><br><span class=\"line\">    Arrays.sort(intervals, <span class=\"keyword\">new</span> Comparator&lt;<span class=\"keyword\">int</span>[]&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span>[] b)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a[<span class=\"number\">0</span>] - b[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// prev 指针追踪刚刚添加到最终列表中的区间</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> prev = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 需要移除的数量</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; intervals.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(intervals[prev][<span class=\"number\">1</span>] &gt; intervals[i][<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">            <span class=\"comment\">// case 2</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(intervals[prev][<span class=\"number\">1</span>] &gt; intervals[i][<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                prev = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// case 3</span></span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// case 1</span></span><br><span class=\"line\">            prev = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-用最少数量的箭引爆气球-452\"><a href=\"#4-用最少数量的箭引爆气球-452\" class=\"headerlink\" title=\"4. 用最少数量的箭引爆气球 [452]\"></a>4. 用最少数量的箭引爆气球 [452]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/\" target=\"_blank\" rel=\"noopener\">452. 用最少数量的箭引爆气球</a></p>\n<h3 id=\"4-1-题目描述\"><a href=\"#4-1-题目描述\" class=\"headerlink\" title=\"4.1. 题目描述\"></a>4.1. 题目描述</h3><p><img src=\"/pictures/image-20200912114154510.png\" alt=\"image-20200912114154510\"></p>\n<h3 id=\"4-2-方法一：区间调度算法\"><a href=\"#4-2-方法一：区间调度算法\" class=\"headerlink\" title=\"4.2. 方法一：区间调度算法\"></a>4.2. 方法一：区间调度算法</h3><p>参考 [这里]。</p>\n<p>仔细思考后，这个问题和区间调度算法一模一样。如果最多有 n 个不重叠的区间，那么就至少需要 n 个箭头穿透所有区间，如下图所示：</p>\n<img src=\"/pictures/image-20200912160847665.png\" alt=\"image-20200912160847665\" style=\"zoom: 67%;\" />\n\n<p>只是有一点不一样，在 <code>intervalSchedule</code> 算法中，如果两个区间的边界触碰，不算重叠；而按照这道题目的描述，箭头如果碰到气球的边界气球也会爆炸，所以说相当于区间的边界触碰也算重叠：</p>\n<img src=\"/pictures/image-20200912161028162.png\" alt=\"image-20200912161028162\" style=\"zoom:67%;\" />\n\n<p>所以只需要将区间调度算法稍作修改，就可以得到题目代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findMinArrowShots</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] points)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(points.length == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 按照 end 排序</span></span><br><span class=\"line\">    Arrays.sort(points, <span class=\"keyword\">new</span> Comparator&lt;<span class=\"keyword\">int</span>[]&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span>[] b)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a[<span class=\"number\">1</span>] - b[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 互不重叠的区间数量（射箭数量，选中第一个区间时，肯定会射一箭）</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = points[<span class=\"number\">0</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; points.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 注意：这里把首尾相接的视为相交，去掉等号</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(points[i][<span class=\"number\">0</span>] &gt; end)&#123;</span><br><span class=\"line\">            end = points[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-使用贪心算法的题目列表\"><a href=\"#5-使用贪心算法的题目列表\" class=\"headerlink\" title=\"5. 使用贪心算法的题目列表\"></a>5. 使用贪心算法的题目列表</h2><p>本文中使用贪心算法解决的 LeetCode 题目列表如下，持续更新中~</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">#</th>\n<th align=\"center\">Title</th>\n<th align=\"center\">Remark</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">435</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/non-overlapping-intervals/\" target=\"_blank\" rel=\"noopener\">无重叠区间</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">452</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/\" target=\"_blank\" rel=\"noopener\">用最少数量的箭引爆气球</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">122</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/\" target=\"_blank\" rel=\"noopener\">买卖股票的最佳时机 II</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n</tbody></table>\n<h2 id=\"6-买卖股票的最佳时机-II-122\"><a href=\"#6-买卖股票的最佳时机-II-122\" class=\"headerlink\" title=\"6. 买卖股票的最佳时机 II [122]\"></a>6. 买卖股票的最佳时机 II [122]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/\" target=\"_blank\" rel=\"noopener\">122. 买卖股票的最佳时机 II</a></p>\n<h3 id=\"6-1-题目描述\"><a href=\"#6-1-题目描述\" class=\"headerlink\" title=\"6.1. 题目描述\"></a>6.1. 题目描述</h3><p><img src=\"/pictures/image-20200911103413418.png\" alt=\"image-20200911103413418\"></p>\n<h3 id=\"6-2-贪心算法\"><a href=\"#6-2-贪心算法\" class=\"headerlink\" title=\"6.2. 贪心算法\"></a>6.2. 贪心算法</h3><p>参考 <a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/tan-xin-suan-fa-by-liweiwei1419-2/\" target=\"_blank\" rel=\"noopener\">这里</a> 的方法二。</p>\n<p>这道题使用贪心算法的流程是这样的：从第 i 天（这里 i &gt;= 1）开始，与第 i - 1 的股价进行比较，如果股价有上升（严格上升），就将升高的股价（ prices[i] - prices[i- 1] ）记入总利润，按照这种算法，得到的结果就是符合题意的最大利润。下面对这个算法进行几点说明：</p>\n<ol>\n<li><p>该算法仅可以用于计算，但计算的过程并不是真正交易的过程，但可以用贪心算法计算题目要求的最大利润。下面说明这个等价性：以 [1, 2, 3, 4] 为例，这 4 天的股价依次上升，按照贪心算法，得到的最大利润是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res =  (prices[<span class=\"number\">3</span>] - prices[<span class=\"number\">2</span>]) + (prices[<span class=\"number\">2</span>] - prices[<span class=\"number\">1</span>]) + (prices[<span class=\"number\">1</span>] - prices[<span class=\"number\">0</span>])</span><br><span class=\"line\">    =  prices[<span class=\"number\">3</span>] - prices[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<p>仔细观察上面的式子，按照贪心算法，在索引为 1、2、3 的这三天，我们做的操作应该是买进昨天的，卖出今天的，虽然这种操作题目并不允许，但是它等价于：“在索引为 0 的那一天买入，在索引为 3 的那一天卖出”。</p>\n</li>\n<li><p>解释一下，它为什么叫做贪心算法？</p>\n<p>“贪心算法” 在每一步总是做出在当前看来最好的选择。</p>\n<p>因此，</p>\n<ul>\n<li><p>“贪心算法” 和 “动态规划”、“回溯搜索” 算法一样，完成一件事情，是分步决策的；</p>\n</li>\n<li><p>“贪心算法” 在每一步总是做出在当前看来最好的选择，我是这样理解 “最好” 这两个字的意思：</p>\n<ul>\n<li>“最好” 的意思往往根据题目而来，可能是 “最小”，也可能是 “最大”；</li>\n</ul>\n</li>\n<li><p>贪心算法和动态规划相比，它既不看前面（也就是说它不需要从前面的状态转移过来），也不看后面（无后效性，后面的选择不会对前面的选择有影响），因此贪心算法时间复杂度一般是线性的，空间复杂度是常数级别的。</p>\n</li>\n<li><p>这道题 “贪心” 的地方在于，对于 “今天的股价 - 昨天的股价”，得到的结果有 3 种可能：（1）正数（2）0（3）负数。<strong>贪心算法的决策是：只加正数</strong> 。</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>最终代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"keyword\">int</span>[] prices)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = prices.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> diff = prices[i + <span class=\"number\">1</span>] - prices[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(diff &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            res += diff;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-参考引用\"><a href=\"#7-参考引用\" class=\"headerlink\" title=\"7. 参考引用\"></a>7. 参考引用</h2><ol>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener\">Wikipedia</a></li>\n<li><a href=\"https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/tan-xin-suan-fa-zhi-qu-jian-tiao-du-wen-ti\" target=\"_blank\" rel=\"noopener\">https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/tan-xin-suan-fa-zhi-qu-jian-tiao-du-wen-ti</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/tan-xin-suan-fa-by-liweiwei1419-2/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/tan-xin-suan-fa-by-liweiwei1419-2/</a></li>\n</ol>"},{"title":"二分查找总结","date":"2020-06-10T02:06:51.000Z","_content":"\n本文介绍了二分查找，主要总结了三种二分查找的框架，分别是：基本的二分查找、查找左侧边界、查找右侧边界。同时，解决了部分LeetCode上二分查找相关的题目，这部分会持续更新~\n\n## 1. 什么是二分查找？\n\n[维基定义](https://zh.wikipedia.org/wiki/二分搜尋演算法)：在计算机科学中，二分查找算法（英语：binary search algorithm），也称折半搜索算法（英语：half-interval search algorithm）[1]、对数搜索算法（英语：logarithmic search algorithm），是一种在有序数组中查找某一特定元素的搜索算法。搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组为空，则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半。\n\n二分查找算法在情况下的复杂度是对数时间，进行O(log n)次比较操作。二分查找算法使用常数空间，无论对任何大小的输入数据，算法使用的空间都是一样的。除非输入数据数量很少，否则二分查找算法比线性搜索更快，但数组必须事先被排序。尽管特定的、为了快速搜索而设计的数据结构更有效（比如哈希表），二分查找算法应用面更广。\n\n<!--more-->\n\n## 2. 基本的二分查找：二分查找 [704]\n\n题目来源：[704. 二分查找](https://leetcode-cn.com/problems/binary-search/)\n\n### 2.1. 题目描述\n\n给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。\n\n**示例 1:**\n\n```bash\n输入: nums = [-1,0,3,5,9,12], target = 9\n输出: 4\n解释: 9 出现在 nums 中并且下标为 4\n```\n\n**示例 2:**\n\n```bash\n输入: nums = [-1,0,3,5,9,12], target = 2\n输出: -1\n解释: 2 不存在 nums 中因此返回 -1\n```\n\n**提示：**\n\n1. 你可以假设 `nums` 中的所有元素是不重复的。\n2. `n` 将在 `[1, 10000]`之间。\n3. `nums` 的每个元素都将在 `[-9999, 9999]`之间。\n\n### 2.2. 题目分析\n\n基本二分查找。\n\n### 2.3. 代码\n\n```java\npublic int search(int[] nums, int target) {\n    int left = 0, right = nums.length - 1;\n    while (left <= right){\n        int mid = left + (right - left) / 2;\n        if(nums[mid] == target){\n            return mid;\n        }else if(nums[mid] < target){\n            left = mid + 1;\n        }else{\n            right = mid - 1;\n        }\n    }\n    return -1;\n}\n```\n\n## 3. 在排序数组中查找元素的第一个和最后一个位置 [34]\n\n题目来源：[34. 在排序数组中查找元素的第一个和最后一个位置](https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/)\n\n### 3.1. 题目描述\n\n给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。\n\n你的算法时间复杂度必须是 O(log n) 级别。\n\n如果数组中不存在目标值，返回 [-1, -1]。\n\n示例 1:\n\n```bash\n输入: nums = [5,7,7,8,8,10], target = 8\n输出: [3,4]\n```\n\n\n示例 2:\n\n```bash\n输入: nums = [5,7,7,8,8,10], target = 6\n输出: [-1,-1]\n```\n\n### 3.2. 题目分析\n\n本题求给出有序序列（有重复元素）的target左侧、右侧边界，这需要在基本的二分查找代码上做一些修改。\n\n### 3.3. 代码\n\n```java\npublic int[] searchRange(int[] nums, int target) {\n    int[] res = new int[2];\n    res[0] = leftBound(nums, target);\n    res[1] = rightBound(nums, target);\n    return res;\n}\n\n/**\n     * 找左侧边界\n     * 用 left 保存找到的左侧边界\n     * @param nums\n     * @param target\n     * @return\n     */\nprivate int leftBound(int[] nums, int target) {\n    int left = 0, right = nums.length - 1;\n    // 搜索区间为 [left, right]\n    while (left <= right){\n        int mid = left + (right - left) / 2;\n        if(nums[mid] > target){\n            // 搜索区间变为 [left, mid-1]\n            right = mid - 1;\n        }else if(nums[mid] < target){\n            // 搜索区间变为 [mid+1, right]\n            left = mid + 1;\n        }else if(nums[mid] == target){\n            // 不返回，收缩右侧边界，限制左侧边界left的取值范围\n            right = mid - 1;\n        }\n    }\n    if(left == nums.length || nums[left] != target){\n        return -1;\n    }\n    return left;\n}\n\n/**\n     * 找右侧边界\n     * 用 right 保存找到的右侧边界\n     * @param nums\n     * @param target\n     * @return\n     */\nprivate int rightBound(int[] nums, int target) {\n    int left = 0, right = nums.length - 1;\n    while (left <= right){\n        int mid = left + (right - left) / 2;\n        if(nums[mid] > target){\n            right = mid - 1;\n        }else if(nums[mid] < target){\n            left = mid + 1;\n        }else if(nums[mid] == target){\n            // 改变一：收缩左侧边界，限制右侧边界right的取值范围\n            left = mid + 1;\n        }\n    }\n    // 改变二：检查right的越界情况\n    if(right < 0 || nums[right] != target){\n        return -1;\n    }\n    return right;\n}\n```\n\n## 4. 二分查找总结\n\n可以发现，二分查找的思路很简单，但是对于 mid 是加一还是减一，while 中是 <= 还是 = 是比较容易混的。上面两题中，我们都把搜索区间定义为左右为闭，这样便于统一记忆。当然，也有代码定义为左闭右开，left 和 right的更新又是另一种套路了，这里不做讨论。下面，基于上面两题的做法，对二分查找三种不同用法做出总结：\n\n### 4.1. 基本的二分查找\n\n基本的二分查找框架，即序列元素不重复，查找 target，代码如下：\n\n```java\npublic int search(int[] nums, int target) {\n    int left = 0, right = nums.length - 1;\n    // 搜索区间为 [left, right]\n    while (left <= right){\n        int mid = left + (right - left) / 2;\n        if(nums[mid] == target){\n            // 找到target，直接返回\n            return mid;\n        }else if(nums[mid] < target){\n            // 搜索区间变为 [mid+1, right]\n            left = mid + 1;\n        }else{\n            // 搜索区间变为 [left, mid-1]\n            right = mid - 1;\n        }\n    }\n    // 直接返回\n    return -1;\n}\n```\n\n### 4.2. 查找左侧边界\n\n序列元素可能重复，查找 target 左边界，在基本代码的基础上，做了三处修改，代码如下：\n\n代码理解：在查找左边界时，使用 left 存找到的左边界，如果 ``nums[mid] < target`` ，left 向后移一位，其他情况下 left 均不动，则最终 left 的取值只能有三种情况：1.第一个等于 target 的元素；2. 大于 target 的元素（因为序列中没有 target）；3. left 越界（因为序列中的所有元素均小于 target）。这也是为什么使用 left 存储左边界并最终返回的原因。right 存能取到的左边界的最大值，不断的收缩 left 的取值范围，直到 ``left > right`` 结束循环。\n\n```java\nprivate int leftBound(int[] nums, int target) {\n    int left = 0, right = nums.length - 1;\n    while (left <= right){\n        int mid = left + (right - left) / 2;\n        if(nums[mid] > target){\n            right = mid - 1;\n        }else if(nums[mid] < target){\n            left = mid + 1;\n        }else if(nums[mid] == target){\n            // 修改一：不返回，收缩右侧边界，限制左侧边界left的取值范围\n            right = mid - 1;\n        }\n    }\n    // 修改二：检查left的越界情况\n    if(left == nums.length || nums[left] != target){\n        return -1;\n    }\n    // 修改三：返回left\n    return left;\n}\n```\n\n### 4.3. 查找右侧边界\n\n序列元素可能重复，查找 target 右边界，在基本代码的基础上，做了三处修改，代码如下：\n\n代码理解：在查找右边界时，用 right 存储找到的右边界。当 ``nums[mid] > target`` 时，更新 right 的值，right 前移一位，其他情况下 right 值均不变。因此，最终 while 循环结束后，right 的取值有三种：1. 最后一个等于 target 的元素，即右边界；2. 小于target 的元素（因为序列中没有 target 元素）；3. target 越界（因为序列中所有元素均大于 target）。用 left 存储右边界能取到的最小值，while 中不断更新 left 值，缩小右边界的取值范围，直到 ``left > right`` 结束。\n\n```java\nprivate int rightBound(int[] nums, int target) {\n    int left = 0, right = nums.length - 1;\n    while (left <= right){\n        int mid = left + (right - left) / 2;\n        if(nums[mid] > target){\n            right = mid - 1;\n        }else if(nums[mid] < target){\n            left = mid + 1;\n        }else if(nums[mid] == target){\n            // 修改一：不返回，收缩左侧边界，限制右侧边界left的取值范围\n            left = mid + 1;\n        }\n    }\n    // 修改二：检查right的越界情况\n    if(right < 0 || nums[right] != target){\n        return -1;\n    }\n    // 修改三：返回right\n    return right;\n}\n```\n\n## 5. 使用二分查找的题目列表\n\n本文中使用二分查找解决的 LeetCode 题目列表如下，持续更新中~\n\n|  #   |                            Title                             | Remark |\n| :--: | :----------------------------------------------------------: | :----: |\n| 704  | [二分查找](https://leetcode-cn.com/problems/binary-search/)  |        |\n|  34  | [在排序数组中查找元素的第一个和最后一个位置](https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/) |        |\n|  35  | [搜索插入位置](https://leetcode-cn.com/problems/search-insert-position/) |        |\n|  33  | [搜索旋转排序数组](https://leetcode-cn.com/problems/search-in-rotated-sorted-array/) |  Hard  |\n|  81  | [搜索旋转排序数组 II](https://leetcode-cn.com/problems/search-in-rotated-sorted-array-ii/) |  Hard  |\n|  74  | [搜索二维矩阵](https://leetcode-cn.com/problems/search-a-2d-matrix/) |        |\n\n## 6. 搜索插入的位置 [35]\n\n题目来源：[35. 搜索插入位置](https://leetcode-cn.com/problems/search-insert-position/)\n\n### 6.1. 题目描述\n\n给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\n\n你可以假设数组中无重复元素。\n\n示例 1:\n\n```bash\n输入: [1,3,5,6], 5\n输出: 2\n```\n\n示例 2:\n\n```bash\n输入: [1,3,5,6], 2\n输出: 1\n```\n\n\n示例 3:\n\n```bash\n输入: [1,3,5,6], 7\n输出: 4\n```\n\n\n示例 4:\n\n```bash\n输入: [1,3,5,6], 0\n输出: 0\n```\n\n### 6.2. 题目分析\n\n基本的二分查找框架，返回 left 即题目要求的返回值。\n\n### 6.3. 代码\n\n```java\npublic int search(int[] nums, int target) {\n    int left = 0, right = nums.length - 1;\n    while (left <= right){\n        int mid = left + (right - left) / 2;\n        if(nums[mid] == target){\n            return mid;\n        }else if(nums[mid] < target){\n            left = mid + 1;\n        }else{\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n```\n\n## 7. 搜索旋转排序数组 [33]\n\n题目来源：[33. 搜索旋转排序数组](https://leetcode-cn.com/problems/search-in-rotated-sorted-array/)\n\n### 7.1. 题目描述\n\n假设按照升序排序的数组在预先未知的某个点上进行了旋转。\n\n( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。\n\n搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。\n\n你可以假设数组中不存在重复的元素。\n\n你的算法时间复杂度必须是 O(log n) 级别。\n\n示例 1:\n\n```bash\n输入: nums = [4,5,6,7,0,1,2], target = 0\n输出: 4\n```\n\n\n示例 2:\n\n```bash\n输入: nums = [4,5,6,7,0,1,2], target = 3\n输出: -1\n```\n\n### 7.2. 题目分析\n\n本题分析参考：[这里](https://leetcode.wang/leetCode-33-Search-in-Rotated-Sorted-Array.html#解法三).\n\n可以发现，数组从任意位置分成两个序列后，至少有一半是有序的。\n\n基于这个事实，当 mid 把数组分成两段后，可以先找到哪一段是有序的（比较两端端点即可），然后看 target 在不在这一段，如果在，丢弃另一段；如果不在，丢弃这一段。\n\n为什么必须先找到有序的一端，然后找 target？因为如果想要在一段无序序列中找 target，无法实现。只能先在有序序列中找，以此来缩小搜索范围。\n\n### 7.3. 代码\n\n注意下面对于 ``nums[left] <= nums[mid]`` 的分析。\n\n```java\n    public int search(int[] nums, int target) {\n        int len = nums.length;\n        if(len == 0){return -1;}\n        int left = 0, right = len - 1;\n        while (left <= right){\n            int mid = left + (right - left) / 2;\n            if(nums[mid] == target){\n                return mid;\n            }\n\n            // 左半段有序\n            // 等于的情况出现在：left = mid 时，即left和mid重合，此时只剩下两个元素\n            // 这个等号不能去掉，因为mid求值时取整，两个元素时mid只会和left重合\n            // 如果去掉等号，计算right = mid - 1时，right会直接越界\n            if(nums[left] <= nums[mid]){\n                // target在左半段\n                if(nums[left] <= target && target < nums[mid]){\n                    right = mid - 1;\n                // target在右半段\n                }else {\n                    left = mid + 1;\n                }\n            // 右半段有序\n            }else{\n                // target 在右半段\n                if(nums[mid] < target && target <= nums[right]){\n                    left = mid + 1;\n                // target 在左半段\n                }else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n```\n\n### 7.4. 参考 [81] 代码\n\n也可以在 ``nums[left] <= nums[mid]`` 时不用考虑那么多，采用和下题一样的思路，更简单。多加一个判断，当``nums[left] == nums[mid]`` 时，直接跳过 left。\n\n```java\npublic int search(int[] nums, int target) {\n    int len = nums.length;\n    if(len == 0){return -1;}\n    int left = 0, right = len - 1;\n    while (left <= right){\n        int mid = left + (right - left) / 2;\n        if(nums[mid] == target){\n            return mid;\n        }\n\n        // 左半段有序\n        if(nums[left] < nums[mid]){\n            // target在左半段\n            if(nums[left] <= target && target < nums[mid]){\n                right = mid - 1;\n                // target在右半段\n            }else {\n                left = mid + 1;\n            }\n            // left 和 mid 重合，直接跳过left\n        }else if(nums[left] == nums[mid]){\n            left++;\n            // 右半段有序\n        }else{\n            // target 在右半段\n            if(nums[mid] < target && target <= nums[right]){\n                left = mid + 1;\n                // target 在左半段\n            }else {\n                right = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n```\n\n\n\n## 8. 搜索旋转排序数组 II [81]\n\n题目来源：[81. 搜索旋转排序数组 II](https://leetcode-cn.com/problems/search-in-rotated-sorted-array-ii/)\n\n### 8.1. 题目描述\n\n![image-20200815105842768](/pictures/image-20200815105842768.png)\n\n### 8.2. 题目分析\n\n分析参考：[这里](https://leetcode.wang/leetCode-81-Search-in-Rotated-Sorted-ArrayII.html).\n\n如果使用 [33] 题的解法一，如果不加修改，直接放到 leetcode 上跑，发现 nums = [ 1, 3, 1, 1, 1 ] ，target = 3，返回了 false，当然是不对的了。原因就出现在了，我们在判断哪段有序的时候，当 nums [ left ] <= nums [ mid ] 是认为左半段有序。而由于这道题出现了重复数字，此时的 nums [ left ] = 1, nums [ mid ] = 1，但此时左半段 [ 1, 3, 1 ] 并不是有序的，所以造成我们的算法错误。\n\n所以 nums[left] == nums[mid] 需要我们单独考虑了。操作也很简单，参考[这里](https://leetcode.com/problems/search-in-rotated-sorted-array-ii/discuss/28218/My-8ms-C%2B%2B-solution-(o(logn)-on-average-o(n)-worst-case)，当相等的时候，我们只需要让 left++ 就够了。\n\n改后的代码也适用于 [33] 题。\n\n### 8.3. 代码\n\n```java\npublic boolean search(int[] nums, int target) {\n    int len = nums.length;\n    if(len == 0){return false;}\n    int left = 0, right = len - 1;\n    while (left <= right){\n        int mid = left + (right - left) / 2;\n        if(nums[mid] == target){\n            return true;\n        }\n\n        // 左半段有序\n        if(nums[left] < nums[mid]){\n            // target在左半段\n            if(nums[left] <= target && target < nums[mid]){\n                right = mid - 1;\n                // target在右半段\n            }else {\n                left = mid + 1;\n            }\n            // 相等，left++\n        }else if(nums[left] == nums[mid]){\n            left++;\n\n            // 右半段有序\n        } else{\n            // target 在右半段\n            if(nums[mid] < target && target <= nums[right]){\n                left = mid + 1;\n                // target 在左半段\n            }else {\n                right = mid - 1;\n            }\n        }\n    }\n    return false;\n}\n```\n\n## 9. 搜索二维矩阵 [74]\n\n题目来源：[74. 搜索二维矩阵](https://leetcode-cn.com/problems/search-a-2d-matrix/)\n\n### 9.1. 题目描述\n\n![image-20200822101717491](/pictures/image-20200822101717491.png)\n\n### 9.2. 代码\n\n有序序列搜索，直接二分。这里需要加一个 mid 下标和矩阵下标的转换即可。\n\n```java\npublic boolean searchMatrix(int[][] matrix, int target) {\n    if(matrix.length == 0 || matrix[0].length == 0){return false;}\n    int m = matrix.length;\n    int n = matrix[0].length;\n\n    int left = 0;\n    int right = m * n - 1;\n    while (left <= right){\n        int mid = left + (right - left) / 2;\n        int i = mid / n;\n        int j = mid % n;\n        int value = matrix[i][j];\n        if(target == value){\n            return true;\n        }else if(target < value){\n            right = mid - 1;\n        }else{\n            left = mid + 1;\n        }\n    }\n    return false;\n}\n```\n\n## 10. 参考引用\n\n1. [Wikipedia](https://zh.wikipedia.org/wiki/二分搜尋演算法)\n2. https://labuladong.gitbook.io/algo/suan-fa-si-wei-xi-lie/er-fen-cha-zhao-xiang-jie\n3. https://leetcode.wang/leetCode-81-Search-in-Rotated-Sorted-ArrayII.html","source":"_posts/二分查找总结.md","raw":"---\ntitle: 二分查找总结\ndate: 2020-06-10 10:06:51\ntags:\n  - Algorithm\n  - Java\n  - 二分查找\ncategories: Algorithm\n---\n\n本文介绍了二分查找，主要总结了三种二分查找的框架，分别是：基本的二分查找、查找左侧边界、查找右侧边界。同时，解决了部分LeetCode上二分查找相关的题目，这部分会持续更新~\n\n## 1. 什么是二分查找？\n\n[维基定义](https://zh.wikipedia.org/wiki/二分搜尋演算法)：在计算机科学中，二分查找算法（英语：binary search algorithm），也称折半搜索算法（英语：half-interval search algorithm）[1]、对数搜索算法（英语：logarithmic search algorithm），是一种在有序数组中查找某一特定元素的搜索算法。搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组为空，则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半。\n\n二分查找算法在情况下的复杂度是对数时间，进行O(log n)次比较操作。二分查找算法使用常数空间，无论对任何大小的输入数据，算法使用的空间都是一样的。除非输入数据数量很少，否则二分查找算法比线性搜索更快，但数组必须事先被排序。尽管特定的、为了快速搜索而设计的数据结构更有效（比如哈希表），二分查找算法应用面更广。\n\n<!--more-->\n\n## 2. 基本的二分查找：二分查找 [704]\n\n题目来源：[704. 二分查找](https://leetcode-cn.com/problems/binary-search/)\n\n### 2.1. 题目描述\n\n给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。\n\n**示例 1:**\n\n```bash\n输入: nums = [-1,0,3,5,9,12], target = 9\n输出: 4\n解释: 9 出现在 nums 中并且下标为 4\n```\n\n**示例 2:**\n\n```bash\n输入: nums = [-1,0,3,5,9,12], target = 2\n输出: -1\n解释: 2 不存在 nums 中因此返回 -1\n```\n\n**提示：**\n\n1. 你可以假设 `nums` 中的所有元素是不重复的。\n2. `n` 将在 `[1, 10000]`之间。\n3. `nums` 的每个元素都将在 `[-9999, 9999]`之间。\n\n### 2.2. 题目分析\n\n基本二分查找。\n\n### 2.3. 代码\n\n```java\npublic int search(int[] nums, int target) {\n    int left = 0, right = nums.length - 1;\n    while (left <= right){\n        int mid = left + (right - left) / 2;\n        if(nums[mid] == target){\n            return mid;\n        }else if(nums[mid] < target){\n            left = mid + 1;\n        }else{\n            right = mid - 1;\n        }\n    }\n    return -1;\n}\n```\n\n## 3. 在排序数组中查找元素的第一个和最后一个位置 [34]\n\n题目来源：[34. 在排序数组中查找元素的第一个和最后一个位置](https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/)\n\n### 3.1. 题目描述\n\n给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。\n\n你的算法时间复杂度必须是 O(log n) 级别。\n\n如果数组中不存在目标值，返回 [-1, -1]。\n\n示例 1:\n\n```bash\n输入: nums = [5,7,7,8,8,10], target = 8\n输出: [3,4]\n```\n\n\n示例 2:\n\n```bash\n输入: nums = [5,7,7,8,8,10], target = 6\n输出: [-1,-1]\n```\n\n### 3.2. 题目分析\n\n本题求给出有序序列（有重复元素）的target左侧、右侧边界，这需要在基本的二分查找代码上做一些修改。\n\n### 3.3. 代码\n\n```java\npublic int[] searchRange(int[] nums, int target) {\n    int[] res = new int[2];\n    res[0] = leftBound(nums, target);\n    res[1] = rightBound(nums, target);\n    return res;\n}\n\n/**\n     * 找左侧边界\n     * 用 left 保存找到的左侧边界\n     * @param nums\n     * @param target\n     * @return\n     */\nprivate int leftBound(int[] nums, int target) {\n    int left = 0, right = nums.length - 1;\n    // 搜索区间为 [left, right]\n    while (left <= right){\n        int mid = left + (right - left) / 2;\n        if(nums[mid] > target){\n            // 搜索区间变为 [left, mid-1]\n            right = mid - 1;\n        }else if(nums[mid] < target){\n            // 搜索区间变为 [mid+1, right]\n            left = mid + 1;\n        }else if(nums[mid] == target){\n            // 不返回，收缩右侧边界，限制左侧边界left的取值范围\n            right = mid - 1;\n        }\n    }\n    if(left == nums.length || nums[left] != target){\n        return -1;\n    }\n    return left;\n}\n\n/**\n     * 找右侧边界\n     * 用 right 保存找到的右侧边界\n     * @param nums\n     * @param target\n     * @return\n     */\nprivate int rightBound(int[] nums, int target) {\n    int left = 0, right = nums.length - 1;\n    while (left <= right){\n        int mid = left + (right - left) / 2;\n        if(nums[mid] > target){\n            right = mid - 1;\n        }else if(nums[mid] < target){\n            left = mid + 1;\n        }else if(nums[mid] == target){\n            // 改变一：收缩左侧边界，限制右侧边界right的取值范围\n            left = mid + 1;\n        }\n    }\n    // 改变二：检查right的越界情况\n    if(right < 0 || nums[right] != target){\n        return -1;\n    }\n    return right;\n}\n```\n\n## 4. 二分查找总结\n\n可以发现，二分查找的思路很简单，但是对于 mid 是加一还是减一，while 中是 <= 还是 = 是比较容易混的。上面两题中，我们都把搜索区间定义为左右为闭，这样便于统一记忆。当然，也有代码定义为左闭右开，left 和 right的更新又是另一种套路了，这里不做讨论。下面，基于上面两题的做法，对二分查找三种不同用法做出总结：\n\n### 4.1. 基本的二分查找\n\n基本的二分查找框架，即序列元素不重复，查找 target，代码如下：\n\n```java\npublic int search(int[] nums, int target) {\n    int left = 0, right = nums.length - 1;\n    // 搜索区间为 [left, right]\n    while (left <= right){\n        int mid = left + (right - left) / 2;\n        if(nums[mid] == target){\n            // 找到target，直接返回\n            return mid;\n        }else if(nums[mid] < target){\n            // 搜索区间变为 [mid+1, right]\n            left = mid + 1;\n        }else{\n            // 搜索区间变为 [left, mid-1]\n            right = mid - 1;\n        }\n    }\n    // 直接返回\n    return -1;\n}\n```\n\n### 4.2. 查找左侧边界\n\n序列元素可能重复，查找 target 左边界，在基本代码的基础上，做了三处修改，代码如下：\n\n代码理解：在查找左边界时，使用 left 存找到的左边界，如果 ``nums[mid] < target`` ，left 向后移一位，其他情况下 left 均不动，则最终 left 的取值只能有三种情况：1.第一个等于 target 的元素；2. 大于 target 的元素（因为序列中没有 target）；3. left 越界（因为序列中的所有元素均小于 target）。这也是为什么使用 left 存储左边界并最终返回的原因。right 存能取到的左边界的最大值，不断的收缩 left 的取值范围，直到 ``left > right`` 结束循环。\n\n```java\nprivate int leftBound(int[] nums, int target) {\n    int left = 0, right = nums.length - 1;\n    while (left <= right){\n        int mid = left + (right - left) / 2;\n        if(nums[mid] > target){\n            right = mid - 1;\n        }else if(nums[mid] < target){\n            left = mid + 1;\n        }else if(nums[mid] == target){\n            // 修改一：不返回，收缩右侧边界，限制左侧边界left的取值范围\n            right = mid - 1;\n        }\n    }\n    // 修改二：检查left的越界情况\n    if(left == nums.length || nums[left] != target){\n        return -1;\n    }\n    // 修改三：返回left\n    return left;\n}\n```\n\n### 4.3. 查找右侧边界\n\n序列元素可能重复，查找 target 右边界，在基本代码的基础上，做了三处修改，代码如下：\n\n代码理解：在查找右边界时，用 right 存储找到的右边界。当 ``nums[mid] > target`` 时，更新 right 的值，right 前移一位，其他情况下 right 值均不变。因此，最终 while 循环结束后，right 的取值有三种：1. 最后一个等于 target 的元素，即右边界；2. 小于target 的元素（因为序列中没有 target 元素）；3. target 越界（因为序列中所有元素均大于 target）。用 left 存储右边界能取到的最小值，while 中不断更新 left 值，缩小右边界的取值范围，直到 ``left > right`` 结束。\n\n```java\nprivate int rightBound(int[] nums, int target) {\n    int left = 0, right = nums.length - 1;\n    while (left <= right){\n        int mid = left + (right - left) / 2;\n        if(nums[mid] > target){\n            right = mid - 1;\n        }else if(nums[mid] < target){\n            left = mid + 1;\n        }else if(nums[mid] == target){\n            // 修改一：不返回，收缩左侧边界，限制右侧边界left的取值范围\n            left = mid + 1;\n        }\n    }\n    // 修改二：检查right的越界情况\n    if(right < 0 || nums[right] != target){\n        return -1;\n    }\n    // 修改三：返回right\n    return right;\n}\n```\n\n## 5. 使用二分查找的题目列表\n\n本文中使用二分查找解决的 LeetCode 题目列表如下，持续更新中~\n\n|  #   |                            Title                             | Remark |\n| :--: | :----------------------------------------------------------: | :----: |\n| 704  | [二分查找](https://leetcode-cn.com/problems/binary-search/)  |        |\n|  34  | [在排序数组中查找元素的第一个和最后一个位置](https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/) |        |\n|  35  | [搜索插入位置](https://leetcode-cn.com/problems/search-insert-position/) |        |\n|  33  | [搜索旋转排序数组](https://leetcode-cn.com/problems/search-in-rotated-sorted-array/) |  Hard  |\n|  81  | [搜索旋转排序数组 II](https://leetcode-cn.com/problems/search-in-rotated-sorted-array-ii/) |  Hard  |\n|  74  | [搜索二维矩阵](https://leetcode-cn.com/problems/search-a-2d-matrix/) |        |\n\n## 6. 搜索插入的位置 [35]\n\n题目来源：[35. 搜索插入位置](https://leetcode-cn.com/problems/search-insert-position/)\n\n### 6.1. 题目描述\n\n给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\n\n你可以假设数组中无重复元素。\n\n示例 1:\n\n```bash\n输入: [1,3,5,6], 5\n输出: 2\n```\n\n示例 2:\n\n```bash\n输入: [1,3,5,6], 2\n输出: 1\n```\n\n\n示例 3:\n\n```bash\n输入: [1,3,5,6], 7\n输出: 4\n```\n\n\n示例 4:\n\n```bash\n输入: [1,3,5,6], 0\n输出: 0\n```\n\n### 6.2. 题目分析\n\n基本的二分查找框架，返回 left 即题目要求的返回值。\n\n### 6.3. 代码\n\n```java\npublic int search(int[] nums, int target) {\n    int left = 0, right = nums.length - 1;\n    while (left <= right){\n        int mid = left + (right - left) / 2;\n        if(nums[mid] == target){\n            return mid;\n        }else if(nums[mid] < target){\n            left = mid + 1;\n        }else{\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n```\n\n## 7. 搜索旋转排序数组 [33]\n\n题目来源：[33. 搜索旋转排序数组](https://leetcode-cn.com/problems/search-in-rotated-sorted-array/)\n\n### 7.1. 题目描述\n\n假设按照升序排序的数组在预先未知的某个点上进行了旋转。\n\n( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。\n\n搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。\n\n你可以假设数组中不存在重复的元素。\n\n你的算法时间复杂度必须是 O(log n) 级别。\n\n示例 1:\n\n```bash\n输入: nums = [4,5,6,7,0,1,2], target = 0\n输出: 4\n```\n\n\n示例 2:\n\n```bash\n输入: nums = [4,5,6,7,0,1,2], target = 3\n输出: -1\n```\n\n### 7.2. 题目分析\n\n本题分析参考：[这里](https://leetcode.wang/leetCode-33-Search-in-Rotated-Sorted-Array.html#解法三).\n\n可以发现，数组从任意位置分成两个序列后，至少有一半是有序的。\n\n基于这个事实，当 mid 把数组分成两段后，可以先找到哪一段是有序的（比较两端端点即可），然后看 target 在不在这一段，如果在，丢弃另一段；如果不在，丢弃这一段。\n\n为什么必须先找到有序的一端，然后找 target？因为如果想要在一段无序序列中找 target，无法实现。只能先在有序序列中找，以此来缩小搜索范围。\n\n### 7.3. 代码\n\n注意下面对于 ``nums[left] <= nums[mid]`` 的分析。\n\n```java\n    public int search(int[] nums, int target) {\n        int len = nums.length;\n        if(len == 0){return -1;}\n        int left = 0, right = len - 1;\n        while (left <= right){\n            int mid = left + (right - left) / 2;\n            if(nums[mid] == target){\n                return mid;\n            }\n\n            // 左半段有序\n            // 等于的情况出现在：left = mid 时，即left和mid重合，此时只剩下两个元素\n            // 这个等号不能去掉，因为mid求值时取整，两个元素时mid只会和left重合\n            // 如果去掉等号，计算right = mid - 1时，right会直接越界\n            if(nums[left] <= nums[mid]){\n                // target在左半段\n                if(nums[left] <= target && target < nums[mid]){\n                    right = mid - 1;\n                // target在右半段\n                }else {\n                    left = mid + 1;\n                }\n            // 右半段有序\n            }else{\n                // target 在右半段\n                if(nums[mid] < target && target <= nums[right]){\n                    left = mid + 1;\n                // target 在左半段\n                }else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n```\n\n### 7.4. 参考 [81] 代码\n\n也可以在 ``nums[left] <= nums[mid]`` 时不用考虑那么多，采用和下题一样的思路，更简单。多加一个判断，当``nums[left] == nums[mid]`` 时，直接跳过 left。\n\n```java\npublic int search(int[] nums, int target) {\n    int len = nums.length;\n    if(len == 0){return -1;}\n    int left = 0, right = len - 1;\n    while (left <= right){\n        int mid = left + (right - left) / 2;\n        if(nums[mid] == target){\n            return mid;\n        }\n\n        // 左半段有序\n        if(nums[left] < nums[mid]){\n            // target在左半段\n            if(nums[left] <= target && target < nums[mid]){\n                right = mid - 1;\n                // target在右半段\n            }else {\n                left = mid + 1;\n            }\n            // left 和 mid 重合，直接跳过left\n        }else if(nums[left] == nums[mid]){\n            left++;\n            // 右半段有序\n        }else{\n            // target 在右半段\n            if(nums[mid] < target && target <= nums[right]){\n                left = mid + 1;\n                // target 在左半段\n            }else {\n                right = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n```\n\n\n\n## 8. 搜索旋转排序数组 II [81]\n\n题目来源：[81. 搜索旋转排序数组 II](https://leetcode-cn.com/problems/search-in-rotated-sorted-array-ii/)\n\n### 8.1. 题目描述\n\n![image-20200815105842768](/pictures/image-20200815105842768.png)\n\n### 8.2. 题目分析\n\n分析参考：[这里](https://leetcode.wang/leetCode-81-Search-in-Rotated-Sorted-ArrayII.html).\n\n如果使用 [33] 题的解法一，如果不加修改，直接放到 leetcode 上跑，发现 nums = [ 1, 3, 1, 1, 1 ] ，target = 3，返回了 false，当然是不对的了。原因就出现在了，我们在判断哪段有序的时候，当 nums [ left ] <= nums [ mid ] 是认为左半段有序。而由于这道题出现了重复数字，此时的 nums [ left ] = 1, nums [ mid ] = 1，但此时左半段 [ 1, 3, 1 ] 并不是有序的，所以造成我们的算法错误。\n\n所以 nums[left] == nums[mid] 需要我们单独考虑了。操作也很简单，参考[这里](https://leetcode.com/problems/search-in-rotated-sorted-array-ii/discuss/28218/My-8ms-C%2B%2B-solution-(o(logn)-on-average-o(n)-worst-case)，当相等的时候，我们只需要让 left++ 就够了。\n\n改后的代码也适用于 [33] 题。\n\n### 8.3. 代码\n\n```java\npublic boolean search(int[] nums, int target) {\n    int len = nums.length;\n    if(len == 0){return false;}\n    int left = 0, right = len - 1;\n    while (left <= right){\n        int mid = left + (right - left) / 2;\n        if(nums[mid] == target){\n            return true;\n        }\n\n        // 左半段有序\n        if(nums[left] < nums[mid]){\n            // target在左半段\n            if(nums[left] <= target && target < nums[mid]){\n                right = mid - 1;\n                // target在右半段\n            }else {\n                left = mid + 1;\n            }\n            // 相等，left++\n        }else if(nums[left] == nums[mid]){\n            left++;\n\n            // 右半段有序\n        } else{\n            // target 在右半段\n            if(nums[mid] < target && target <= nums[right]){\n                left = mid + 1;\n                // target 在左半段\n            }else {\n                right = mid - 1;\n            }\n        }\n    }\n    return false;\n}\n```\n\n## 9. 搜索二维矩阵 [74]\n\n题目来源：[74. 搜索二维矩阵](https://leetcode-cn.com/problems/search-a-2d-matrix/)\n\n### 9.1. 题目描述\n\n![image-20200822101717491](/pictures/image-20200822101717491.png)\n\n### 9.2. 代码\n\n有序序列搜索，直接二分。这里需要加一个 mid 下标和矩阵下标的转换即可。\n\n```java\npublic boolean searchMatrix(int[][] matrix, int target) {\n    if(matrix.length == 0 || matrix[0].length == 0){return false;}\n    int m = matrix.length;\n    int n = matrix[0].length;\n\n    int left = 0;\n    int right = m * n - 1;\n    while (left <= right){\n        int mid = left + (right - left) / 2;\n        int i = mid / n;\n        int j = mid % n;\n        int value = matrix[i][j];\n        if(target == value){\n            return true;\n        }else if(target < value){\n            right = mid - 1;\n        }else{\n            left = mid + 1;\n        }\n    }\n    return false;\n}\n```\n\n## 10. 参考引用\n\n1. [Wikipedia](https://zh.wikipedia.org/wiki/二分搜尋演算法)\n2. https://labuladong.gitbook.io/algo/suan-fa-si-wei-xi-lie/er-fen-cha-zhao-xiang-jie\n3. https://leetcode.wang/leetCode-81-Search-in-Rotated-Sorted-ArrayII.html","slug":"二分查找总结","published":1,"updated":"2020-12-26T12:26:49.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5mkwd001anyl1bh5ma4s8","content":"<p>本文介绍了二分查找，主要总结了三种二分查找的框架，分别是：基本的二分查找、查找左侧边界、查找右侧边界。同时，解决了部分LeetCode上二分查找相关的题目，这部分会持续更新~</p>\n<h2 id=\"1-什么是二分查找？\"><a href=\"#1-什么是二分查找？\" class=\"headerlink\" title=\"1. 什么是二分查找？\"></a>1. 什么是二分查找？</h2><p><a href=\"https://zh.wikipedia.org/wiki/二分搜尋演算法\" target=\"_blank\" rel=\"noopener\">维基定义</a>：在计算机科学中，二分查找算法（英语：binary search algorithm），也称折半搜索算法（英语：half-interval search algorithm）[1]、对数搜索算法（英语：logarithmic search algorithm），是一种在有序数组中查找某一特定元素的搜索算法。搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组为空，则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半。</p>\n<p>二分查找算法在情况下的复杂度是对数时间，进行O(log n)次比较操作。二分查找算法使用常数空间，无论对任何大小的输入数据，算法使用的空间都是一样的。除非输入数据数量很少，否则二分查找算法比线性搜索更快，但数组必须事先被排序。尽管特定的、为了快速搜索而设计的数据结构更有效（比如哈希表），二分查找算法应用面更广。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"2-基本的二分查找：二分查找-704\"><a href=\"#2-基本的二分查找：二分查找-704\" class=\"headerlink\" title=\"2. 基本的二分查找：二分查找 [704]\"></a>2. 基本的二分查找：二分查找 [704]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/binary-search/\" target=\"_blank\" rel=\"noopener\">704. 二分查找</a></p>\n<h3 id=\"2-1-题目描述\"><a href=\"#2-1-题目描述\" class=\"headerlink\" title=\"2.1. 题目描述\"></a>2.1. 题目描述</h3><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums = [-1,0,3,5,9,12], target = 9</span><br><span class=\"line\">输出: 4</span><br><span class=\"line\">解释: 9 出现在 nums 中并且下标为 4</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums = [-1,0,3,5,9,12], target = 2</span><br><span class=\"line\">输出: -1</span><br><span class=\"line\">解释: 2 不存在 nums 中因此返回 -1</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ol>\n<li>你可以假设 <code>nums</code> 中的所有元素是不重复的。</li>\n<li><code>n</code> 将在 <code>[1, 10000]</code>之间。</li>\n<li><code>nums</code> 的每个元素都将在 <code>[-9999, 9999]</code>之间。</li>\n</ol>\n<h3 id=\"2-2-题目分析\"><a href=\"#2-2-题目分析\" class=\"headerlink\" title=\"2.2. 题目分析\"></a>2.2. 题目分析</h3><p>基本二分查找。</p>\n<h3 id=\"2-3-代码\"><a href=\"#2-3-代码\" class=\"headerlink\" title=\"2.3. 代码\"></a>2.3. 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &lt; target)&#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-在排序数组中查找元素的第一个和最后一个位置-34\"><a href=\"#3-在排序数组中查找元素的第一个和最后一个位置-34\" class=\"headerlink\" title=\"3. 在排序数组中查找元素的第一个和最后一个位置 [34]\"></a>3. 在排序数组中查找元素的第一个和最后一个位置 [34]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/\" target=\"_blank\" rel=\"noopener\">34. 在排序数组中查找元素的第一个和最后一个位置</a></p>\n<h3 id=\"3-1-题目描述\"><a href=\"#3-1-题目描述\" class=\"headerlink\" title=\"3.1. 题目描述\"></a>3.1. 题目描述</h3><p>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。</p>\n<p>你的算法时间复杂度必须是 O(log n) 级别。</p>\n<p>如果数组中不存在目标值，返回 [-1, -1]。</p>\n<p>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums = [5,7,7,8,8,10], target = 8</span><br><span class=\"line\">输出: [3,4]</span><br></pre></td></tr></table></figure>\n\n\n<p>示例 2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums = [5,7,7,8,8,10], target = 6</span><br><span class=\"line\">输出: [-1,-1]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-题目分析\"><a href=\"#3-2-题目分析\" class=\"headerlink\" title=\"3.2. 题目分析\"></a>3.2. 题目分析</h3><p>本题求给出有序序列（有重复元素）的target左侧、右侧边界，这需要在基本的二分查找代码上做一些修改。</p>\n<h3 id=\"3-3-代码\"><a href=\"#3-3-代码\" class=\"headerlink\" title=\"3.3. 代码\"></a>3.3. 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] searchRange(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    res[<span class=\"number\">0</span>] = leftBound(nums, target);</span><br><span class=\"line\">    res[<span class=\"number\">1</span>] = rightBound(nums, target);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 找左侧边界</span></span><br><span class=\"line\"><span class=\"comment\">     * 用 left 保存找到的左侧边界</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> target</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">leftBound</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 搜索区间为 [left, right]</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] &gt; target)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 搜索区间变为 [left, mid-1]</span></span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &lt; target)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 搜索区间变为 [mid+1, right]</span></span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] == target)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不返回，收缩右侧边界，限制左侧边界left的取值范围</span></span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left == nums.length || nums[left] != target)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 找右侧边界</span></span><br><span class=\"line\"><span class=\"comment\">     * 用 right 保存找到的右侧边界</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> target</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">rightBound</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] &gt; target)&#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &lt; target)&#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] == target)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 改变一：收缩左侧边界，限制右侧边界right的取值范围</span></span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 改变二：检查right的越界情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(right &lt; <span class=\"number\">0</span> || nums[right] != target)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> right;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-二分查找总结\"><a href=\"#4-二分查找总结\" class=\"headerlink\" title=\"4. 二分查找总结\"></a>4. 二分查找总结</h2><p>可以发现，二分查找的思路很简单，但是对于 mid 是加一还是减一，while 中是 &lt;= 还是 = 是比较容易混的。上面两题中，我们都把搜索区间定义为左右为闭，这样便于统一记忆。当然，也有代码定义为左闭右开，left 和 right的更新又是另一种套路了，这里不做讨论。下面，基于上面两题的做法，对二分查找三种不同用法做出总结：</p>\n<h3 id=\"4-1-基本的二分查找\"><a href=\"#4-1-基本的二分查找\" class=\"headerlink\" title=\"4.1. 基本的二分查找\"></a>4.1. 基本的二分查找</h3><p>基本的二分查找框架，即序列元素不重复，查找 target，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 搜索区间为 [left, right]</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 找到target，直接返回</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &lt; target)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 搜索区间变为 [mid+1, right]</span></span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 搜索区间变为 [left, mid-1]</span></span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-查找左侧边界\"><a href=\"#4-2-查找左侧边界\" class=\"headerlink\" title=\"4.2. 查找左侧边界\"></a>4.2. 查找左侧边界</h3><p>序列元素可能重复，查找 target 左边界，在基本代码的基础上，做了三处修改，代码如下：</p>\n<p>代码理解：在查找左边界时，使用 left 存找到的左边界，如果 <code>nums[mid] &lt; target</code> ，left 向后移一位，其他情况下 left 均不动，则最终 left 的取值只能有三种情况：1.第一个等于 target 的元素；2. 大于 target 的元素（因为序列中没有 target）；3. left 越界（因为序列中的所有元素均小于 target）。这也是为什么使用 left 存储左边界并最终返回的原因。right 存能取到的左边界的最大值，不断的收缩 left 的取值范围，直到 <code>left &gt; right</code> 结束循环。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">leftBound</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] &gt; target)&#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &lt; target)&#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] == target)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 修改一：不返回，收缩右侧边界，限制左侧边界left的取值范围</span></span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 修改二：检查left的越界情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left == nums.length || nums[left] != target)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 修改三：返回left</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-查找右侧边界\"><a href=\"#4-3-查找右侧边界\" class=\"headerlink\" title=\"4.3. 查找右侧边界\"></a>4.3. 查找右侧边界</h3><p>序列元素可能重复，查找 target 右边界，在基本代码的基础上，做了三处修改，代码如下：</p>\n<p>代码理解：在查找右边界时，用 right 存储找到的右边界。当 <code>nums[mid] &gt; target</code> 时，更新 right 的值，right 前移一位，其他情况下 right 值均不变。因此，最终 while 循环结束后，right 的取值有三种：1. 最后一个等于 target 的元素，即右边界；2. 小于target 的元素（因为序列中没有 target 元素）；3. target 越界（因为序列中所有元素均大于 target）。用 left 存储右边界能取到的最小值，while 中不断更新 left 值，缩小右边界的取值范围，直到 <code>left &gt; right</code> 结束。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">rightBound</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] &gt; target)&#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &lt; target)&#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] == target)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 修改一：不返回，收缩左侧边界，限制右侧边界left的取值范围</span></span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 修改二：检查right的越界情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(right &lt; <span class=\"number\">0</span> || nums[right] != target)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 修改三：返回right</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> right;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-使用二分查找的题目列表\"><a href=\"#5-使用二分查找的题目列表\" class=\"headerlink\" title=\"5. 使用二分查找的题目列表\"></a>5. 使用二分查找的题目列表</h2><p>本文中使用二分查找解决的 LeetCode 题目列表如下，持续更新中~</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">#</th>\n<th align=\"center\">Title</th>\n<th align=\"center\">Remark</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">704</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/binary-search/\" target=\"_blank\" rel=\"noopener\">二分查找</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">34</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/\" target=\"_blank\" rel=\"noopener\">在排序数组中查找元素的第一个和最后一个位置</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">35</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/search-insert-position/\" target=\"_blank\" rel=\"noopener\">搜索插入位置</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">33</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/search-in-rotated-sorted-array/\" target=\"_blank\" rel=\"noopener\">搜索旋转排序数组</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">81</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/search-in-rotated-sorted-array-ii/\" target=\"_blank\" rel=\"noopener\">搜索旋转排序数组 II</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">74</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/search-a-2d-matrix/\" target=\"_blank\" rel=\"noopener\">搜索二维矩阵</a></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"6-搜索插入的位置-35\"><a href=\"#6-搜索插入的位置-35\" class=\"headerlink\" title=\"6. 搜索插入的位置 [35]\"></a>6. 搜索插入的位置 [35]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/search-insert-position/\" target=\"_blank\" rel=\"noopener\">35. 搜索插入位置</a></p>\n<h3 id=\"6-1-题目描述\"><a href=\"#6-1-题目描述\" class=\"headerlink\" title=\"6.1. 题目描述\"></a>6.1. 题目描述</h3><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>\n<p>你可以假设数组中无重复元素。</p>\n<p>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,3,5,6], 5</span><br><span class=\"line\">输出: 2</span><br></pre></td></tr></table></figure>\n\n<p>示例 2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,3,5,6], 2</span><br><span class=\"line\">输出: 1</span><br></pre></td></tr></table></figure>\n\n\n<p>示例 3:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,3,5,6], 7</span><br><span class=\"line\">输出: 4</span><br></pre></td></tr></table></figure>\n\n\n<p>示例 4:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,3,5,6], 0</span><br><span class=\"line\">输出: 0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-2-题目分析\"><a href=\"#6-2-题目分析\" class=\"headerlink\" title=\"6.2. 题目分析\"></a>6.2. 题目分析</h3><p>基本的二分查找框架，返回 left 即题目要求的返回值。</p>\n<h3 id=\"6-3-代码\"><a href=\"#6-3-代码\" class=\"headerlink\" title=\"6.3. 代码\"></a>6.3. 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &lt; target)&#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-搜索旋转排序数组-33\"><a href=\"#7-搜索旋转排序数组-33\" class=\"headerlink\" title=\"7. 搜索旋转排序数组 [33]\"></a>7. 搜索旋转排序数组 [33]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/search-in-rotated-sorted-array/\" target=\"_blank\" rel=\"noopener\">33. 搜索旋转排序数组</a></p>\n<h3 id=\"7-1-题目描述\"><a href=\"#7-1-题目描述\" class=\"headerlink\" title=\"7.1. 题目描述\"></a>7.1. 题目描述</h3><p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p>\n<p>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。</p>\n<p>搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。</p>\n<p>你可以假设数组中不存在重复的元素。</p>\n<p>你的算法时间复杂度必须是 O(log n) 级别。</p>\n<p>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums = [4,5,6,7,0,1,2], target = 0</span><br><span class=\"line\">输出: 4</span><br></pre></td></tr></table></figure>\n\n\n<p>示例 2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums = [4,5,6,7,0,1,2], target = 3</span><br><span class=\"line\">输出: -1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-2-题目分析\"><a href=\"#7-2-题目分析\" class=\"headerlink\" title=\"7.2. 题目分析\"></a>7.2. 题目分析</h3><p>本题分析参考：<a href=\"https://leetcode.wang/leetCode-33-Search-in-Rotated-Sorted-Array.html#解法三\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<p>可以发现，数组从任意位置分成两个序列后，至少有一半是有序的。</p>\n<p>基于这个事实，当 mid 把数组分成两段后，可以先找到哪一段是有序的（比较两端端点即可），然后看 target 在不在这一段，如果在，丢弃另一段；如果不在，丢弃这一段。</p>\n<p>为什么必须先找到有序的一端，然后找 target？因为如果想要在一段无序序列中找 target，无法实现。只能先在有序序列中找，以此来缩小搜索范围。</p>\n<h3 id=\"7-3-代码\"><a href=\"#7-3-代码\" class=\"headerlink\" title=\"7.3. 代码\"></a>7.3. 代码</h3><p>注意下面对于 <code>nums[left] &lt;= nums[mid]</code> 的分析。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = len - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 左半段有序</span></span><br><span class=\"line\">        <span class=\"comment\">// 等于的情况出现在：left = mid 时，即left和mid重合，此时只剩下两个元素</span></span><br><span class=\"line\">        <span class=\"comment\">// 这个等号不能去掉，因为mid求值时取整，两个元素时mid只会和left重合</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果去掉等号，计算right = mid - 1时，right会直接越界</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[left] &lt;= nums[mid])&#123;</span><br><span class=\"line\">            <span class=\"comment\">// target在左半段</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[left] &lt;= target &amp;&amp; target &lt; nums[mid])&#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">// target在右半段</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 右半段有序</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// target 在右半段</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[mid] &lt; target &amp;&amp; target &lt;= nums[right])&#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">// target 在左半段</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-4-参考-81-代码\"><a href=\"#7-4-参考-81-代码\" class=\"headerlink\" title=\"7.4. 参考 [81] 代码\"></a>7.4. 参考 [81] 代码</h3><p>也可以在 <code>nums[left] &lt;= nums[mid]</code> 时不用考虑那么多，采用和下题一样的思路，更简单。多加一个判断，当<code>nums[left] == nums[mid]</code> 时，直接跳过 left。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = len - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 左半段有序</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[left] &lt; nums[mid])&#123;</span><br><span class=\"line\">            <span class=\"comment\">// target在左半段</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[left] &lt;= target &amp;&amp; target &lt; nums[mid])&#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"comment\">// target在右半段</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// left 和 mid 重合，直接跳过left</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[left] == nums[mid])&#123;</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">            <span class=\"comment\">// 右半段有序</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// target 在右半段</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[mid] &lt; target &amp;&amp; target &lt;= nums[right])&#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"comment\">// target 在左半段</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"8-搜索旋转排序数组-II-81\"><a href=\"#8-搜索旋转排序数组-II-81\" class=\"headerlink\" title=\"8. 搜索旋转排序数组 II [81]\"></a>8. 搜索旋转排序数组 II [81]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/search-in-rotated-sorted-array-ii/\" target=\"_blank\" rel=\"noopener\">81. 搜索旋转排序数组 II</a></p>\n<h3 id=\"8-1-题目描述\"><a href=\"#8-1-题目描述\" class=\"headerlink\" title=\"8.1. 题目描述\"></a>8.1. 题目描述</h3><p><img src=\"/pictures/image-20200815105842768.png\" alt=\"image-20200815105842768\"></p>\n<h3 id=\"8-2-题目分析\"><a href=\"#8-2-题目分析\" class=\"headerlink\" title=\"8.2. 题目分析\"></a>8.2. 题目分析</h3><p>分析参考：<a href=\"https://leetcode.wang/leetCode-81-Search-in-Rotated-Sorted-ArrayII.html\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<p>如果使用 [33] 题的解法一，如果不加修改，直接放到 leetcode 上跑，发现 nums = [ 1, 3, 1, 1, 1 ] ，target = 3，返回了 false，当然是不对的了。原因就出现在了，我们在判断哪段有序的时候，当 nums [ left ] &lt;= nums [ mid ] 是认为左半段有序。而由于这道题出现了重复数字，此时的 nums [ left ] = 1, nums [ mid ] = 1，但此时左半段 [ 1, 3, 1 ] 并不是有序的，所以造成我们的算法错误。</p>\n<p>所以 nums[left] == nums[mid] 需要我们单独考虑了。操作也很简单，参考<a href=\"https://leetcode.com/problems/search-in-rotated-sorted-array-ii/discuss/28218/My-8ms-C%2B%2B-solution-(o(logn)-on-average-o(n)-worst-case\" target=\"_blank\" rel=\"noopener\">这里</a>，当相等的时候，我们只需要让 left++ 就够了。</p>\n<p>改后的代码也适用于 [33] 题。</p>\n<h3 id=\"8-3-代码\"><a href=\"#8-3-代码\" class=\"headerlink\" title=\"8.3. 代码\"></a>8.3. 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = len - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 左半段有序</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[left] &lt; nums[mid])&#123;</span><br><span class=\"line\">            <span class=\"comment\">// target在左半段</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[left] &lt;= target &amp;&amp; target &lt; nums[mid])&#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"comment\">// target在右半段</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 相等，left++</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[left] == nums[mid])&#123;</span><br><span class=\"line\">            left++;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 右半段有序</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// target 在右半段</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[mid] &lt; target &amp;&amp; target &lt;= nums[right])&#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"comment\">// target 在左半段</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-搜索二维矩阵-74\"><a href=\"#9-搜索二维矩阵-74\" class=\"headerlink\" title=\"9. 搜索二维矩阵 [74]\"></a>9. 搜索二维矩阵 [74]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/search-a-2d-matrix/\" target=\"_blank\" rel=\"noopener\">74. 搜索二维矩阵</a></p>\n<h3 id=\"9-1-题目描述\"><a href=\"#9-1-题目描述\" class=\"headerlink\" title=\"9.1. 题目描述\"></a>9.1. 题目描述</h3><p><img src=\"/pictures/image-20200822101717491.png\" alt=\"image-20200822101717491\"></p>\n<h3 id=\"9-2-代码\"><a href=\"#9-2-代码\" class=\"headerlink\" title=\"9.2. 代码\"></a>9.2. 代码</h3><p>有序序列搜索，直接二分。这里需要加一个 mid 下标和矩阵下标的转换即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">searchMatrix</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(matrix.length == <span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = matrix.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = m * n - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = mid / n;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = mid % n;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> value = matrix[i][j];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target == value)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(target &lt; value)&#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-参考引用\"><a href=\"#10-参考引用\" class=\"headerlink\" title=\"10. 参考引用\"></a>10. 参考引用</h2><ol>\n<li><a href=\"https://zh.wikipedia.org/wiki/二分搜尋演算法\" target=\"_blank\" rel=\"noopener\">Wikipedia</a></li>\n<li><a href=\"https://labuladong.gitbook.io/algo/suan-fa-si-wei-xi-lie/er-fen-cha-zhao-xiang-jie\" target=\"_blank\" rel=\"noopener\">https://labuladong.gitbook.io/algo/suan-fa-si-wei-xi-lie/er-fen-cha-zhao-xiang-jie</a></li>\n<li><a href=\"https://leetcode.wang/leetCode-81-Search-in-Rotated-Sorted-ArrayII.html\" target=\"_blank\" rel=\"noopener\">https://leetcode.wang/leetCode-81-Search-in-Rotated-Sorted-ArrayII.html</a></li>\n</ol>\n","site":{"data":{}},"length":9266,"excerpt":"<p>本文介绍了二分查找，主要总结了三种二分查找的框架，分别是：基本的二分查找、查找左侧边界、查找右侧边界。同时，解决了部分LeetCode上二分查找相关的题目，这部分会持续更新~</p>\n<h2 id=\"1-什么是二分查找？\"><a href=\"#1-什么是二分查找？\" class=\"headerlink\" title=\"1. 什么是二分查找？\"></a>1. 什么是二分查找？</h2><p><a href=\"https://zh.wikipedia.org/wiki/二分搜尋演算法\" target=\"_blank\" rel=\"noopener\">维基定义</a>：在计算机科学中，二分查找算法（英语：binary search algorithm），也称折半搜索算法（英语：half-interval search algorithm）[1]、对数搜索算法（英语：logarithmic search algorithm），是一种在有序数组中查找某一特定元素的搜索算法。搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组为空，则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半。</p>\n<p>二分查找算法在情况下的复杂度是对数时间，进行O(log n)次比较操作。二分查找算法使用常数空间，无论对任何大小的输入数据，算法使用的空间都是一样的。除非输入数据数量很少，否则二分查找算法比线性搜索更快，但数组必须事先被排序。尽管特定的、为了快速搜索而设计的数据结构更有效（比如哈希表），二分查找算法应用面更广。</p>","more":"<h2 id=\"2-基本的二分查找：二分查找-704\"><a href=\"#2-基本的二分查找：二分查找-704\" class=\"headerlink\" title=\"2. 基本的二分查找：二分查找 [704]\"></a>2. 基本的二分查找：二分查找 [704]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/binary-search/\" target=\"_blank\" rel=\"noopener\">704. 二分查找</a></p>\n<h3 id=\"2-1-题目描述\"><a href=\"#2-1-题目描述\" class=\"headerlink\" title=\"2.1. 题目描述\"></a>2.1. 题目描述</h3><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums = [-1,0,3,5,9,12], target = 9</span><br><span class=\"line\">输出: 4</span><br><span class=\"line\">解释: 9 出现在 nums 中并且下标为 4</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums = [-1,0,3,5,9,12], target = 2</span><br><span class=\"line\">输出: -1</span><br><span class=\"line\">解释: 2 不存在 nums 中因此返回 -1</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<ol>\n<li>你可以假设 <code>nums</code> 中的所有元素是不重复的。</li>\n<li><code>n</code> 将在 <code>[1, 10000]</code>之间。</li>\n<li><code>nums</code> 的每个元素都将在 <code>[-9999, 9999]</code>之间。</li>\n</ol>\n<h3 id=\"2-2-题目分析\"><a href=\"#2-2-题目分析\" class=\"headerlink\" title=\"2.2. 题目分析\"></a>2.2. 题目分析</h3><p>基本二分查找。</p>\n<h3 id=\"2-3-代码\"><a href=\"#2-3-代码\" class=\"headerlink\" title=\"2.3. 代码\"></a>2.3. 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &lt; target)&#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-在排序数组中查找元素的第一个和最后一个位置-34\"><a href=\"#3-在排序数组中查找元素的第一个和最后一个位置-34\" class=\"headerlink\" title=\"3. 在排序数组中查找元素的第一个和最后一个位置 [34]\"></a>3. 在排序数组中查找元素的第一个和最后一个位置 [34]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/\" target=\"_blank\" rel=\"noopener\">34. 在排序数组中查找元素的第一个和最后一个位置</a></p>\n<h3 id=\"3-1-题目描述\"><a href=\"#3-1-题目描述\" class=\"headerlink\" title=\"3.1. 题目描述\"></a>3.1. 题目描述</h3><p>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。</p>\n<p>你的算法时间复杂度必须是 O(log n) 级别。</p>\n<p>如果数组中不存在目标值，返回 [-1, -1]。</p>\n<p>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums = [5,7,7,8,8,10], target = 8</span><br><span class=\"line\">输出: [3,4]</span><br></pre></td></tr></table></figure>\n\n\n<p>示例 2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums = [5,7,7,8,8,10], target = 6</span><br><span class=\"line\">输出: [-1,-1]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-题目分析\"><a href=\"#3-2-题目分析\" class=\"headerlink\" title=\"3.2. 题目分析\"></a>3.2. 题目分析</h3><p>本题求给出有序序列（有重复元素）的target左侧、右侧边界，这需要在基本的二分查找代码上做一些修改。</p>\n<h3 id=\"3-3-代码\"><a href=\"#3-3-代码\" class=\"headerlink\" title=\"3.3. 代码\"></a>3.3. 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] searchRange(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    res[<span class=\"number\">0</span>] = leftBound(nums, target);</span><br><span class=\"line\">    res[<span class=\"number\">1</span>] = rightBound(nums, target);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 找左侧边界</span></span><br><span class=\"line\"><span class=\"comment\">     * 用 left 保存找到的左侧边界</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> target</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">leftBound</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 搜索区间为 [left, right]</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] &gt; target)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 搜索区间变为 [left, mid-1]</span></span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &lt; target)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 搜索区间变为 [mid+1, right]</span></span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] == target)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不返回，收缩右侧边界，限制左侧边界left的取值范围</span></span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left == nums.length || nums[left] != target)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 找右侧边界</span></span><br><span class=\"line\"><span class=\"comment\">     * 用 right 保存找到的右侧边界</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> target</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">rightBound</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] &gt; target)&#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &lt; target)&#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] == target)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 改变一：收缩左侧边界，限制右侧边界right的取值范围</span></span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 改变二：检查right的越界情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(right &lt; <span class=\"number\">0</span> || nums[right] != target)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> right;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-二分查找总结\"><a href=\"#4-二分查找总结\" class=\"headerlink\" title=\"4. 二分查找总结\"></a>4. 二分查找总结</h2><p>可以发现，二分查找的思路很简单，但是对于 mid 是加一还是减一，while 中是 &lt;= 还是 = 是比较容易混的。上面两题中，我们都把搜索区间定义为左右为闭，这样便于统一记忆。当然，也有代码定义为左闭右开，left 和 right的更新又是另一种套路了，这里不做讨论。下面，基于上面两题的做法，对二分查找三种不同用法做出总结：</p>\n<h3 id=\"4-1-基本的二分查找\"><a href=\"#4-1-基本的二分查找\" class=\"headerlink\" title=\"4.1. 基本的二分查找\"></a>4.1. 基本的二分查找</h3><p>基本的二分查找框架，即序列元素不重复，查找 target，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 搜索区间为 [left, right]</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 找到target，直接返回</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &lt; target)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 搜索区间变为 [mid+1, right]</span></span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 搜索区间变为 [left, mid-1]</span></span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-查找左侧边界\"><a href=\"#4-2-查找左侧边界\" class=\"headerlink\" title=\"4.2. 查找左侧边界\"></a>4.2. 查找左侧边界</h3><p>序列元素可能重复，查找 target 左边界，在基本代码的基础上，做了三处修改，代码如下：</p>\n<p>代码理解：在查找左边界时，使用 left 存找到的左边界，如果 <code>nums[mid] &lt; target</code> ，left 向后移一位，其他情况下 left 均不动，则最终 left 的取值只能有三种情况：1.第一个等于 target 的元素；2. 大于 target 的元素（因为序列中没有 target）；3. left 越界（因为序列中的所有元素均小于 target）。这也是为什么使用 left 存储左边界并最终返回的原因。right 存能取到的左边界的最大值，不断的收缩 left 的取值范围，直到 <code>left &gt; right</code> 结束循环。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">leftBound</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] &gt; target)&#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &lt; target)&#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] == target)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 修改一：不返回，收缩右侧边界，限制左侧边界left的取值范围</span></span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 修改二：检查left的越界情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left == nums.length || nums[left] != target)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 修改三：返回left</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-查找右侧边界\"><a href=\"#4-3-查找右侧边界\" class=\"headerlink\" title=\"4.3. 查找右侧边界\"></a>4.3. 查找右侧边界</h3><p>序列元素可能重复，查找 target 右边界，在基本代码的基础上，做了三处修改，代码如下：</p>\n<p>代码理解：在查找右边界时，用 right 存储找到的右边界。当 <code>nums[mid] &gt; target</code> 时，更新 right 的值，right 前移一位，其他情况下 right 值均不变。因此，最终 while 循环结束后，right 的取值有三种：1. 最后一个等于 target 的元素，即右边界；2. 小于target 的元素（因为序列中没有 target 元素）；3. target 越界（因为序列中所有元素均大于 target）。用 left 存储右边界能取到的最小值，while 中不断更新 left 值，缩小右边界的取值范围，直到 <code>left &gt; right</code> 结束。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">rightBound</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] &gt; target)&#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &lt; target)&#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] == target)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 修改一：不返回，收缩左侧边界，限制右侧边界left的取值范围</span></span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 修改二：检查right的越界情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(right &lt; <span class=\"number\">0</span> || nums[right] != target)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 修改三：返回right</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> right;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-使用二分查找的题目列表\"><a href=\"#5-使用二分查找的题目列表\" class=\"headerlink\" title=\"5. 使用二分查找的题目列表\"></a>5. 使用二分查找的题目列表</h2><p>本文中使用二分查找解决的 LeetCode 题目列表如下，持续更新中~</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">#</th>\n<th align=\"center\">Title</th>\n<th align=\"center\">Remark</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">704</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/binary-search/\" target=\"_blank\" rel=\"noopener\">二分查找</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">34</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/\" target=\"_blank\" rel=\"noopener\">在排序数组中查找元素的第一个和最后一个位置</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">35</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/search-insert-position/\" target=\"_blank\" rel=\"noopener\">搜索插入位置</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">33</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/search-in-rotated-sorted-array/\" target=\"_blank\" rel=\"noopener\">搜索旋转排序数组</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">81</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/search-in-rotated-sorted-array-ii/\" target=\"_blank\" rel=\"noopener\">搜索旋转排序数组 II</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">74</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/search-a-2d-matrix/\" target=\"_blank\" rel=\"noopener\">搜索二维矩阵</a></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"6-搜索插入的位置-35\"><a href=\"#6-搜索插入的位置-35\" class=\"headerlink\" title=\"6. 搜索插入的位置 [35]\"></a>6. 搜索插入的位置 [35]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/search-insert-position/\" target=\"_blank\" rel=\"noopener\">35. 搜索插入位置</a></p>\n<h3 id=\"6-1-题目描述\"><a href=\"#6-1-题目描述\" class=\"headerlink\" title=\"6.1. 题目描述\"></a>6.1. 题目描述</h3><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>\n<p>你可以假设数组中无重复元素。</p>\n<p>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,3,5,6], 5</span><br><span class=\"line\">输出: 2</span><br></pre></td></tr></table></figure>\n\n<p>示例 2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,3,5,6], 2</span><br><span class=\"line\">输出: 1</span><br></pre></td></tr></table></figure>\n\n\n<p>示例 3:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,3,5,6], 7</span><br><span class=\"line\">输出: 4</span><br></pre></td></tr></table></figure>\n\n\n<p>示例 4:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,3,5,6], 0</span><br><span class=\"line\">输出: 0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-2-题目分析\"><a href=\"#6-2-题目分析\" class=\"headerlink\" title=\"6.2. 题目分析\"></a>6.2. 题目分析</h3><p>基本的二分查找框架，返回 left 即题目要求的返回值。</p>\n<h3 id=\"6-3-代码\"><a href=\"#6-3-代码\" class=\"headerlink\" title=\"6.3. 代码\"></a>6.3. 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &lt; target)&#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-搜索旋转排序数组-33\"><a href=\"#7-搜索旋转排序数组-33\" class=\"headerlink\" title=\"7. 搜索旋转排序数组 [33]\"></a>7. 搜索旋转排序数组 [33]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/search-in-rotated-sorted-array/\" target=\"_blank\" rel=\"noopener\">33. 搜索旋转排序数组</a></p>\n<h3 id=\"7-1-题目描述\"><a href=\"#7-1-题目描述\" class=\"headerlink\" title=\"7.1. 题目描述\"></a>7.1. 题目描述</h3><p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p>\n<p>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。</p>\n<p>搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。</p>\n<p>你可以假设数组中不存在重复的元素。</p>\n<p>你的算法时间复杂度必须是 O(log n) 级别。</p>\n<p>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums = [4,5,6,7,0,1,2], target = 0</span><br><span class=\"line\">输出: 4</span><br></pre></td></tr></table></figure>\n\n\n<p>示例 2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums = [4,5,6,7,0,1,2], target = 3</span><br><span class=\"line\">输出: -1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-2-题目分析\"><a href=\"#7-2-题目分析\" class=\"headerlink\" title=\"7.2. 题目分析\"></a>7.2. 题目分析</h3><p>本题分析参考：<a href=\"https://leetcode.wang/leetCode-33-Search-in-Rotated-Sorted-Array.html#解法三\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<p>可以发现，数组从任意位置分成两个序列后，至少有一半是有序的。</p>\n<p>基于这个事实，当 mid 把数组分成两段后，可以先找到哪一段是有序的（比较两端端点即可），然后看 target 在不在这一段，如果在，丢弃另一段；如果不在，丢弃这一段。</p>\n<p>为什么必须先找到有序的一端，然后找 target？因为如果想要在一段无序序列中找 target，无法实现。只能先在有序序列中找，以此来缩小搜索范围。</p>\n<h3 id=\"7-3-代码\"><a href=\"#7-3-代码\" class=\"headerlink\" title=\"7.3. 代码\"></a>7.3. 代码</h3><p>注意下面对于 <code>nums[left] &lt;= nums[mid]</code> 的分析。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = len - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 左半段有序</span></span><br><span class=\"line\">        <span class=\"comment\">// 等于的情况出现在：left = mid 时，即left和mid重合，此时只剩下两个元素</span></span><br><span class=\"line\">        <span class=\"comment\">// 这个等号不能去掉，因为mid求值时取整，两个元素时mid只会和left重合</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果去掉等号，计算right = mid - 1时，right会直接越界</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[left] &lt;= nums[mid])&#123;</span><br><span class=\"line\">            <span class=\"comment\">// target在左半段</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[left] &lt;= target &amp;&amp; target &lt; nums[mid])&#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">// target在右半段</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 右半段有序</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// target 在右半段</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[mid] &lt; target &amp;&amp; target &lt;= nums[right])&#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">// target 在左半段</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-4-参考-81-代码\"><a href=\"#7-4-参考-81-代码\" class=\"headerlink\" title=\"7.4. 参考 [81] 代码\"></a>7.4. 参考 [81] 代码</h3><p>也可以在 <code>nums[left] &lt;= nums[mid]</code> 时不用考虑那么多，采用和下题一样的思路，更简单。多加一个判断，当<code>nums[left] == nums[mid]</code> 时，直接跳过 left。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = len - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 左半段有序</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[left] &lt; nums[mid])&#123;</span><br><span class=\"line\">            <span class=\"comment\">// target在左半段</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[left] &lt;= target &amp;&amp; target &lt; nums[mid])&#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"comment\">// target在右半段</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// left 和 mid 重合，直接跳过left</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[left] == nums[mid])&#123;</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">            <span class=\"comment\">// 右半段有序</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// target 在右半段</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[mid] &lt; target &amp;&amp; target &lt;= nums[right])&#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"comment\">// target 在左半段</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"8-搜索旋转排序数组-II-81\"><a href=\"#8-搜索旋转排序数组-II-81\" class=\"headerlink\" title=\"8. 搜索旋转排序数组 II [81]\"></a>8. 搜索旋转排序数组 II [81]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/search-in-rotated-sorted-array-ii/\" target=\"_blank\" rel=\"noopener\">81. 搜索旋转排序数组 II</a></p>\n<h3 id=\"8-1-题目描述\"><a href=\"#8-1-题目描述\" class=\"headerlink\" title=\"8.1. 题目描述\"></a>8.1. 题目描述</h3><p><img src=\"/pictures/image-20200815105842768.png\" alt=\"image-20200815105842768\"></p>\n<h3 id=\"8-2-题目分析\"><a href=\"#8-2-题目分析\" class=\"headerlink\" title=\"8.2. 题目分析\"></a>8.2. 题目分析</h3><p>分析参考：<a href=\"https://leetcode.wang/leetCode-81-Search-in-Rotated-Sorted-ArrayII.html\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<p>如果使用 [33] 题的解法一，如果不加修改，直接放到 leetcode 上跑，发现 nums = [ 1, 3, 1, 1, 1 ] ，target = 3，返回了 false，当然是不对的了。原因就出现在了，我们在判断哪段有序的时候，当 nums [ left ] &lt;= nums [ mid ] 是认为左半段有序。而由于这道题出现了重复数字，此时的 nums [ left ] = 1, nums [ mid ] = 1，但此时左半段 [ 1, 3, 1 ] 并不是有序的，所以造成我们的算法错误。</p>\n<p>所以 nums[left] == nums[mid] 需要我们单独考虑了。操作也很简单，参考<a href=\"https://leetcode.com/problems/search-in-rotated-sorted-array-ii/discuss/28218/My-8ms-C%2B%2B-solution-(o(logn)-on-average-o(n)-worst-case\" target=\"_blank\" rel=\"noopener\">这里</a>，当相等的时候，我们只需要让 left++ 就够了。</p>\n<p>改后的代码也适用于 [33] 题。</p>\n<h3 id=\"8-3-代码\"><a href=\"#8-3-代码\" class=\"headerlink\" title=\"8.3. 代码\"></a>8.3. 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = len - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 左半段有序</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[left] &lt; nums[mid])&#123;</span><br><span class=\"line\">            <span class=\"comment\">// target在左半段</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[left] &lt;= target &amp;&amp; target &lt; nums[mid])&#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"comment\">// target在右半段</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 相等，left++</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[left] == nums[mid])&#123;</span><br><span class=\"line\">            left++;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 右半段有序</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// target 在右半段</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[mid] &lt; target &amp;&amp; target &lt;= nums[right])&#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"comment\">// target 在左半段</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-搜索二维矩阵-74\"><a href=\"#9-搜索二维矩阵-74\" class=\"headerlink\" title=\"9. 搜索二维矩阵 [74]\"></a>9. 搜索二维矩阵 [74]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/search-a-2d-matrix/\" target=\"_blank\" rel=\"noopener\">74. 搜索二维矩阵</a></p>\n<h3 id=\"9-1-题目描述\"><a href=\"#9-1-题目描述\" class=\"headerlink\" title=\"9.1. 题目描述\"></a>9.1. 题目描述</h3><p><img src=\"/pictures/image-20200822101717491.png\" alt=\"image-20200822101717491\"></p>\n<h3 id=\"9-2-代码\"><a href=\"#9-2-代码\" class=\"headerlink\" title=\"9.2. 代码\"></a>9.2. 代码</h3><p>有序序列搜索，直接二分。这里需要加一个 mid 下标和矩阵下标的转换即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">searchMatrix</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(matrix.length == <span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = matrix.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = m * n - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = mid / n;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = mid % n;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> value = matrix[i][j];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target == value)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(target &lt; value)&#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-参考引用\"><a href=\"#10-参考引用\" class=\"headerlink\" title=\"10. 参考引用\"></a>10. 参考引用</h2><ol>\n<li><a href=\"https://zh.wikipedia.org/wiki/二分搜尋演算法\" target=\"_blank\" rel=\"noopener\">Wikipedia</a></li>\n<li><a href=\"https://labuladong.gitbook.io/algo/suan-fa-si-wei-xi-lie/er-fen-cha-zhao-xiang-jie\" target=\"_blank\" rel=\"noopener\">https://labuladong.gitbook.io/algo/suan-fa-si-wei-xi-lie/er-fen-cha-zhao-xiang-jie</a></li>\n<li><a href=\"https://leetcode.wang/leetCode-81-Search-in-Rotated-Sorted-ArrayII.html\" target=\"_blank\" rel=\"noopener\">https://leetcode.wang/leetCode-81-Search-in-Rotated-Sorted-ArrayII.html</a></li>\n</ol>"},{"title":"HashMap实现原理及其重要方法","date":"2020-04-05T15:42:08.000Z","visible":"hide","typora-copy-images-to":"..\\..\\juliajiang\\source\\pictures","_content":"\n本文主要介绍了 HashMap 的底层实现结构、存储结构以及JDK1.8中相关的优化。同时，也分析了一些HashMap的重要方法，比如哈希桶索引位置、查询、新增、扩容。另外涉及几个细节性的问题，比如加载因子、HashMap与HashTable的区别等等。\n\n<!--more-->\n\n## 1. 部分源码分析\n\n```java\npublic class HashMap<K,V> extends AbstractMap<K,V>\n    implements Map<K,V>, Cloneable, Serializable {\n\n    private static final long serialVersionUID = 362498820763181265L;\n    \n    static final int DEFAULT_INITIAL_CAPACITY = 1 << 4; //HashMap初始化长度 16\n\n    static final int MAXIMUM_CAPACITY = 1 << 30;\t\t//HashMap 最大长度\n\n    static final float DEFAULT_LOAD_FACTOR = 0.75f;\t\t//默认的加载因子\n\n    static final int TREEIFY_THRESHOLD = 8;\t\t\t\t//转换红黑树的临界值，当链表长度大于此值时，会把链表结构转换为红黑树结构\n\n    static final int UNTREEIFY_THRESHOLD = 6;\t\t\t//转换链表的临界值，当链表长度小于此值时，会将红黑树结构转换为链表\n\n    static final int MIN_TREEIFY_CAPACITY = 64;\t\t\t//最小树容量\n    \n    static class Node<K,V> implements Map.Entry<K,V> {\n        final int hash;\t\t\t\t//用来定位数组索引位置\t\t\t\t\t\t\t\n        final K key;\n        V value;\n        Node<K,V> next;\t\t\t\t//链表的下一个node\n\t\t...\n    }\n    \n    transient Node<K,V>[] table;\t// Node[] table的初始化长度length(默认值是16)\n    \n    transient Set<Map.Entry<K,V>> entrySet;\n    \n    transient int size;\t\t\t// HashMap中实际存在的键值对数量\n    \n    transient int modCount;\t\t// 记录HashMap内部结构发生变化的次数\n    \n    int threshold;\t\t\t\t// HashMap所能容纳的最大数据量的Node(键值对)个数\n    \t\t\t\t\t\t\t// threshold = length * Load factor \n    \n    final float loadFactor;\t\t// 负载因子(默认值是0.75)\n    \n    // Hash 算法，共三步\n    static final int hash(Object key) {\n        int h;\n        // h = key.hashCode() 为第一步 取hashCode值\n        // h ^ (h >>> 16)  为第二步 高位参与运算\n        return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n    }\n    \n    /*\n    // jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的\n    // 计算该对象应该保存在table数组的哪个索引处\n    static int indexFor(int h, int length) {  \n    \t//第三步 取模运算\n     \treturn h & (length-1);  \n\t}\n    */\n    \n    \n```\n\n\n\n## 2. HashMap 底层是如何实现的？JDK1.8如何优化？\n\n从结构实现来讲，HashMap是数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的，如下如所示。\n\n<img src=\"/pictures/8db4a3bdfb238da1a1c4431d2b6e075c_720w.png\" alt=\"img\" style=\"zoom: 67%;\" />\n\nJDK1.8之所以添加红黑树是因为一旦链表过长，会严重影响HashMap的性能，而红黑树具有快速增删改查的特点，这样就可以有效的解决链表过长时操作比较慢的问题。\n\n这里需要讲明白两个问题：数据底层具体存储的是什么？这样的存储方式有什么优点呢？\n\n(1) 从源码可知，HashMap类中有一个非常重要的字段，就是 Node[] table，即哈希桶数组，明显它是一个Node的数组。Node是HashMap的一个内部类，实现了Map.Entry接口，本质是就是一个映射(键值对)。上图中的每个黑色圆点就是一个Node对象。Node 源码如下：\n\n```java\nstatic class Node<K,V> implements Map.Entry<K,V> {\n        final int hash;    //用来定位数组索引位置\n        final K key;\n        V value;\n        Node<K,V> next;   //链表的下一个node\n\n        Node(int hash, K key, V value, Node<K,V> next) { ... }\n        public final K getKey(){ ... }\n        public final V getValue() { ... }\n        public final String toString() { ... }\n        public final int hashCode() { ... }\n        public final V setValue(V newValue) { ... }\n        public final boolean equals(Object o) { ... }\n}\n```\n\n(2) HashMap就是使用哈希表来存储的。哈希表为解决冲突，可以采用开放地址法和链地址法等来解决问题，Java中HashMap采用了链地址法。链地址法，简单来说，就是数组加链表的结合。在每个数组元素上都一个链表结构，当数据被Hash后，得到数组下标，把数据放在对应下标元素的链表上。例如如下代码：\n\n```java\n map.put(\"julia\",\"jiang\");\n```\n\n系统将调用 ``\"julia\"`` 这个key的hashCode()方法得到其hashCode 值（该方法适用于每个Java对象），然后再通过Hash算法的后两步运算（具体见哈希桶数组索引位置分析）来定位该键值对的存储位置，有时两个key会定位到相同的位置，表示发生了Hash碰撞。当然Hash算法计算结果越分散均匀，Hash碰撞的概率就越小，map的存取效率就会越高。\n\n## 3. 什么是加载因子？加载因子为什么是0.75？\n\n加载因子也叫扩容因子或负载因子，用来判断什么时候进行扩容的，假如加载因子是0.5，HashMap的初始化容量是16，那么当HashMap中有16*0.5=8个元素时，HashMap就会进行扩容。\n\n那加载因子为什么是 0.75 而不是 0.5 或者 1.0 呢？\n\n这其实是出于容量和性能之间平衡的结果：\n\n1. 当加载因子设置比较大的时候，扩容的门槛就被提高了，扩容发生的频率比较低，占用的空间会比较小，但此时发生Hash冲突的几率就会提升，因此需要更复杂的数据结构来存储元素，这样对元素的操作时间就会增加，运行效率也会因此降低；\n2. 而当加载因子值比较小的时候，扩容的门槛会比较低，因此会占用更多的空间，此时元素的存储就比较稀疏，发生哈希冲突的可能性就比较小，因此操作性能会比较高。\n\n所以综合了以上情况就取了一个 0.5 到 1.0 的平均数 0.75 作为加载因子。\n\n## 4. HashMap源码中有哪些重要方法？\n\n### 4.1 确定哈希桶数组索引位置\n\n不管增加、删除、查找键值对，定位到哈希桶数组的位置都是很关键的第一步。前面说过HashMap的数据结构是数组和链表的结合，所以我们当然希望这个HashMap里面的元素位置尽量分布均匀些，尽量使得每个位置上的元素数量只有一个，那么当我们用hash算法求得这个位置的时候，马上就可以知道对应位置的元素就是我们要的，不用遍历链表，大大优化了查询的效率。HashMap定位数组索引位置，直接决定了hash方法的离散性能。先看看源码的实现(方法一+方法二):\n\n```java\n方法一：\nstatic final int hash(Object key) {   //jdk1.8\n     int h;\n     // h = key.hashCode() 为第一步 取hashCode值\n     // h ^ (h >>> 16)  为第二步 高位参与运算\n     return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n}\n方法二：\nstatic int indexFor(int h, int length) {  //jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的\n     return h & (length-1);  //第三步 取模运算\n}\n```\n\n这里的Hash算法本质上就是三步：**取key的hashCode值、高位运算、取模运算**。\n\n对于任意给定的对象，只要它的hashCode()返回值相同，那么程序调用方法一所计算得到的Hash码值总是相同的。我们首先想到的就是把hash值对数组长度取模运算，这样一来，元素的分布相对来说是比较均匀的。但是，模运算的消耗还是比较大的，在HashMap中是这样做的：调用方法二来计算该对象应该保存在table数组的哪个索引处。\n\n这个方法非常巧妙，它通过h & (table.length -1)来得到该对象的保存位，而HashMap底层数组的长度总是2的n次方，这是HashMap在速度上的优化。当length总是2的n次方时，h& (length-1)运算等价于对length取模，也就是h%length，但是&比%具有更高的效率。\n\n在JDK1.8的实现中，优化了高位运算的算法，通过hashCode()的高16位异或低16位实现的：(h = k.hashCode()) ^ (h >>> 16)，主要是从速度、功效、质量来考虑的，这么做可以在数组table的length比较小的时候，也能保证考虑到高低Bit都参与到Hash的计算中，同时不会有太大的开销。\n\n下面举例说明下，n为table的长度。\n\n<img src=\"/pictures/8e8203c1b51be6446cda4026eaaccf19_720w.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n### 4.2 查询\n\n```java\npublic V get(Object key) {\n    Node<K,V> e;\n    //对 key 进行哈希操作\n    return (e = getNode(hash(key), key)) == null ? null : e.value;\n}\n\nfinal Node<K,V> getNode(int hash, Object key) {\n    Node<K,V>[] tab; \n    Node<K,V> first, e; \n    int n; \n    K k;\n    //非空判断\n    if ((tab = table) != null && (n = tab.length) > 0 &&\n        (first = tab[(n - 1) & hash]) != null) {\n        //判断第一个元素是否是要查询的元素\n        if (first.hash == hash && // always check first node\n            ((k = first.key) == key || (key != null && key.equals(k))))\n            return first;\n        //下一个节点非空判断\n        if ((e = first.next) != null) {\n            //如果第一个节点是树结构，则使用 getTreeNode 直接获取相应的数据\n            if (first instanceof TreeNode)\n                return ((TreeNode<K,V>)first).getTreeNode(hash, key);\n            do { //非树结构，循环节点判断\n                if (e.hash == hash &&   //hash相等，并且 key相等，则返回此节点\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    return e;\n            } while ((e = e.next) != null);\n        }\n    }\n    return null;\n}\n```\n\n从以上源码可以看出，当哈希冲突时我们需要通过判断 key 值是否相等，才能确认此元素是不是我们想要的元素。\n\n### 4.3 新增\n\n```java\npublic V put(K key, V value) {\n    //对 key 进行哈希操作\n    return putVal(hash(key), key, value, false, true);\n}\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n               boolean evict) {\n    Node<K,V>[] tab; \n    Node<K,V> p; \n    int n, i;\n    //哈希表为空则创建表\n    if ((tab = table) == null || (n = tab.length) == 0)\n        n = (tab = resize()).length;\n    //根据 key 的哈希值计算出要插入的数组索引i\n    if ((p = tab[i = (n - 1) & hash]) == null)\n        //如果 tab[i] 为 null，则直接插入\n        tab[i] = newNode(hash, key, value, null);\n    else {\n        Node<K,V> e; \n        K k;\n        //如果key相等，直接覆盖 value\n        if (p.hash == hash &&\n            ((k = p.key) == key || (key != null && key.equals(k))))\n            e = p;\n        //如果 key 不存在，判断是否为红黑树\n        else if (p instanceof TreeNode)\n            //红黑树直接插入键值对\n            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n        else {\n            //为链表结构，循环准备插入\n            for (int binCount = 0; ; ++binCount) {\n                //下一个元素为空时\n                if ((e = p.next) == null) {\n                    p.next = newNode(hash, key, value, null);\n                    //链表长度大于 8 时转换为红黑树进行处理\n                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                        treeifyBin(tab, hash);\n                    break;\n                }\n                //key 已经存在直接覆盖 value\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    break;\n                p = e;\n            }\n        }\n        if (e != null) { // existing mapping for key\n            V oldValue = e.value;\n            if (!onlyIfAbsent || oldValue == null)\n                e.value = value;\n            afterNodeAccess(e);\n            return oldValue;\n        }\n    }\n    ++modCount;\n    //超过最大容量，扩容\n    if (++size > threshold)\n        resize();\n    afterNodeInsertion(evict);\n    return null;\n}\n```\n\n新增方法的执行流程如下：\n\n![preview](/pictures/58e67eae921e4b431782c07444af824e_r.jpg)\n\n### 4.4 扩容\n\n[参考博文](https://zhuanlan.zhihu.com/p/21673805)\n\n#### JDK1.7 的扩容\n\n扩容(resize)就是重新计算容量，向HashMap对象里不停的添加元素，而HashMap对象内部的数组无法装载更多的元素时，对象就需要扩大数组的长度，以便能装入更多的元素。当然Java里的数组是无法自动扩容的，方法是使用一个新的数组代替已有的容量小的数组，就像我们用一个小桶装水，如果想装更多的水，就得换大水桶。\n\n我们分析下resize的源码，鉴于JDK1.8融入了红黑树，较复杂，为了便于理解我们仍然使用JDK1.7的代码，好理解一些，本质上区别不大，具体区别后文再说。\n\n```java\n 1 void resize(int newCapacity) {   //传入新的容量\n 2     Entry[] oldTable = table;    //引用扩容前的Entry数组\n 3     int oldCapacity = oldTable.length;         \n 4     if (oldCapacity == MAXIMUM_CAPACITY) {  //扩容前的数组大小如果已经达到最大(2^30)了\n 5         threshold = Integer.MAX_VALUE; //修改阈值为int的最大值(2^31-1)，这样以后就不会扩容了\n 6         return;\n 7     }\n 8  \n 9     Entry[] newTable = new Entry[newCapacity];  //初始化一个新的Entry数组\n10     transfer(newTable);                         //！！将数据转移到新的Entry数组里\n11     table = newTable;                           //HashMap的table属性引用新的Entry数组\n12     threshold = (int)(newCapacity * loadFactor);//修改阈值\n13 }\n```\n\n这里就是使用一个容量更大的数组来代替已有的容量小的数组，transfer()方法将原有Entry数组的元素拷贝到新的Entry数组里。\n\n```java\nvoid transfer(Entry[] newTable) {\n   Entry[] src = table;                   //src引用了旧的Entry数组\n   int newCapacity = newTable.length;\n   for (int j = 0; j < src.length; j++) { //遍历旧的Entry数组\n       Entry<K,V> e = src[j];             //取得旧Entry数组的每个元素\n       if (e != null) {\n           src[j] = null;//释放旧Entry数组的对象引用（for循环后，旧的Entry数组不再引用任何对象）\n           do {\n               Entry<K,V> next = e.next;\n               int i = indexFor(e.hash, newCapacity); //！！重新计算每个元素在数组中的位置\n               e.next = newTable[i]; //标记[1]\n               newTable[i] = e;      //将元素放在数组上\n               e = next;             //访问下一个Entry链上的元素\n           } while (e != null);\n       }\n   }\n}\n\n// jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的\n// 计算该对象应该保存在table数组的哪个索引处\nstatic int indexFor(int h, int length) {  \n\t//第三步 取模运算\n \treturn h & (length-1);  \n}\n// 确定哈希桶数组索引位置\nstatic final int hash(Object key) {\n    int h;\n    // h = key.hashCode() 为第一步 取hashCode值\n    // h ^ (h >>> 16)  为第二步 高位参与运算\n    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n}\n```\n\nnewTable[i]的引用赋给了e.next，也就是使用了单链表的头插入方式，同一位置上新元素总会被放在链表的头部位置；这样先放在一个索引上的元素终会被放到Entry链的尾部(如果发生了hash冲突的话），这一点和Jdk1.8有区别，下文详解。在旧数组中同一条Entry链上的元素，通过重新计算索引位置后，有可能被放到了新数组的不同位置上。下面举个例子说明下扩容过程。\n\n这里我们假设 ``hashCode()`` 的哈希算法就是简单的 key % (数组长度)。其中的哈希桶数组table的size=2， 所以key = 3、7、5，put顺序依次为 5、7、3。在mod 2以后都冲突在table[1]这里了。这里假设负载因子 loadFactor=1，即当键值对的实际大小size 大于 table的实际大小时进行扩容。\n\n接下来的三个步骤是哈希桶数组 resize成4，然后所有的Node重新rehash的过程。\n\n![preview](/pictures/e5aa99e811d1814e010afa7779b759d4_r.jpg)\n\n#### JDK1.8 在扩容方面的优化\n\n下面我们讲解下JDK1.8做了哪些优化。经过观测可以发现，我们使用的是2次幂的扩展(指长度扩为原来2倍)，所以，元素的位置要么是在原位置，要么是在原位置再移动2次幂的位置。看下图可以明白这句话的意思，n为table的长度，图（a）表示扩容前的key1和key2两种key确定索引位置的示例，图（b）表示扩容后key1和key2两种key确定索引位置的示例，其中hash1是key1对应的哈希与高位运算结果。\n\n![preview](/pictures/a285d9b2da279a18b052fe5eed69afe9_r.jpg)\n\n元素在重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit(红色)，因此新的index就会发生这样的变化：\n\n![img](/pictures/b2cb057773e3d67976c535d6ef547d51_720w.png)\n\n因此，我们在扩充HashMap的时候，不需要像JDK1.7的实现那样重新计算hash，只需要看看原来的hash值新增的那个bit是1还是0就好了，是0的话索引没变，是1的话索引变成“原索引+oldCap”，可以看看下图为16扩充为32的resize示意图：\n\n![img](/pictures/544caeb82a329fa49cc99842818ed1ba_720w.png)\n\n这个设计确实非常的巧妙，既省去了重新计算hash值的时间，而且同时，由于新增的1bit是0还是1可以认为是随机的，因此resize的过程，均匀的把之前的冲突的节点分散到新的bucket了。这一块就是JDK1.8新增的优化点。有一点注意区别，JDK1.7中rehash的时候，旧链表迁移新链表的时候，如果在新表的数组索引位置相同，则链表元素会倒置，但是从上图可以看出，JDK1.8不会倒置。\n\n#### JDK1.8 中扩容源码\n\n```java\nfinal Node<K,V>[] resize() {\n    //扩容前数组\n    Node<K,V>[] oldTab = table;\n    //扩容前数组的大小和阈值\n    int oldCap = (oldTab == null) ? 0 : oldTab.length;\n    int oldThr = threshold;\n    //预定义新数组的大小和阈值\n    int newCap, newThr = 0;\n    if (oldCap > 0) {\n        //超过最大值就不可以扩容了\n        if (oldCap >= MAXIMUM_CAPACITY) {\n            threshold = Integer.MAX_VALUE;\n            return oldTab;\n        }\n        //扩容容量为当前容量的两倍，但不能超过MAXIMUM_CAPACITY\n        else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                oldCap >= DEFAULT_INITIAL_CAPACITY)\n            newThr = oldThr << 1; // double threshold\n    }\n    //前数组没有数据，前数组大小为0，新数组容量设置为初始阈值\n    else if (oldThr > 0) // initial capacity was placed in threshold\n        newCap = oldThr;\n    //初始阈值为0，则使用默认的初始化容器\n    else {               // zero initial threshold signifies using defaults\n        newCap = DEFAULT_INITIAL_CAPACITY;\n        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n    }\n    //如果新容量等于0\n    if (newThr == 0) {\n        float ft = (float)newCap * loadFactor;\n        newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                (int)ft : Integer.MAX_VALUE);\n    }\n    threshold = newThr;\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n    Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n    //开始赋值，将新的容量赋值给 table\n    table = newTab;\n    //原数据不为空，将原数据赋值到table中\n    if (oldTab != null) {\n        //根据容量循环数组，赋值非空元素到新table\n        for (int j = 0; j < oldCap; ++j) {\n            Node<K,V> e;\n            if ((e = oldTab[j]) != null) {\n                oldTab[j] = null;\n                //如果链表只有一个，则进行直接赋值\n                if (e.next == null)\n                    newTab[e.hash & (newCap - 1)] = e;\n                //如果是红黑树存储\n                else if (e instanceof TreeNode)\n                    ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n                else { \n                    //链表复制，JDK 1.8 扩容优化部分\n                    Node<K,V> loHead = null, loTail = null;\n                    Node<K,V> hiHead = null, hiTail = null;\n                    Node<K,V> next;\n                    do {\n                        next = e.next;\n                        //原索引\n                        if ((e.hash & oldCap) == 0) {\n                            if (loTail == null)\n                                loHead = e;\n                            else\n                                loTail.next = e;\n                            loTail = e;\n                        }\n                        //原索引 + oldCap\n                        else {\n                            if (hiTail == null)\n                                hiHead = e;\n                            else\n                                hiTail.next = e;\n                            hiTail = e;\n                        }\n                    } while ((e = next) != null);\n                    //将原索引放到哈希桶中\n                    if (loTail != null) {\n                        loTail.next = null;\n                        newTab[j] = loHead;\n                    }\n                    //将原索引+oldCap 放到哈希桶中\n                    if (hiTail != null) {\n                        hiTail.next = null;\n                        newTab[j + oldCap] = hiHead;\n                    }\n                }\n            }\n        }\n    }\n    return newTab;\n}\n```\n\n## 6. HashMap 多线程操作导致死循环问题\n\n[详细分析](https://coolshell.cn/articles/9606.html)\n\n主要原因在于 并发下的Rehash 会造成元素之间会形成一个循环链表。不过，jdk 1.8 后解决了这个问题，但是还是不建议在多线程下使用 HashMap,因为多线程下使用 HashMap 还是会存在其他问题比如数据丢失。并发环境下推荐使用 ConcurrentHashMap 。\n\n## 7. HashMap 和 HashTable的区别\n\n1. **线程是否安全：** HashMap 是非线程安全的，HashTable 是线程安全的；HashTable 内部的方法基本都经过`synchronized` 修饰。（如果你要保证线程安全的话就使用 ConcurrentHashMap 吧！）；\n2. **效率：** 因为线程安全的问题，HashMap 要比 HashTable 效率高一点。另外，HashTable 基本被淘汰，不要在代码中使用它；\n3. **对Null key 和Null value的支持：** HashMap 中，null 可以作为键，这样的键只有一个，可以有一个或多个键所对应的值为 null。。但是在 HashTable 中 put 进的键值只要有一个 null，直接抛出 NullPointerException。\n4. **初始容量大小和每次扩充容量大小的不同 ：** ①创建时如果不指定容量初始值，Hashtable 默认的初始大小为11，之后每次扩充，容量变为原来的2n+1。HashMap 默认的初始化大小为16。之后每次扩充，容量变为原来的2倍。②创建时如果给定了容量初始值，那么 Hashtable 会直接使用你给定的大小，而 HashMap 会将其扩充为2的幂次方大小（HashMap 中的`tableSizeFor()`方法保证，下面给出了源代码）。也就是说 HashMap 总是使用2的幂作为哈希表的大小。\n5. **底层数据结构：** JDK1.8 以后的 HashMap 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。Hashtable 没有这样的机制。\n\nHashMap 中带有初始化容量的构造函数：\n\n```java\npublic HashMap(int initialCapacity, float loadFactor) {\n    if (initialCapacity < 0)\n        throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n                                           initialCapacity);\n    if (initialCapacity > MAXIMUM_CAPACITY)\n        initialCapacity = MAXIMUM_CAPACITY;\n    if (loadFactor <= 0 || Float.isNaN(loadFactor))\n        throw new IllegalArgumentException(\"Illegal load factor: \" +\n                                           loadFactor);\n    this.loadFactor = loadFactor;\n    this.threshold = tableSizeFor(initialCapacity);\t // 保证HashMap总是使用2的幂作为哈希表大小\n}\npublic HashMap(int initialCapacity) {\n    this(initialCapacity, DEFAULT_LOAD_FACTOR);\n}\n\nstatic final int tableSizeFor(int cap) {\n    int n = cap - 1;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n}\n```\n\n更多关于 HashMap 的知识点参考 [这里](https://snailclimb.gitee.io/javaguide-interview/#/./docs/b-2Java集合?id=_226-hashmap-和-hashset区别)\n\n","source":"_posts/HashMap实现原理及其重要方法.md","raw":"---\ntitle: HashMap实现原理及其重要方法\ndate: 2020-04-05 23:42:08\ntags:\n  - HashMap\n  - Java\ncategories: Java\nvisible: hide\ntypora-copy-images-to: ..\\..\\juliajiang\\source\\pictures\n\n---\n\n本文主要介绍了 HashMap 的底层实现结构、存储结构以及JDK1.8中相关的优化。同时，也分析了一些HashMap的重要方法，比如哈希桶索引位置、查询、新增、扩容。另外涉及几个细节性的问题，比如加载因子、HashMap与HashTable的区别等等。\n\n<!--more-->\n\n## 1. 部分源码分析\n\n```java\npublic class HashMap<K,V> extends AbstractMap<K,V>\n    implements Map<K,V>, Cloneable, Serializable {\n\n    private static final long serialVersionUID = 362498820763181265L;\n    \n    static final int DEFAULT_INITIAL_CAPACITY = 1 << 4; //HashMap初始化长度 16\n\n    static final int MAXIMUM_CAPACITY = 1 << 30;\t\t//HashMap 最大长度\n\n    static final float DEFAULT_LOAD_FACTOR = 0.75f;\t\t//默认的加载因子\n\n    static final int TREEIFY_THRESHOLD = 8;\t\t\t\t//转换红黑树的临界值，当链表长度大于此值时，会把链表结构转换为红黑树结构\n\n    static final int UNTREEIFY_THRESHOLD = 6;\t\t\t//转换链表的临界值，当链表长度小于此值时，会将红黑树结构转换为链表\n\n    static final int MIN_TREEIFY_CAPACITY = 64;\t\t\t//最小树容量\n    \n    static class Node<K,V> implements Map.Entry<K,V> {\n        final int hash;\t\t\t\t//用来定位数组索引位置\t\t\t\t\t\t\t\n        final K key;\n        V value;\n        Node<K,V> next;\t\t\t\t//链表的下一个node\n\t\t...\n    }\n    \n    transient Node<K,V>[] table;\t// Node[] table的初始化长度length(默认值是16)\n    \n    transient Set<Map.Entry<K,V>> entrySet;\n    \n    transient int size;\t\t\t// HashMap中实际存在的键值对数量\n    \n    transient int modCount;\t\t// 记录HashMap内部结构发生变化的次数\n    \n    int threshold;\t\t\t\t// HashMap所能容纳的最大数据量的Node(键值对)个数\n    \t\t\t\t\t\t\t// threshold = length * Load factor \n    \n    final float loadFactor;\t\t// 负载因子(默认值是0.75)\n    \n    // Hash 算法，共三步\n    static final int hash(Object key) {\n        int h;\n        // h = key.hashCode() 为第一步 取hashCode值\n        // h ^ (h >>> 16)  为第二步 高位参与运算\n        return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n    }\n    \n    /*\n    // jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的\n    // 计算该对象应该保存在table数组的哪个索引处\n    static int indexFor(int h, int length) {  \n    \t//第三步 取模运算\n     \treturn h & (length-1);  \n\t}\n    */\n    \n    \n```\n\n\n\n## 2. HashMap 底层是如何实现的？JDK1.8如何优化？\n\n从结构实现来讲，HashMap是数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的，如下如所示。\n\n<img src=\"/pictures/8db4a3bdfb238da1a1c4431d2b6e075c_720w.png\" alt=\"img\" style=\"zoom: 67%;\" />\n\nJDK1.8之所以添加红黑树是因为一旦链表过长，会严重影响HashMap的性能，而红黑树具有快速增删改查的特点，这样就可以有效的解决链表过长时操作比较慢的问题。\n\n这里需要讲明白两个问题：数据底层具体存储的是什么？这样的存储方式有什么优点呢？\n\n(1) 从源码可知，HashMap类中有一个非常重要的字段，就是 Node[] table，即哈希桶数组，明显它是一个Node的数组。Node是HashMap的一个内部类，实现了Map.Entry接口，本质是就是一个映射(键值对)。上图中的每个黑色圆点就是一个Node对象。Node 源码如下：\n\n```java\nstatic class Node<K,V> implements Map.Entry<K,V> {\n        final int hash;    //用来定位数组索引位置\n        final K key;\n        V value;\n        Node<K,V> next;   //链表的下一个node\n\n        Node(int hash, K key, V value, Node<K,V> next) { ... }\n        public final K getKey(){ ... }\n        public final V getValue() { ... }\n        public final String toString() { ... }\n        public final int hashCode() { ... }\n        public final V setValue(V newValue) { ... }\n        public final boolean equals(Object o) { ... }\n}\n```\n\n(2) HashMap就是使用哈希表来存储的。哈希表为解决冲突，可以采用开放地址法和链地址法等来解决问题，Java中HashMap采用了链地址法。链地址法，简单来说，就是数组加链表的结合。在每个数组元素上都一个链表结构，当数据被Hash后，得到数组下标，把数据放在对应下标元素的链表上。例如如下代码：\n\n```java\n map.put(\"julia\",\"jiang\");\n```\n\n系统将调用 ``\"julia\"`` 这个key的hashCode()方法得到其hashCode 值（该方法适用于每个Java对象），然后再通过Hash算法的后两步运算（具体见哈希桶数组索引位置分析）来定位该键值对的存储位置，有时两个key会定位到相同的位置，表示发生了Hash碰撞。当然Hash算法计算结果越分散均匀，Hash碰撞的概率就越小，map的存取效率就会越高。\n\n## 3. 什么是加载因子？加载因子为什么是0.75？\n\n加载因子也叫扩容因子或负载因子，用来判断什么时候进行扩容的，假如加载因子是0.5，HashMap的初始化容量是16，那么当HashMap中有16*0.5=8个元素时，HashMap就会进行扩容。\n\n那加载因子为什么是 0.75 而不是 0.5 或者 1.0 呢？\n\n这其实是出于容量和性能之间平衡的结果：\n\n1. 当加载因子设置比较大的时候，扩容的门槛就被提高了，扩容发生的频率比较低，占用的空间会比较小，但此时发生Hash冲突的几率就会提升，因此需要更复杂的数据结构来存储元素，这样对元素的操作时间就会增加，运行效率也会因此降低；\n2. 而当加载因子值比较小的时候，扩容的门槛会比较低，因此会占用更多的空间，此时元素的存储就比较稀疏，发生哈希冲突的可能性就比较小，因此操作性能会比较高。\n\n所以综合了以上情况就取了一个 0.5 到 1.0 的平均数 0.75 作为加载因子。\n\n## 4. HashMap源码中有哪些重要方法？\n\n### 4.1 确定哈希桶数组索引位置\n\n不管增加、删除、查找键值对，定位到哈希桶数组的位置都是很关键的第一步。前面说过HashMap的数据结构是数组和链表的结合，所以我们当然希望这个HashMap里面的元素位置尽量分布均匀些，尽量使得每个位置上的元素数量只有一个，那么当我们用hash算法求得这个位置的时候，马上就可以知道对应位置的元素就是我们要的，不用遍历链表，大大优化了查询的效率。HashMap定位数组索引位置，直接决定了hash方法的离散性能。先看看源码的实现(方法一+方法二):\n\n```java\n方法一：\nstatic final int hash(Object key) {   //jdk1.8\n     int h;\n     // h = key.hashCode() 为第一步 取hashCode值\n     // h ^ (h >>> 16)  为第二步 高位参与运算\n     return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n}\n方法二：\nstatic int indexFor(int h, int length) {  //jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的\n     return h & (length-1);  //第三步 取模运算\n}\n```\n\n这里的Hash算法本质上就是三步：**取key的hashCode值、高位运算、取模运算**。\n\n对于任意给定的对象，只要它的hashCode()返回值相同，那么程序调用方法一所计算得到的Hash码值总是相同的。我们首先想到的就是把hash值对数组长度取模运算，这样一来，元素的分布相对来说是比较均匀的。但是，模运算的消耗还是比较大的，在HashMap中是这样做的：调用方法二来计算该对象应该保存在table数组的哪个索引处。\n\n这个方法非常巧妙，它通过h & (table.length -1)来得到该对象的保存位，而HashMap底层数组的长度总是2的n次方，这是HashMap在速度上的优化。当length总是2的n次方时，h& (length-1)运算等价于对length取模，也就是h%length，但是&比%具有更高的效率。\n\n在JDK1.8的实现中，优化了高位运算的算法，通过hashCode()的高16位异或低16位实现的：(h = k.hashCode()) ^ (h >>> 16)，主要是从速度、功效、质量来考虑的，这么做可以在数组table的length比较小的时候，也能保证考虑到高低Bit都参与到Hash的计算中，同时不会有太大的开销。\n\n下面举例说明下，n为table的长度。\n\n<img src=\"/pictures/8e8203c1b51be6446cda4026eaaccf19_720w.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n### 4.2 查询\n\n```java\npublic V get(Object key) {\n    Node<K,V> e;\n    //对 key 进行哈希操作\n    return (e = getNode(hash(key), key)) == null ? null : e.value;\n}\n\nfinal Node<K,V> getNode(int hash, Object key) {\n    Node<K,V>[] tab; \n    Node<K,V> first, e; \n    int n; \n    K k;\n    //非空判断\n    if ((tab = table) != null && (n = tab.length) > 0 &&\n        (first = tab[(n - 1) & hash]) != null) {\n        //判断第一个元素是否是要查询的元素\n        if (first.hash == hash && // always check first node\n            ((k = first.key) == key || (key != null && key.equals(k))))\n            return first;\n        //下一个节点非空判断\n        if ((e = first.next) != null) {\n            //如果第一个节点是树结构，则使用 getTreeNode 直接获取相应的数据\n            if (first instanceof TreeNode)\n                return ((TreeNode<K,V>)first).getTreeNode(hash, key);\n            do { //非树结构，循环节点判断\n                if (e.hash == hash &&   //hash相等，并且 key相等，则返回此节点\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    return e;\n            } while ((e = e.next) != null);\n        }\n    }\n    return null;\n}\n```\n\n从以上源码可以看出，当哈希冲突时我们需要通过判断 key 值是否相等，才能确认此元素是不是我们想要的元素。\n\n### 4.3 新增\n\n```java\npublic V put(K key, V value) {\n    //对 key 进行哈希操作\n    return putVal(hash(key), key, value, false, true);\n}\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n               boolean evict) {\n    Node<K,V>[] tab; \n    Node<K,V> p; \n    int n, i;\n    //哈希表为空则创建表\n    if ((tab = table) == null || (n = tab.length) == 0)\n        n = (tab = resize()).length;\n    //根据 key 的哈希值计算出要插入的数组索引i\n    if ((p = tab[i = (n - 1) & hash]) == null)\n        //如果 tab[i] 为 null，则直接插入\n        tab[i] = newNode(hash, key, value, null);\n    else {\n        Node<K,V> e; \n        K k;\n        //如果key相等，直接覆盖 value\n        if (p.hash == hash &&\n            ((k = p.key) == key || (key != null && key.equals(k))))\n            e = p;\n        //如果 key 不存在，判断是否为红黑树\n        else if (p instanceof TreeNode)\n            //红黑树直接插入键值对\n            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n        else {\n            //为链表结构，循环准备插入\n            for (int binCount = 0; ; ++binCount) {\n                //下一个元素为空时\n                if ((e = p.next) == null) {\n                    p.next = newNode(hash, key, value, null);\n                    //链表长度大于 8 时转换为红黑树进行处理\n                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                        treeifyBin(tab, hash);\n                    break;\n                }\n                //key 已经存在直接覆盖 value\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    break;\n                p = e;\n            }\n        }\n        if (e != null) { // existing mapping for key\n            V oldValue = e.value;\n            if (!onlyIfAbsent || oldValue == null)\n                e.value = value;\n            afterNodeAccess(e);\n            return oldValue;\n        }\n    }\n    ++modCount;\n    //超过最大容量，扩容\n    if (++size > threshold)\n        resize();\n    afterNodeInsertion(evict);\n    return null;\n}\n```\n\n新增方法的执行流程如下：\n\n![preview](/pictures/58e67eae921e4b431782c07444af824e_r.jpg)\n\n### 4.4 扩容\n\n[参考博文](https://zhuanlan.zhihu.com/p/21673805)\n\n#### JDK1.7 的扩容\n\n扩容(resize)就是重新计算容量，向HashMap对象里不停的添加元素，而HashMap对象内部的数组无法装载更多的元素时，对象就需要扩大数组的长度，以便能装入更多的元素。当然Java里的数组是无法自动扩容的，方法是使用一个新的数组代替已有的容量小的数组，就像我们用一个小桶装水，如果想装更多的水，就得换大水桶。\n\n我们分析下resize的源码，鉴于JDK1.8融入了红黑树，较复杂，为了便于理解我们仍然使用JDK1.7的代码，好理解一些，本质上区别不大，具体区别后文再说。\n\n```java\n 1 void resize(int newCapacity) {   //传入新的容量\n 2     Entry[] oldTable = table;    //引用扩容前的Entry数组\n 3     int oldCapacity = oldTable.length;         \n 4     if (oldCapacity == MAXIMUM_CAPACITY) {  //扩容前的数组大小如果已经达到最大(2^30)了\n 5         threshold = Integer.MAX_VALUE; //修改阈值为int的最大值(2^31-1)，这样以后就不会扩容了\n 6         return;\n 7     }\n 8  \n 9     Entry[] newTable = new Entry[newCapacity];  //初始化一个新的Entry数组\n10     transfer(newTable);                         //！！将数据转移到新的Entry数组里\n11     table = newTable;                           //HashMap的table属性引用新的Entry数组\n12     threshold = (int)(newCapacity * loadFactor);//修改阈值\n13 }\n```\n\n这里就是使用一个容量更大的数组来代替已有的容量小的数组，transfer()方法将原有Entry数组的元素拷贝到新的Entry数组里。\n\n```java\nvoid transfer(Entry[] newTable) {\n   Entry[] src = table;                   //src引用了旧的Entry数组\n   int newCapacity = newTable.length;\n   for (int j = 0; j < src.length; j++) { //遍历旧的Entry数组\n       Entry<K,V> e = src[j];             //取得旧Entry数组的每个元素\n       if (e != null) {\n           src[j] = null;//释放旧Entry数组的对象引用（for循环后，旧的Entry数组不再引用任何对象）\n           do {\n               Entry<K,V> next = e.next;\n               int i = indexFor(e.hash, newCapacity); //！！重新计算每个元素在数组中的位置\n               e.next = newTable[i]; //标记[1]\n               newTable[i] = e;      //将元素放在数组上\n               e = next;             //访问下一个Entry链上的元素\n           } while (e != null);\n       }\n   }\n}\n\n// jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的\n// 计算该对象应该保存在table数组的哪个索引处\nstatic int indexFor(int h, int length) {  \n\t//第三步 取模运算\n \treturn h & (length-1);  \n}\n// 确定哈希桶数组索引位置\nstatic final int hash(Object key) {\n    int h;\n    // h = key.hashCode() 为第一步 取hashCode值\n    // h ^ (h >>> 16)  为第二步 高位参与运算\n    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n}\n```\n\nnewTable[i]的引用赋给了e.next，也就是使用了单链表的头插入方式，同一位置上新元素总会被放在链表的头部位置；这样先放在一个索引上的元素终会被放到Entry链的尾部(如果发生了hash冲突的话），这一点和Jdk1.8有区别，下文详解。在旧数组中同一条Entry链上的元素，通过重新计算索引位置后，有可能被放到了新数组的不同位置上。下面举个例子说明下扩容过程。\n\n这里我们假设 ``hashCode()`` 的哈希算法就是简单的 key % (数组长度)。其中的哈希桶数组table的size=2， 所以key = 3、7、5，put顺序依次为 5、7、3。在mod 2以后都冲突在table[1]这里了。这里假设负载因子 loadFactor=1，即当键值对的实际大小size 大于 table的实际大小时进行扩容。\n\n接下来的三个步骤是哈希桶数组 resize成4，然后所有的Node重新rehash的过程。\n\n![preview](/pictures/e5aa99e811d1814e010afa7779b759d4_r.jpg)\n\n#### JDK1.8 在扩容方面的优化\n\n下面我们讲解下JDK1.8做了哪些优化。经过观测可以发现，我们使用的是2次幂的扩展(指长度扩为原来2倍)，所以，元素的位置要么是在原位置，要么是在原位置再移动2次幂的位置。看下图可以明白这句话的意思，n为table的长度，图（a）表示扩容前的key1和key2两种key确定索引位置的示例，图（b）表示扩容后key1和key2两种key确定索引位置的示例，其中hash1是key1对应的哈希与高位运算结果。\n\n![preview](/pictures/a285d9b2da279a18b052fe5eed69afe9_r.jpg)\n\n元素在重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit(红色)，因此新的index就会发生这样的变化：\n\n![img](/pictures/b2cb057773e3d67976c535d6ef547d51_720w.png)\n\n因此，我们在扩充HashMap的时候，不需要像JDK1.7的实现那样重新计算hash，只需要看看原来的hash值新增的那个bit是1还是0就好了，是0的话索引没变，是1的话索引变成“原索引+oldCap”，可以看看下图为16扩充为32的resize示意图：\n\n![img](/pictures/544caeb82a329fa49cc99842818ed1ba_720w.png)\n\n这个设计确实非常的巧妙，既省去了重新计算hash值的时间，而且同时，由于新增的1bit是0还是1可以认为是随机的，因此resize的过程，均匀的把之前的冲突的节点分散到新的bucket了。这一块就是JDK1.8新增的优化点。有一点注意区别，JDK1.7中rehash的时候，旧链表迁移新链表的时候，如果在新表的数组索引位置相同，则链表元素会倒置，但是从上图可以看出，JDK1.8不会倒置。\n\n#### JDK1.8 中扩容源码\n\n```java\nfinal Node<K,V>[] resize() {\n    //扩容前数组\n    Node<K,V>[] oldTab = table;\n    //扩容前数组的大小和阈值\n    int oldCap = (oldTab == null) ? 0 : oldTab.length;\n    int oldThr = threshold;\n    //预定义新数组的大小和阈值\n    int newCap, newThr = 0;\n    if (oldCap > 0) {\n        //超过最大值就不可以扩容了\n        if (oldCap >= MAXIMUM_CAPACITY) {\n            threshold = Integer.MAX_VALUE;\n            return oldTab;\n        }\n        //扩容容量为当前容量的两倍，但不能超过MAXIMUM_CAPACITY\n        else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                oldCap >= DEFAULT_INITIAL_CAPACITY)\n            newThr = oldThr << 1; // double threshold\n    }\n    //前数组没有数据，前数组大小为0，新数组容量设置为初始阈值\n    else if (oldThr > 0) // initial capacity was placed in threshold\n        newCap = oldThr;\n    //初始阈值为0，则使用默认的初始化容器\n    else {               // zero initial threshold signifies using defaults\n        newCap = DEFAULT_INITIAL_CAPACITY;\n        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n    }\n    //如果新容量等于0\n    if (newThr == 0) {\n        float ft = (float)newCap * loadFactor;\n        newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                (int)ft : Integer.MAX_VALUE);\n    }\n    threshold = newThr;\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n    Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n    //开始赋值，将新的容量赋值给 table\n    table = newTab;\n    //原数据不为空，将原数据赋值到table中\n    if (oldTab != null) {\n        //根据容量循环数组，赋值非空元素到新table\n        for (int j = 0; j < oldCap; ++j) {\n            Node<K,V> e;\n            if ((e = oldTab[j]) != null) {\n                oldTab[j] = null;\n                //如果链表只有一个，则进行直接赋值\n                if (e.next == null)\n                    newTab[e.hash & (newCap - 1)] = e;\n                //如果是红黑树存储\n                else if (e instanceof TreeNode)\n                    ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n                else { \n                    //链表复制，JDK 1.8 扩容优化部分\n                    Node<K,V> loHead = null, loTail = null;\n                    Node<K,V> hiHead = null, hiTail = null;\n                    Node<K,V> next;\n                    do {\n                        next = e.next;\n                        //原索引\n                        if ((e.hash & oldCap) == 0) {\n                            if (loTail == null)\n                                loHead = e;\n                            else\n                                loTail.next = e;\n                            loTail = e;\n                        }\n                        //原索引 + oldCap\n                        else {\n                            if (hiTail == null)\n                                hiHead = e;\n                            else\n                                hiTail.next = e;\n                            hiTail = e;\n                        }\n                    } while ((e = next) != null);\n                    //将原索引放到哈希桶中\n                    if (loTail != null) {\n                        loTail.next = null;\n                        newTab[j] = loHead;\n                    }\n                    //将原索引+oldCap 放到哈希桶中\n                    if (hiTail != null) {\n                        hiTail.next = null;\n                        newTab[j + oldCap] = hiHead;\n                    }\n                }\n            }\n        }\n    }\n    return newTab;\n}\n```\n\n## 6. HashMap 多线程操作导致死循环问题\n\n[详细分析](https://coolshell.cn/articles/9606.html)\n\n主要原因在于 并发下的Rehash 会造成元素之间会形成一个循环链表。不过，jdk 1.8 后解决了这个问题，但是还是不建议在多线程下使用 HashMap,因为多线程下使用 HashMap 还是会存在其他问题比如数据丢失。并发环境下推荐使用 ConcurrentHashMap 。\n\n## 7. HashMap 和 HashTable的区别\n\n1. **线程是否安全：** HashMap 是非线程安全的，HashTable 是线程安全的；HashTable 内部的方法基本都经过`synchronized` 修饰。（如果你要保证线程安全的话就使用 ConcurrentHashMap 吧！）；\n2. **效率：** 因为线程安全的问题，HashMap 要比 HashTable 效率高一点。另外，HashTable 基本被淘汰，不要在代码中使用它；\n3. **对Null key 和Null value的支持：** HashMap 中，null 可以作为键，这样的键只有一个，可以有一个或多个键所对应的值为 null。。但是在 HashTable 中 put 进的键值只要有一个 null，直接抛出 NullPointerException。\n4. **初始容量大小和每次扩充容量大小的不同 ：** ①创建时如果不指定容量初始值，Hashtable 默认的初始大小为11，之后每次扩充，容量变为原来的2n+1。HashMap 默认的初始化大小为16。之后每次扩充，容量变为原来的2倍。②创建时如果给定了容量初始值，那么 Hashtable 会直接使用你给定的大小，而 HashMap 会将其扩充为2的幂次方大小（HashMap 中的`tableSizeFor()`方法保证，下面给出了源代码）。也就是说 HashMap 总是使用2的幂作为哈希表的大小。\n5. **底层数据结构：** JDK1.8 以后的 HashMap 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。Hashtable 没有这样的机制。\n\nHashMap 中带有初始化容量的构造函数：\n\n```java\npublic HashMap(int initialCapacity, float loadFactor) {\n    if (initialCapacity < 0)\n        throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n                                           initialCapacity);\n    if (initialCapacity > MAXIMUM_CAPACITY)\n        initialCapacity = MAXIMUM_CAPACITY;\n    if (loadFactor <= 0 || Float.isNaN(loadFactor))\n        throw new IllegalArgumentException(\"Illegal load factor: \" +\n                                           loadFactor);\n    this.loadFactor = loadFactor;\n    this.threshold = tableSizeFor(initialCapacity);\t // 保证HashMap总是使用2的幂作为哈希表大小\n}\npublic HashMap(int initialCapacity) {\n    this(initialCapacity, DEFAULT_LOAD_FACTOR);\n}\n\nstatic final int tableSizeFor(int cap) {\n    int n = cap - 1;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n}\n```\n\n更多关于 HashMap 的知识点参考 [这里](https://snailclimb.gitee.io/javaguide-interview/#/./docs/b-2Java集合?id=_226-hashmap-和-hashset区别)\n\n","slug":"HashMap实现原理及其重要方法","published":1,"updated":"2020-12-26T12:26:49.152Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5mkwo001gnyl1fjeh32dv","content":"<p>本文主要介绍了 HashMap 的底层实现结构、存储结构以及JDK1.8中相关的优化。同时，也分析了一些HashMap的重要方法，比如哈希桶索引位置、查询、新增、扩容。另外涉及几个细节性的问题，比如加载因子、HashMap与HashTable的区别等等。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"1-部分源码分析\"><a href=\"#1-部分源码分析\" class=\"headerlink\" title=\"1. 部分源码分析\"></a>1. 部分源码分析</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashMap</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractMap</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">362498820763181265L</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_INITIAL_CAPACITY = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">4</span>; <span class=\"comment\">//HashMap初始化长度 16</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAXIMUM_CAPACITY = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">30</span>;\t\t<span class=\"comment\">//HashMap 最大长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> DEFAULT_LOAD_FACTOR = <span class=\"number\">0.75f</span>;\t\t<span class=\"comment\">//默认的加载因子</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TREEIFY_THRESHOLD = <span class=\"number\">8</span>;\t\t\t\t<span class=\"comment\">//转换红黑树的临界值，当链表长度大于此值时，会把链表结构转换为红黑树结构</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> UNTREEIFY_THRESHOLD = <span class=\"number\">6</span>;\t\t\t<span class=\"comment\">//转换链表的临界值，当链表长度小于此值时，会将红黑树结构转换为链表</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MIN_TREEIFY_CAPACITY = <span class=\"number\">64</span>;\t\t\t<span class=\"comment\">//最小树容量</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> hash;\t\t\t\t<span class=\"comment\">//用来定位数组索引位置\t\t\t\t\t\t\t</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> K key;</span><br><span class=\"line\">        V value;</span><br><span class=\"line\">        Node&lt;K,V&gt; next;\t\t\t\t<span class=\"comment\">//链表的下一个node</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">transient</span> Node&lt;K,V&gt;[] table;\t<span class=\"comment\">// Node[] table的初始化长度length(默认值是16)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> size;\t\t\t<span class=\"comment\">// HashMap中实际存在的键值对数量</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> modCount;\t\t<span class=\"comment\">// 记录HashMap内部结构发生变化的次数</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> threshold;\t\t\t\t<span class=\"comment\">// HashMap所能容纳的最大数据量的Node(键值对)个数</span></span><br><span class=\"line\">    \t\t\t\t\t\t\t<span class=\"comment\">// threshold = length * Load factor </span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> loadFactor;\t\t<span class=\"comment\">// 负载因子(默认值是0.75)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Hash 算法，共三步</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> h;</span><br><span class=\"line\">        <span class=\"comment\">// h = key.hashCode() 为第一步 取hashCode值</span></span><br><span class=\"line\">        <span class=\"comment\">// h ^ (h &gt;&gt;&gt; 16)  为第二步 高位参与运算</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (key == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    // jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的</span></span><br><span class=\"line\"><span class=\"comment\">    // 计算该对象应该保存在table数组的哪个索引处</span></span><br><span class=\"line\"><span class=\"comment\">    static int indexFor(int h, int length) &#123;  </span></span><br><span class=\"line\"><span class=\"comment\">    \t//第三步 取模运算</span></span><br><span class=\"line\"><span class=\"comment\">     \treturn h &amp; (length-1);  </span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-HashMap-底层是如何实现的？JDK1-8如何优化？\"><a href=\"#2-HashMap-底层是如何实现的？JDK1-8如何优化？\" class=\"headerlink\" title=\"2. HashMap 底层是如何实现的？JDK1.8如何优化？\"></a>2. HashMap 底层是如何实现的？JDK1.8如何优化？</h2><p>从结构实现来讲，HashMap是数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的，如下如所示。</p>\n<img src=\"/pictures/8db4a3bdfb238da1a1c4431d2b6e075c_720w.png\" alt=\"img\" style=\"zoom: 67%;\" />\n\n<p>JDK1.8之所以添加红黑树是因为一旦链表过长，会严重影响HashMap的性能，而红黑树具有快速增删改查的特点，这样就可以有效的解决链表过长时操作比较慢的问题。</p>\n<p>这里需要讲明白两个问题：数据底层具体存储的是什么？这样的存储方式有什么优点呢？</p>\n<p>(1) 从源码可知，HashMap类中有一个非常重要的字段，就是 Node[] table，即哈希桶数组，明显它是一个Node的数组。Node是HashMap的一个内部类，实现了Map.Entry接口，本质是就是一个映射(键值对)。上图中的每个黑色圆点就是一个Node对象。Node 源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> hash;    <span class=\"comment\">//用来定位数组索引位置</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> K key;</span><br><span class=\"line\">        V value;</span><br><span class=\"line\">        Node&lt;K,V&gt; next;   <span class=\"comment\">//链表的下一个node</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Node(<span class=\"keyword\">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123; ... &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> K <span class=\"title\">getKey</span><span class=\"params\">()</span></span>&#123; ... &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123; ... &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123; ... &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123; ... &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">setValue</span><span class=\"params\">(V newValue)</span> </span>&#123; ... &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(2) HashMap就是使用哈希表来存储的。哈希表为解决冲突，可以采用开放地址法和链地址法等来解决问题，Java中HashMap采用了链地址法。链地址法，简单来说，就是数组加链表的结合。在每个数组元素上都一个链表结构，当数据被Hash后，得到数组下标，把数据放在对应下标元素的链表上。例如如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.put(<span class=\"string\">\"julia\"</span>,<span class=\"string\">\"jiang\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>系统将调用 <code>&quot;julia&quot;</code> 这个key的hashCode()方法得到其hashCode 值（该方法适用于每个Java对象），然后再通过Hash算法的后两步运算（具体见哈希桶数组索引位置分析）来定位该键值对的存储位置，有时两个key会定位到相同的位置，表示发生了Hash碰撞。当然Hash算法计算结果越分散均匀，Hash碰撞的概率就越小，map的存取效率就会越高。</p>\n<h2 id=\"3-什么是加载因子？加载因子为什么是0-75？\"><a href=\"#3-什么是加载因子？加载因子为什么是0-75？\" class=\"headerlink\" title=\"3. 什么是加载因子？加载因子为什么是0.75？\"></a>3. 什么是加载因子？加载因子为什么是0.75？</h2><p>加载因子也叫扩容因子或负载因子，用来判断什么时候进行扩容的，假如加载因子是0.5，HashMap的初始化容量是16，那么当HashMap中有16*0.5=8个元素时，HashMap就会进行扩容。</p>\n<p>那加载因子为什么是 0.75 而不是 0.5 或者 1.0 呢？</p>\n<p>这其实是出于容量和性能之间平衡的结果：</p>\n<ol>\n<li>当加载因子设置比较大的时候，扩容的门槛就被提高了，扩容发生的频率比较低，占用的空间会比较小，但此时发生Hash冲突的几率就会提升，因此需要更复杂的数据结构来存储元素，这样对元素的操作时间就会增加，运行效率也会因此降低；</li>\n<li>而当加载因子值比较小的时候，扩容的门槛会比较低，因此会占用更多的空间，此时元素的存储就比较稀疏，发生哈希冲突的可能性就比较小，因此操作性能会比较高。</li>\n</ol>\n<p>所以综合了以上情况就取了一个 0.5 到 1.0 的平均数 0.75 作为加载因子。</p>\n<h2 id=\"4-HashMap源码中有哪些重要方法？\"><a href=\"#4-HashMap源码中有哪些重要方法？\" class=\"headerlink\" title=\"4. HashMap源码中有哪些重要方法？\"></a>4. HashMap源码中有哪些重要方法？</h2><h3 id=\"4-1-确定哈希桶数组索引位置\"><a href=\"#4-1-确定哈希桶数组索引位置\" class=\"headerlink\" title=\"4.1 确定哈希桶数组索引位置\"></a>4.1 确定哈希桶数组索引位置</h3><p>不管增加、删除、查找键值对，定位到哈希桶数组的位置都是很关键的第一步。前面说过HashMap的数据结构是数组和链表的结合，所以我们当然希望这个HashMap里面的元素位置尽量分布均匀些，尽量使得每个位置上的元素数量只有一个，那么当我们用hash算法求得这个位置的时候，马上就可以知道对应位置的元素就是我们要的，不用遍历链表，大大优化了查询的效率。HashMap定位数组索引位置，直接决定了hash方法的离散性能。先看看源码的实现(方法一+方法二):</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法一：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object key)</span> </span>&#123;   <span class=\"comment\">//jdk1.8</span></span><br><span class=\"line\">     <span class=\"keyword\">int</span> h;</span><br><span class=\"line\">     <span class=\"comment\">// h = key.hashCode() 为第一步 取hashCode值</span></span><br><span class=\"line\">     <span class=\"comment\">// h ^ (h &gt;&gt;&gt; 16)  为第二步 高位参与运算</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> (key == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">方法二：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">indexFor</span><span class=\"params\">(<span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span> length)</span> </span>&#123;  <span class=\"comment\">//jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> h &amp; (length-<span class=\"number\">1</span>);  <span class=\"comment\">//第三步 取模运算</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的Hash算法本质上就是三步：<strong>取key的hashCode值、高位运算、取模运算</strong>。</p>\n<p>对于任意给定的对象，只要它的hashCode()返回值相同，那么程序调用方法一所计算得到的Hash码值总是相同的。我们首先想到的就是把hash值对数组长度取模运算，这样一来，元素的分布相对来说是比较均匀的。但是，模运算的消耗还是比较大的，在HashMap中是这样做的：调用方法二来计算该对象应该保存在table数组的哪个索引处。</p>\n<p>这个方法非常巧妙，它通过h &amp; (table.length -1)来得到该对象的保存位，而HashMap底层数组的长度总是2的n次方，这是HashMap在速度上的优化。当length总是2的n次方时，h&amp; (length-1)运算等价于对length取模，也就是h%length，但是&amp;比%具有更高的效率。</p>\n<p>在JDK1.8的实现中，优化了高位运算的算法，通过hashCode()的高16位异或低16位实现的：(h = k.hashCode()) ^ (h &gt;&gt;&gt; 16)，主要是从速度、功效、质量来考虑的，这么做可以在数组table的length比较小的时候，也能保证考虑到高低Bit都参与到Hash的计算中，同时不会有太大的开销。</p>\n<p>下面举例说明下，n为table的长度。</p>\n<img src=\"/pictures/8e8203c1b51be6446cda4026eaaccf19_720w.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n<h3 id=\"4-2-查询\"><a href=\"#4-2-查询\" class=\"headerlink\" title=\"4.2 查询\"></a>4.2 查询</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt; e;</span><br><span class=\"line\">    <span class=\"comment\">//对 key 进行哈希操作</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (e = getNode(hash(key), key)) == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : e.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> Node&lt;K,V&gt; <span class=\"title\">getNode</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, Object key)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; </span><br><span class=\"line\">    Node&lt;K,V&gt; first, e; </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n; </span><br><span class=\"line\">    K k;</span><br><span class=\"line\">    <span class=\"comment\">//非空判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) != <span class=\"keyword\">null</span> &amp;&amp; (n = tab.length) &gt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        (first = tab[(n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断第一个元素是否是要查询的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first.hash == hash &amp;&amp; <span class=\"comment\">// always check first node</span></span><br><span class=\"line\">            ((k = first.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> first;</span><br><span class=\"line\">        <span class=\"comment\">//下一个节点非空判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((e = first.next) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果第一个节点是树结构，则使用 getTreeNode 直接获取相应的数据</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (first <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123; <span class=\"comment\">//非树结构，循环节点判断</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;   <span class=\"comment\">//hash相等，并且 key相等，则返回此节点</span></span><br><span class=\"line\">                    ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从以上源码可以看出，当哈希冲突时我们需要通过判断 key 值是否相等，才能确认此元素是不是我们想要的元素。</p>\n<h3 id=\"4-3-新增\"><a href=\"#4-3-新增\" class=\"headerlink\" title=\"4.3 新增\"></a>4.3 新增</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//对 key 进行哈希操作</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> putVal(hash(key), key, value, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> V <span class=\"title\">putVal</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, K key, V value, <span class=\"keyword\">boolean</span> onlyIfAbsent,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">               <span class=\"keyword\">boolean</span> evict)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; </span><br><span class=\"line\">    Node&lt;K,V&gt; p; </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, i;</span><br><span class=\"line\">    <span class=\"comment\">//哈希表为空则创建表</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) == <span class=\"keyword\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        n = (tab = resize()).length;</span><br><span class=\"line\">    <span class=\"comment\">//根据 key 的哈希值计算出要插入的数组索引i</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((p = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"comment\">//如果 tab[i] 为 null，则直接插入</span></span><br><span class=\"line\">        tab[i] = newNode(hash, key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; e; </span><br><span class=\"line\">        K k;</span><br><span class=\"line\">        <span class=\"comment\">//如果key相等，直接覆盖 value</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.hash == hash &amp;&amp;</span><br><span class=\"line\">            ((k = p.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            e = p;</span><br><span class=\"line\">        <span class=\"comment\">//如果 key 不存在，判断是否为红黑树</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">            <span class=\"comment\">//红黑树直接插入键值对</span></span><br><span class=\"line\">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class=\"keyword\">this</span>, tab, hash, key, value);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//为链表结构，循环准备插入</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>; ; ++binCount) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//下一个元素为空时</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((e = p.next) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    p.next = newNode(hash, key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    <span class=\"comment\">//链表长度大于 8 时转换为红黑树进行处理</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>) <span class=\"comment\">// -1 for 1st</span></span><br><span class=\"line\">                        treeifyBin(tab, hash);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//key 已经存在直接覆盖 value</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                    ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                p = e;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// existing mapping for key</span></span><br><span class=\"line\">            V oldValue = e.value;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!onlyIfAbsent || oldValue == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                e.value = value;</span><br><span class=\"line\">            afterNodeAccess(e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ++modCount;</span><br><span class=\"line\">    <span class=\"comment\">//超过最大容量，扩容</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (++size &gt; threshold)</span><br><span class=\"line\">        resize();</span><br><span class=\"line\">    afterNodeInsertion(evict);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>新增方法的执行流程如下：</p>\n<p><img src=\"/pictures/58e67eae921e4b431782c07444af824e_r.jpg\" alt=\"preview\"></p>\n<h3 id=\"4-4-扩容\"><a href=\"#4-4-扩容\" class=\"headerlink\" title=\"4.4 扩容\"></a>4.4 扩容</h3><p><a href=\"https://zhuanlan.zhihu.com/p/21673805\" target=\"_blank\" rel=\"noopener\">参考博文</a></p>\n<h4 id=\"JDK1-7-的扩容\"><a href=\"#JDK1-7-的扩容\" class=\"headerlink\" title=\"JDK1.7 的扩容\"></a>JDK1.7 的扩容</h4><p>扩容(resize)就是重新计算容量，向HashMap对象里不停的添加元素，而HashMap对象内部的数组无法装载更多的元素时，对象就需要扩大数组的长度，以便能装入更多的元素。当然Java里的数组是无法自动扩容的，方法是使用一个新的数组代替已有的容量小的数组，就像我们用一个小桶装水，如果想装更多的水，就得换大水桶。</p>\n<p>我们分析下resize的源码，鉴于JDK1.8融入了红黑树，较复杂，为了便于理解我们仍然使用JDK1.7的代码，好理解一些，本质上区别不大，具体区别后文再说。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">int</span> newCapacity)</span> </span>&#123;   <span class=\"comment\">//传入新的容量</span></span><br><span class=\"line\"> <span class=\"number\">2</span>     Entry[] oldTable = table;    <span class=\"comment\">//引用扩容前的Entry数组</span></span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"keyword\">int</span> oldCapacity = oldTable.length;         </span><br><span class=\"line\"> <span class=\"number\">4</span>     <span class=\"keyword\">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;  <span class=\"comment\">//扩容前的数组大小如果已经达到最大(2^30)了</span></span><br><span class=\"line\"> <span class=\"number\">5</span>         threshold = Integer.MAX_VALUE; <span class=\"comment\">//修改阈值为int的最大值(2^31-1)，这样以后就不会扩容了</span></span><br><span class=\"line\"> <span class=\"number\">6</span>         <span class=\"keyword\">return</span>;</span><br><span class=\"line\"> <span class=\"number\">7</span>     &#125;</span><br><span class=\"line\"> <span class=\"number\">8</span>  </span><br><span class=\"line\"> <span class=\"number\">9</span>     Entry[] newTable = <span class=\"keyword\">new</span> Entry[newCapacity];  <span class=\"comment\">//初始化一个新的Entry数组</span></span><br><span class=\"line\"><span class=\"number\">10</span>     transfer(newTable);                         <span class=\"comment\">//！！将数据转移到新的Entry数组里</span></span><br><span class=\"line\"><span class=\"number\">11</span>     table = newTable;                           <span class=\"comment\">//HashMap的table属性引用新的Entry数组</span></span><br><span class=\"line\"><span class=\"number\">12</span>     threshold = (<span class=\"keyword\">int</span>)(newCapacity * loadFactor);<span class=\"comment\">//修改阈值</span></span><br><span class=\"line\"><span class=\"number\">13</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里就是使用一个容量更大的数组来代替已有的容量小的数组，transfer()方法将原有Entry数组的元素拷贝到新的Entry数组里。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">transfer</span><span class=\"params\">(Entry[] newTable)</span> </span>&#123;</span><br><span class=\"line\">   Entry[] src = table;                   <span class=\"comment\">//src引用了旧的Entry数组</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> newCapacity = newTable.length;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; src.length; j++) &#123; <span class=\"comment\">//遍历旧的Entry数组</span></span><br><span class=\"line\">       Entry&lt;K,V&gt; e = src[j];             <span class=\"comment\">//取得旧Entry数组的每个元素</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">           src[j] = <span class=\"keyword\">null</span>;<span class=\"comment\">//释放旧Entry数组的对象引用（for循环后，旧的Entry数组不再引用任何对象）</span></span><br><span class=\"line\">           <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">               Entry&lt;K,V&gt; next = e.next;</span><br><span class=\"line\">               <span class=\"keyword\">int</span> i = indexFor(e.hash, newCapacity); <span class=\"comment\">//！！重新计算每个元素在数组中的位置</span></span><br><span class=\"line\">               e.next = newTable[i]; <span class=\"comment\">//标记[1]</span></span><br><span class=\"line\">               newTable[i] = e;      <span class=\"comment\">//将元素放在数组上</span></span><br><span class=\"line\">               e = next;             <span class=\"comment\">//访问下一个Entry链上的元素</span></span><br><span class=\"line\">           &#125; <span class=\"keyword\">while</span> (e != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的</span></span><br><span class=\"line\"><span class=\"comment\">// 计算该对象应该保存在table数组的哪个索引处</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">indexFor</span><span class=\"params\">(<span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span> length)</span> </span>&#123;  </span><br><span class=\"line\">\t<span class=\"comment\">//第三步 取模运算</span></span><br><span class=\"line\"> \t<span class=\"keyword\">return</span> h &amp; (length-<span class=\"number\">1</span>);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 确定哈希桶数组索引位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h;</span><br><span class=\"line\">    <span class=\"comment\">// h = key.hashCode() 为第一步 取hashCode值</span></span><br><span class=\"line\">    <span class=\"comment\">// h ^ (h &gt;&gt;&gt; 16)  为第二步 高位参与运算</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (key == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>newTable[i]的引用赋给了e.next，也就是使用了单链表的头插入方式，同一位置上新元素总会被放在链表的头部位置；这样先放在一个索引上的元素终会被放到Entry链的尾部(如果发生了hash冲突的话），这一点和Jdk1.8有区别，下文详解。在旧数组中同一条Entry链上的元素，通过重新计算索引位置后，有可能被放到了新数组的不同位置上。下面举个例子说明下扩容过程。</p>\n<p>这里我们假设 <code>hashCode()</code> 的哈希算法就是简单的 key % (数组长度)。其中的哈希桶数组table的size=2， 所以key = 3、7、5，put顺序依次为 5、7、3。在mod 2以后都冲突在table[1]这里了。这里假设负载因子 loadFactor=1，即当键值对的实际大小size 大于 table的实际大小时进行扩容。</p>\n<p>接下来的三个步骤是哈希桶数组 resize成4，然后所有的Node重新rehash的过程。</p>\n<p><img src=\"/pictures/e5aa99e811d1814e010afa7779b759d4_r.jpg\" alt=\"preview\"></p>\n<h4 id=\"JDK1-8-在扩容方面的优化\"><a href=\"#JDK1-8-在扩容方面的优化\" class=\"headerlink\" title=\"JDK1.8 在扩容方面的优化\"></a>JDK1.8 在扩容方面的优化</h4><p>下面我们讲解下JDK1.8做了哪些优化。经过观测可以发现，我们使用的是2次幂的扩展(指长度扩为原来2倍)，所以，元素的位置要么是在原位置，要么是在原位置再移动2次幂的位置。看下图可以明白这句话的意思，n为table的长度，图（a）表示扩容前的key1和key2两种key确定索引位置的示例，图（b）表示扩容后key1和key2两种key确定索引位置的示例，其中hash1是key1对应的哈希与高位运算结果。</p>\n<p><img src=\"/pictures/a285d9b2da279a18b052fe5eed69afe9_r.jpg\" alt=\"preview\"></p>\n<p>元素在重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit(红色)，因此新的index就会发生这样的变化：</p>\n<p><img src=\"/pictures/b2cb057773e3d67976c535d6ef547d51_720w.png\" alt=\"img\"></p>\n<p>因此，我们在扩充HashMap的时候，不需要像JDK1.7的实现那样重新计算hash，只需要看看原来的hash值新增的那个bit是1还是0就好了，是0的话索引没变，是1的话索引变成“原索引+oldCap”，可以看看下图为16扩充为32的resize示意图：</p>\n<p><img src=\"/pictures/544caeb82a329fa49cc99842818ed1ba_720w.png\" alt=\"img\"></p>\n<p>这个设计确实非常的巧妙，既省去了重新计算hash值的时间，而且同时，由于新增的1bit是0还是1可以认为是随机的，因此resize的过程，均匀的把之前的冲突的节点分散到新的bucket了。这一块就是JDK1.8新增的优化点。有一点注意区别，JDK1.7中rehash的时候，旧链表迁移新链表的时候，如果在新表的数组索引位置相同，则链表元素会倒置，但是从上图可以看出，JDK1.8不会倒置。</p>\n<h4 id=\"JDK1-8-中扩容源码\"><a href=\"#JDK1-8-中扩容源码\" class=\"headerlink\" title=\"JDK1.8 中扩容源码\"></a>JDK1.8 中扩容源码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//扩容前数组</span></span><br><span class=\"line\">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class=\"line\">    <span class=\"comment\">//扩容前数组的大小和阈值</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldCap = (oldTab == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : oldTab.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldThr = threshold;</span><br><span class=\"line\">    <span class=\"comment\">//预定义新数组的大小和阈值</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> newCap, newThr = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldCap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//超过最大值就不可以扩容了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">            threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldTab;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//扩容容量为当前容量的两倍，但不能超过MAXIMUM_CAPACITY</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((newCap = oldCap &lt;&lt; <span class=\"number\">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\">                oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class=\"line\">            newThr = oldThr &lt;&lt; <span class=\"number\">1</span>; <span class=\"comment\">// double threshold</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//前数组没有数据，前数组大小为0，新数组容量设置为初始阈值</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldThr &gt; <span class=\"number\">0</span>) <span class=\"comment\">// initial capacity was placed in threshold</span></span><br><span class=\"line\">        newCap = oldThr;</span><br><span class=\"line\">    <span class=\"comment\">//初始阈值为0，则使用默认的初始化容器</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;               <span class=\"comment\">// zero initial threshold signifies using defaults</span></span><br><span class=\"line\">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class=\"line\">        newThr = (<span class=\"keyword\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果新容量等于0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newThr == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> ft = (<span class=\"keyword\">float</span>)newCap * loadFactor;</span><br><span class=\"line\">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class=\"keyword\">float</span>)MAXIMUM_CAPACITY ?</span><br><span class=\"line\">                (<span class=\"keyword\">int</span>)ft : Integer.MAX_VALUE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    threshold = newThr;</span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"rawtypes\"</span>,<span class=\"string\">\"unchecked\"</span>&#125;)</span><br><span class=\"line\">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node[newCap];</span><br><span class=\"line\">    <span class=\"comment\">//开始赋值，将新的容量赋值给 table</span></span><br><span class=\"line\">    table = newTab;</span><br><span class=\"line\">    <span class=\"comment\">//原数据不为空，将原数据赋值到table中</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldTab != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//根据容量循环数组，赋值非空元素到新table</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class=\"line\">            Node&lt;K,V&gt; e;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((e = oldTab[j]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                oldTab[j] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"comment\">//如果链表只有一个，则进行直接赋值</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    newTab[e.hash &amp; (newCap - <span class=\"number\">1</span>)] = e;</span><br><span class=\"line\">                <span class=\"comment\">//如果是红黑树存储</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                    ((TreeNode&lt;K,V&gt;)e).split(<span class=\"keyword\">this</span>, newTab, j, oldCap);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">                    <span class=\"comment\">//链表复制，JDK 1.8 扩容优化部分</span></span><br><span class=\"line\">                    Node&lt;K,V&gt; loHead = <span class=\"keyword\">null</span>, loTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    Node&lt;K,V&gt; hiHead = <span class=\"keyword\">null</span>, hiTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    Node&lt;K,V&gt; next;</span><br><span class=\"line\">                    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                        next = e.next;</span><br><span class=\"line\">                        <span class=\"comment\">//原索引</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (loTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                loHead = e;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                loTail.next = e;</span><br><span class=\"line\">                            loTail = e;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"comment\">//原索引 + oldCap</span></span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (hiTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                hiHead = e;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                hiTail.next = e;</span><br><span class=\"line\">                            hiTail = e;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">while</span> ((e = next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    <span class=\"comment\">//将原索引放到哈希桶中</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (loTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        loTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        newTab[j] = loHead;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//将原索引+oldCap 放到哈希桶中</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (hiTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        hiTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        newTab[j + oldCap] = hiHead;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newTab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-HashMap-多线程操作导致死循环问题\"><a href=\"#6-HashMap-多线程操作导致死循环问题\" class=\"headerlink\" title=\"6. HashMap 多线程操作导致死循环问题\"></a>6. HashMap 多线程操作导致死循环问题</h2><p><a href=\"https://coolshell.cn/articles/9606.html\" target=\"_blank\" rel=\"noopener\">详细分析</a></p>\n<p>主要原因在于 并发下的Rehash 会造成元素之间会形成一个循环链表。不过，jdk 1.8 后解决了这个问题，但是还是不建议在多线程下使用 HashMap,因为多线程下使用 HashMap 还是会存在其他问题比如数据丢失。并发环境下推荐使用 ConcurrentHashMap 。</p>\n<h2 id=\"7-HashMap-和-HashTable的区别\"><a href=\"#7-HashMap-和-HashTable的区别\" class=\"headerlink\" title=\"7. HashMap 和 HashTable的区别\"></a>7. HashMap 和 HashTable的区别</h2><ol>\n<li><strong>线程是否安全：</strong> HashMap 是非线程安全的，HashTable 是线程安全的；HashTable 内部的方法基本都经过<code>synchronized</code> 修饰。（如果你要保证线程安全的话就使用 ConcurrentHashMap 吧！）；</li>\n<li><strong>效率：</strong> 因为线程安全的问题，HashMap 要比 HashTable 效率高一点。另外，HashTable 基本被淘汰，不要在代码中使用它；</li>\n<li><strong>对Null key 和Null value的支持：</strong> HashMap 中，null 可以作为键，这样的键只有一个，可以有一个或多个键所对应的值为 null。。但是在 HashTable 中 put 进的键值只要有一个 null，直接抛出 NullPointerException。</li>\n<li><strong>初始容量大小和每次扩充容量大小的不同 ：</strong> ①创建时如果不指定容量初始值，Hashtable 默认的初始大小为11，之后每次扩充，容量变为原来的2n+1。HashMap 默认的初始化大小为16。之后每次扩充，容量变为原来的2倍。②创建时如果给定了容量初始值，那么 Hashtable 会直接使用你给定的大小，而 HashMap 会将其扩充为2的幂次方大小（HashMap 中的<code>tableSizeFor()</code>方法保证，下面给出了源代码）。也就是说 HashMap 总是使用2的幂作为哈希表的大小。</li>\n<li><strong>底层数据结构：</strong> JDK1.8 以后的 HashMap 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。Hashtable 没有这样的机制。</li>\n</ol>\n<p>HashMap 中带有初始化容量的构造函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initialCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal initial capacity: \"</span> +</span><br><span class=\"line\">                                           initialCapacity);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class=\"line\">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loadFactor &lt;= <span class=\"number\">0</span> || Float.isNaN(loadFactor))</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal load factor: \"</span> +</span><br><span class=\"line\">                                           loadFactor);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.loadFactor = loadFactor;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.threshold = tableSizeFor(initialCapacity);\t <span class=\"comment\">// 保证HashMap总是使用2的幂作为哈希表大小</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">tableSizeFor</span><span class=\"params\">(<span class=\"keyword\">int</span> cap)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = cap - <span class=\"number\">1</span>;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">8</span>;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (n &lt; <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>更多关于 HashMap 的知识点参考 <a href=\"https://snailclimb.gitee.io/javaguide-interview/#/./docs/b-2Java集合?id=_226-hashmap-和-hashset区别\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n","site":{"data":{}},"length":12877,"excerpt":"<p>本文主要介绍了 HashMap 的底层实现结构、存储结构以及JDK1.8中相关的优化。同时，也分析了一些HashMap的重要方法，比如哈希桶索引位置、查询、新增、扩容。另外涉及几个细节性的问题，比如加载因子、HashMap与HashTable的区别等等。</p>","more":"<h2 id=\"1-部分源码分析\"><a href=\"#1-部分源码分析\" class=\"headerlink\" title=\"1. 部分源码分析\"></a>1. 部分源码分析</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashMap</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractMap</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">362498820763181265L</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_INITIAL_CAPACITY = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">4</span>; <span class=\"comment\">//HashMap初始化长度 16</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAXIMUM_CAPACITY = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">30</span>;\t\t<span class=\"comment\">//HashMap 最大长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> DEFAULT_LOAD_FACTOR = <span class=\"number\">0.75f</span>;\t\t<span class=\"comment\">//默认的加载因子</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TREEIFY_THRESHOLD = <span class=\"number\">8</span>;\t\t\t\t<span class=\"comment\">//转换红黑树的临界值，当链表长度大于此值时，会把链表结构转换为红黑树结构</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> UNTREEIFY_THRESHOLD = <span class=\"number\">6</span>;\t\t\t<span class=\"comment\">//转换链表的临界值，当链表长度小于此值时，会将红黑树结构转换为链表</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MIN_TREEIFY_CAPACITY = <span class=\"number\">64</span>;\t\t\t<span class=\"comment\">//最小树容量</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> hash;\t\t\t\t<span class=\"comment\">//用来定位数组索引位置\t\t\t\t\t\t\t</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> K key;</span><br><span class=\"line\">        V value;</span><br><span class=\"line\">        Node&lt;K,V&gt; next;\t\t\t\t<span class=\"comment\">//链表的下一个node</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">transient</span> Node&lt;K,V&gt;[] table;\t<span class=\"comment\">// Node[] table的初始化长度length(默认值是16)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> size;\t\t\t<span class=\"comment\">// HashMap中实际存在的键值对数量</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> modCount;\t\t<span class=\"comment\">// 记录HashMap内部结构发生变化的次数</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> threshold;\t\t\t\t<span class=\"comment\">// HashMap所能容纳的最大数据量的Node(键值对)个数</span></span><br><span class=\"line\">    \t\t\t\t\t\t\t<span class=\"comment\">// threshold = length * Load factor </span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> loadFactor;\t\t<span class=\"comment\">// 负载因子(默认值是0.75)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Hash 算法，共三步</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> h;</span><br><span class=\"line\">        <span class=\"comment\">// h = key.hashCode() 为第一步 取hashCode值</span></span><br><span class=\"line\">        <span class=\"comment\">// h ^ (h &gt;&gt;&gt; 16)  为第二步 高位参与运算</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (key == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    // jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的</span></span><br><span class=\"line\"><span class=\"comment\">    // 计算该对象应该保存在table数组的哪个索引处</span></span><br><span class=\"line\"><span class=\"comment\">    static int indexFor(int h, int length) &#123;  </span></span><br><span class=\"line\"><span class=\"comment\">    \t//第三步 取模运算</span></span><br><span class=\"line\"><span class=\"comment\">     \treturn h &amp; (length-1);  </span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-HashMap-底层是如何实现的？JDK1-8如何优化？\"><a href=\"#2-HashMap-底层是如何实现的？JDK1-8如何优化？\" class=\"headerlink\" title=\"2. HashMap 底层是如何实现的？JDK1.8如何优化？\"></a>2. HashMap 底层是如何实现的？JDK1.8如何优化？</h2><p>从结构实现来讲，HashMap是数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的，如下如所示。</p>\n<img src=\"/pictures/8db4a3bdfb238da1a1c4431d2b6e075c_720w.png\" alt=\"img\" style=\"zoom: 67%;\" />\n\n<p>JDK1.8之所以添加红黑树是因为一旦链表过长，会严重影响HashMap的性能，而红黑树具有快速增删改查的特点，这样就可以有效的解决链表过长时操作比较慢的问题。</p>\n<p>这里需要讲明白两个问题：数据底层具体存储的是什么？这样的存储方式有什么优点呢？</p>\n<p>(1) 从源码可知，HashMap类中有一个非常重要的字段，就是 Node[] table，即哈希桶数组，明显它是一个Node的数组。Node是HashMap的一个内部类，实现了Map.Entry接口，本质是就是一个映射(键值对)。上图中的每个黑色圆点就是一个Node对象。Node 源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> hash;    <span class=\"comment\">//用来定位数组索引位置</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> K key;</span><br><span class=\"line\">        V value;</span><br><span class=\"line\">        Node&lt;K,V&gt; next;   <span class=\"comment\">//链表的下一个node</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Node(<span class=\"keyword\">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123; ... &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> K <span class=\"title\">getKey</span><span class=\"params\">()</span></span>&#123; ... &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123; ... &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123; ... &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123; ... &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">setValue</span><span class=\"params\">(V newValue)</span> </span>&#123; ... &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(2) HashMap就是使用哈希表来存储的。哈希表为解决冲突，可以采用开放地址法和链地址法等来解决问题，Java中HashMap采用了链地址法。链地址法，简单来说，就是数组加链表的结合。在每个数组元素上都一个链表结构，当数据被Hash后，得到数组下标，把数据放在对应下标元素的链表上。例如如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.put(<span class=\"string\">\"julia\"</span>,<span class=\"string\">\"jiang\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>系统将调用 <code>&quot;julia&quot;</code> 这个key的hashCode()方法得到其hashCode 值（该方法适用于每个Java对象），然后再通过Hash算法的后两步运算（具体见哈希桶数组索引位置分析）来定位该键值对的存储位置，有时两个key会定位到相同的位置，表示发生了Hash碰撞。当然Hash算法计算结果越分散均匀，Hash碰撞的概率就越小，map的存取效率就会越高。</p>\n<h2 id=\"3-什么是加载因子？加载因子为什么是0-75？\"><a href=\"#3-什么是加载因子？加载因子为什么是0-75？\" class=\"headerlink\" title=\"3. 什么是加载因子？加载因子为什么是0.75？\"></a>3. 什么是加载因子？加载因子为什么是0.75？</h2><p>加载因子也叫扩容因子或负载因子，用来判断什么时候进行扩容的，假如加载因子是0.5，HashMap的初始化容量是16，那么当HashMap中有16*0.5=8个元素时，HashMap就会进行扩容。</p>\n<p>那加载因子为什么是 0.75 而不是 0.5 或者 1.0 呢？</p>\n<p>这其实是出于容量和性能之间平衡的结果：</p>\n<ol>\n<li>当加载因子设置比较大的时候，扩容的门槛就被提高了，扩容发生的频率比较低，占用的空间会比较小，但此时发生Hash冲突的几率就会提升，因此需要更复杂的数据结构来存储元素，这样对元素的操作时间就会增加，运行效率也会因此降低；</li>\n<li>而当加载因子值比较小的时候，扩容的门槛会比较低，因此会占用更多的空间，此时元素的存储就比较稀疏，发生哈希冲突的可能性就比较小，因此操作性能会比较高。</li>\n</ol>\n<p>所以综合了以上情况就取了一个 0.5 到 1.0 的平均数 0.75 作为加载因子。</p>\n<h2 id=\"4-HashMap源码中有哪些重要方法？\"><a href=\"#4-HashMap源码中有哪些重要方法？\" class=\"headerlink\" title=\"4. HashMap源码中有哪些重要方法？\"></a>4. HashMap源码中有哪些重要方法？</h2><h3 id=\"4-1-确定哈希桶数组索引位置\"><a href=\"#4-1-确定哈希桶数组索引位置\" class=\"headerlink\" title=\"4.1 确定哈希桶数组索引位置\"></a>4.1 确定哈希桶数组索引位置</h3><p>不管增加、删除、查找键值对，定位到哈希桶数组的位置都是很关键的第一步。前面说过HashMap的数据结构是数组和链表的结合，所以我们当然希望这个HashMap里面的元素位置尽量分布均匀些，尽量使得每个位置上的元素数量只有一个，那么当我们用hash算法求得这个位置的时候，马上就可以知道对应位置的元素就是我们要的，不用遍历链表，大大优化了查询的效率。HashMap定位数组索引位置，直接决定了hash方法的离散性能。先看看源码的实现(方法一+方法二):</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法一：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object key)</span> </span>&#123;   <span class=\"comment\">//jdk1.8</span></span><br><span class=\"line\">     <span class=\"keyword\">int</span> h;</span><br><span class=\"line\">     <span class=\"comment\">// h = key.hashCode() 为第一步 取hashCode值</span></span><br><span class=\"line\">     <span class=\"comment\">// h ^ (h &gt;&gt;&gt; 16)  为第二步 高位参与运算</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> (key == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">方法二：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">indexFor</span><span class=\"params\">(<span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span> length)</span> </span>&#123;  <span class=\"comment\">//jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> h &amp; (length-<span class=\"number\">1</span>);  <span class=\"comment\">//第三步 取模运算</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的Hash算法本质上就是三步：<strong>取key的hashCode值、高位运算、取模运算</strong>。</p>\n<p>对于任意给定的对象，只要它的hashCode()返回值相同，那么程序调用方法一所计算得到的Hash码值总是相同的。我们首先想到的就是把hash值对数组长度取模运算，这样一来，元素的分布相对来说是比较均匀的。但是，模运算的消耗还是比较大的，在HashMap中是这样做的：调用方法二来计算该对象应该保存在table数组的哪个索引处。</p>\n<p>这个方法非常巧妙，它通过h &amp; (table.length -1)来得到该对象的保存位，而HashMap底层数组的长度总是2的n次方，这是HashMap在速度上的优化。当length总是2的n次方时，h&amp; (length-1)运算等价于对length取模，也就是h%length，但是&amp;比%具有更高的效率。</p>\n<p>在JDK1.8的实现中，优化了高位运算的算法，通过hashCode()的高16位异或低16位实现的：(h = k.hashCode()) ^ (h &gt;&gt;&gt; 16)，主要是从速度、功效、质量来考虑的，这么做可以在数组table的length比较小的时候，也能保证考虑到高低Bit都参与到Hash的计算中，同时不会有太大的开销。</p>\n<p>下面举例说明下，n为table的长度。</p>\n<img src=\"/pictures/8e8203c1b51be6446cda4026eaaccf19_720w.png\" alt=\"img\" style=\"zoom:80%;\" />\n\n<h3 id=\"4-2-查询\"><a href=\"#4-2-查询\" class=\"headerlink\" title=\"4.2 查询\"></a>4.2 查询</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt; e;</span><br><span class=\"line\">    <span class=\"comment\">//对 key 进行哈希操作</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (e = getNode(hash(key), key)) == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : e.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> Node&lt;K,V&gt; <span class=\"title\">getNode</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, Object key)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; </span><br><span class=\"line\">    Node&lt;K,V&gt; first, e; </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n; </span><br><span class=\"line\">    K k;</span><br><span class=\"line\">    <span class=\"comment\">//非空判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) != <span class=\"keyword\">null</span> &amp;&amp; (n = tab.length) &gt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        (first = tab[(n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断第一个元素是否是要查询的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first.hash == hash &amp;&amp; <span class=\"comment\">// always check first node</span></span><br><span class=\"line\">            ((k = first.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> first;</span><br><span class=\"line\">        <span class=\"comment\">//下一个节点非空判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((e = first.next) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果第一个节点是树结构，则使用 getTreeNode 直接获取相应的数据</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (first <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123; <span class=\"comment\">//非树结构，循环节点判断</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;   <span class=\"comment\">//hash相等，并且 key相等，则返回此节点</span></span><br><span class=\"line\">                    ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从以上源码可以看出，当哈希冲突时我们需要通过判断 key 值是否相等，才能确认此元素是不是我们想要的元素。</p>\n<h3 id=\"4-3-新增\"><a href=\"#4-3-新增\" class=\"headerlink\" title=\"4.3 新增\"></a>4.3 新增</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//对 key 进行哈希操作</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> putVal(hash(key), key, value, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> V <span class=\"title\">putVal</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, K key, V value, <span class=\"keyword\">boolean</span> onlyIfAbsent,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">               <span class=\"keyword\">boolean</span> evict)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; </span><br><span class=\"line\">    Node&lt;K,V&gt; p; </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, i;</span><br><span class=\"line\">    <span class=\"comment\">//哈希表为空则创建表</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) == <span class=\"keyword\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        n = (tab = resize()).length;</span><br><span class=\"line\">    <span class=\"comment\">//根据 key 的哈希值计算出要插入的数组索引i</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((p = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"comment\">//如果 tab[i] 为 null，则直接插入</span></span><br><span class=\"line\">        tab[i] = newNode(hash, key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; e; </span><br><span class=\"line\">        K k;</span><br><span class=\"line\">        <span class=\"comment\">//如果key相等，直接覆盖 value</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.hash == hash &amp;&amp;</span><br><span class=\"line\">            ((k = p.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            e = p;</span><br><span class=\"line\">        <span class=\"comment\">//如果 key 不存在，判断是否为红黑树</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">            <span class=\"comment\">//红黑树直接插入键值对</span></span><br><span class=\"line\">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class=\"keyword\">this</span>, tab, hash, key, value);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//为链表结构，循环准备插入</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>; ; ++binCount) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//下一个元素为空时</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((e = p.next) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    p.next = newNode(hash, key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    <span class=\"comment\">//链表长度大于 8 时转换为红黑树进行处理</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>) <span class=\"comment\">// -1 for 1st</span></span><br><span class=\"line\">                        treeifyBin(tab, hash);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//key 已经存在直接覆盖 value</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                    ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                p = e;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// existing mapping for key</span></span><br><span class=\"line\">            V oldValue = e.value;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!onlyIfAbsent || oldValue == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                e.value = value;</span><br><span class=\"line\">            afterNodeAccess(e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ++modCount;</span><br><span class=\"line\">    <span class=\"comment\">//超过最大容量，扩容</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (++size &gt; threshold)</span><br><span class=\"line\">        resize();</span><br><span class=\"line\">    afterNodeInsertion(evict);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>新增方法的执行流程如下：</p>\n<p><img src=\"/pictures/58e67eae921e4b431782c07444af824e_r.jpg\" alt=\"preview\"></p>\n<h3 id=\"4-4-扩容\"><a href=\"#4-4-扩容\" class=\"headerlink\" title=\"4.4 扩容\"></a>4.4 扩容</h3><p><a href=\"https://zhuanlan.zhihu.com/p/21673805\" target=\"_blank\" rel=\"noopener\">参考博文</a></p>\n<h4 id=\"JDK1-7-的扩容\"><a href=\"#JDK1-7-的扩容\" class=\"headerlink\" title=\"JDK1.7 的扩容\"></a>JDK1.7 的扩容</h4><p>扩容(resize)就是重新计算容量，向HashMap对象里不停的添加元素，而HashMap对象内部的数组无法装载更多的元素时，对象就需要扩大数组的长度，以便能装入更多的元素。当然Java里的数组是无法自动扩容的，方法是使用一个新的数组代替已有的容量小的数组，就像我们用一个小桶装水，如果想装更多的水，就得换大水桶。</p>\n<p>我们分析下resize的源码，鉴于JDK1.8融入了红黑树，较复杂，为了便于理解我们仍然使用JDK1.7的代码，好理解一些，本质上区别不大，具体区别后文再说。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">int</span> newCapacity)</span> </span>&#123;   <span class=\"comment\">//传入新的容量</span></span><br><span class=\"line\"> <span class=\"number\">2</span>     Entry[] oldTable = table;    <span class=\"comment\">//引用扩容前的Entry数组</span></span><br><span class=\"line\"> <span class=\"number\">3</span>     <span class=\"keyword\">int</span> oldCapacity = oldTable.length;         </span><br><span class=\"line\"> <span class=\"number\">4</span>     <span class=\"keyword\">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;  <span class=\"comment\">//扩容前的数组大小如果已经达到最大(2^30)了</span></span><br><span class=\"line\"> <span class=\"number\">5</span>         threshold = Integer.MAX_VALUE; <span class=\"comment\">//修改阈值为int的最大值(2^31-1)，这样以后就不会扩容了</span></span><br><span class=\"line\"> <span class=\"number\">6</span>         <span class=\"keyword\">return</span>;</span><br><span class=\"line\"> <span class=\"number\">7</span>     &#125;</span><br><span class=\"line\"> <span class=\"number\">8</span>  </span><br><span class=\"line\"> <span class=\"number\">9</span>     Entry[] newTable = <span class=\"keyword\">new</span> Entry[newCapacity];  <span class=\"comment\">//初始化一个新的Entry数组</span></span><br><span class=\"line\"><span class=\"number\">10</span>     transfer(newTable);                         <span class=\"comment\">//！！将数据转移到新的Entry数组里</span></span><br><span class=\"line\"><span class=\"number\">11</span>     table = newTable;                           <span class=\"comment\">//HashMap的table属性引用新的Entry数组</span></span><br><span class=\"line\"><span class=\"number\">12</span>     threshold = (<span class=\"keyword\">int</span>)(newCapacity * loadFactor);<span class=\"comment\">//修改阈值</span></span><br><span class=\"line\"><span class=\"number\">13</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里就是使用一个容量更大的数组来代替已有的容量小的数组，transfer()方法将原有Entry数组的元素拷贝到新的Entry数组里。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">transfer</span><span class=\"params\">(Entry[] newTable)</span> </span>&#123;</span><br><span class=\"line\">   Entry[] src = table;                   <span class=\"comment\">//src引用了旧的Entry数组</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> newCapacity = newTable.length;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; src.length; j++) &#123; <span class=\"comment\">//遍历旧的Entry数组</span></span><br><span class=\"line\">       Entry&lt;K,V&gt; e = src[j];             <span class=\"comment\">//取得旧Entry数组的每个元素</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">           src[j] = <span class=\"keyword\">null</span>;<span class=\"comment\">//释放旧Entry数组的对象引用（for循环后，旧的Entry数组不再引用任何对象）</span></span><br><span class=\"line\">           <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">               Entry&lt;K,V&gt; next = e.next;</span><br><span class=\"line\">               <span class=\"keyword\">int</span> i = indexFor(e.hash, newCapacity); <span class=\"comment\">//！！重新计算每个元素在数组中的位置</span></span><br><span class=\"line\">               e.next = newTable[i]; <span class=\"comment\">//标记[1]</span></span><br><span class=\"line\">               newTable[i] = e;      <span class=\"comment\">//将元素放在数组上</span></span><br><span class=\"line\">               e = next;             <span class=\"comment\">//访问下一个Entry链上的元素</span></span><br><span class=\"line\">           &#125; <span class=\"keyword\">while</span> (e != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的</span></span><br><span class=\"line\"><span class=\"comment\">// 计算该对象应该保存在table数组的哪个索引处</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">indexFor</span><span class=\"params\">(<span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span> length)</span> </span>&#123;  </span><br><span class=\"line\">\t<span class=\"comment\">//第三步 取模运算</span></span><br><span class=\"line\"> \t<span class=\"keyword\">return</span> h &amp; (length-<span class=\"number\">1</span>);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 确定哈希桶数组索引位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h;</span><br><span class=\"line\">    <span class=\"comment\">// h = key.hashCode() 为第一步 取hashCode值</span></span><br><span class=\"line\">    <span class=\"comment\">// h ^ (h &gt;&gt;&gt; 16)  为第二步 高位参与运算</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (key == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>newTable[i]的引用赋给了e.next，也就是使用了单链表的头插入方式，同一位置上新元素总会被放在链表的头部位置；这样先放在一个索引上的元素终会被放到Entry链的尾部(如果发生了hash冲突的话），这一点和Jdk1.8有区别，下文详解。在旧数组中同一条Entry链上的元素，通过重新计算索引位置后，有可能被放到了新数组的不同位置上。下面举个例子说明下扩容过程。</p>\n<p>这里我们假设 <code>hashCode()</code> 的哈希算法就是简单的 key % (数组长度)。其中的哈希桶数组table的size=2， 所以key = 3、7、5，put顺序依次为 5、7、3。在mod 2以后都冲突在table[1]这里了。这里假设负载因子 loadFactor=1，即当键值对的实际大小size 大于 table的实际大小时进行扩容。</p>\n<p>接下来的三个步骤是哈希桶数组 resize成4，然后所有的Node重新rehash的过程。</p>\n<p><img src=\"/pictures/e5aa99e811d1814e010afa7779b759d4_r.jpg\" alt=\"preview\"></p>\n<h4 id=\"JDK1-8-在扩容方面的优化\"><a href=\"#JDK1-8-在扩容方面的优化\" class=\"headerlink\" title=\"JDK1.8 在扩容方面的优化\"></a>JDK1.8 在扩容方面的优化</h4><p>下面我们讲解下JDK1.8做了哪些优化。经过观测可以发现，我们使用的是2次幂的扩展(指长度扩为原来2倍)，所以，元素的位置要么是在原位置，要么是在原位置再移动2次幂的位置。看下图可以明白这句话的意思，n为table的长度，图（a）表示扩容前的key1和key2两种key确定索引位置的示例，图（b）表示扩容后key1和key2两种key确定索引位置的示例，其中hash1是key1对应的哈希与高位运算结果。</p>\n<p><img src=\"/pictures/a285d9b2da279a18b052fe5eed69afe9_r.jpg\" alt=\"preview\"></p>\n<p>元素在重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit(红色)，因此新的index就会发生这样的变化：</p>\n<p><img src=\"/pictures/b2cb057773e3d67976c535d6ef547d51_720w.png\" alt=\"img\"></p>\n<p>因此，我们在扩充HashMap的时候，不需要像JDK1.7的实现那样重新计算hash，只需要看看原来的hash值新增的那个bit是1还是0就好了，是0的话索引没变，是1的话索引变成“原索引+oldCap”，可以看看下图为16扩充为32的resize示意图：</p>\n<p><img src=\"/pictures/544caeb82a329fa49cc99842818ed1ba_720w.png\" alt=\"img\"></p>\n<p>这个设计确实非常的巧妙，既省去了重新计算hash值的时间，而且同时，由于新增的1bit是0还是1可以认为是随机的，因此resize的过程，均匀的把之前的冲突的节点分散到新的bucket了。这一块就是JDK1.8新增的优化点。有一点注意区别，JDK1.7中rehash的时候，旧链表迁移新链表的时候，如果在新表的数组索引位置相同，则链表元素会倒置，但是从上图可以看出，JDK1.8不会倒置。</p>\n<h4 id=\"JDK1-8-中扩容源码\"><a href=\"#JDK1-8-中扩容源码\" class=\"headerlink\" title=\"JDK1.8 中扩容源码\"></a>JDK1.8 中扩容源码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//扩容前数组</span></span><br><span class=\"line\">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class=\"line\">    <span class=\"comment\">//扩容前数组的大小和阈值</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldCap = (oldTab == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : oldTab.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldThr = threshold;</span><br><span class=\"line\">    <span class=\"comment\">//预定义新数组的大小和阈值</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> newCap, newThr = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldCap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//超过最大值就不可以扩容了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">            threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldTab;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//扩容容量为当前容量的两倍，但不能超过MAXIMUM_CAPACITY</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((newCap = oldCap &lt;&lt; <span class=\"number\">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\">                oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class=\"line\">            newThr = oldThr &lt;&lt; <span class=\"number\">1</span>; <span class=\"comment\">// double threshold</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//前数组没有数据，前数组大小为0，新数组容量设置为初始阈值</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldThr &gt; <span class=\"number\">0</span>) <span class=\"comment\">// initial capacity was placed in threshold</span></span><br><span class=\"line\">        newCap = oldThr;</span><br><span class=\"line\">    <span class=\"comment\">//初始阈值为0，则使用默认的初始化容器</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;               <span class=\"comment\">// zero initial threshold signifies using defaults</span></span><br><span class=\"line\">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class=\"line\">        newThr = (<span class=\"keyword\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果新容量等于0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newThr == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> ft = (<span class=\"keyword\">float</span>)newCap * loadFactor;</span><br><span class=\"line\">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class=\"keyword\">float</span>)MAXIMUM_CAPACITY ?</span><br><span class=\"line\">                (<span class=\"keyword\">int</span>)ft : Integer.MAX_VALUE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    threshold = newThr;</span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"rawtypes\"</span>,<span class=\"string\">\"unchecked\"</span>&#125;)</span><br><span class=\"line\">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node[newCap];</span><br><span class=\"line\">    <span class=\"comment\">//开始赋值，将新的容量赋值给 table</span></span><br><span class=\"line\">    table = newTab;</span><br><span class=\"line\">    <span class=\"comment\">//原数据不为空，将原数据赋值到table中</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldTab != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//根据容量循环数组，赋值非空元素到新table</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class=\"line\">            Node&lt;K,V&gt; e;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((e = oldTab[j]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                oldTab[j] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"comment\">//如果链表只有一个，则进行直接赋值</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    newTab[e.hash &amp; (newCap - <span class=\"number\">1</span>)] = e;</span><br><span class=\"line\">                <span class=\"comment\">//如果是红黑树存储</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                    ((TreeNode&lt;K,V&gt;)e).split(<span class=\"keyword\">this</span>, newTab, j, oldCap);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">                    <span class=\"comment\">//链表复制，JDK 1.8 扩容优化部分</span></span><br><span class=\"line\">                    Node&lt;K,V&gt; loHead = <span class=\"keyword\">null</span>, loTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    Node&lt;K,V&gt; hiHead = <span class=\"keyword\">null</span>, hiTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    Node&lt;K,V&gt; next;</span><br><span class=\"line\">                    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                        next = e.next;</span><br><span class=\"line\">                        <span class=\"comment\">//原索引</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (loTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                loHead = e;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                loTail.next = e;</span><br><span class=\"line\">                            loTail = e;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"comment\">//原索引 + oldCap</span></span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (hiTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                hiHead = e;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                hiTail.next = e;</span><br><span class=\"line\">                            hiTail = e;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">while</span> ((e = next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    <span class=\"comment\">//将原索引放到哈希桶中</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (loTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        loTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        newTab[j] = loHead;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//将原索引+oldCap 放到哈希桶中</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (hiTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        hiTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        newTab[j + oldCap] = hiHead;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newTab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-HashMap-多线程操作导致死循环问题\"><a href=\"#6-HashMap-多线程操作导致死循环问题\" class=\"headerlink\" title=\"6. HashMap 多线程操作导致死循环问题\"></a>6. HashMap 多线程操作导致死循环问题</h2><p><a href=\"https://coolshell.cn/articles/9606.html\" target=\"_blank\" rel=\"noopener\">详细分析</a></p>\n<p>主要原因在于 并发下的Rehash 会造成元素之间会形成一个循环链表。不过，jdk 1.8 后解决了这个问题，但是还是不建议在多线程下使用 HashMap,因为多线程下使用 HashMap 还是会存在其他问题比如数据丢失。并发环境下推荐使用 ConcurrentHashMap 。</p>\n<h2 id=\"7-HashMap-和-HashTable的区别\"><a href=\"#7-HashMap-和-HashTable的区别\" class=\"headerlink\" title=\"7. HashMap 和 HashTable的区别\"></a>7. HashMap 和 HashTable的区别</h2><ol>\n<li><strong>线程是否安全：</strong> HashMap 是非线程安全的，HashTable 是线程安全的；HashTable 内部的方法基本都经过<code>synchronized</code> 修饰。（如果你要保证线程安全的话就使用 ConcurrentHashMap 吧！）；</li>\n<li><strong>效率：</strong> 因为线程安全的问题，HashMap 要比 HashTable 效率高一点。另外，HashTable 基本被淘汰，不要在代码中使用它；</li>\n<li><strong>对Null key 和Null value的支持：</strong> HashMap 中，null 可以作为键，这样的键只有一个，可以有一个或多个键所对应的值为 null。。但是在 HashTable 中 put 进的键值只要有一个 null，直接抛出 NullPointerException。</li>\n<li><strong>初始容量大小和每次扩充容量大小的不同 ：</strong> ①创建时如果不指定容量初始值，Hashtable 默认的初始大小为11，之后每次扩充，容量变为原来的2n+1。HashMap 默认的初始化大小为16。之后每次扩充，容量变为原来的2倍。②创建时如果给定了容量初始值，那么 Hashtable 会直接使用你给定的大小，而 HashMap 会将其扩充为2的幂次方大小（HashMap 中的<code>tableSizeFor()</code>方法保证，下面给出了源代码）。也就是说 HashMap 总是使用2的幂作为哈希表的大小。</li>\n<li><strong>底层数据结构：</strong> JDK1.8 以后的 HashMap 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。Hashtable 没有这样的机制。</li>\n</ol>\n<p>HashMap 中带有初始化容量的构造函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initialCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal initial capacity: \"</span> +</span><br><span class=\"line\">                                           initialCapacity);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class=\"line\">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loadFactor &lt;= <span class=\"number\">0</span> || Float.isNaN(loadFactor))</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal load factor: \"</span> +</span><br><span class=\"line\">                                           loadFactor);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.loadFactor = loadFactor;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.threshold = tableSizeFor(initialCapacity);\t <span class=\"comment\">// 保证HashMap总是使用2的幂作为哈希表大小</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">tableSizeFor</span><span class=\"params\">(<span class=\"keyword\">int</span> cap)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = cap - <span class=\"number\">1</span>;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">8</span>;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (n &lt; <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>更多关于 HashMap 的知识点参考 <a href=\"https://snailclimb.gitee.io/javaguide-interview/#/./docs/b-2Java集合?id=_226-hashmap-和-hashset区别\" target=\"_blank\" rel=\"noopener\">这里</a></p>"},{"title":"回溯算法总结","date":"2020-07-25T00:55:05.000Z","typora-copy-images-to":"..\\pictures","_content":"\n本文主要介绍了回溯法的定义、回溯法的代码框架，以及回溯法的典型问题全排列问题、N皇后问题等。另外，还介绍了LeetCode中使用回溯法的部分题目，这部分内容会持续更新。\n\n## 1. 什么是回溯法？\n\n**[维基定义](https://zh.wikipedia.org/wiki/回溯法)** : （英语：backtracking）是[暴力搜索法](https://zh.wikipedia.org/wiki/暴力搜尋法)中的一种。\n\n对于某些计算问题而言，回溯法是一种可以找出所有（或一部分）解的一般性算法，尤其适用于约束满足问题（在解决约束满足问题时，我们逐步构造更多的候选解，并且在确定某一部分候选解不可能补全成正确解之后放弃继续搜索这个部分候选解本身及其可以拓展出的子候选解，转而测试其他的部分候选解）。在经典的教科书中，**[八皇后问题](https://zh.wikipedia.org/wiki/八皇后问题)**展示了回溯法的用例。\n\n<!--more-->\n\n回溯法采用[试错](https://zh.wikipedia.org/wiki/试错)的思想，它尝试分步的去解决一个问题。在分步解决问题的过程中，当它通过尝试发现现有的分步答案不能得到有效的正确的解答的时候，它将取消上一步甚至是上几步的计算，再通过其它的可能的分步解答再次尝试寻找问题的答案。回溯法通常用最简单的递归方法来实现，在反复重复上述的步骤后可能出现两种情况：\n\n- 找到一个可能存在的正确的答案\n- 在尝试了所有可能的分步方法后宣告该问题没有答案\n\n在最坏的情况下，回溯法会导致一次复杂度为指数时间的计算。\n\n“回溯”指的是“状态重置”，可以理解为“回到过去”、“恢复现场”，是在编码的过程中，是为了节约空间而使用的一种技巧。而回溯其实是“深度优先遍历”特有的一种现象。之所以是“深度优先遍历”，是因为我们要解决的问题通常是在一棵树上完成的，在这棵树上搜索需要的答案，一般使用深度优先遍历。\n\n## 2. 回溯法框架\n\n上文主要是 Wikipedia 对于回溯法的介绍，这一节，将参考 [这里](https://labuladong.gitbook.io/algo/di-ling-zhang-bi-du-xi-lie/hui-su-suan-fa-xiang-jie-xiu-ding-ban) 给出一个回溯算法的框架。\n\n**解决一个回溯问题，实际上就是一个决策树的遍历过程**。你只需要思考 3 个问题：\n\n1. 路径：也就是已经做出的选择\n2. 选择列表：也就是你当前可以做的选择\n3. 结束条件：也就是到达决策树底层，无法再做选择的条件\n\n如果现在不理解这三个词语没关系，下一节我们将以全排列问题为例，进行详细介绍。下面给出回溯法的框架：\n\n```python\nresult = []\ndef backtrack(路径, 选择列表):\n    if 满足结束条件:\n        result.add(路径)\n        return\n\n    for 选择 in 选择列表:\n        做选择\n        backtrack(路径, 选择列表)\n        撤销选择\n```\n\n**其核心就是 for 循环里面的递归，在递归调用之前「做选择」，在递归调用之后「撤销选择」。**\n\n## 3. 以全排列问题（无重复数字）为例 [46]\n\n### 3.1 题目描述\n\n题目来源：[46. 全排列](https://leetcode-cn.com/problems/permutations/)\n\n给定一个 **没有重复** 数字的序列，返回其所有可能的全排列。\n\n示例：\n\n```bash\n输入: [1,2,3]\n输出:\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]\n```\n\n### 3.2 问题分析\n\n我们知道，对于 n 个不重复的数，全排列共有 n! 个。如果使用穷举法，我们一般会：\n\n先固定第一位为 1，然后第二位可以是 2，那么第三位只能是 3；然后可以把第二位变成 3，第三位就只能是 2 了；然后就只能变化第一位，变成 2，然后再穷举后两位……\n\n其实这就是回溯算法，可以转化为下面的回溯树：\n\n<img src=\"/pictures/1.jpg\" alt=\"img\" style=\"zoom: 33%;\" />\n\n只要从根遍历这棵树，记录路径上的数字，其实就是所有的全排列。**我们不妨把这棵树称为回溯算法的「决策树」**。\n\n**为啥说这是决策树呢，因为你在每个节点上其实都在做决策**。比如说你站在下图的红色节点上：\n\n<img src=\"/pictures/2.jpg\" alt=\"img\" style=\"zoom:33%;\" />\n\n你现在就在做决策，可以选择 1 那条树枝，也可以选择 3 那条树枝。为啥只能在 1 和 3 之中选择呢？因为 2 这个树枝在你身后，这个选择你之前做过了，而全排列是不允许重复使用数字的。\n\n**现在可以解答开头的几个名词：**`[2]` **就是「路径」，记录你已经做过的选择；`[1,3]`就是「选择列表」，表示你当前可以做出的选择；「结束条件」就是遍历到树的底层，在这里就是选择列表为空的时候**。\n\n如果明白了这几个名词，**可以把「路径」和「选择」列表作为决策树上每个节点的属性**，比如下图列出了几个节点的属性：\n\n<img src=\"/pictures/3.jpg\" alt=\"img\" style=\"zoom:33%;\" />\n\n**框架中定义的 ``backtrace``  函数其实就像一个指针，在这棵树上游走，同时要正确维护每个节点的属性，每当走到树的底层，其「路径」就是一个全排列**。\n\n在回溯法中，**我们只要在递归之前做出选择，在递归之后撤销刚才的选择**，就能正确得到每个节点的选择列表和路径。因此，框架中的核心代码详细化如下：\n\n```python\nfor 选择 in 选择列表:\n    # 做选择\n    将该选择从选择列表移除\n    路径.add(选择)\n    backtrack(路径, 选择列表)\n    # 撤销选择\n    路径.remove(选择)\n    将该选择再加入选择列表\n```\n\n### 3.3 代码\n\n```java\nList<List<Integer>> res = new LinkedList<>();\npublic List<List<Integer>> permute(int[] nums) {\n    // 记录路径（已做出的选择）\n    LinkedList<Integer> track = new LinkedList<>();\n    backtrack(nums, track);\n    return res;\n}\n\n/**\n     *\n     * @param nums\n     * @param track\n     */\nprivate void backtrack(int[] nums, LinkedList<Integer> track){\n    // 满足结束条件（到达决策树底层，无法再做选择的条件）\n    if(nums.length == track.size()){\n        res.add(new LinkedList<>(track));\n        return;\n    }\n    for (int num : nums) {\n        // 排除不合法的选择\n        if(track.contains(num)){\n            continue;\n        }\n        // 做选择\n        track.add(num);\n        // 进入下一层决策树\n        backtrack(nums, track);\n        // 撤销选择\n        track.removeLast();\n    }\n}\n```\n\n这里我们并没有显示记录「选择列表」，而是通过 `nums` 和 `track` 推导出当前的选择列表。\n\n至此，我们就通过全排列问题详解了回溯算法的底层原理。当然，这个算法解决全排列不是很高效，应为对链表使用 `contains` 方法需要 O(N) 的时间复杂度。有更好的方法通过交换元素达到目的，但是难理解一些，这里就不写了，有兴趣可以自行搜索一下。\n\n但是必须说明的是，不管怎么优化，都符合回溯框架，而且时间复杂度都不可能低于 O(N!)，因为穷举整棵决策树是无法避免的。**这也是回溯算法的一个特点，不像动态规划存在重叠子问题可以优化，回溯算法就是纯暴力穷举，复杂度一般都很高**。\n\n明白了全排列问题，就可以直接套回溯算法框架了。\n\n### 3.4 另一种方法\n\n上文中没有显示记录「选择列表」，通过用路径的 `contains` 方法来判断是否选择。这里我们 **“以空间换时间”** 的思想，使用一个布尔数组 used，初始化的时候都为 false 表示这些数还没有被选择，当我们选定一个数的时候，就将这个数组的相应位置设置为 true ，这样在考虑下一个位置的时候，就能够以 O(1)  的时间复杂度判断这个数是否被选择过。（参考 [这里](https://leetcode-cn.com/problems/permutations/solution/hui-su-suan-fa-python-dai-ma-java-dai-ma-by-liweiw/)）\n\n```java\nList<List<Integer>> res2 = new LinkedList<>();\npublic List<List<Integer>> permute2(int[] nums){\n    int len = nums.length;\n    if(len == 0){\n        return res;\n    }\n\n    LinkedList<Integer> track = new LinkedList<>();\n    // 标记数组\n    boolean[] used = new boolean[len];\n    backtrace2(nums, track, used);\n    return res2;\n}\n\n/**\n     * \n     * @param nums\n     * @param track\n     * @param used 标记数组，used[i]=true时，表示已被选择\n     */\nprivate void backtrace2(int[] nums, LinkedList<Integer> track, boolean[] used){\n    int len = nums.length;\n    if(track.size() == len){\n        res2.add(new LinkedList<>(track));\n        return;\n    }\n\n    for(int i = 0; i < len; i++){\n        if(used[i]){\n            continue;\n        }\n\n        track.add(nums[i]);\n        used[i] = true;\n\n        backtrace2(nums, track, used);\n\n        track.removeLast();\n        used[i] = false;\n    }\n}\n```\n\n## 4. N皇后问题 [51]\n\n### 4.1 题目描述\n\n题目来源：[51. N皇后](https://leetcode-cn.com/problems/n-queens/)\n\n*n* 皇后问题研究的是如何将 *n* 个皇后放置在 *n*×*n* 的棋盘上，并且使皇后彼此之间不能相互攻击。PS：皇后可以攻击同一行、同一列、左上左下右上右下四个方向的任意单位。\n\n![img](/pictures/8-queens.png)\n\n给定一个整数 n，返回所有不同的 n 皇后问题的解决方案。\n\n每一种解法包含一个明确的 n 皇后问题的棋子放置方案，该方案中 'Q' 和 '.' 分别代表了皇后和空位。\n\n**示例：**\n\n```bash\n输入: 4\n输出: [\n [\".Q..\",  // 解法 1\n  \"...Q\",\n  \"Q...\",\n  \"..Q.\"],\n\n [\"..Q.\",  // 解法 2\n  \"Q...\",\n  \"...Q\",\n  \".Q..\"]\n]\n解释: 4 皇后问题存在两个不同的解法。\n```\n\n### 4.2 问题分析\n\n这个问题本质上跟全排列问题差不多，决策树的每一层表示棋盘上的每一行；每个节点可以做出的选择是，在该行的任意一列放置一个皇后。\n\n### 4.3 代码\n\n```java\nList<List<String>> res = new LinkedList<>();\npublic List<List<String>> solveNQueens(int n) {\n    if (n <= 0){\n        return null;\n    }\n\n    // 初始化棋盘 board 为二维字符数组\n    char[][] board = new char[n][n];\n    for (char[] chars : board){\n        // 初始化\n        Arrays.fill(chars, '.');\n    }\n\n    backtrack(board, 0);\n    return res;\n}\n\n/**\n     * 路径：board中小于row的那些行都已经成功放置了皇后\n     * 可选择列表: 第row行的所有列都是放置 Q 的选择\n     * 结束条件: row超过board的最后一行\n     *\n     * @param board 记录路径\n     * @param row 当前放置第几行\n     */\nprivate void backtrack(char[][] board, int row) {\n    //触发结束条件\n    if (row == board.length) {\n        res.add(charToString(board));\n        return;\n    }\n\n    int n = board[row].length;\n    for (int col = 0; col < n; col++) {\n        //排除不合法选择\n        if (!isValid(board, row, col)){\n            continue;\n        }\n        //做选择\n        board[row][col] = 'Q';\n        //进入下一层决策树\n        backtrack(board, row + 1);\n        //撤销选择\n        board[row][col] = '.';\n    }\n}\n\n/**\n     * 是否可以在 board[row][col] 放置皇后\n     * 不需要检查 这一行，因为每一行只放一个皇后就到下一行\n     * 不需要检查 左下、右下斜线，因为下面还没放元素\n     * @param board\n     * @param row\n     * @param col\n     * @return\n     */\nprivate boolean isValid(char[][] board, int row, int col) {\n    int rows = board.length;\n    //检查这一列是否有皇后\n    for (char[] chars : board){\n        if (chars[col] == 'Q'){\n            return false;\n        }\n    }\n    // 检查左上斜线上是否有皇后\n    for (int i = row - 1, j = col + 1; i >= 0 && j < rows; i--, j++) {\n        if (board[i][j] == 'Q'){\n            return false;\n        }\n    }\n    // 检查右上斜线上是否有皇后\n    for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {\n        if (board[i][j] == 'Q'){\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate static List<String> charToString(char[][] array) {\n    List<String> result = new LinkedList<>();\n    for (char[] chars : array) {\n        result.add(String.valueOf(chars));\n    }\n    return result;\n}\n```\n\n函数 `backtrack` 依然像个在决策树上游走的指针，通过 `row` 和 `col` 就可以表示函数遍历到的位置，通过 `isValid` 函数可以将不符合条件的情况剪枝。\n\n## 5. 回溯法总结\n\n回溯算法就是个多叉树的遍历问题，关键就是在前序遍历和后序遍历的位置做一些操作，算法框架如下：\n\n```python\ndef backtrack(...):\n    for 选择 in 选择列表:\n        做选择\n        backtrack(...)\n        撤销选择\n```\n\n**写** **`backtrack`** **函数时，需要维护走过的「路径」和当前可以做的「选择列表」，当触发「结束条件」时，将「路径」记入结果集**。\n\n下面几节记录了一些平时遇到的，可以使用回溯解决的经典例题，会持续更新~\n\n## 6. 使用回溯法的题目列表\n\n本文中使用回溯法解决的 LeetCode 题目列表如下，持续更新中~\n\n|  #   |                            Title                             | Remark |\n| :--: | :----------------------------------------------------------: | :----: |\n|  46  |   [全排列](https://leetcode-cn.com/problems/permutations/)   |        |\n|  51  |     [N皇后](https://leetcode-cn.com/problems/n-queens/)      |  Hard  |\n|  47  | [全排列 II](https://leetcode-cn.com/problems/permutations-ii/) |        |\n|  39  | [组合总和](https://leetcode-cn.com/problems/combination-sum/) |        |\n|  40  | [组合总和 II](https://leetcode-cn.com/problems/combination-sum-ii/) |        |\n|  70  |    [组合](https://leetcode-cn.com/problems/combinations/)    |        |\n|  79  |  [单词搜索](https://leetcode-cn.com/problems/word-search/)   |  Hard  |\n|  78  |      [子集](https://leetcode-cn.com/problems/subsets/)       | Medium |\n|  90  |   [子集 II](https://leetcode-cn.com/problems/subsets-ii/)    |        |\n|  93  | [复原IP地址](https://leetcode-cn.com/problems/restore-ip-addresses/) |  Hard  |\n|  97  | [交错字符串](https://leetcode-cn.com/problems/interleaving-string/) |  Hard  |\n| 113  | [路径总和 II](https://leetcode-cn.com/problems/path-sum-ii/) |        |\n\n## 7. 例题：全排列问题（有重复数字）[47]\n\n### 7.1 题目描述\n\n题目来源：[47. 全排列 II](https://leetcode-cn.com/problems/permutations-ii/)\n\n给定一个可包含重复数字的序列，返回所有不重复的全排列。\n\n示例：\n\n```bash\n输入: [1,1,2]\n输出:\n[\n  [1,1,2],\n  [1,2,1],\n  [2,1,1]\n]\n```\n\n### 7.2 题目分析\n\n这道题与上面 46 题不同，给出的序列是包含重复数字的，所以，46题的第一种方法使用track的contain来判断是否选择在这里不使用。而第二种方法，标记数组是可行的，但直接使用 used 数组判断，最终得到的全排列结果可能会有重复，如下图所示：（图片来自：[这里](https://leetcode-cn.com/problems/permutations-ii/solution/hui-su-suan-fa-python-dai-ma-java-dai-ma-by-liwe-2/)）\n\n<img src=\"/pictures/全排列2.png\" alt=\"全排列2\" style=\"zoom: 33%;\" />\n\n如上所示，绿色框中的序列都是重复的，不属于结果集。为什么会出现这种情况呢？\n\n观察发现，在决策树中，同一父节点下的子节点中，选中两个相同的数字时，必然出现重复的全排列结果。那么如何避免这种情况呢？\n\n对给出的序列进行排序，这样相同的数字都会放在一起。\n\n```bash\nfor 选择 in 选择列表:\n\t做选择\n\tbacktrack(路径, 选择列表)\n\t撤销选择\n```\n\n在框架的核心代码中，撤销选择处撤销的数字，就是下一个遍历节点的左侧兄弟节点，保存这个数组为 pre，如下图所示，当遍历到nums[i] 处时，如果 pre == nums[i]，则说明需要剪枝。\n\n<img src=\"/pictures/image-20200725154024914.png\" alt=\"image-20200725154024914\" style=\"zoom:67%;\" />\n\n### 7.3 代码\n\n```java\nList<List<Integer>> res = new LinkedList<>();\npublic List<List<Integer>> permuteUnique(int[] nums){\n    int len = nums.length;\n    if(len == 0){\n        return res;\n    }\n\n    // 排序；相同的数字放在一起，重复的剪枝方便\n    Arrays.sort(nums);\n    LinkedList<Integer> track = new LinkedList<>();\n    boolean[] used = new boolean[len];\n    backtrack(nums, track, used);\n    return res;\n}\n\nprivate void backtrack(int[] nums, LinkedList<Integer> track, boolean[] used){\n    int len = nums.length;\n    // 满足结束条件\n    if(track.size() == len){\n        res.add(new LinkedList<>(track));\n        return;\n    }\n\n    // 初始化为数组中没有的数\n    int pre = nums[0] - 1;\n    for(int i = 0; i < len; i++){\n        // 排除不合法选择\n        if(used[i] || pre == nums[i]){\n            continue;\n        }\n        // 做选择\n        track.add(nums[i]);\n        used[i] = true;\n        // 进入下一层决策树\n        backtrack(nums, track, used);\n        // 撤销选择\n        track.removeLast();\n        used[i] = false;\n        // 记录刚被撤销的数字\n        pre = nums[i];\n    }\n}\n```\n\n### 7.4 小结\n\n还是按照回溯法的框架来解决，但是剪枝的部分一开始想不到。\n\n## 8. 例题：组合总和 [39]\n\n### 8.1 题目描述\n\n题目来源：[39. 组合总和](https://leetcode-cn.com/problems/combination-sum/)\n\n给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。\n\ncandidates 中的数字可以无限制重复被选取。\n\n说明：\n\n所有数字（包括 target）都是正整数。\n解集不能包含重复的组合。 \n示例 1：\n\n```bash\n输入：candidates = [2,3,6,7], target = 7,\n所求解集为：\n[\n  [7],\n  [2,2,3]\n]\n```\n\n示例 2：\n\n```bash\n输入：candidates = [2,3,5], target = 8,\n所求解集为：\n[\n  [2,2,2,2],\n  [2,3,3],\n  [3,5]\n]\n```\n\n提示：\n\n```bash\n1 <= candidates.length <= 30\n1 <= candidates[i] <= 200\ncandidate 中的每个元素都是独一无二的。\n1 <= target <= 500\n```\n\n### 8.2 题目分析\n\n这道题依旧可以使用回溯法进行暴力穷举。有几点需要注意：\n\n1. 选择列表candidates可以重复选择，即选择列表自始至终都不变，是candidates\n2. candidate 中的每个元素都是独一无二的\n3. 解集不能包含重复的组合，即最终的结果不能重复\n\n鉴于最终结果不可以重复，我们可以剪掉会重复的枝，即将选择列表排序，路径的下一个节点选择从当前节点开始遍历（由于candidate 中的每个元素不重复，所以start从 i 开始就可以解决结果重复的问题）。另外，这道题改用减法更好理解。\n\n### 8.3 代码\n\n```java\nList<List<Integer>> res = new LinkedList<>();\npublic List<List<Integer>> combinationSum(int[] candidates, int target){\n    if(candidates.length == 0){\n        return res;\n    }\n\n    // 优化添加的代码1：先对数组排序，可以提前终止判断\n    Arrays.sort(candidates);\n    LinkedList<Integer> track = new LinkedList<>();\n    backtrack(candidates, track, target, 0);\n    return res;\n}\n\n/**\n     *\n     * @param candidates\n     * @param track 记录路径\n     * @param residue 剩余\n     * @param start 下一次从 start 开始判断是否添加到路径\n     */\nprivate void backtrack(int[] candidates, LinkedList<Integer> track, int residue, int start){\n    //触发结束条件\n    if(residue == 0){\n        res.add(new LinkedList<>(track));\n        return;\n    }\n\n    // i 从 start 开始，剪掉小于 candidates[i] 的枝\n    for(int i = start; i < candidates.length; i++){\n        // 排除不合法的选择\n        if(residue - candidates[i] < 0){\n            break;\n        }\n\n        // 做选择\n        track.add(candidates[i]);\n        // 进入下一层决策树\n        // residue-candidates[i] 为下一轮剩余\n        // i 为下一轮的 start值，原因：为了避免重复，选择的数字只能大于等于candidates[i]\n        backtrack(candidates, track, residue-candidates[i], i);\n        // 撤销选择\n        track.removeLast();\n    }\n}\n```\n\n## 9. 例题：组合总和 2 [40]\n\n题目来源：[40. 组合总和 II](https://leetcode-cn.com/problems/combination-sum-ii/)\n\n### 9.1 题目描述\n\n给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。\n\ncandidates 中的每个数字在每个组合中只能使用一次。\n\n说明：\n\n所有数字（包括目标数）都是正整数。\n解集不能包含重复的组合。 \n示例 1:\n\n```bash\n输入: candidates = [10,1,2,7,6,1,5], target = 8,\n所求解集为:\n[\n  [1, 7],\n  [1, 2, 5],\n  [2, 6],\n  [1, 1, 6]\n]\n```\n\n\n示例 2:\n\n```bash\n输入: candidates = [2,5,2,1,2], target = 5,\n所求解集为:\n[\n  [1,2,2],\n  [5]\n]\n```\n\n### 9.2 题目分析\n\n本题与上一题的区别有两个：\n\n1. candidates 中的每个数字在每个组合中只能使用一次\n2. candidates 中有重复数字\n\n思路如下：\n\n1. 要保证每个数字用一次，先对序列排序， 且 start 从 i+1 开始\n2. 要保证结果不重复，第一步是不够的，因为 candidates 中有重复数字。这个问题和上文的 **全排列问题（有重复数字）** 类似，使用 pre 标记刚撤销的数字，与当前值比较后进行剪枝。\n\n### 9.3 代码\n\n```java\nList<List<Integer>> res = new LinkedList<>();\npublic List<List<Integer>> combinationSum2(int[] candidates, int target){\n    if(candidates.length == 0){\n        return res;\n    }\n\n    // 排序\n    Arrays.sort(candidates);\n    LinkedList<Integer> track = new LinkedList<>();\n    backtrack(candidates, track, target, 0);\n    return res;\n}\n\n/**\n     *\n     * @param candidates\n     * @param track 记录路径\n     * @param residue 剩余\n     * @param start 下一次从 start 开始判断是否添加到路径\n     */\nprivate void backtrack(int[] candidates, LinkedList<Integer> track, int residue, int start){\n    //触发结束条件\n    if(residue == 0){\n        res.add(new LinkedList<>(track));\n        return;\n    }\n\n    int pre = candidates[0] - 1;\n    for(int i = start; i < candidates.length; i++){\n        // 排除不合法的选择\n        // candidates排序之后，如果第一个不满足，后面的肯定不满足，直接break\n        if(residue - candidates[i] < 0){\n            break;\n        }\n        // 当前值和上一个撤销的值相同，会重复，continue\n        if(candidates[i] == pre){\n            continue;\n        }\n\n        //做选择\n        track.add(candidates[i]);\n        // 进入下一层决策树\n        // start 从 i+1 开始\n        backtrack(candidates, track, residue-candidates[i], i+1);\n        //撤销选择\n        track.removeLast();\n        pre = candidates[i];\n    }\n}\n```\n\n## 10. 例题：组合 [70]\n\n题目来源：[77. 组合](https://leetcode-cn.com/problems/combinations/)\n\n### 10.1 题目描述\n\n给定两个整数 n 和 k，返回 1 ... n 中所有可能的 k 个数的组合。\n\n示例：\n\n```bash\n输入: n = 4, k = 2\n输出:\n[\n  [2,4],\n  [3,4],\n  [2,3],\n  [1,2],\n  [1,3],\n  [1,4],\n]\n```\n\n### 10.2 题目分析\n\n这种数字组合的题目是典型的回溯法问题，先选一个数字，进入递归继续选，如果满足条件则加入结果中，然后回溯到上一步，继续递归。\n\n### 10.3 代码\n\n```java\nList<List<Integer>> res = new LinkedList<>();\n\n/**\n     * 解法一：回溯法\n     * 回溯的常规解法\n     * @param n\n     * @param k\n     * @return\n     */\npublic List<List<Integer>> combine(int n, int k) {\n    LinkedList<Integer> track = new LinkedList<>();\n    backtrack(track, n, k, 1);\n    return res;\n}\n\nprivate void backtrack(LinkedList<Integer> track, int n, int k, int start){\n    // 如果满足条件\n    if(track.size() == k){\n        res.add(new LinkedList<>(track));\n        return;\n    }\n\n    // 为避免重复，i 从 start 开始\n    for(int i = start; i <= n; i++){\n        // 做选择\n        track.add(i);\n        backtrack(track, n, k, i+1);\n        // 撤销选择\n        track.removeLast();\n    }\n}\n```\n\n### 10.4 优化\n\n参考 [这里](https://leetcode.wang/leetCode-77-Combinations.html) 对上面代码进行优化。将 for 循环改为 ``for(int i = start; i <= (n-k)+1 + track.size(); i++)``, 其中，``(n-k)+1``  表示要在 n 中找到 k 个数字组合，start 必须从 (n-k)+1 处开始；``(n-k)+1 + track.size()``  表示当前 i 取到的最大数字。原因如下：\n\n我们发现，如果 n = 5, k = 3,  那么 start 最大取到3，因为如果 start = 4，最终结果只能得到到 (4,5), 结果的个数必定小于k，不满足条件。\n\n如果 n = 5, k = 3, start = 1, 当 i = 2, track.size() = 1时，i 最大取到 (5-3)+1 + 1 = 4，否则，如果 i 取到 5，结果只能为 (1,5), 数字个数肯定不满足条件。\n\n代码如下：\n\n```java\nprivate void backtrack2(LinkedList<Integer> track, int n, int k, int start){\n    if(track.size() == k){\n        res.add(new LinkedList<>(track));\n        return;\n    }\n\n    // (n-k)+1 表示要在n中找到k个数字组合，start必须从(n-k)+1处开始\n    // 即如果n=5,k=3, 那么start最大取到3，因为如果当start=4时，组合中数字的个数不足\n    // (n-k)+1 + track.size() 表示当前i取到的最大数字\n    for(int i = start; i <= (n-k)+1 + track.size(); i++){\n        track.add(i);\n        backtrack(track, n, k, i+1);\n        track.removeLast();\n    }\n}\n```\n\n虽然只改了一句代码，但速度快了很多。\n\n## 11. 单词搜索 [79]\n\n题目来源：[79. 单词搜索](https://leetcode-cn.com/problems/word-search/)\n\n### 11.1. 题目描述\n\n给定一个二维网格和一个单词，找出该单词是否存在于网格中。\n\n单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。\n\n示例:\n\n```bash\nboard =\n[\n  ['A','B','C','E'],\n  ['S','F','C','S'],\n  ['A','D','E','E']\n]\n\n给定 word = \"ABCCED\", 返回 true\n给定 word = \"SEE\", 返回 true\n给定 word = \"ABCB\", 返回 false\n```\n\n\n提示：\n\n- board 和 word 中只包含大写和小写英文字母。\n- 1 <= board.length <= 200\n- 1 <= board[i].length <= 200\n- 1 <= word.length <= 10^3\n\n### 11.2. 题目分析\n\n基本思路：找第一个匹配的字符，然后在其上下左右的四个字符中找与第二个字符匹配的字符，找到后，以次类推。上下左右字符需要首先判断是否越界、是否已经访问过。\n\n但是，在做题的过程中，完全忽略了这是标准的回溯思想，参考之前的博客：[回溯算法](https://juliajiang7.github.io/2020/07/25/回溯算法总结/#more).\n\n回溯法采用试错的思想，尝试分步解决一个问题。在本题中，匹配下一个字符时就有上下左右四种选择。当它发现现有的分布答辩不能得到有效的正确答案时，将取消上一步或者上几步的计算，再通过其他分步尝试得到问题答案。\n\n在做题中有一个很大问题：忽略了回溯，即选择一条路走完发现不能匹配时，就返回了false，没有取消这一步操作。这一点要注意。\n\n另外，这一题使用框架不太好写，还是基于回溯思想（DFS），按照正常的思路来写。\n\n### 11.3. 代码\n\n```java\npublic boolean exist(char[][] board, String word) {\n    if(board.length == 0){return false;}\n    int row = board.length;\n    int col = board[0].length;\n    for(int i = 0; i < row; i++){\n        for(int j = 0; j < col; j++){\n            // 找到第一个字母\n            if(board[i][j] == word.charAt(0)){\n                boolean[][] visited = new boolean[row][col];\n                visited[i][j] = true;\n                // 判断从 board[i][j] 出发，后面能否全部匹配\n                if(isValid(i, j, word, 0, board, visited)){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n     * 当 board[i][j] 匹配 word[k] 时，后面是否可以全部匹配\n     * @param i\n     * @param j\n     * @param word\n     * @param k\n     * @param board\n     * @param visited 当前已访问的字符\n     * @return\n     */\nprivate boolean isValid(int i, int j, String word, int k, char[][] board, boolean[][] visited){\n    int row = board.length;\n    int col = board[0].length;\n    if(k == word.length() - 1){return true;}\n    // 上面\n    boolean left = false;\n    if(i - 1 >= 0 && !visited[i - 1][j] && board[i - 1][j] == word.charAt(k + 1)){\n        visited[i - 1][j] = true;\n        left = isValid(i - 1, j, word, k + 1, board, visited);\n    }\n    if(left){return left;}\n    // 下面\n    boolean right = false;\n    if(i + 1 < row && !visited[i + 1][j] && board[i + 1][j] == word.charAt(k + 1)){\n        visited[i + 1][j] = true;\n        right = isValid(i + 1, j, word, k + 1, board, visited);\n    }\n    if(right){return right;}\n    // 左边\n    boolean up = false;\n    if(j - 1 >= 0 && !visited[i][j - 1] && board[i][j - 1] == word.charAt(k + 1)){\n        visited[i][j - 1] = true;\n        up = isValid(i, j - 1, word, k + 1, board, visited);\n    }\n    if(up){return up;}\n    // 右边\n    boolean down = false;\n    if(j + 1 < col && !visited[i][j + 1] && board[i][j + 1] == word.charAt(k + 1)){\n        visited[i][j + 1] = true;\n        down = isValid(i, j + 1, word, k + 1, board, visited);\n    }\n    if(down){return true;}\n    // 如果上下左右都没有匹配，则取消这一步，回溯\n    visited[i][j] = false;\n    return false;\n}\n```\n\n## 12. 子集 [78]\n\n题目来源：[78. 子集](https://leetcode-cn.com/problems/subsets/)\n\n### 12.1. 题目描述\n\n![image-20200824094845802](/pictures/image-20200824094845802.png)\n\n### 12.1. 方法一：迭代\n\n利用数学归纳的思想：假设现在知道了规模更小的子问题，如何推导出当前问题的结果呢？即知道了 [1,2] 的子集，如何求 [1,2,3] 的子集。\n\n可以发现，[1,2,3] 的子集包括两部分：第一部分是已知的 [1,2] 的子集；另一部分是给每一个 [1,2] 子集加上 3。发现这个规律后，即可写出下面的迭代代码：\n\n```java\npublic List<List<Integer>> subsets(int[] nums) {\n    List<List<Integer>> res = new LinkedList<>();\n    res.add(new LinkedList<>());\n\n    for (int num : nums) {\n        int size = res.size();\n        for(int i = 0; i < size; i++){\n            // 注意：这里需要 new 一个对象，不可以直接赋值\n            List<Integer> cur = new LinkedList<>(res.get(i));\n            cur.add(num);\n            res.add(cur);\n        }\n    }\n\n    return res;\n}\n```\n\n时间复杂度：迭代次数是 N，每次迭代都遍历 res，res 的长度应该是每次递归都翻倍，所以说总的迭代次数应该是 2^N。所以，总的时间复杂度是 O(N * 2 ^ N)。\n\n空间复杂度：如果不计算储存返回结果所用的空间的，只需要 O(N) 的递归堆栈空间。如果计算 `res` 所需的空间，应该是 O(N*2^N)。\n\n### 12.2. 方法二：回溯算法\n\n参考 [这里](https://mp.weixin.qq.com/s/qT6WgR6Qwn7ayZkI3AineA).\n\n```java\nList<List<Integer>> res = new LinkedList<>();\npublic List<List<Integer>> subsetsWithDup(int[] nums) {\n    LinkedList<Integer> track = new LinkedList<>();\n    backtrack(nums, track, 0);\n    return res;\n}\n\nprivate void backtrack(int[] nums, LinkedList<Integer> track, int start) {\n    res.add(new LinkedList<>(track));\n\n    for(int i = start; i < nums.length; i++){\n        track.add(nums[i]);\n        backtrack(nums, track, start + 1);\n        track.removeLast();\n    }\n}\n```\n\n## 13. 子集 II [90]\n\n题目来源：[90. 子集 II](https://leetcode-cn.com/problems/subsets-ii/)\n\n### 13.1. 题目描述\n\n![image-20200824101740024](/pictures/image-20200824101740024.png)\n\n### 13.2. 代码\n\n有了上一题的基础，回溯法稍作修改即可。\n\n为了方便的剪枝，要对序列进行排序，排序之后所有相同的数字都会放在一起。为了避免结果中出现相同的子集，兄弟节点中不能出现相同的数字，即在 ``track.add`` 之前，需要先判断，是否和已经加入的兄弟节点值相同（如果是第一个加入的子节点，不需要判断）。 代码如下：\n\n```java\nList<List<Integer>> res = new LinkedList<>();\npublic List<List<Integer>> subsetsWithDup(int[] nums) {\n    LinkedList<Integer> track = new LinkedList<>();\n    Arrays.sort(nums);\n    backtrack(nums, track, 0);\n    return res;\n}\n\n\nprivate void backtrack(int[] nums, LinkedList<Integer> track, int start) {\n    res.add(new LinkedList<>(track));\n\n    for(int i = start; i < nums.length; i++){\n        if(i == start || nums[i] != nums[i - 1]){\n            track.add(nums[i]);\n            backtrack(nums, track, i + 1);\n            track.removeLast();\n        }\n    }\n}\n```\n\n## 14. 复原IP地址 [93]\n\n题目来源：[93. 复原IP地址](https://leetcode-cn.com/problems/restore-ip-addresses/)\n\n### 14.1. 题目描述\n\n![image-20200827104857215](/pictures/image-20200827104857215.png)\n\n### 14.2. 解法一：暴力破解（迭代）\n\n参考 [这里](https://leetcode.wang/leetCode-93-Restore-IP-Addresses.html).\n\n要求划分为四部分，我们直接利用三个指针将字符串强行分为4部分，遍历所有的划分，然后选取合法的解。这种解法没有超时。\n\n```java\npublic List<String> restoreIpAddresses(String s) {\n    List<String> res = new ArrayList<>();\n    int len = s.length();\n    // i < 4 保证第一部分不超过3位数\n    // i < len - 2 保证剩余的字符串还能分成3部分\n    for (int i = 1; i < 4 && i < len - 2; i++) {\n        for (int j = i + 1; j < i + 4 && j < len - 1; j++) {\n            for (int k = j + 1; k < j + 4 && k < len; k++) {\n                // 保存四部分字符串\n                String s1 = s.substring(0, i), s2 = s.substring(i, j), s3 = s.substring(j, k), s4 = s.substring(k, len);\n                // 判断是否合法\n                if (isValid(s1) && isValid(s2) && isValid(s3) && isValid(s4)) {\n                    res.add(s1 + \".\" + s2 + \".\" + s3 + \".\" + s4);\n                }\n            }\n        }\n    }\n    return res;\n}\n\nprivate boolean isValid(String s) {\n    if (s.length() > 3 || s.length() == 0 || (s.charAt(0) == '0' && s.length() > 1) || Integer.parseInt(s) > 255) {\n        return false;\n    }\n    return true;\n}\n```\n\n时间复杂度：如果不考虑我们调用的内部函数，Integer.parseInt，s.substring，那么就是 O（1）。因为每一层循环最多遍历 4 次。考虑的话每次调用的时间复杂度是 O（n），常数次调用，所以是 O（n）。\n\n空间复杂度：O（1）。\n\n### 14.3. 解法二：回溯\n\n字符串划分问题，需要划分为4部分。直接使用回溯的思想，第一部分可能是 1 位数，然后进入递归；也可能是2位数，然后进入递归；也可能是三位数，然后进入递归。即每一次循环有三种选择。\n\n本题虽然使用了回溯的思想，但前面总结的框架不能直接使用，下面代码是它的变形，而且本题的难点在于需要考虑的情况比较多，剪枝条件也比较多。具体剪枝的分析参考 [这里](https://leetcode-cn.com/problems/restore-ip-addresses/solution/hui-su-suan-fa-hua-tu-fen-xi-jian-zhi-tiao-jian-by/) .\n\n```java\npublic List<String> restoreIpAddresses(String s) {\n    List<String> res = new ArrayList<>();\n    backtrack(s, 0, new StringBuilder(), res, 0);\n    return res;\n}\n\n/**\n     * @param s\n     * @param start 字符串开始部分\n     * @param track 已经划分部分\n     * @param res   保存所有的解\n     * @param count 当前已经加入了几部分\n     */\nprivate void backtrack(String s, int start, StringBuilder track, List<String> res, int count) {\n    // 如果剩余长度大于剩下部分都取3位数的长度，剪枝\n    if (s.length() - start > 3 * (4 - count)) {\n        return;\n    }\n    // 当前刚好到达末尾\n    if (start == s.length()) {\n        // 当前刚好是4部分，将结果加入，否则剪枝\n        if (count == 4) {\n            res.add(track.substring(0, track.length() - 1));\n        }\n        // 当前到达末尾，但不是4部分，剪枝\n        return;\n    }\n    // 当前超过末尾，剪枝\n    // 当前未到达末尾，但有4部分，剪枝\n    if (start > s.length() || count == 4) {\n        return;\n    }\n    // 保存当前的解\n    StringBuilder before = new StringBuilder(track);\n\n    // 选择：加入一位数\n    track.append(s.charAt(start) + \"\" + '.');\n    backtrack(s, start + 1, track, res, count + 1);\n\n    // 如果开头是0，直接结束，即选择2或3位数之前可进行剪枝\n    if (s.charAt(start) == '0') {\n        return;\n    }\n\n    // 做出选择：加入2位数\n    if (start + 1 < s.length()) {\n        // 撤销选择：恢复为之前的解\n        track = new StringBuilder(before);\n        track.append(s.substring(start, start + 2) + \"\" + '.');\n        backtrack(s, start + 2, track, res, count + 1);\n    }\n\n    // 做出选择：加入3位数\n    if (start + 2 < s.length()) {\n        // 撤销选择：恢复为之前的解\n        track = new StringBuilder(before);\n        // 当选择3位数时，要判断数字大小\n        int num = Integer.parseInt(s.substring(start, start + 3));\n        if (0 <= num && num <= 255) {\n            track.append(s.substring(start, start + 3) + \"\" + '.');\n            backtrack(s, start + 3, track, res, count + 1);\n        }\n    }\n}\n```\n\n## 15. 交错字符串 [97]\n\n题目来源：[97. 交错字符串](https://leetcode-cn.com/problems/interleaving-string/)\n\n### 15.1. 题目描述\n\n![image-20200828102111964](/pictures/image-20200828102111964.png)\n\n### 15.2. 方法一：回溯法\n\n参考：[这里](https://leetcode.wang/leetCode-97-Interleaving-String.html)\n\n感觉要用回溯解决，但是不知道怎么回溯，如何递归。\n\n```java\npublic boolean isInterleave(String s1, String s2, String s3) {\n    if (s1.length() + s2.length() != s3.length()) {\n        return false;\n    }\n    return backtrack(s1, s2, s3, 0, 0, 0);\n}\n\nprivate boolean backtrack(String s1, String s2, String s3, int i, int j, int k) {\n    // i，j,k 全部到达末尾就返回true\n    if (i == s1.length() && j == s2.length() && k == s3.length()) {\n        return true;\n    }\n    // i 到达末尾，直接移动 j 和 k 不停比较\n    if (i == s1.length()) {\n        while (j < s2.length()) {\n            if (s2.charAt(j) != s3.charAt(k)) {\n                return false;\n            }\n            j++;\n            k++;\n        }\n        return true;\n    }\n    // j 到达末尾，直接移动 i 和 k 不停比较\n    if (j == s2.length()) {\n        while (i < s1.length()) {\n            if (s1.charAt(i) != s3.charAt(k)) {\n                return false;\n            }\n            i++;\n            k++;\n        }\n        return true;\n    }\n    // 判断 i 和 k 指向的字符是否相等\n    if (s1.charAt(i) == s3.charAt(k)) {\n        // 后移 i 和 k 继续判断，如果成功直接返回true\n        if (backtrack(s1, s2, s3, i + 1, j, k + 1)) {\n            return true;\n        }\n    }\n    // 移动 i 和 k 失败，尝试移动 j 和 k\n    if (s2.charAt(j) == s3.charAt(k)) {\n        if (backtrack(s1, s2, s3, i, j + 1, k + 1)){\n            return true;\n        }\n    }\n    // 移动 i 和 j 都失败，返回 false\n    return false;\n}\n```\n\n### 15.3. 方法二：回溯法的优化（备忘录）\n\n参考：[这里](https://leetcode.wang/leetCode-97-Interleaving-String.html)\n\n由于递归的分支，所以会造成很多重复情况的判断，所以我们用 memoization 技术，把求出的结果用 hashmap 保存起来，第二次过来的时候直接返回结果以免再次进入递归。\n\nhashmap key 的话用字符串 i + \"@\" + j ，之所以中间加 \"@\"，是为了防止 i = 1 和 j = 22。以及 i = 12，j = 2。这样的两种情况产生的就都是 122。加上 \"@\" 可以区分开来。\n\n原文中：map 的 value 取值有三个，用 1 表示 true，0 表示 false，-1 代表还未赋值。\n\n但其实这里并不会用到三个值，因为一旦遇到的 i 和 j 满足要求，直接返回 true 即可，不需要再存入 map 中。因此，这里定义的 memo 就是一个不满足要求的 i 和 j 组合，只要 memo中含有 i 和 j 的组合，则直接返回 false。\n\n```java\npublic boolean isInterleave(String s1, String s2, String s3) {\n    if (s1.length() + s2.length() != s3.length()) {\n        return false;\n    }\n    // memo 的 key 是：i + \"@\" + j，用@隔开是为了防止i=1,j=22时，可能出现两种组合情况：(1,22),(12,2)\n    // memo 的 value 取值：-1 表示为赋值；0 表示false；1 表示true\n    // value 其实用不到三个值，因为一旦当前的 i 和 j 符合要求，直接返回 true 即可。因此 memo 中只需要存不满足情况的 i 和 j 即可\n    Map<String, Integer> memo = new HashMap<>();\n    return backtrack2(s1, s2, s3, 0, 0, 0, memo);\n}\n\nprivate boolean backtrack2(String s1, String s2, String s3, int i, int j, int k, Map<String, Integer> memo) {\n    String key = i + \"@\" + j;\n    if (memo.containsKey(key)){\n        return false;\n    }\n    if (i == s1.length() && j == s2.length() && k == s3.length()) {\n        return true;\n    }\n\n    if (i == s1.length()) {\n        while (j < s2.length()) {\n            if (s2.charAt(j) != s3.charAt(k)) {\n                memo.put(key, 0);\n                return false;\n            }\n            j++;\n            k++;\n        }\n        return true;\n    }\n    if (j == s2.length()) {\n        while (i < s1.length()) {\n            if (s1.charAt(i) != s3.charAt(k)) {\n                memo.put(key, 0);\n                return false;\n            }\n            i++;\n            k++;\n        }\n        return true;\n    }\n    if (s1.charAt(i) == s3.charAt(k)) {\n        if (backtrack2(s1, s2, s3, i + 1, j, k + 1, memo)) {\n            return true;\n        }\n    }\n    if (s2.charAt(j) == s3.charAt(k)) {\n        if (backtrack2(s1, s2, s3, i, j + 1, k + 1, memo)){\n            return true;\n        }\n    }\n    memo.put(key, 0);\n    return false;\n}\n```\n\n### 15.4. 方法三：动态规划\n\n参考：[这里](https://leetcode.wang/leetCode-97-Interleaving-String.html)\n\ndp 数组定义：定义一个 boolean 二维数组 dp [ i ] [ j ] 来表示 s1[ 0, i ) 和 s2 [ 0, j ） 组合后能否构成 s3 [ 0, i + j )，注意不包括右边界，主要是为了考虑开始的时候如果只取 s1，那么 s2 就是空串，这样的话 dp [ i ] [ 0 ] 就能表示 s2 取空串。\n\n注意，``dp[0][0]`` 表示 s1 和 s2 都取空串，组成一个空串，则值为 true。\n\n```java\npublic boolean isInterleave(String s1, String s2, String s3) {\n    if (s1.length() + s2.length() != s3.length()) {\n        return false;\n    }\n    if (s1.length() == 0 && s2.length() == 0 && s3.length() == 0) {\n        return true;\n    }\n    int len1 = s1.length();\n    int len2 = s2.length();\n    // dp[i][j] = true 表示：s1[0..i) 和 s2[0..j) 组合后能构成 s3[0..i+j)\n    boolean[][] dp = new boolean[len1 + 1][len2 + 1];\n    // base case\n    dp[0][0] = true;\n    for (int i = 1; i <= len1; i++) {\n        dp[i][0] = dp[i - 1][0] && s1.charAt(i - 1) == s3.charAt(i - 1);\n    }\n    for (int j = 1; j <= len2; j++) {\n        dp[0][j] = dp[0][j - 1] && s2.charAt(j - 1) == s3.charAt(j - 1);\n    }\n\n    for (int i = 1; i <= len1; i++) {\n        for (int j = 1; j <= len2; j++) {\n            dp[i][j] = (dp[i - 1][j] && s1.charAt(i - 1) == s3.charAt(i + j - 1))\n                || (dp[i][j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));\n        }\n    }\n    return dp[len1][len2];\n}\n```\n\n## 16. 路径总和 II [113]\n\n题目来源：[113. 路径总和 II](https://leetcode-cn.com/problems/path-sum-ii/)\n\n### 16.1. 题目描述\n\n![image-20200903093332125](/pictures/image-20200903093332125.png)\n\n### 16.2. 代码\n\n典型的回溯思路：采用试错的思想，尝试分步去解决问题，在分步解决问题的过程中，当通过尝试发现现有的分布答案不能得到有效的正确答案时，取消上一步甚至是上几步的计算，再通过其他的分布尝试寻找问题的答案。\n\n```java\nList<List<Integer>> res = new LinkedList<>();\n\npublic List<List<Integer>> pathSum(TreeNode root, int sum) {\n    LinkedList<Integer> track = new LinkedList<>();\n    if (root == null) {\n        return res;\n    }\n    track.add(root.val);\n    backtrack(root, sum, track, root.val);\n    return res;\n}\n\nprivate void backtrack(TreeNode root, int sum, LinkedList<Integer> track, int tmp) {\n    if (tmp == sum && root.left == null && root.right == null) {\n        res.add(new LinkedList<>(track));\n    }\n\n    if (root.left != null) {\n        // 做出选择：左子树\n        track.add(root.left.val);\n        backtrack(root.left, sum, track, tmp + root.left.val);\n        // 撤销选择\n        track.removeLast();\n    }\n\n    if (root.right != null) {\n        track.add(root.right.val);\n        backtrack(root.right, sum, track, tmp + root.right.val);\n        track.removeLast();\n    }\n}\n```\n\n## 17. 参考引用\n\n1. [Wikipedia](https://zh.wikipedia.org/wiki/%E5%9B%9E%E6%BA%AF%E6%B3%95)\n2. https://labuladong.gitbook.io/algo/di-ling-zhang-bi-du-xi-lie/hui-su-suan-fa-xiang-jie-xiu-ding-ban\n3. https://leetcode-cn.com/problems/permutations/solution/hui-su-suan-fa-python-dai-ma-java-dai-ma-by-liweiw/\n4. https://leetcode.wang/leetCode-77-Combinations.html\n5. https://mp.weixin.qq.com/s/qT6WgR6Qwn7ayZkI3AineA\n6. https://leetcode-cn.com/problems/restore-ip-addresses/solution/hui-su-suan-fa-hua-tu-fen-xi-jian-zhi-tiao-jian-by/\n7. https://leetcode.wang/leetCode-97-Interleaving-String.html","source":"_posts/回溯算法总结.md","raw":"---\ntitle: 回溯算法总结\ndate: 2020-07-25 08:55:05\ntags:\n  - Algorithm\n  - Java\n  - 回溯\ncategories: Algorithm\ntypora-copy-images-to: ..\\pictures\n---\n\n本文主要介绍了回溯法的定义、回溯法的代码框架，以及回溯法的典型问题全排列问题、N皇后问题等。另外，还介绍了LeetCode中使用回溯法的部分题目，这部分内容会持续更新。\n\n## 1. 什么是回溯法？\n\n**[维基定义](https://zh.wikipedia.org/wiki/回溯法)** : （英语：backtracking）是[暴力搜索法](https://zh.wikipedia.org/wiki/暴力搜尋法)中的一种。\n\n对于某些计算问题而言，回溯法是一种可以找出所有（或一部分）解的一般性算法，尤其适用于约束满足问题（在解决约束满足问题时，我们逐步构造更多的候选解，并且在确定某一部分候选解不可能补全成正确解之后放弃继续搜索这个部分候选解本身及其可以拓展出的子候选解，转而测试其他的部分候选解）。在经典的教科书中，**[八皇后问题](https://zh.wikipedia.org/wiki/八皇后问题)**展示了回溯法的用例。\n\n<!--more-->\n\n回溯法采用[试错](https://zh.wikipedia.org/wiki/试错)的思想，它尝试分步的去解决一个问题。在分步解决问题的过程中，当它通过尝试发现现有的分步答案不能得到有效的正确的解答的时候，它将取消上一步甚至是上几步的计算，再通过其它的可能的分步解答再次尝试寻找问题的答案。回溯法通常用最简单的递归方法来实现，在反复重复上述的步骤后可能出现两种情况：\n\n- 找到一个可能存在的正确的答案\n- 在尝试了所有可能的分步方法后宣告该问题没有答案\n\n在最坏的情况下，回溯法会导致一次复杂度为指数时间的计算。\n\n“回溯”指的是“状态重置”，可以理解为“回到过去”、“恢复现场”，是在编码的过程中，是为了节约空间而使用的一种技巧。而回溯其实是“深度优先遍历”特有的一种现象。之所以是“深度优先遍历”，是因为我们要解决的问题通常是在一棵树上完成的，在这棵树上搜索需要的答案，一般使用深度优先遍历。\n\n## 2. 回溯法框架\n\n上文主要是 Wikipedia 对于回溯法的介绍，这一节，将参考 [这里](https://labuladong.gitbook.io/algo/di-ling-zhang-bi-du-xi-lie/hui-su-suan-fa-xiang-jie-xiu-ding-ban) 给出一个回溯算法的框架。\n\n**解决一个回溯问题，实际上就是一个决策树的遍历过程**。你只需要思考 3 个问题：\n\n1. 路径：也就是已经做出的选择\n2. 选择列表：也就是你当前可以做的选择\n3. 结束条件：也就是到达决策树底层，无法再做选择的条件\n\n如果现在不理解这三个词语没关系，下一节我们将以全排列问题为例，进行详细介绍。下面给出回溯法的框架：\n\n```python\nresult = []\ndef backtrack(路径, 选择列表):\n    if 满足结束条件:\n        result.add(路径)\n        return\n\n    for 选择 in 选择列表:\n        做选择\n        backtrack(路径, 选择列表)\n        撤销选择\n```\n\n**其核心就是 for 循环里面的递归，在递归调用之前「做选择」，在递归调用之后「撤销选择」。**\n\n## 3. 以全排列问题（无重复数字）为例 [46]\n\n### 3.1 题目描述\n\n题目来源：[46. 全排列](https://leetcode-cn.com/problems/permutations/)\n\n给定一个 **没有重复** 数字的序列，返回其所有可能的全排列。\n\n示例：\n\n```bash\n输入: [1,2,3]\n输出:\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]\n```\n\n### 3.2 问题分析\n\n我们知道，对于 n 个不重复的数，全排列共有 n! 个。如果使用穷举法，我们一般会：\n\n先固定第一位为 1，然后第二位可以是 2，那么第三位只能是 3；然后可以把第二位变成 3，第三位就只能是 2 了；然后就只能变化第一位，变成 2，然后再穷举后两位……\n\n其实这就是回溯算法，可以转化为下面的回溯树：\n\n<img src=\"/pictures/1.jpg\" alt=\"img\" style=\"zoom: 33%;\" />\n\n只要从根遍历这棵树，记录路径上的数字，其实就是所有的全排列。**我们不妨把这棵树称为回溯算法的「决策树」**。\n\n**为啥说这是决策树呢，因为你在每个节点上其实都在做决策**。比如说你站在下图的红色节点上：\n\n<img src=\"/pictures/2.jpg\" alt=\"img\" style=\"zoom:33%;\" />\n\n你现在就在做决策，可以选择 1 那条树枝，也可以选择 3 那条树枝。为啥只能在 1 和 3 之中选择呢？因为 2 这个树枝在你身后，这个选择你之前做过了，而全排列是不允许重复使用数字的。\n\n**现在可以解答开头的几个名词：**`[2]` **就是「路径」，记录你已经做过的选择；`[1,3]`就是「选择列表」，表示你当前可以做出的选择；「结束条件」就是遍历到树的底层，在这里就是选择列表为空的时候**。\n\n如果明白了这几个名词，**可以把「路径」和「选择」列表作为决策树上每个节点的属性**，比如下图列出了几个节点的属性：\n\n<img src=\"/pictures/3.jpg\" alt=\"img\" style=\"zoom:33%;\" />\n\n**框架中定义的 ``backtrace``  函数其实就像一个指针，在这棵树上游走，同时要正确维护每个节点的属性，每当走到树的底层，其「路径」就是一个全排列**。\n\n在回溯法中，**我们只要在递归之前做出选择，在递归之后撤销刚才的选择**，就能正确得到每个节点的选择列表和路径。因此，框架中的核心代码详细化如下：\n\n```python\nfor 选择 in 选择列表:\n    # 做选择\n    将该选择从选择列表移除\n    路径.add(选择)\n    backtrack(路径, 选择列表)\n    # 撤销选择\n    路径.remove(选择)\n    将该选择再加入选择列表\n```\n\n### 3.3 代码\n\n```java\nList<List<Integer>> res = new LinkedList<>();\npublic List<List<Integer>> permute(int[] nums) {\n    // 记录路径（已做出的选择）\n    LinkedList<Integer> track = new LinkedList<>();\n    backtrack(nums, track);\n    return res;\n}\n\n/**\n     *\n     * @param nums\n     * @param track\n     */\nprivate void backtrack(int[] nums, LinkedList<Integer> track){\n    // 满足结束条件（到达决策树底层，无法再做选择的条件）\n    if(nums.length == track.size()){\n        res.add(new LinkedList<>(track));\n        return;\n    }\n    for (int num : nums) {\n        // 排除不合法的选择\n        if(track.contains(num)){\n            continue;\n        }\n        // 做选择\n        track.add(num);\n        // 进入下一层决策树\n        backtrack(nums, track);\n        // 撤销选择\n        track.removeLast();\n    }\n}\n```\n\n这里我们并没有显示记录「选择列表」，而是通过 `nums` 和 `track` 推导出当前的选择列表。\n\n至此，我们就通过全排列问题详解了回溯算法的底层原理。当然，这个算法解决全排列不是很高效，应为对链表使用 `contains` 方法需要 O(N) 的时间复杂度。有更好的方法通过交换元素达到目的，但是难理解一些，这里就不写了，有兴趣可以自行搜索一下。\n\n但是必须说明的是，不管怎么优化，都符合回溯框架，而且时间复杂度都不可能低于 O(N!)，因为穷举整棵决策树是无法避免的。**这也是回溯算法的一个特点，不像动态规划存在重叠子问题可以优化，回溯算法就是纯暴力穷举，复杂度一般都很高**。\n\n明白了全排列问题，就可以直接套回溯算法框架了。\n\n### 3.4 另一种方法\n\n上文中没有显示记录「选择列表」，通过用路径的 `contains` 方法来判断是否选择。这里我们 **“以空间换时间”** 的思想，使用一个布尔数组 used，初始化的时候都为 false 表示这些数还没有被选择，当我们选定一个数的时候，就将这个数组的相应位置设置为 true ，这样在考虑下一个位置的时候，就能够以 O(1)  的时间复杂度判断这个数是否被选择过。（参考 [这里](https://leetcode-cn.com/problems/permutations/solution/hui-su-suan-fa-python-dai-ma-java-dai-ma-by-liweiw/)）\n\n```java\nList<List<Integer>> res2 = new LinkedList<>();\npublic List<List<Integer>> permute2(int[] nums){\n    int len = nums.length;\n    if(len == 0){\n        return res;\n    }\n\n    LinkedList<Integer> track = new LinkedList<>();\n    // 标记数组\n    boolean[] used = new boolean[len];\n    backtrace2(nums, track, used);\n    return res2;\n}\n\n/**\n     * \n     * @param nums\n     * @param track\n     * @param used 标记数组，used[i]=true时，表示已被选择\n     */\nprivate void backtrace2(int[] nums, LinkedList<Integer> track, boolean[] used){\n    int len = nums.length;\n    if(track.size() == len){\n        res2.add(new LinkedList<>(track));\n        return;\n    }\n\n    for(int i = 0; i < len; i++){\n        if(used[i]){\n            continue;\n        }\n\n        track.add(nums[i]);\n        used[i] = true;\n\n        backtrace2(nums, track, used);\n\n        track.removeLast();\n        used[i] = false;\n    }\n}\n```\n\n## 4. N皇后问题 [51]\n\n### 4.1 题目描述\n\n题目来源：[51. N皇后](https://leetcode-cn.com/problems/n-queens/)\n\n*n* 皇后问题研究的是如何将 *n* 个皇后放置在 *n*×*n* 的棋盘上，并且使皇后彼此之间不能相互攻击。PS：皇后可以攻击同一行、同一列、左上左下右上右下四个方向的任意单位。\n\n![img](/pictures/8-queens.png)\n\n给定一个整数 n，返回所有不同的 n 皇后问题的解决方案。\n\n每一种解法包含一个明确的 n 皇后问题的棋子放置方案，该方案中 'Q' 和 '.' 分别代表了皇后和空位。\n\n**示例：**\n\n```bash\n输入: 4\n输出: [\n [\".Q..\",  // 解法 1\n  \"...Q\",\n  \"Q...\",\n  \"..Q.\"],\n\n [\"..Q.\",  // 解法 2\n  \"Q...\",\n  \"...Q\",\n  \".Q..\"]\n]\n解释: 4 皇后问题存在两个不同的解法。\n```\n\n### 4.2 问题分析\n\n这个问题本质上跟全排列问题差不多，决策树的每一层表示棋盘上的每一行；每个节点可以做出的选择是，在该行的任意一列放置一个皇后。\n\n### 4.3 代码\n\n```java\nList<List<String>> res = new LinkedList<>();\npublic List<List<String>> solveNQueens(int n) {\n    if (n <= 0){\n        return null;\n    }\n\n    // 初始化棋盘 board 为二维字符数组\n    char[][] board = new char[n][n];\n    for (char[] chars : board){\n        // 初始化\n        Arrays.fill(chars, '.');\n    }\n\n    backtrack(board, 0);\n    return res;\n}\n\n/**\n     * 路径：board中小于row的那些行都已经成功放置了皇后\n     * 可选择列表: 第row行的所有列都是放置 Q 的选择\n     * 结束条件: row超过board的最后一行\n     *\n     * @param board 记录路径\n     * @param row 当前放置第几行\n     */\nprivate void backtrack(char[][] board, int row) {\n    //触发结束条件\n    if (row == board.length) {\n        res.add(charToString(board));\n        return;\n    }\n\n    int n = board[row].length;\n    for (int col = 0; col < n; col++) {\n        //排除不合法选择\n        if (!isValid(board, row, col)){\n            continue;\n        }\n        //做选择\n        board[row][col] = 'Q';\n        //进入下一层决策树\n        backtrack(board, row + 1);\n        //撤销选择\n        board[row][col] = '.';\n    }\n}\n\n/**\n     * 是否可以在 board[row][col] 放置皇后\n     * 不需要检查 这一行，因为每一行只放一个皇后就到下一行\n     * 不需要检查 左下、右下斜线，因为下面还没放元素\n     * @param board\n     * @param row\n     * @param col\n     * @return\n     */\nprivate boolean isValid(char[][] board, int row, int col) {\n    int rows = board.length;\n    //检查这一列是否有皇后\n    for (char[] chars : board){\n        if (chars[col] == 'Q'){\n            return false;\n        }\n    }\n    // 检查左上斜线上是否有皇后\n    for (int i = row - 1, j = col + 1; i >= 0 && j < rows; i--, j++) {\n        if (board[i][j] == 'Q'){\n            return false;\n        }\n    }\n    // 检查右上斜线上是否有皇后\n    for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {\n        if (board[i][j] == 'Q'){\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate static List<String> charToString(char[][] array) {\n    List<String> result = new LinkedList<>();\n    for (char[] chars : array) {\n        result.add(String.valueOf(chars));\n    }\n    return result;\n}\n```\n\n函数 `backtrack` 依然像个在决策树上游走的指针，通过 `row` 和 `col` 就可以表示函数遍历到的位置，通过 `isValid` 函数可以将不符合条件的情况剪枝。\n\n## 5. 回溯法总结\n\n回溯算法就是个多叉树的遍历问题，关键就是在前序遍历和后序遍历的位置做一些操作，算法框架如下：\n\n```python\ndef backtrack(...):\n    for 选择 in 选择列表:\n        做选择\n        backtrack(...)\n        撤销选择\n```\n\n**写** **`backtrack`** **函数时，需要维护走过的「路径」和当前可以做的「选择列表」，当触发「结束条件」时，将「路径」记入结果集**。\n\n下面几节记录了一些平时遇到的，可以使用回溯解决的经典例题，会持续更新~\n\n## 6. 使用回溯法的题目列表\n\n本文中使用回溯法解决的 LeetCode 题目列表如下，持续更新中~\n\n|  #   |                            Title                             | Remark |\n| :--: | :----------------------------------------------------------: | :----: |\n|  46  |   [全排列](https://leetcode-cn.com/problems/permutations/)   |        |\n|  51  |     [N皇后](https://leetcode-cn.com/problems/n-queens/)      |  Hard  |\n|  47  | [全排列 II](https://leetcode-cn.com/problems/permutations-ii/) |        |\n|  39  | [组合总和](https://leetcode-cn.com/problems/combination-sum/) |        |\n|  40  | [组合总和 II](https://leetcode-cn.com/problems/combination-sum-ii/) |        |\n|  70  |    [组合](https://leetcode-cn.com/problems/combinations/)    |        |\n|  79  |  [单词搜索](https://leetcode-cn.com/problems/word-search/)   |  Hard  |\n|  78  |      [子集](https://leetcode-cn.com/problems/subsets/)       | Medium |\n|  90  |   [子集 II](https://leetcode-cn.com/problems/subsets-ii/)    |        |\n|  93  | [复原IP地址](https://leetcode-cn.com/problems/restore-ip-addresses/) |  Hard  |\n|  97  | [交错字符串](https://leetcode-cn.com/problems/interleaving-string/) |  Hard  |\n| 113  | [路径总和 II](https://leetcode-cn.com/problems/path-sum-ii/) |        |\n\n## 7. 例题：全排列问题（有重复数字）[47]\n\n### 7.1 题目描述\n\n题目来源：[47. 全排列 II](https://leetcode-cn.com/problems/permutations-ii/)\n\n给定一个可包含重复数字的序列，返回所有不重复的全排列。\n\n示例：\n\n```bash\n输入: [1,1,2]\n输出:\n[\n  [1,1,2],\n  [1,2,1],\n  [2,1,1]\n]\n```\n\n### 7.2 题目分析\n\n这道题与上面 46 题不同，给出的序列是包含重复数字的，所以，46题的第一种方法使用track的contain来判断是否选择在这里不使用。而第二种方法，标记数组是可行的，但直接使用 used 数组判断，最终得到的全排列结果可能会有重复，如下图所示：（图片来自：[这里](https://leetcode-cn.com/problems/permutations-ii/solution/hui-su-suan-fa-python-dai-ma-java-dai-ma-by-liwe-2/)）\n\n<img src=\"/pictures/全排列2.png\" alt=\"全排列2\" style=\"zoom: 33%;\" />\n\n如上所示，绿色框中的序列都是重复的，不属于结果集。为什么会出现这种情况呢？\n\n观察发现，在决策树中，同一父节点下的子节点中，选中两个相同的数字时，必然出现重复的全排列结果。那么如何避免这种情况呢？\n\n对给出的序列进行排序，这样相同的数字都会放在一起。\n\n```bash\nfor 选择 in 选择列表:\n\t做选择\n\tbacktrack(路径, 选择列表)\n\t撤销选择\n```\n\n在框架的核心代码中，撤销选择处撤销的数字，就是下一个遍历节点的左侧兄弟节点，保存这个数组为 pre，如下图所示，当遍历到nums[i] 处时，如果 pre == nums[i]，则说明需要剪枝。\n\n<img src=\"/pictures/image-20200725154024914.png\" alt=\"image-20200725154024914\" style=\"zoom:67%;\" />\n\n### 7.3 代码\n\n```java\nList<List<Integer>> res = new LinkedList<>();\npublic List<List<Integer>> permuteUnique(int[] nums){\n    int len = nums.length;\n    if(len == 0){\n        return res;\n    }\n\n    // 排序；相同的数字放在一起，重复的剪枝方便\n    Arrays.sort(nums);\n    LinkedList<Integer> track = new LinkedList<>();\n    boolean[] used = new boolean[len];\n    backtrack(nums, track, used);\n    return res;\n}\n\nprivate void backtrack(int[] nums, LinkedList<Integer> track, boolean[] used){\n    int len = nums.length;\n    // 满足结束条件\n    if(track.size() == len){\n        res.add(new LinkedList<>(track));\n        return;\n    }\n\n    // 初始化为数组中没有的数\n    int pre = nums[0] - 1;\n    for(int i = 0; i < len; i++){\n        // 排除不合法选择\n        if(used[i] || pre == nums[i]){\n            continue;\n        }\n        // 做选择\n        track.add(nums[i]);\n        used[i] = true;\n        // 进入下一层决策树\n        backtrack(nums, track, used);\n        // 撤销选择\n        track.removeLast();\n        used[i] = false;\n        // 记录刚被撤销的数字\n        pre = nums[i];\n    }\n}\n```\n\n### 7.4 小结\n\n还是按照回溯法的框架来解决，但是剪枝的部分一开始想不到。\n\n## 8. 例题：组合总和 [39]\n\n### 8.1 题目描述\n\n题目来源：[39. 组合总和](https://leetcode-cn.com/problems/combination-sum/)\n\n给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。\n\ncandidates 中的数字可以无限制重复被选取。\n\n说明：\n\n所有数字（包括 target）都是正整数。\n解集不能包含重复的组合。 \n示例 1：\n\n```bash\n输入：candidates = [2,3,6,7], target = 7,\n所求解集为：\n[\n  [7],\n  [2,2,3]\n]\n```\n\n示例 2：\n\n```bash\n输入：candidates = [2,3,5], target = 8,\n所求解集为：\n[\n  [2,2,2,2],\n  [2,3,3],\n  [3,5]\n]\n```\n\n提示：\n\n```bash\n1 <= candidates.length <= 30\n1 <= candidates[i] <= 200\ncandidate 中的每个元素都是独一无二的。\n1 <= target <= 500\n```\n\n### 8.2 题目分析\n\n这道题依旧可以使用回溯法进行暴力穷举。有几点需要注意：\n\n1. 选择列表candidates可以重复选择，即选择列表自始至终都不变，是candidates\n2. candidate 中的每个元素都是独一无二的\n3. 解集不能包含重复的组合，即最终的结果不能重复\n\n鉴于最终结果不可以重复，我们可以剪掉会重复的枝，即将选择列表排序，路径的下一个节点选择从当前节点开始遍历（由于candidate 中的每个元素不重复，所以start从 i 开始就可以解决结果重复的问题）。另外，这道题改用减法更好理解。\n\n### 8.3 代码\n\n```java\nList<List<Integer>> res = new LinkedList<>();\npublic List<List<Integer>> combinationSum(int[] candidates, int target){\n    if(candidates.length == 0){\n        return res;\n    }\n\n    // 优化添加的代码1：先对数组排序，可以提前终止判断\n    Arrays.sort(candidates);\n    LinkedList<Integer> track = new LinkedList<>();\n    backtrack(candidates, track, target, 0);\n    return res;\n}\n\n/**\n     *\n     * @param candidates\n     * @param track 记录路径\n     * @param residue 剩余\n     * @param start 下一次从 start 开始判断是否添加到路径\n     */\nprivate void backtrack(int[] candidates, LinkedList<Integer> track, int residue, int start){\n    //触发结束条件\n    if(residue == 0){\n        res.add(new LinkedList<>(track));\n        return;\n    }\n\n    // i 从 start 开始，剪掉小于 candidates[i] 的枝\n    for(int i = start; i < candidates.length; i++){\n        // 排除不合法的选择\n        if(residue - candidates[i] < 0){\n            break;\n        }\n\n        // 做选择\n        track.add(candidates[i]);\n        // 进入下一层决策树\n        // residue-candidates[i] 为下一轮剩余\n        // i 为下一轮的 start值，原因：为了避免重复，选择的数字只能大于等于candidates[i]\n        backtrack(candidates, track, residue-candidates[i], i);\n        // 撤销选择\n        track.removeLast();\n    }\n}\n```\n\n## 9. 例题：组合总和 2 [40]\n\n题目来源：[40. 组合总和 II](https://leetcode-cn.com/problems/combination-sum-ii/)\n\n### 9.1 题目描述\n\n给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。\n\ncandidates 中的每个数字在每个组合中只能使用一次。\n\n说明：\n\n所有数字（包括目标数）都是正整数。\n解集不能包含重复的组合。 \n示例 1:\n\n```bash\n输入: candidates = [10,1,2,7,6,1,5], target = 8,\n所求解集为:\n[\n  [1, 7],\n  [1, 2, 5],\n  [2, 6],\n  [1, 1, 6]\n]\n```\n\n\n示例 2:\n\n```bash\n输入: candidates = [2,5,2,1,2], target = 5,\n所求解集为:\n[\n  [1,2,2],\n  [5]\n]\n```\n\n### 9.2 题目分析\n\n本题与上一题的区别有两个：\n\n1. candidates 中的每个数字在每个组合中只能使用一次\n2. candidates 中有重复数字\n\n思路如下：\n\n1. 要保证每个数字用一次，先对序列排序， 且 start 从 i+1 开始\n2. 要保证结果不重复，第一步是不够的，因为 candidates 中有重复数字。这个问题和上文的 **全排列问题（有重复数字）** 类似，使用 pre 标记刚撤销的数字，与当前值比较后进行剪枝。\n\n### 9.3 代码\n\n```java\nList<List<Integer>> res = new LinkedList<>();\npublic List<List<Integer>> combinationSum2(int[] candidates, int target){\n    if(candidates.length == 0){\n        return res;\n    }\n\n    // 排序\n    Arrays.sort(candidates);\n    LinkedList<Integer> track = new LinkedList<>();\n    backtrack(candidates, track, target, 0);\n    return res;\n}\n\n/**\n     *\n     * @param candidates\n     * @param track 记录路径\n     * @param residue 剩余\n     * @param start 下一次从 start 开始判断是否添加到路径\n     */\nprivate void backtrack(int[] candidates, LinkedList<Integer> track, int residue, int start){\n    //触发结束条件\n    if(residue == 0){\n        res.add(new LinkedList<>(track));\n        return;\n    }\n\n    int pre = candidates[0] - 1;\n    for(int i = start; i < candidates.length; i++){\n        // 排除不合法的选择\n        // candidates排序之后，如果第一个不满足，后面的肯定不满足，直接break\n        if(residue - candidates[i] < 0){\n            break;\n        }\n        // 当前值和上一个撤销的值相同，会重复，continue\n        if(candidates[i] == pre){\n            continue;\n        }\n\n        //做选择\n        track.add(candidates[i]);\n        // 进入下一层决策树\n        // start 从 i+1 开始\n        backtrack(candidates, track, residue-candidates[i], i+1);\n        //撤销选择\n        track.removeLast();\n        pre = candidates[i];\n    }\n}\n```\n\n## 10. 例题：组合 [70]\n\n题目来源：[77. 组合](https://leetcode-cn.com/problems/combinations/)\n\n### 10.1 题目描述\n\n给定两个整数 n 和 k，返回 1 ... n 中所有可能的 k 个数的组合。\n\n示例：\n\n```bash\n输入: n = 4, k = 2\n输出:\n[\n  [2,4],\n  [3,4],\n  [2,3],\n  [1,2],\n  [1,3],\n  [1,4],\n]\n```\n\n### 10.2 题目分析\n\n这种数字组合的题目是典型的回溯法问题，先选一个数字，进入递归继续选，如果满足条件则加入结果中，然后回溯到上一步，继续递归。\n\n### 10.3 代码\n\n```java\nList<List<Integer>> res = new LinkedList<>();\n\n/**\n     * 解法一：回溯法\n     * 回溯的常规解法\n     * @param n\n     * @param k\n     * @return\n     */\npublic List<List<Integer>> combine(int n, int k) {\n    LinkedList<Integer> track = new LinkedList<>();\n    backtrack(track, n, k, 1);\n    return res;\n}\n\nprivate void backtrack(LinkedList<Integer> track, int n, int k, int start){\n    // 如果满足条件\n    if(track.size() == k){\n        res.add(new LinkedList<>(track));\n        return;\n    }\n\n    // 为避免重复，i 从 start 开始\n    for(int i = start; i <= n; i++){\n        // 做选择\n        track.add(i);\n        backtrack(track, n, k, i+1);\n        // 撤销选择\n        track.removeLast();\n    }\n}\n```\n\n### 10.4 优化\n\n参考 [这里](https://leetcode.wang/leetCode-77-Combinations.html) 对上面代码进行优化。将 for 循环改为 ``for(int i = start; i <= (n-k)+1 + track.size(); i++)``, 其中，``(n-k)+1``  表示要在 n 中找到 k 个数字组合，start 必须从 (n-k)+1 处开始；``(n-k)+1 + track.size()``  表示当前 i 取到的最大数字。原因如下：\n\n我们发现，如果 n = 5, k = 3,  那么 start 最大取到3，因为如果 start = 4，最终结果只能得到到 (4,5), 结果的个数必定小于k，不满足条件。\n\n如果 n = 5, k = 3, start = 1, 当 i = 2, track.size() = 1时，i 最大取到 (5-3)+1 + 1 = 4，否则，如果 i 取到 5，结果只能为 (1,5), 数字个数肯定不满足条件。\n\n代码如下：\n\n```java\nprivate void backtrack2(LinkedList<Integer> track, int n, int k, int start){\n    if(track.size() == k){\n        res.add(new LinkedList<>(track));\n        return;\n    }\n\n    // (n-k)+1 表示要在n中找到k个数字组合，start必须从(n-k)+1处开始\n    // 即如果n=5,k=3, 那么start最大取到3，因为如果当start=4时，组合中数字的个数不足\n    // (n-k)+1 + track.size() 表示当前i取到的最大数字\n    for(int i = start; i <= (n-k)+1 + track.size(); i++){\n        track.add(i);\n        backtrack(track, n, k, i+1);\n        track.removeLast();\n    }\n}\n```\n\n虽然只改了一句代码，但速度快了很多。\n\n## 11. 单词搜索 [79]\n\n题目来源：[79. 单词搜索](https://leetcode-cn.com/problems/word-search/)\n\n### 11.1. 题目描述\n\n给定一个二维网格和一个单词，找出该单词是否存在于网格中。\n\n单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。\n\n示例:\n\n```bash\nboard =\n[\n  ['A','B','C','E'],\n  ['S','F','C','S'],\n  ['A','D','E','E']\n]\n\n给定 word = \"ABCCED\", 返回 true\n给定 word = \"SEE\", 返回 true\n给定 word = \"ABCB\", 返回 false\n```\n\n\n提示：\n\n- board 和 word 中只包含大写和小写英文字母。\n- 1 <= board.length <= 200\n- 1 <= board[i].length <= 200\n- 1 <= word.length <= 10^3\n\n### 11.2. 题目分析\n\n基本思路：找第一个匹配的字符，然后在其上下左右的四个字符中找与第二个字符匹配的字符，找到后，以次类推。上下左右字符需要首先判断是否越界、是否已经访问过。\n\n但是，在做题的过程中，完全忽略了这是标准的回溯思想，参考之前的博客：[回溯算法](https://juliajiang7.github.io/2020/07/25/回溯算法总结/#more).\n\n回溯法采用试错的思想，尝试分步解决一个问题。在本题中，匹配下一个字符时就有上下左右四种选择。当它发现现有的分布答辩不能得到有效的正确答案时，将取消上一步或者上几步的计算，再通过其他分步尝试得到问题答案。\n\n在做题中有一个很大问题：忽略了回溯，即选择一条路走完发现不能匹配时，就返回了false，没有取消这一步操作。这一点要注意。\n\n另外，这一题使用框架不太好写，还是基于回溯思想（DFS），按照正常的思路来写。\n\n### 11.3. 代码\n\n```java\npublic boolean exist(char[][] board, String word) {\n    if(board.length == 0){return false;}\n    int row = board.length;\n    int col = board[0].length;\n    for(int i = 0; i < row; i++){\n        for(int j = 0; j < col; j++){\n            // 找到第一个字母\n            if(board[i][j] == word.charAt(0)){\n                boolean[][] visited = new boolean[row][col];\n                visited[i][j] = true;\n                // 判断从 board[i][j] 出发，后面能否全部匹配\n                if(isValid(i, j, word, 0, board, visited)){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n     * 当 board[i][j] 匹配 word[k] 时，后面是否可以全部匹配\n     * @param i\n     * @param j\n     * @param word\n     * @param k\n     * @param board\n     * @param visited 当前已访问的字符\n     * @return\n     */\nprivate boolean isValid(int i, int j, String word, int k, char[][] board, boolean[][] visited){\n    int row = board.length;\n    int col = board[0].length;\n    if(k == word.length() - 1){return true;}\n    // 上面\n    boolean left = false;\n    if(i - 1 >= 0 && !visited[i - 1][j] && board[i - 1][j] == word.charAt(k + 1)){\n        visited[i - 1][j] = true;\n        left = isValid(i - 1, j, word, k + 1, board, visited);\n    }\n    if(left){return left;}\n    // 下面\n    boolean right = false;\n    if(i + 1 < row && !visited[i + 1][j] && board[i + 1][j] == word.charAt(k + 1)){\n        visited[i + 1][j] = true;\n        right = isValid(i + 1, j, word, k + 1, board, visited);\n    }\n    if(right){return right;}\n    // 左边\n    boolean up = false;\n    if(j - 1 >= 0 && !visited[i][j - 1] && board[i][j - 1] == word.charAt(k + 1)){\n        visited[i][j - 1] = true;\n        up = isValid(i, j - 1, word, k + 1, board, visited);\n    }\n    if(up){return up;}\n    // 右边\n    boolean down = false;\n    if(j + 1 < col && !visited[i][j + 1] && board[i][j + 1] == word.charAt(k + 1)){\n        visited[i][j + 1] = true;\n        down = isValid(i, j + 1, word, k + 1, board, visited);\n    }\n    if(down){return true;}\n    // 如果上下左右都没有匹配，则取消这一步，回溯\n    visited[i][j] = false;\n    return false;\n}\n```\n\n## 12. 子集 [78]\n\n题目来源：[78. 子集](https://leetcode-cn.com/problems/subsets/)\n\n### 12.1. 题目描述\n\n![image-20200824094845802](/pictures/image-20200824094845802.png)\n\n### 12.1. 方法一：迭代\n\n利用数学归纳的思想：假设现在知道了规模更小的子问题，如何推导出当前问题的结果呢？即知道了 [1,2] 的子集，如何求 [1,2,3] 的子集。\n\n可以发现，[1,2,3] 的子集包括两部分：第一部分是已知的 [1,2] 的子集；另一部分是给每一个 [1,2] 子集加上 3。发现这个规律后，即可写出下面的迭代代码：\n\n```java\npublic List<List<Integer>> subsets(int[] nums) {\n    List<List<Integer>> res = new LinkedList<>();\n    res.add(new LinkedList<>());\n\n    for (int num : nums) {\n        int size = res.size();\n        for(int i = 0; i < size; i++){\n            // 注意：这里需要 new 一个对象，不可以直接赋值\n            List<Integer> cur = new LinkedList<>(res.get(i));\n            cur.add(num);\n            res.add(cur);\n        }\n    }\n\n    return res;\n}\n```\n\n时间复杂度：迭代次数是 N，每次迭代都遍历 res，res 的长度应该是每次递归都翻倍，所以说总的迭代次数应该是 2^N。所以，总的时间复杂度是 O(N * 2 ^ N)。\n\n空间复杂度：如果不计算储存返回结果所用的空间的，只需要 O(N) 的递归堆栈空间。如果计算 `res` 所需的空间，应该是 O(N*2^N)。\n\n### 12.2. 方法二：回溯算法\n\n参考 [这里](https://mp.weixin.qq.com/s/qT6WgR6Qwn7ayZkI3AineA).\n\n```java\nList<List<Integer>> res = new LinkedList<>();\npublic List<List<Integer>> subsetsWithDup(int[] nums) {\n    LinkedList<Integer> track = new LinkedList<>();\n    backtrack(nums, track, 0);\n    return res;\n}\n\nprivate void backtrack(int[] nums, LinkedList<Integer> track, int start) {\n    res.add(new LinkedList<>(track));\n\n    for(int i = start; i < nums.length; i++){\n        track.add(nums[i]);\n        backtrack(nums, track, start + 1);\n        track.removeLast();\n    }\n}\n```\n\n## 13. 子集 II [90]\n\n题目来源：[90. 子集 II](https://leetcode-cn.com/problems/subsets-ii/)\n\n### 13.1. 题目描述\n\n![image-20200824101740024](/pictures/image-20200824101740024.png)\n\n### 13.2. 代码\n\n有了上一题的基础，回溯法稍作修改即可。\n\n为了方便的剪枝，要对序列进行排序，排序之后所有相同的数字都会放在一起。为了避免结果中出现相同的子集，兄弟节点中不能出现相同的数字，即在 ``track.add`` 之前，需要先判断，是否和已经加入的兄弟节点值相同（如果是第一个加入的子节点，不需要判断）。 代码如下：\n\n```java\nList<List<Integer>> res = new LinkedList<>();\npublic List<List<Integer>> subsetsWithDup(int[] nums) {\n    LinkedList<Integer> track = new LinkedList<>();\n    Arrays.sort(nums);\n    backtrack(nums, track, 0);\n    return res;\n}\n\n\nprivate void backtrack(int[] nums, LinkedList<Integer> track, int start) {\n    res.add(new LinkedList<>(track));\n\n    for(int i = start; i < nums.length; i++){\n        if(i == start || nums[i] != nums[i - 1]){\n            track.add(nums[i]);\n            backtrack(nums, track, i + 1);\n            track.removeLast();\n        }\n    }\n}\n```\n\n## 14. 复原IP地址 [93]\n\n题目来源：[93. 复原IP地址](https://leetcode-cn.com/problems/restore-ip-addresses/)\n\n### 14.1. 题目描述\n\n![image-20200827104857215](/pictures/image-20200827104857215.png)\n\n### 14.2. 解法一：暴力破解（迭代）\n\n参考 [这里](https://leetcode.wang/leetCode-93-Restore-IP-Addresses.html).\n\n要求划分为四部分，我们直接利用三个指针将字符串强行分为4部分，遍历所有的划分，然后选取合法的解。这种解法没有超时。\n\n```java\npublic List<String> restoreIpAddresses(String s) {\n    List<String> res = new ArrayList<>();\n    int len = s.length();\n    // i < 4 保证第一部分不超过3位数\n    // i < len - 2 保证剩余的字符串还能分成3部分\n    for (int i = 1; i < 4 && i < len - 2; i++) {\n        for (int j = i + 1; j < i + 4 && j < len - 1; j++) {\n            for (int k = j + 1; k < j + 4 && k < len; k++) {\n                // 保存四部分字符串\n                String s1 = s.substring(0, i), s2 = s.substring(i, j), s3 = s.substring(j, k), s4 = s.substring(k, len);\n                // 判断是否合法\n                if (isValid(s1) && isValid(s2) && isValid(s3) && isValid(s4)) {\n                    res.add(s1 + \".\" + s2 + \".\" + s3 + \".\" + s4);\n                }\n            }\n        }\n    }\n    return res;\n}\n\nprivate boolean isValid(String s) {\n    if (s.length() > 3 || s.length() == 0 || (s.charAt(0) == '0' && s.length() > 1) || Integer.parseInt(s) > 255) {\n        return false;\n    }\n    return true;\n}\n```\n\n时间复杂度：如果不考虑我们调用的内部函数，Integer.parseInt，s.substring，那么就是 O（1）。因为每一层循环最多遍历 4 次。考虑的话每次调用的时间复杂度是 O（n），常数次调用，所以是 O（n）。\n\n空间复杂度：O（1）。\n\n### 14.3. 解法二：回溯\n\n字符串划分问题，需要划分为4部分。直接使用回溯的思想，第一部分可能是 1 位数，然后进入递归；也可能是2位数，然后进入递归；也可能是三位数，然后进入递归。即每一次循环有三种选择。\n\n本题虽然使用了回溯的思想，但前面总结的框架不能直接使用，下面代码是它的变形，而且本题的难点在于需要考虑的情况比较多，剪枝条件也比较多。具体剪枝的分析参考 [这里](https://leetcode-cn.com/problems/restore-ip-addresses/solution/hui-su-suan-fa-hua-tu-fen-xi-jian-zhi-tiao-jian-by/) .\n\n```java\npublic List<String> restoreIpAddresses(String s) {\n    List<String> res = new ArrayList<>();\n    backtrack(s, 0, new StringBuilder(), res, 0);\n    return res;\n}\n\n/**\n     * @param s\n     * @param start 字符串开始部分\n     * @param track 已经划分部分\n     * @param res   保存所有的解\n     * @param count 当前已经加入了几部分\n     */\nprivate void backtrack(String s, int start, StringBuilder track, List<String> res, int count) {\n    // 如果剩余长度大于剩下部分都取3位数的长度，剪枝\n    if (s.length() - start > 3 * (4 - count)) {\n        return;\n    }\n    // 当前刚好到达末尾\n    if (start == s.length()) {\n        // 当前刚好是4部分，将结果加入，否则剪枝\n        if (count == 4) {\n            res.add(track.substring(0, track.length() - 1));\n        }\n        // 当前到达末尾，但不是4部分，剪枝\n        return;\n    }\n    // 当前超过末尾，剪枝\n    // 当前未到达末尾，但有4部分，剪枝\n    if (start > s.length() || count == 4) {\n        return;\n    }\n    // 保存当前的解\n    StringBuilder before = new StringBuilder(track);\n\n    // 选择：加入一位数\n    track.append(s.charAt(start) + \"\" + '.');\n    backtrack(s, start + 1, track, res, count + 1);\n\n    // 如果开头是0，直接结束，即选择2或3位数之前可进行剪枝\n    if (s.charAt(start) == '0') {\n        return;\n    }\n\n    // 做出选择：加入2位数\n    if (start + 1 < s.length()) {\n        // 撤销选择：恢复为之前的解\n        track = new StringBuilder(before);\n        track.append(s.substring(start, start + 2) + \"\" + '.');\n        backtrack(s, start + 2, track, res, count + 1);\n    }\n\n    // 做出选择：加入3位数\n    if (start + 2 < s.length()) {\n        // 撤销选择：恢复为之前的解\n        track = new StringBuilder(before);\n        // 当选择3位数时，要判断数字大小\n        int num = Integer.parseInt(s.substring(start, start + 3));\n        if (0 <= num && num <= 255) {\n            track.append(s.substring(start, start + 3) + \"\" + '.');\n            backtrack(s, start + 3, track, res, count + 1);\n        }\n    }\n}\n```\n\n## 15. 交错字符串 [97]\n\n题目来源：[97. 交错字符串](https://leetcode-cn.com/problems/interleaving-string/)\n\n### 15.1. 题目描述\n\n![image-20200828102111964](/pictures/image-20200828102111964.png)\n\n### 15.2. 方法一：回溯法\n\n参考：[这里](https://leetcode.wang/leetCode-97-Interleaving-String.html)\n\n感觉要用回溯解决，但是不知道怎么回溯，如何递归。\n\n```java\npublic boolean isInterleave(String s1, String s2, String s3) {\n    if (s1.length() + s2.length() != s3.length()) {\n        return false;\n    }\n    return backtrack(s1, s2, s3, 0, 0, 0);\n}\n\nprivate boolean backtrack(String s1, String s2, String s3, int i, int j, int k) {\n    // i，j,k 全部到达末尾就返回true\n    if (i == s1.length() && j == s2.length() && k == s3.length()) {\n        return true;\n    }\n    // i 到达末尾，直接移动 j 和 k 不停比较\n    if (i == s1.length()) {\n        while (j < s2.length()) {\n            if (s2.charAt(j) != s3.charAt(k)) {\n                return false;\n            }\n            j++;\n            k++;\n        }\n        return true;\n    }\n    // j 到达末尾，直接移动 i 和 k 不停比较\n    if (j == s2.length()) {\n        while (i < s1.length()) {\n            if (s1.charAt(i) != s3.charAt(k)) {\n                return false;\n            }\n            i++;\n            k++;\n        }\n        return true;\n    }\n    // 判断 i 和 k 指向的字符是否相等\n    if (s1.charAt(i) == s3.charAt(k)) {\n        // 后移 i 和 k 继续判断，如果成功直接返回true\n        if (backtrack(s1, s2, s3, i + 1, j, k + 1)) {\n            return true;\n        }\n    }\n    // 移动 i 和 k 失败，尝试移动 j 和 k\n    if (s2.charAt(j) == s3.charAt(k)) {\n        if (backtrack(s1, s2, s3, i, j + 1, k + 1)){\n            return true;\n        }\n    }\n    // 移动 i 和 j 都失败，返回 false\n    return false;\n}\n```\n\n### 15.3. 方法二：回溯法的优化（备忘录）\n\n参考：[这里](https://leetcode.wang/leetCode-97-Interleaving-String.html)\n\n由于递归的分支，所以会造成很多重复情况的判断，所以我们用 memoization 技术，把求出的结果用 hashmap 保存起来，第二次过来的时候直接返回结果以免再次进入递归。\n\nhashmap key 的话用字符串 i + \"@\" + j ，之所以中间加 \"@\"，是为了防止 i = 1 和 j = 22。以及 i = 12，j = 2。这样的两种情况产生的就都是 122。加上 \"@\" 可以区分开来。\n\n原文中：map 的 value 取值有三个，用 1 表示 true，0 表示 false，-1 代表还未赋值。\n\n但其实这里并不会用到三个值，因为一旦遇到的 i 和 j 满足要求，直接返回 true 即可，不需要再存入 map 中。因此，这里定义的 memo 就是一个不满足要求的 i 和 j 组合，只要 memo中含有 i 和 j 的组合，则直接返回 false。\n\n```java\npublic boolean isInterleave(String s1, String s2, String s3) {\n    if (s1.length() + s2.length() != s3.length()) {\n        return false;\n    }\n    // memo 的 key 是：i + \"@\" + j，用@隔开是为了防止i=1,j=22时，可能出现两种组合情况：(1,22),(12,2)\n    // memo 的 value 取值：-1 表示为赋值；0 表示false；1 表示true\n    // value 其实用不到三个值，因为一旦当前的 i 和 j 符合要求，直接返回 true 即可。因此 memo 中只需要存不满足情况的 i 和 j 即可\n    Map<String, Integer> memo = new HashMap<>();\n    return backtrack2(s1, s2, s3, 0, 0, 0, memo);\n}\n\nprivate boolean backtrack2(String s1, String s2, String s3, int i, int j, int k, Map<String, Integer> memo) {\n    String key = i + \"@\" + j;\n    if (memo.containsKey(key)){\n        return false;\n    }\n    if (i == s1.length() && j == s2.length() && k == s3.length()) {\n        return true;\n    }\n\n    if (i == s1.length()) {\n        while (j < s2.length()) {\n            if (s2.charAt(j) != s3.charAt(k)) {\n                memo.put(key, 0);\n                return false;\n            }\n            j++;\n            k++;\n        }\n        return true;\n    }\n    if (j == s2.length()) {\n        while (i < s1.length()) {\n            if (s1.charAt(i) != s3.charAt(k)) {\n                memo.put(key, 0);\n                return false;\n            }\n            i++;\n            k++;\n        }\n        return true;\n    }\n    if (s1.charAt(i) == s3.charAt(k)) {\n        if (backtrack2(s1, s2, s3, i + 1, j, k + 1, memo)) {\n            return true;\n        }\n    }\n    if (s2.charAt(j) == s3.charAt(k)) {\n        if (backtrack2(s1, s2, s3, i, j + 1, k + 1, memo)){\n            return true;\n        }\n    }\n    memo.put(key, 0);\n    return false;\n}\n```\n\n### 15.4. 方法三：动态规划\n\n参考：[这里](https://leetcode.wang/leetCode-97-Interleaving-String.html)\n\ndp 数组定义：定义一个 boolean 二维数组 dp [ i ] [ j ] 来表示 s1[ 0, i ) 和 s2 [ 0, j ） 组合后能否构成 s3 [ 0, i + j )，注意不包括右边界，主要是为了考虑开始的时候如果只取 s1，那么 s2 就是空串，这样的话 dp [ i ] [ 0 ] 就能表示 s2 取空串。\n\n注意，``dp[0][0]`` 表示 s1 和 s2 都取空串，组成一个空串，则值为 true。\n\n```java\npublic boolean isInterleave(String s1, String s2, String s3) {\n    if (s1.length() + s2.length() != s3.length()) {\n        return false;\n    }\n    if (s1.length() == 0 && s2.length() == 0 && s3.length() == 0) {\n        return true;\n    }\n    int len1 = s1.length();\n    int len2 = s2.length();\n    // dp[i][j] = true 表示：s1[0..i) 和 s2[0..j) 组合后能构成 s3[0..i+j)\n    boolean[][] dp = new boolean[len1 + 1][len2 + 1];\n    // base case\n    dp[0][0] = true;\n    for (int i = 1; i <= len1; i++) {\n        dp[i][0] = dp[i - 1][0] && s1.charAt(i - 1) == s3.charAt(i - 1);\n    }\n    for (int j = 1; j <= len2; j++) {\n        dp[0][j] = dp[0][j - 1] && s2.charAt(j - 1) == s3.charAt(j - 1);\n    }\n\n    for (int i = 1; i <= len1; i++) {\n        for (int j = 1; j <= len2; j++) {\n            dp[i][j] = (dp[i - 1][j] && s1.charAt(i - 1) == s3.charAt(i + j - 1))\n                || (dp[i][j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));\n        }\n    }\n    return dp[len1][len2];\n}\n```\n\n## 16. 路径总和 II [113]\n\n题目来源：[113. 路径总和 II](https://leetcode-cn.com/problems/path-sum-ii/)\n\n### 16.1. 题目描述\n\n![image-20200903093332125](/pictures/image-20200903093332125.png)\n\n### 16.2. 代码\n\n典型的回溯思路：采用试错的思想，尝试分步去解决问题，在分步解决问题的过程中，当通过尝试发现现有的分布答案不能得到有效的正确答案时，取消上一步甚至是上几步的计算，再通过其他的分布尝试寻找问题的答案。\n\n```java\nList<List<Integer>> res = new LinkedList<>();\n\npublic List<List<Integer>> pathSum(TreeNode root, int sum) {\n    LinkedList<Integer> track = new LinkedList<>();\n    if (root == null) {\n        return res;\n    }\n    track.add(root.val);\n    backtrack(root, sum, track, root.val);\n    return res;\n}\n\nprivate void backtrack(TreeNode root, int sum, LinkedList<Integer> track, int tmp) {\n    if (tmp == sum && root.left == null && root.right == null) {\n        res.add(new LinkedList<>(track));\n    }\n\n    if (root.left != null) {\n        // 做出选择：左子树\n        track.add(root.left.val);\n        backtrack(root.left, sum, track, tmp + root.left.val);\n        // 撤销选择\n        track.removeLast();\n    }\n\n    if (root.right != null) {\n        track.add(root.right.val);\n        backtrack(root.right, sum, track, tmp + root.right.val);\n        track.removeLast();\n    }\n}\n```\n\n## 17. 参考引用\n\n1. [Wikipedia](https://zh.wikipedia.org/wiki/%E5%9B%9E%E6%BA%AF%E6%B3%95)\n2. https://labuladong.gitbook.io/algo/di-ling-zhang-bi-du-xi-lie/hui-su-suan-fa-xiang-jie-xiu-ding-ban\n3. https://leetcode-cn.com/problems/permutations/solution/hui-su-suan-fa-python-dai-ma-java-dai-ma-by-liweiw/\n4. https://leetcode.wang/leetCode-77-Combinations.html\n5. https://mp.weixin.qq.com/s/qT6WgR6Qwn7ayZkI3AineA\n6. https://leetcode-cn.com/problems/restore-ip-addresses/solution/hui-su-suan-fa-hua-tu-fen-xi-jian-zhi-tiao-jian-by/\n7. https://leetcode.wang/leetCode-97-Interleaving-String.html","slug":"回溯算法总结","published":1,"updated":"2020-12-26T12:26:49.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5mkx4001lnyl1gojg9oxg","content":"<p>本文主要介绍了回溯法的定义、回溯法的代码框架，以及回溯法的典型问题全排列问题、N皇后问题等。另外，还介绍了LeetCode中使用回溯法的部分题目，这部分内容会持续更新。</p>\n<h2 id=\"1-什么是回溯法？\"><a href=\"#1-什么是回溯法？\" class=\"headerlink\" title=\"1. 什么是回溯法？\"></a>1. 什么是回溯法？</h2><p><strong><a href=\"https://zh.wikipedia.org/wiki/回溯法\" target=\"_blank\" rel=\"noopener\">维基定义</a></strong> : （英语：backtracking）是<a href=\"https://zh.wikipedia.org/wiki/暴力搜尋法\" target=\"_blank\" rel=\"noopener\">暴力搜索法</a>中的一种。</p>\n<p>对于某些计算问题而言，回溯法是一种可以找出所有（或一部分）解的一般性算法，尤其适用于约束满足问题（在解决约束满足问题时，我们逐步构造更多的候选解，并且在确定某一部分候选解不可能补全成正确解之后放弃继续搜索这个部分候选解本身及其可以拓展出的子候选解，转而测试其他的部分候选解）。在经典的教科书中，<strong><a href=\"https://zh.wikipedia.org/wiki/八皇后问题\" target=\"_blank\" rel=\"noopener\">八皇后问题</a></strong>展示了回溯法的用例。</p>\n<a id=\"more\"></a>\n\n<p>回溯法采用<a href=\"https://zh.wikipedia.org/wiki/试错\" target=\"_blank\" rel=\"noopener\">试错</a>的思想，它尝试分步的去解决一个问题。在分步解决问题的过程中，当它通过尝试发现现有的分步答案不能得到有效的正确的解答的时候，它将取消上一步甚至是上几步的计算，再通过其它的可能的分步解答再次尝试寻找问题的答案。回溯法通常用最简单的递归方法来实现，在反复重复上述的步骤后可能出现两种情况：</p>\n<ul>\n<li>找到一个可能存在的正确的答案</li>\n<li>在尝试了所有可能的分步方法后宣告该问题没有答案</li>\n</ul>\n<p>在最坏的情况下，回溯法会导致一次复杂度为指数时间的计算。</p>\n<p>“回溯”指的是“状态重置”，可以理解为“回到过去”、“恢复现场”，是在编码的过程中，是为了节约空间而使用的一种技巧。而回溯其实是“深度优先遍历”特有的一种现象。之所以是“深度优先遍历”，是因为我们要解决的问题通常是在一棵树上完成的，在这棵树上搜索需要的答案，一般使用深度优先遍历。</p>\n<h2 id=\"2-回溯法框架\"><a href=\"#2-回溯法框架\" class=\"headerlink\" title=\"2. 回溯法框架\"></a>2. 回溯法框架</h2><p>上文主要是 Wikipedia 对于回溯法的介绍，这一节，将参考 <a href=\"https://labuladong.gitbook.io/algo/di-ling-zhang-bi-du-xi-lie/hui-su-suan-fa-xiang-jie-xiu-ding-ban\" target=\"_blank\" rel=\"noopener\">这里</a> 给出一个回溯算法的框架。</p>\n<p><strong>解决一个回溯问题，实际上就是一个决策树的遍历过程</strong>。你只需要思考 3 个问题：</p>\n<ol>\n<li>路径：也就是已经做出的选择</li>\n<li>选择列表：也就是你当前可以做的选择</li>\n<li>结束条件：也就是到达决策树底层，无法再做选择的条件</li>\n</ol>\n<p>如果现在不理解这三个词语没关系，下一节我们将以全排列问题为例，进行详细介绍。下面给出回溯法的框架：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = []</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">backtrack</span><span class=\"params\">(路径, 选择列表)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> 满足结束条件:</span><br><span class=\"line\">        result.add(路径)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> 选择 <span class=\"keyword\">in</span> 选择列表:</span><br><span class=\"line\">        做选择</span><br><span class=\"line\">        backtrack(路径, 选择列表)</span><br><span class=\"line\">        撤销选择</span><br></pre></td></tr></table></figure>\n\n<p><strong>其核心就是 for 循环里面的递归，在递归调用之前「做选择」，在递归调用之后「撤销选择」。</strong></p>\n<h2 id=\"3-以全排列问题（无重复数字）为例-46\"><a href=\"#3-以全排列问题（无重复数字）为例-46\" class=\"headerlink\" title=\"3. 以全排列问题（无重复数字）为例 [46]\"></a>3. 以全排列问题（无重复数字）为例 [46]</h2><h3 id=\"3-1-题目描述\"><a href=\"#3-1-题目描述\" class=\"headerlink\" title=\"3.1 题目描述\"></a>3.1 题目描述</h3><p>题目来源：<a href=\"https://leetcode-cn.com/problems/permutations/\" target=\"_blank\" rel=\"noopener\">46. 全排列</a></p>\n<p>给定一个 <strong>没有重复</strong> 数字的序列，返回其所有可能的全排列。</p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,2,3]</span><br><span class=\"line\">输出:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [1,2,3],</span><br><span class=\"line\">  [1,3,2],</span><br><span class=\"line\">  [2,1,3],</span><br><span class=\"line\">  [2,3,1],</span><br><span class=\"line\">  [3,1,2],</span><br><span class=\"line\">  [3,2,1]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-问题分析\"><a href=\"#3-2-问题分析\" class=\"headerlink\" title=\"3.2 问题分析\"></a>3.2 问题分析</h3><p>我们知道，对于 n 个不重复的数，全排列共有 n! 个。如果使用穷举法，我们一般会：</p>\n<p>先固定第一位为 1，然后第二位可以是 2，那么第三位只能是 3；然后可以把第二位变成 3，第三位就只能是 2 了；然后就只能变化第一位，变成 2，然后再穷举后两位……</p>\n<p>其实这就是回溯算法，可以转化为下面的回溯树：</p>\n<img src=\"/pictures/1.jpg\" alt=\"img\" style=\"zoom: 33%;\" />\n\n<p>只要从根遍历这棵树，记录路径上的数字，其实就是所有的全排列。<strong>我们不妨把这棵树称为回溯算法的「决策树」</strong>。</p>\n<p><strong>为啥说这是决策树呢，因为你在每个节点上其实都在做决策</strong>。比如说你站在下图的红色节点上：</p>\n<img src=\"/pictures/2.jpg\" alt=\"img\" style=\"zoom:33%;\" />\n\n<p>你现在就在做决策，可以选择 1 那条树枝，也可以选择 3 那条树枝。为啥只能在 1 和 3 之中选择呢？因为 2 这个树枝在你身后，这个选择你之前做过了，而全排列是不允许重复使用数字的。</p>\n<p><strong>现在可以解答开头的几个名词：</strong><code>[2]</code> <strong>就是「路径」，记录你已经做过的选择；<code>[1,3]</code>就是「选择列表」，表示你当前可以做出的选择；「结束条件」就是遍历到树的底层，在这里就是选择列表为空的时候</strong>。</p>\n<p>如果明白了这几个名词，<strong>可以把「路径」和「选择」列表作为决策树上每个节点的属性</strong>，比如下图列出了几个节点的属性：</p>\n<img src=\"/pictures/3.jpg\" alt=\"img\" style=\"zoom:33%;\" />\n\n<p><strong>框架中定义的 <code>backtrace</code>  函数其实就像一个指针，在这棵树上游走，同时要正确维护每个节点的属性，每当走到树的底层，其「路径」就是一个全排列</strong>。</p>\n<p>在回溯法中，<strong>我们只要在递归之前做出选择，在递归之后撤销刚才的选择</strong>，就能正确得到每个节点的选择列表和路径。因此，框架中的核心代码详细化如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> 选择 <span class=\"keyword\">in</span> 选择列表:</span><br><span class=\"line\">    <span class=\"comment\"># 做选择</span></span><br><span class=\"line\">    将该选择从选择列表移除</span><br><span class=\"line\">    路径.add(选择)</span><br><span class=\"line\">    backtrack(路径, 选择列表)</span><br><span class=\"line\">    <span class=\"comment\"># 撤销选择</span></span><br><span class=\"line\">    路径.remove(选择)</span><br><span class=\"line\">    将该选择再加入选择列表</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-代码\"><a href=\"#3-3-代码\" class=\"headerlink\" title=\"3.3 代码\"></a>3.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 记录路径（已做出的选择）</span></span><br><span class=\"line\">    LinkedList&lt;Integer&gt; track = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    backtrack(nums, track);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> track</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backtrack</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, LinkedList&lt;Integer&gt; track)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 满足结束条件（到达决策树底层，无法再做选择的条件）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums.length == track.size())&#123;</span><br><span class=\"line\">        res.add(<span class=\"keyword\">new</span> LinkedList&lt;&gt;(track));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 排除不合法的选择</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(track.contains(num))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 做选择</span></span><br><span class=\"line\">        track.add(num);</span><br><span class=\"line\">        <span class=\"comment\">// 进入下一层决策树</span></span><br><span class=\"line\">        backtrack(nums, track);</span><br><span class=\"line\">        <span class=\"comment\">// 撤销选择</span></span><br><span class=\"line\">        track.removeLast();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们并没有显示记录「选择列表」，而是通过 <code>nums</code> 和 <code>track</code> 推导出当前的选择列表。</p>\n<p>至此，我们就通过全排列问题详解了回溯算法的底层原理。当然，这个算法解决全排列不是很高效，应为对链表使用 <code>contains</code> 方法需要 O(N) 的时间复杂度。有更好的方法通过交换元素达到目的，但是难理解一些，这里就不写了，有兴趣可以自行搜索一下。</p>\n<p>但是必须说明的是，不管怎么优化，都符合回溯框架，而且时间复杂度都不可能低于 O(N!)，因为穷举整棵决策树是无法避免的。<strong>这也是回溯算法的一个特点，不像动态规划存在重叠子问题可以优化，回溯算法就是纯暴力穷举，复杂度一般都很高</strong>。</p>\n<p>明白了全排列问题，就可以直接套回溯算法框架了。</p>\n<h3 id=\"3-4-另一种方法\"><a href=\"#3-4-另一种方法\" class=\"headerlink\" title=\"3.4 另一种方法\"></a>3.4 另一种方法</h3><p>上文中没有显示记录「选择列表」，通过用路径的 <code>contains</code> 方法来判断是否选择。这里我们 <strong>“以空间换时间”</strong> 的思想，使用一个布尔数组 used，初始化的时候都为 false 表示这些数还没有被选择，当我们选定一个数的时候，就将这个数组的相应位置设置为 true ，这样在考虑下一个位置的时候，就能够以 O(1)  的时间复杂度判断这个数是否被选择过。（参考 <a href=\"https://leetcode-cn.com/problems/permutations/solution/hui-su-suan-fa-python-dai-ma-java-dai-ma-by-liweiw/\" target=\"_blank\" rel=\"noopener\">这里</a>）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; res2 = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; permute2(<span class=\"keyword\">int</span>[] nums)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    LinkedList&lt;Integer&gt; track = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 标记数组</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[] used = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[len];</span><br><span class=\"line\">    backtrace2(nums, track, used);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> track</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> used 标记数组，used[i]=true时，表示已被选择</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backtrace2</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, LinkedList&lt;Integer&gt; track, <span class=\"keyword\">boolean</span>[] used)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(track.size() == len)&#123;</span><br><span class=\"line\">        res2.add(<span class=\"keyword\">new</span> LinkedList&lt;&gt;(track));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(used[i])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        track.add(nums[i]);</span><br><span class=\"line\">        used[i] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        backtrace2(nums, track, used);</span><br><span class=\"line\"></span><br><span class=\"line\">        track.removeLast();</span><br><span class=\"line\">        used[i] = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-N皇后问题-51\"><a href=\"#4-N皇后问题-51\" class=\"headerlink\" title=\"4. N皇后问题 [51]\"></a>4. N皇后问题 [51]</h2><h3 id=\"4-1-题目描述\"><a href=\"#4-1-题目描述\" class=\"headerlink\" title=\"4.1 题目描述\"></a>4.1 题目描述</h3><p>题目来源：<a href=\"https://leetcode-cn.com/problems/n-queens/\" target=\"_blank\" rel=\"noopener\">51. N皇后</a></p>\n<p><em>n</em> 皇后问题研究的是如何将 <em>n</em> 个皇后放置在 <em>n</em>×<em>n</em> 的棋盘上，并且使皇后彼此之间不能相互攻击。PS：皇后可以攻击同一行、同一列、左上左下右上右下四个方向的任意单位。</p>\n<p><img src=\"/pictures/8-queens.png\" alt=\"img\"></p>\n<p>给定一个整数 n，返回所有不同的 n 皇后问题的解决方案。</p>\n<p>每一种解法包含一个明确的 n 皇后问题的棋子放置方案，该方案中 ‘Q’ 和 ‘.’ 分别代表了皇后和空位。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: 4</span><br><span class=\"line\">输出: [</span><br><span class=\"line\"> [<span class=\"string\">\".Q..\"</span>,  // 解法 1</span><br><span class=\"line\">  <span class=\"string\">\"...Q\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Q...\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"..Q.\"</span>],</span><br><span class=\"line\"></span><br><span class=\"line\"> [<span class=\"string\">\"..Q.\"</span>,  // 解法 2</span><br><span class=\"line\">  <span class=\"string\">\"Q...\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"...Q\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\".Q..\"</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\">解释: 4 皇后问题存在两个不同的解法。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-问题分析\"><a href=\"#4-2-问题分析\" class=\"headerlink\" title=\"4.2 问题分析\"></a>4.2 问题分析</h3><p>这个问题本质上跟全排列问题差不多，决策树的每一层表示棋盘上的每一行；每个节点可以做出的选择是，在该行的任意一列放置一个皇后。</p>\n<h3 id=\"4-3-代码\"><a href=\"#4-3-代码\" class=\"headerlink\" title=\"4.3 代码\"></a>4.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;List&lt;String&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;String&gt;&gt; solveNQueens(<span class=\"keyword\">int</span> n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化棋盘 board 为二维字符数组</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span>[][] board = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[n][n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span>[] chars : board)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">        Arrays.fill(chars, <span class=\"string\">'.'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    backtrack(board, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 路径：board中小于row的那些行都已经成功放置了皇后</span></span><br><span class=\"line\"><span class=\"comment\">     * 可选择列表: 第row行的所有列都是放置 Q 的选择</span></span><br><span class=\"line\"><span class=\"comment\">     * 结束条件: row超过board的最后一行</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> board 记录路径</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> row 当前放置第几行</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backtrack</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] board, <span class=\"keyword\">int</span> row)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//触发结束条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (row == board.length) &#123;</span><br><span class=\"line\">        res.add(charToString(board));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = board[row].length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> col = <span class=\"number\">0</span>; col &lt; n; col++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//排除不合法选择</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isValid(board, row, col))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//做选择</span></span><br><span class=\"line\">        board[row][col] = <span class=\"string\">'Q'</span>;</span><br><span class=\"line\">        <span class=\"comment\">//进入下一层决策树</span></span><br><span class=\"line\">        backtrack(board, row + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//撤销选择</span></span><br><span class=\"line\">        board[row][col] = <span class=\"string\">'.'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否可以在 board[row][col] 放置皇后</span></span><br><span class=\"line\"><span class=\"comment\">     * 不需要检查 这一行，因为每一行只放一个皇后就到下一行</span></span><br><span class=\"line\"><span class=\"comment\">     * 不需要检查 左下、右下斜线，因为下面还没放元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> board</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> row</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> col</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] board, <span class=\"keyword\">int</span> row, <span class=\"keyword\">int</span> col)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> rows = board.length;</span><br><span class=\"line\">    <span class=\"comment\">//检查这一列是否有皇后</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span>[] chars : board)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (chars[col] == <span class=\"string\">'Q'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 检查左上斜线上是否有皇后</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = row - <span class=\"number\">1</span>, j = col + <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span> &amp;&amp; j &lt; rows; i--, j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board[i][j] == <span class=\"string\">'Q'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 检查右上斜线上是否有皇后</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = row - <span class=\"number\">1</span>, j = col - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span> &amp;&amp; j &gt;= <span class=\"number\">0</span>; i--, j--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board[i][j] == <span class=\"string\">'Q'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">charToString</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] array)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;String&gt; result = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span>[] chars : array) &#123;</span><br><span class=\"line\">        result.add(String.valueOf(chars));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数 <code>backtrack</code> 依然像个在决策树上游走的指针，通过 <code>row</code> 和 <code>col</code> 就可以表示函数遍历到的位置，通过 <code>isValid</code> 函数可以将不符合条件的情况剪枝。</p>\n<h2 id=\"5-回溯法总结\"><a href=\"#5-回溯法总结\" class=\"headerlink\" title=\"5. 回溯法总结\"></a>5. 回溯法总结</h2><p>回溯算法就是个多叉树的遍历问题，关键就是在前序遍历和后序遍历的位置做一些操作，算法框架如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">backtrack</span><span class=\"params\">(...)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> 选择 <span class=\"keyword\">in</span> 选择列表:</span><br><span class=\"line\">        做选择</span><br><span class=\"line\">        backtrack(...)</span><br><span class=\"line\">        撤销选择</span><br></pre></td></tr></table></figure>\n\n<p><strong>写</strong> <strong><code>backtrack</code></strong> <strong>函数时，需要维护走过的「路径」和当前可以做的「选择列表」，当触发「结束条件」时，将「路径」记入结果集</strong>。</p>\n<p>下面几节记录了一些平时遇到的，可以使用回溯解决的经典例题，会持续更新~</p>\n<h2 id=\"6-使用回溯法的题目列表\"><a href=\"#6-使用回溯法的题目列表\" class=\"headerlink\" title=\"6. 使用回溯法的题目列表\"></a>6. 使用回溯法的题目列表</h2><p>本文中使用回溯法解决的 LeetCode 题目列表如下，持续更新中~</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">#</th>\n<th align=\"center\">Title</th>\n<th align=\"center\">Remark</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">46</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/permutations/\" target=\"_blank\" rel=\"noopener\">全排列</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">51</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/n-queens/\" target=\"_blank\" rel=\"noopener\">N皇后</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">47</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/permutations-ii/\" target=\"_blank\" rel=\"noopener\">全排列 II</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">39</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/combination-sum/\" target=\"_blank\" rel=\"noopener\">组合总和</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">40</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/combination-sum-ii/\" target=\"_blank\" rel=\"noopener\">组合总和 II</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">70</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/combinations/\" target=\"_blank\" rel=\"noopener\">组合</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">79</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/word-search/\" target=\"_blank\" rel=\"noopener\">单词搜索</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">78</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/subsets/\" target=\"_blank\" rel=\"noopener\">子集</a></td>\n<td align=\"center\">Medium</td>\n</tr>\n<tr>\n<td align=\"center\">90</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/subsets-ii/\" target=\"_blank\" rel=\"noopener\">子集 II</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">93</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/restore-ip-addresses/\" target=\"_blank\" rel=\"noopener\">复原IP地址</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">97</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/interleaving-string/\" target=\"_blank\" rel=\"noopener\">交错字符串</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">113</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/path-sum-ii/\" target=\"_blank\" rel=\"noopener\">路径总和 II</a></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"7-例题：全排列问题（有重复数字）-47\"><a href=\"#7-例题：全排列问题（有重复数字）-47\" class=\"headerlink\" title=\"7. 例题：全排列问题（有重复数字）[47]\"></a>7. 例题：全排列问题（有重复数字）[47]</h2><h3 id=\"7-1-题目描述\"><a href=\"#7-1-题目描述\" class=\"headerlink\" title=\"7.1 题目描述\"></a>7.1 题目描述</h3><p>题目来源：<a href=\"https://leetcode-cn.com/problems/permutations-ii/\" target=\"_blank\" rel=\"noopener\">47. 全排列 II</a></p>\n<p>给定一个可包含重复数字的序列，返回所有不重复的全排列。</p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,1,2]</span><br><span class=\"line\">输出:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [1,1,2],</span><br><span class=\"line\">  [1,2,1],</span><br><span class=\"line\">  [2,1,1]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-2-题目分析\"><a href=\"#7-2-题目分析\" class=\"headerlink\" title=\"7.2 题目分析\"></a>7.2 题目分析</h3><p>这道题与上面 46 题不同，给出的序列是包含重复数字的，所以，46题的第一种方法使用track的contain来判断是否选择在这里不使用。而第二种方法，标记数组是可行的，但直接使用 used 数组判断，最终得到的全排列结果可能会有重复，如下图所示：（图片来自：<a href=\"https://leetcode-cn.com/problems/permutations-ii/solution/hui-su-suan-fa-python-dai-ma-java-dai-ma-by-liwe-2/\" target=\"_blank\" rel=\"noopener\">这里</a>）</p>\n<img src=\"/pictures/全排列2.png\" alt=\"全排列2\" style=\"zoom: 33%;\" />\n\n<p>如上所示，绿色框中的序列都是重复的，不属于结果集。为什么会出现这种情况呢？</p>\n<p>观察发现，在决策树中，同一父节点下的子节点中，选中两个相同的数字时，必然出现重复的全排列结果。那么如何避免这种情况呢？</p>\n<p>对给出的序列进行排序，这样相同的数字都会放在一起。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> 选择 <span class=\"keyword\">in</span> 选择列表:</span><br><span class=\"line\">\t做选择</span><br><span class=\"line\">\tbacktrack(路径, 选择列表)</span><br><span class=\"line\">\t撤销选择</span><br></pre></td></tr></table></figure>\n\n<p>在框架的核心代码中，撤销选择处撤销的数字，就是下一个遍历节点的左侧兄弟节点，保存这个数组为 pre，如下图所示，当遍历到nums[i] 处时，如果 pre == nums[i]，则说明需要剪枝。</p>\n<img src=\"/pictures/image-20200725154024914.png\" alt=\"image-20200725154024914\" style=\"zoom:67%;\" />\n\n<h3 id=\"7-3-代码\"><a href=\"#7-3-代码\" class=\"headerlink\" title=\"7.3 代码\"></a>7.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; permuteUnique(<span class=\"keyword\">int</span>[] nums)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 排序；相同的数字放在一起，重复的剪枝方便</span></span><br><span class=\"line\">    Arrays.sort(nums);</span><br><span class=\"line\">    LinkedList&lt;Integer&gt; track = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[] used = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[len];</span><br><span class=\"line\">    backtrack(nums, track, used);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backtrack</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, LinkedList&lt;Integer&gt; track, <span class=\"keyword\">boolean</span>[] used)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = nums.length;</span><br><span class=\"line\">    <span class=\"comment\">// 满足结束条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(track.size() == len)&#123;</span><br><span class=\"line\">        res.add(<span class=\"keyword\">new</span> LinkedList&lt;&gt;(track));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化为数组中没有的数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> pre = nums[<span class=\"number\">0</span>] - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 排除不合法选择</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(used[i] || pre == nums[i])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 做选择</span></span><br><span class=\"line\">        track.add(nums[i]);</span><br><span class=\"line\">        used[i] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 进入下一层决策树</span></span><br><span class=\"line\">        backtrack(nums, track, used);</span><br><span class=\"line\">        <span class=\"comment\">// 撤销选择</span></span><br><span class=\"line\">        track.removeLast();</span><br><span class=\"line\">        used[i] = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 记录刚被撤销的数字</span></span><br><span class=\"line\">        pre = nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-4-小结\"><a href=\"#7-4-小结\" class=\"headerlink\" title=\"7.4 小结\"></a>7.4 小结</h3><p>还是按照回溯法的框架来解决，但是剪枝的部分一开始想不到。</p>\n<h2 id=\"8-例题：组合总和-39\"><a href=\"#8-例题：组合总和-39\" class=\"headerlink\" title=\"8. 例题：组合总和 [39]\"></a>8. 例题：组合总和 [39]</h2><h3 id=\"8-1-题目描述\"><a href=\"#8-1-题目描述\" class=\"headerlink\" title=\"8.1 题目描述\"></a>8.1 题目描述</h3><p>题目来源：<a href=\"https://leetcode-cn.com/problems/combination-sum/\" target=\"_blank\" rel=\"noopener\">39. 组合总和</a></p>\n<p>给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p>\n<p>candidates 中的数字可以无限制重复被选取。</p>\n<p>说明：</p>\n<p>所有数字（包括 target）都是正整数。<br>解集不能包含重复的组合。<br>示例 1：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：candidates = [2,3,6,7], target = 7,</span><br><span class=\"line\">所求解集为：</span><br><span class=\"line\">[</span><br><span class=\"line\">  [7],</span><br><span class=\"line\">  [2,2,3]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>示例 2：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：candidates = [2,3,5], target = 8,</span><br><span class=\"line\">所求解集为：</span><br><span class=\"line\">[</span><br><span class=\"line\">  [2,2,2,2],</span><br><span class=\"line\">  [2,3,3],</span><br><span class=\"line\">  [3,5]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>提示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 &lt;= candidates.length &lt;= 30</span><br><span class=\"line\">1 &lt;= candidates[i] &lt;= 200</span><br><span class=\"line\">candidate 中的每个元素都是独一无二的。</span><br><span class=\"line\">1 &lt;= target &lt;= 500</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-2-题目分析\"><a href=\"#8-2-题目分析\" class=\"headerlink\" title=\"8.2 题目分析\"></a>8.2 题目分析</h3><p>这道题依旧可以使用回溯法进行暴力穷举。有几点需要注意：</p>\n<ol>\n<li>选择列表candidates可以重复选择，即选择列表自始至终都不变，是candidates</li>\n<li>candidate 中的每个元素都是独一无二的</li>\n<li>解集不能包含重复的组合，即最终的结果不能重复</li>\n</ol>\n<p>鉴于最终结果不可以重复，我们可以剪掉会重复的枝，即将选择列表排序，路径的下一个节点选择从当前节点开始遍历（由于candidate 中的每个元素不重复，所以start从 i 开始就可以解决结果重复的问题）。另外，这道题改用减法更好理解。</p>\n<h3 id=\"8-3-代码\"><a href=\"#8-3-代码\" class=\"headerlink\" title=\"8.3 代码\"></a>8.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class=\"keyword\">int</span>[] candidates, <span class=\"keyword\">int</span> target)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(candidates.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 优化添加的代码1：先对数组排序，可以提前终止判断</span></span><br><span class=\"line\">    Arrays.sort(candidates);</span><br><span class=\"line\">    LinkedList&lt;Integer&gt; track = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    backtrack(candidates, track, target, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> candidates</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> track 记录路径</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> residue 剩余</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start 下一次从 start 开始判断是否添加到路径</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backtrack</span><span class=\"params\">(<span class=\"keyword\">int</span>[] candidates, LinkedList&lt;Integer&gt; track, <span class=\"keyword\">int</span> residue, <span class=\"keyword\">int</span> start)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//触发结束条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(residue == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        res.add(<span class=\"keyword\">new</span> LinkedList&lt;&gt;(track));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// i 从 start 开始，剪掉小于 candidates[i] 的枝</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = start; i &lt; candidates.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 排除不合法的选择</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(residue - candidates[i] &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 做选择</span></span><br><span class=\"line\">        track.add(candidates[i]);</span><br><span class=\"line\">        <span class=\"comment\">// 进入下一层决策树</span></span><br><span class=\"line\">        <span class=\"comment\">// residue-candidates[i] 为下一轮剩余</span></span><br><span class=\"line\">        <span class=\"comment\">// i 为下一轮的 start值，原因：为了避免重复，选择的数字只能大于等于candidates[i]</span></span><br><span class=\"line\">        backtrack(candidates, track, residue-candidates[i], i);</span><br><span class=\"line\">        <span class=\"comment\">// 撤销选择</span></span><br><span class=\"line\">        track.removeLast();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-例题：组合总和-2-40\"><a href=\"#9-例题：组合总和-2-40\" class=\"headerlink\" title=\"9. 例题：组合总和 2 [40]\"></a>9. 例题：组合总和 2 [40]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/combination-sum-ii/\" target=\"_blank\" rel=\"noopener\">40. 组合总和 II</a></p>\n<h3 id=\"9-1-题目描述\"><a href=\"#9-1-题目描述\" class=\"headerlink\" title=\"9.1 题目描述\"></a>9.1 题目描述</h3><p>给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p>\n<p>candidates 中的每个数字在每个组合中只能使用一次。</p>\n<p>说明：</p>\n<p>所有数字（包括目标数）都是正整数。<br>解集不能包含重复的组合。<br>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: candidates = [10,1,2,7,6,1,5], target = 8,</span><br><span class=\"line\">所求解集为:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [1, 7],</span><br><span class=\"line\">  [1, 2, 5],</span><br><span class=\"line\">  [2, 6],</span><br><span class=\"line\">  [1, 1, 6]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n\n<p>示例 2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: candidates = [2,5,2,1,2], target = 5,</span><br><span class=\"line\">所求解集为:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [1,2,2],</span><br><span class=\"line\">  [5]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-2-题目分析\"><a href=\"#9-2-题目分析\" class=\"headerlink\" title=\"9.2 题目分析\"></a>9.2 题目分析</h3><p>本题与上一题的区别有两个：</p>\n<ol>\n<li>candidates 中的每个数字在每个组合中只能使用一次</li>\n<li>candidates 中有重复数字</li>\n</ol>\n<p>思路如下：</p>\n<ol>\n<li>要保证每个数字用一次，先对序列排序， 且 start 从 i+1 开始</li>\n<li>要保证结果不重复，第一步是不够的，因为 candidates 中有重复数字。这个问题和上文的 <strong>全排列问题（有重复数字）</strong> 类似，使用 pre 标记刚撤销的数字，与当前值比较后进行剪枝。</li>\n</ol>\n<h3 id=\"9-3-代码\"><a href=\"#9-3-代码\" class=\"headerlink\" title=\"9.3 代码\"></a>9.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum2(<span class=\"keyword\">int</span>[] candidates, <span class=\"keyword\">int</span> target)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(candidates.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 排序</span></span><br><span class=\"line\">    Arrays.sort(candidates);</span><br><span class=\"line\">    LinkedList&lt;Integer&gt; track = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    backtrack(candidates, track, target, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> candidates</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> track 记录路径</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> residue 剩余</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start 下一次从 start 开始判断是否添加到路径</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backtrack</span><span class=\"params\">(<span class=\"keyword\">int</span>[] candidates, LinkedList&lt;Integer&gt; track, <span class=\"keyword\">int</span> residue, <span class=\"keyword\">int</span> start)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//触发结束条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(residue == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        res.add(<span class=\"keyword\">new</span> LinkedList&lt;&gt;(track));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> pre = candidates[<span class=\"number\">0</span>] - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = start; i &lt; candidates.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 排除不合法的选择</span></span><br><span class=\"line\">        <span class=\"comment\">// candidates排序之后，如果第一个不满足，后面的肯定不满足，直接break</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(residue - candidates[i] &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 当前值和上一个撤销的值相同，会重复，continue</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(candidates[i] == pre)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//做选择</span></span><br><span class=\"line\">        track.add(candidates[i]);</span><br><span class=\"line\">        <span class=\"comment\">// 进入下一层决策树</span></span><br><span class=\"line\">        <span class=\"comment\">// start 从 i+1 开始</span></span><br><span class=\"line\">        backtrack(candidates, track, residue-candidates[i], i+<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//撤销选择</span></span><br><span class=\"line\">        track.removeLast();</span><br><span class=\"line\">        pre = candidates[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-例题：组合-70\"><a href=\"#10-例题：组合-70\" class=\"headerlink\" title=\"10. 例题：组合 [70]\"></a>10. 例题：组合 [70]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/combinations/\" target=\"_blank\" rel=\"noopener\">77. 组合</a></p>\n<h3 id=\"10-1-题目描述\"><a href=\"#10-1-题目描述\" class=\"headerlink\" title=\"10.1 题目描述\"></a>10.1 题目描述</h3><p>给定两个整数 n 和 k，返回 1 … n 中所有可能的 k 个数的组合。</p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: n = 4, k = 2</span><br><span class=\"line\">输出:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [2,4],</span><br><span class=\"line\">  [3,4],</span><br><span class=\"line\">  [2,3],</span><br><span class=\"line\">  [1,2],</span><br><span class=\"line\">  [1,3],</span><br><span class=\"line\">  [1,4],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-2-题目分析\"><a href=\"#10-2-题目分析\" class=\"headerlink\" title=\"10.2 题目分析\"></a>10.2 题目分析</h3><p>这种数字组合的题目是典型的回溯法问题，先选一个数字，进入递归继续选，如果满足条件则加入结果中，然后回溯到上一步，继续递归。</p>\n<h3 id=\"10-3-代码\"><a href=\"#10-3-代码\" class=\"headerlink\" title=\"10.3 代码\"></a>10.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解法一：回溯法</span></span><br><span class=\"line\"><span class=\"comment\">     * 回溯的常规解法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> n</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> k</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; combine(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k) &#123;</span><br><span class=\"line\">    LinkedList&lt;Integer&gt; track = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    backtrack(track, n, k, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backtrack</span><span class=\"params\">(LinkedList&lt;Integer&gt; track, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> start)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果满足条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(track.size() == k)&#123;</span><br><span class=\"line\">        res.add(<span class=\"keyword\">new</span> LinkedList&lt;&gt;(track));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为避免重复，i 从 start 开始</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = start; i &lt;= n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 做选择</span></span><br><span class=\"line\">        track.add(i);</span><br><span class=\"line\">        backtrack(track, n, k, i+<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 撤销选择</span></span><br><span class=\"line\">        track.removeLast();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-4-优化\"><a href=\"#10-4-优化\" class=\"headerlink\" title=\"10.4 优化\"></a>10.4 优化</h3><p>参考 <a href=\"https://leetcode.wang/leetCode-77-Combinations.html\" target=\"_blank\" rel=\"noopener\">这里</a> 对上面代码进行优化。将 for 循环改为 <code>for(int i = start; i &lt;= (n-k)+1 + track.size(); i++)</code>, 其中，<code>(n-k)+1</code>  表示要在 n 中找到 k 个数字组合，start 必须从 (n-k)+1 处开始；<code>(n-k)+1 + track.size()</code>  表示当前 i 取到的最大数字。原因如下：</p>\n<p>我们发现，如果 n = 5, k = 3,  那么 start 最大取到3，因为如果 start = 4，最终结果只能得到到 (4,5), 结果的个数必定小于k，不满足条件。</p>\n<p>如果 n = 5, k = 3, start = 1, 当 i = 2, track.size() = 1时，i 最大取到 (5-3)+1 + 1 = 4，否则，如果 i 取到 5，结果只能为 (1,5), 数字个数肯定不满足条件。</p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backtrack2</span><span class=\"params\">(LinkedList&lt;Integer&gt; track, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> start)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(track.size() == k)&#123;</span><br><span class=\"line\">        res.add(<span class=\"keyword\">new</span> LinkedList&lt;&gt;(track));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// (n-k)+1 表示要在n中找到k个数字组合，start必须从(n-k)+1处开始</span></span><br><span class=\"line\">    <span class=\"comment\">// 即如果n=5,k=3, 那么start最大取到3，因为如果当start=4时，组合中数字的个数不足</span></span><br><span class=\"line\">    <span class=\"comment\">// (n-k)+1 + track.size() 表示当前i取到的最大数字</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = start; i &lt;= (n-k)+<span class=\"number\">1</span> + track.size(); i++)&#123;</span><br><span class=\"line\">        track.add(i);</span><br><span class=\"line\">        backtrack(track, n, k, i+<span class=\"number\">1</span>);</span><br><span class=\"line\">        track.removeLast();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>虽然只改了一句代码，但速度快了很多。</p>\n<h2 id=\"11-单词搜索-79\"><a href=\"#11-单词搜索-79\" class=\"headerlink\" title=\"11. 单词搜索 [79]\"></a>11. 单词搜索 [79]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/word-search/\" target=\"_blank\" rel=\"noopener\">79. 单词搜索</a></p>\n<h3 id=\"11-1-题目描述\"><a href=\"#11-1-题目描述\" class=\"headerlink\" title=\"11.1. 题目描述\"></a>11.1. 题目描述</h3><p>给定一个二维网格和一个单词，找出该单词是否存在于网格中。</p>\n<p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p>\n<p>示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">board =</span><br><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>,<span class=\"string\">'E'</span>],</span><br><span class=\"line\">  [<span class=\"string\">'S'</span>,<span class=\"string\">'F'</span>,<span class=\"string\">'C'</span>,<span class=\"string\">'S'</span>],</span><br><span class=\"line\">  [<span class=\"string\">'A'</span>,<span class=\"string\">'D'</span>,<span class=\"string\">'E'</span>,<span class=\"string\">'E'</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">给定 word = <span class=\"string\">\"ABCCED\"</span>, 返回 <span class=\"literal\">true</span></span><br><span class=\"line\">给定 word = <span class=\"string\">\"SEE\"</span>, 返回 <span class=\"literal\">true</span></span><br><span class=\"line\">给定 word = <span class=\"string\">\"ABCB\"</span>, 返回 <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n\n<p>提示：</p>\n<ul>\n<li>board 和 word 中只包含大写和小写英文字母。</li>\n<li>1 &lt;= board.length &lt;= 200</li>\n<li>1 &lt;= board[i].length &lt;= 200</li>\n<li>1 &lt;= word.length &lt;= 10^3</li>\n</ul>\n<h3 id=\"11-2-题目分析\"><a href=\"#11-2-题目分析\" class=\"headerlink\" title=\"11.2. 题目分析\"></a>11.2. 题目分析</h3><p>基本思路：找第一个匹配的字符，然后在其上下左右的四个字符中找与第二个字符匹配的字符，找到后，以次类推。上下左右字符需要首先判断是否越界、是否已经访问过。</p>\n<p>但是，在做题的过程中，完全忽略了这是标准的回溯思想，参考之前的博客：<a href=\"https://juliajiang7.github.io/2020/07/25/回溯算法总结/#more\" target=\"_blank\" rel=\"noopener\">回溯算法</a>.</p>\n<p>回溯法采用试错的思想，尝试分步解决一个问题。在本题中，匹配下一个字符时就有上下左右四种选择。当它发现现有的分布答辩不能得到有效的正确答案时，将取消上一步或者上几步的计算，再通过其他分步尝试得到问题答案。</p>\n<p>在做题中有一个很大问题：忽略了回溯，即选择一条路走完发现不能匹配时，就返回了false，没有取消这一步操作。这一点要注意。</p>\n<p>另外，这一题使用框架不太好写，还是基于回溯思想（DFS），按照正常的思路来写。</p>\n<h3 id=\"11-3-代码\"><a href=\"#11-3-代码\" class=\"headerlink\" title=\"11.3. 代码\"></a>11.3. 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">exist</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(board.length == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> row = board.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> col = board[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; row; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; col; j++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 找到第一个字母</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(board[i][j] == word.charAt(<span class=\"number\">0</span>))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span>[][] visited = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[row][col];</span><br><span class=\"line\">                visited[i][j] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 判断从 board[i][j] 出发，后面能否全部匹配</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(isValid(i, j, word, <span class=\"number\">0</span>, board, visited))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当 board[i][j] 匹配 word[k] 时，后面是否可以全部匹配</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> j</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> word</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> k</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> board</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> visited 当前已访问的字符</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, String word, <span class=\"keyword\">int</span> k, <span class=\"keyword\">char</span>[][] board, <span class=\"keyword\">boolean</span>[][] visited)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> row = board.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> col = board[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k == word.length() - <span class=\"number\">1</span>)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 上面</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> left = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; !visited[i - <span class=\"number\">1</span>][j] &amp;&amp; board[i - <span class=\"number\">1</span>][j] == word.charAt(k + <span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">        visited[i - <span class=\"number\">1</span>][j] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        left = isValid(i - <span class=\"number\">1</span>, j, word, k + <span class=\"number\">1</span>, board, visited);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left)&#123;<span class=\"keyword\">return</span> left;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 下面</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> right = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i + <span class=\"number\">1</span> &lt; row &amp;&amp; !visited[i + <span class=\"number\">1</span>][j] &amp;&amp; board[i + <span class=\"number\">1</span>][j] == word.charAt(k + <span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">        visited[i + <span class=\"number\">1</span>][j] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        right = isValid(i + <span class=\"number\">1</span>, j, word, k + <span class=\"number\">1</span>, board, visited);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(right)&#123;<span class=\"keyword\">return</span> right;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 左边</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> up = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; !visited[i][j - <span class=\"number\">1</span>] &amp;&amp; board[i][j - <span class=\"number\">1</span>] == word.charAt(k + <span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">        visited[i][j - <span class=\"number\">1</span>] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        up = isValid(i, j - <span class=\"number\">1</span>, word, k + <span class=\"number\">1</span>, board, visited);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(up)&#123;<span class=\"keyword\">return</span> up;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 右边</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> down = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j + <span class=\"number\">1</span> &lt; col &amp;&amp; !visited[i][j + <span class=\"number\">1</span>] &amp;&amp; board[i][j + <span class=\"number\">1</span>] == word.charAt(k + <span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">        visited[i][j + <span class=\"number\">1</span>] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        down = isValid(i, j + <span class=\"number\">1</span>, word, k + <span class=\"number\">1</span>, board, visited);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(down)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果上下左右都没有匹配，则取消这一步，回溯</span></span><br><span class=\"line\">    visited[i][j] = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-子集-78\"><a href=\"#12-子集-78\" class=\"headerlink\" title=\"12. 子集 [78]\"></a>12. 子集 [78]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/subsets/\" target=\"_blank\" rel=\"noopener\">78. 子集</a></p>\n<h3 id=\"12-1-题目描述\"><a href=\"#12-1-题目描述\" class=\"headerlink\" title=\"12.1. 题目描述\"></a>12.1. 题目描述</h3><p><img src=\"/pictures/image-20200824094845802.png\" alt=\"image-20200824094845802\"></p>\n<h3 id=\"12-1-方法一：迭代\"><a href=\"#12-1-方法一：迭代\" class=\"headerlink\" title=\"12.1. 方法一：迭代\"></a>12.1. 方法一：迭代</h3><p>利用数学归纳的思想：假设现在知道了规模更小的子问题，如何推导出当前问题的结果呢？即知道了 [1,2] 的子集，如何求 [1,2,3] 的子集。</p>\n<p>可以发现，[1,2,3] 的子集包括两部分：第一部分是已知的 [1,2] 的子集；另一部分是给每一个 [1,2] 子集加上 3。发现这个规律后，即可写出下面的迭代代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    res.add(<span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = res.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 注意：这里需要 new 一个对象，不可以直接赋值</span></span><br><span class=\"line\">            List&lt;Integer&gt; cur = <span class=\"keyword\">new</span> LinkedList&lt;&gt;(res.get(i));</span><br><span class=\"line\">            cur.add(num);</span><br><span class=\"line\">            res.add(cur);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>时间复杂度：迭代次数是 N，每次迭代都遍历 res，res 的长度应该是每次递归都翻倍，所以说总的迭代次数应该是 2^N。所以，总的时间复杂度是 O(N * 2 ^ N)。</p>\n<p>空间复杂度：如果不计算储存返回结果所用的空间的，只需要 O(N) 的递归堆栈空间。如果计算 <code>res</code> 所需的空间，应该是 O(N*2^N)。</p>\n<h3 id=\"12-2-方法二：回溯算法\"><a href=\"#12-2-方法二：回溯算法\" class=\"headerlink\" title=\"12.2. 方法二：回溯算法\"></a>12.2. 方法二：回溯算法</h3><p>参考 <a href=\"https://mp.weixin.qq.com/s/qT6WgR6Qwn7ayZkI3AineA\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">    LinkedList&lt;Integer&gt; track = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    backtrack(nums, track, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backtrack</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, LinkedList&lt;Integer&gt; track, <span class=\"keyword\">int</span> start)</span> </span>&#123;</span><br><span class=\"line\">    res.add(<span class=\"keyword\">new</span> LinkedList&lt;&gt;(track));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = start; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">        track.add(nums[i]);</span><br><span class=\"line\">        backtrack(nums, track, start + <span class=\"number\">1</span>);</span><br><span class=\"line\">        track.removeLast();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"13-子集-II-90\"><a href=\"#13-子集-II-90\" class=\"headerlink\" title=\"13. 子集 II [90]\"></a>13. 子集 II [90]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/subsets-ii/\" target=\"_blank\" rel=\"noopener\">90. 子集 II</a></p>\n<h3 id=\"13-1-题目描述\"><a href=\"#13-1-题目描述\" class=\"headerlink\" title=\"13.1. 题目描述\"></a>13.1. 题目描述</h3><p><img src=\"/pictures/image-20200824101740024.png\" alt=\"image-20200824101740024\"></p>\n<h3 id=\"13-2-代码\"><a href=\"#13-2-代码\" class=\"headerlink\" title=\"13.2. 代码\"></a>13.2. 代码</h3><p>有了上一题的基础，回溯法稍作修改即可。</p>\n<p>为了方便的剪枝，要对序列进行排序，排序之后所有相同的数字都会放在一起。为了避免结果中出现相同的子集，兄弟节点中不能出现相同的数字，即在 <code>track.add</code> 之前，需要先判断，是否和已经加入的兄弟节点值相同（如果是第一个加入的子节点，不需要判断）。 代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">    LinkedList&lt;Integer&gt; track = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    Arrays.sort(nums);</span><br><span class=\"line\">    backtrack(nums, track, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backtrack</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, LinkedList&lt;Integer&gt; track, <span class=\"keyword\">int</span> start)</span> </span>&#123;</span><br><span class=\"line\">    res.add(<span class=\"keyword\">new</span> LinkedList&lt;&gt;(track));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = start; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == start || nums[i] != nums[i - <span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">            track.add(nums[i]);</span><br><span class=\"line\">            backtrack(nums, track, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            track.removeLast();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"14-复原IP地址-93\"><a href=\"#14-复原IP地址-93\" class=\"headerlink\" title=\"14. 复原IP地址 [93]\"></a>14. 复原IP地址 [93]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/restore-ip-addresses/\" target=\"_blank\" rel=\"noopener\">93. 复原IP地址</a></p>\n<h3 id=\"14-1-题目描述\"><a href=\"#14-1-题目描述\" class=\"headerlink\" title=\"14.1. 题目描述\"></a>14.1. 题目描述</h3><p><img src=\"/pictures/image-20200827104857215.png\" alt=\"image-20200827104857215\"></p>\n<h3 id=\"14-2-解法一：暴力破解（迭代）\"><a href=\"#14-2-解法一：暴力破解（迭代）\" class=\"headerlink\" title=\"14.2. 解法一：暴力破解（迭代）\"></a>14.2. 解法一：暴力破解（迭代）</h3><p>参考 <a href=\"https://leetcode.wang/leetCode-93-Restore-IP-Addresses.html\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<p>要求划分为四部分，我们直接利用三个指针将字符串强行分为4部分，遍历所有的划分，然后选取合法的解。这种解法没有超时。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">restoreIpAddresses</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;String&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = s.length();</span><br><span class=\"line\">    <span class=\"comment\">// i &lt; 4 保证第一部分不超过3位数</span></span><br><span class=\"line\">    <span class=\"comment\">// i &lt; len - 2 保证剩余的字符串还能分成3部分</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">4</span> &amp;&amp; i &lt; len - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; i + <span class=\"number\">4</span> &amp;&amp; j &lt; len - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = j + <span class=\"number\">1</span>; k &lt; j + <span class=\"number\">4</span> &amp;&amp; k &lt; len; k++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 保存四部分字符串</span></span><br><span class=\"line\">                String s1 = s.substring(<span class=\"number\">0</span>, i), s2 = s.substring(i, j), s3 = s.substring(j, k), s4 = s.substring(k, len);</span><br><span class=\"line\">                <span class=\"comment\">// 判断是否合法</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isValid(s1) &amp;&amp; isValid(s2) &amp;&amp; isValid(s3) &amp;&amp; isValid(s4)) &#123;</span><br><span class=\"line\">                    res.add(s1 + <span class=\"string\">\".\"</span> + s2 + <span class=\"string\">\".\"</span> + s3 + <span class=\"string\">\".\"</span> + s4);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length() &gt; <span class=\"number\">3</span> || s.length() == <span class=\"number\">0</span> || (s.charAt(<span class=\"number\">0</span>) == <span class=\"string\">'0'</span> &amp;&amp; s.length() &gt; <span class=\"number\">1</span>) || Integer.parseInt(s) &gt; <span class=\"number\">255</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>时间复杂度：如果不考虑我们调用的内部函数，Integer.parseInt，s.substring，那么就是 O（1）。因为每一层循环最多遍历 4 次。考虑的话每次调用的时间复杂度是 O（n），常数次调用，所以是 O（n）。</p>\n<p>空间复杂度：O（1）。</p>\n<h3 id=\"14-3-解法二：回溯\"><a href=\"#14-3-解法二：回溯\" class=\"headerlink\" title=\"14.3. 解法二：回溯\"></a>14.3. 解法二：回溯</h3><p>字符串划分问题，需要划分为4部分。直接使用回溯的思想，第一部分可能是 1 位数，然后进入递归；也可能是2位数，然后进入递归；也可能是三位数，然后进入递归。即每一次循环有三种选择。</p>\n<p>本题虽然使用了回溯的思想，但前面总结的框架不能直接使用，下面代码是它的变形，而且本题的难点在于需要考虑的情况比较多，剪枝条件也比较多。具体剪枝的分析参考 <a href=\"https://leetcode-cn.com/problems/restore-ip-addresses/solution/hui-su-suan-fa-hua-tu-fen-xi-jian-zhi-tiao-jian-by/\" target=\"_blank\" rel=\"noopener\">这里</a> .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">restoreIpAddresses</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;String&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    backtrack(s, <span class=\"number\">0</span>, <span class=\"keyword\">new</span> StringBuilder(), res, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> s</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start 字符串开始部分</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> track 已经划分部分</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> res   保存所有的解</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> count 当前已经加入了几部分</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backtrack</span><span class=\"params\">(String s, <span class=\"keyword\">int</span> start, StringBuilder track, List&lt;String&gt; res, <span class=\"keyword\">int</span> count)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果剩余长度大于剩下部分都取3位数的长度，剪枝</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length() - start &gt; <span class=\"number\">3</span> * (<span class=\"number\">4</span> - count)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当前刚好到达末尾</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start == s.length()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当前刚好是4部分，将结果加入，否则剪枝</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            res.add(track.substring(<span class=\"number\">0</span>, track.length() - <span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 当前到达末尾，但不是4部分，剪枝</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当前超过末尾，剪枝</span></span><br><span class=\"line\">    <span class=\"comment\">// 当前未到达末尾，但有4部分，剪枝</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt; s.length() || count == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 保存当前的解</span></span><br><span class=\"line\">    StringBuilder before = <span class=\"keyword\">new</span> StringBuilder(track);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 选择：加入一位数</span></span><br><span class=\"line\">    track.append(s.charAt(start) + <span class=\"string\">\"\"</span> + <span class=\"string\">'.'</span>);</span><br><span class=\"line\">    backtrack(s, start + <span class=\"number\">1</span>, track, res, count + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果开头是0，直接结束，即选择2或3位数之前可进行剪枝</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.charAt(start) == <span class=\"string\">'0'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 做出选择：加入2位数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start + <span class=\"number\">1</span> &lt; s.length()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 撤销选择：恢复为之前的解</span></span><br><span class=\"line\">        track = <span class=\"keyword\">new</span> StringBuilder(before);</span><br><span class=\"line\">        track.append(s.substring(start, start + <span class=\"number\">2</span>) + <span class=\"string\">\"\"</span> + <span class=\"string\">'.'</span>);</span><br><span class=\"line\">        backtrack(s, start + <span class=\"number\">2</span>, track, res, count + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 做出选择：加入3位数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start + <span class=\"number\">2</span> &lt; s.length()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 撤销选择：恢复为之前的解</span></span><br><span class=\"line\">        track = <span class=\"keyword\">new</span> StringBuilder(before);</span><br><span class=\"line\">        <span class=\"comment\">// 当选择3位数时，要判断数字大小</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = Integer.parseInt(s.substring(start, start + <span class=\"number\">3</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0</span> &lt;= num &amp;&amp; num &lt;= <span class=\"number\">255</span>) &#123;</span><br><span class=\"line\">            track.append(s.substring(start, start + <span class=\"number\">3</span>) + <span class=\"string\">\"\"</span> + <span class=\"string\">'.'</span>);</span><br><span class=\"line\">            backtrack(s, start + <span class=\"number\">3</span>, track, res, count + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"15-交错字符串-97\"><a href=\"#15-交错字符串-97\" class=\"headerlink\" title=\"15. 交错字符串 [97]\"></a>15. 交错字符串 [97]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/interleaving-string/\" target=\"_blank\" rel=\"noopener\">97. 交错字符串</a></p>\n<h3 id=\"15-1-题目描述\"><a href=\"#15-1-题目描述\" class=\"headerlink\" title=\"15.1. 题目描述\"></a>15.1. 题目描述</h3><p><img src=\"/pictures/image-20200828102111964.png\" alt=\"image-20200828102111964\"></p>\n<h3 id=\"15-2-方法一：回溯法\"><a href=\"#15-2-方法一：回溯法\" class=\"headerlink\" title=\"15.2. 方法一：回溯法\"></a>15.2. 方法一：回溯法</h3><p>参考：<a href=\"https://leetcode.wang/leetCode-97-Interleaving-String.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>感觉要用回溯解决，但是不知道怎么回溯，如何递归。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isInterleave</span><span class=\"params\">(String s1, String s2, String s3)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s1.length() + s2.length() != s3.length()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> backtrack(s1, s2, s3, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">backtrack</span><span class=\"params\">(String s1, String s2, String s3, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// i，j,k 全部到达末尾就返回true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == s1.length() &amp;&amp; j == s2.length() &amp;&amp; k == s3.length()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// i 到达末尾，直接移动 j 和 k 不停比较</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == s1.length()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt; s2.length()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s2.charAt(j) != s3.charAt(k)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// j 到达末尾，直接移动 i 和 k 不停比较</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j == s2.length()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; s1.length()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s1.charAt(i) != s3.charAt(k)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 判断 i 和 k 指向的字符是否相等</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s1.charAt(i) == s3.charAt(k)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 后移 i 和 k 继续判断，如果成功直接返回true</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (backtrack(s1, s2, s3, i + <span class=\"number\">1</span>, j, k + <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 移动 i 和 k 失败，尝试移动 j 和 k</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s2.charAt(j) == s3.charAt(k)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (backtrack(s1, s2, s3, i, j + <span class=\"number\">1</span>, k + <span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 移动 i 和 j 都失败，返回 false</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-3-方法二：回溯法的优化（备忘录）\"><a href=\"#15-3-方法二：回溯法的优化（备忘录）\" class=\"headerlink\" title=\"15.3. 方法二：回溯法的优化（备忘录）\"></a>15.3. 方法二：回溯法的优化（备忘录）</h3><p>参考：<a href=\"https://leetcode.wang/leetCode-97-Interleaving-String.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>由于递归的分支，所以会造成很多重复情况的判断，所以我们用 memoization 技术，把求出的结果用 hashmap 保存起来，第二次过来的时候直接返回结果以免再次进入递归。</p>\n<p>hashmap key 的话用字符串 i + “@” + j ，之所以中间加 “@”，是为了防止 i = 1 和 j = 22。以及 i = 12，j = 2。这样的两种情况产生的就都是 122。加上 “@” 可以区分开来。</p>\n<p>原文中：map 的 value 取值有三个，用 1 表示 true，0 表示 false，-1 代表还未赋值。</p>\n<p>但其实这里并不会用到三个值，因为一旦遇到的 i 和 j 满足要求，直接返回 true 即可，不需要再存入 map 中。因此，这里定义的 memo 就是一个不满足要求的 i 和 j 组合，只要 memo中含有 i 和 j 的组合，则直接返回 false。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isInterleave</span><span class=\"params\">(String s1, String s2, String s3)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s1.length() + s2.length() != s3.length()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// memo 的 key 是：i + \"@\" + j，用@隔开是为了防止i=1,j=22时，可能出现两种组合情况：(1,22),(12,2)</span></span><br><span class=\"line\">    <span class=\"comment\">// memo 的 value 取值：-1 表示为赋值；0 表示false；1 表示true</span></span><br><span class=\"line\">    <span class=\"comment\">// value 其实用不到三个值，因为一旦当前的 i 和 j 符合要求，直接返回 true 即可。因此 memo 中只需要存不满足情况的 i 和 j 即可</span></span><br><span class=\"line\">    Map&lt;String, Integer&gt; memo = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> backtrack2(s1, s2, s3, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, memo);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">backtrack2</span><span class=\"params\">(String s1, String s2, String s3, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, <span class=\"keyword\">int</span> k, Map&lt;String, Integer&gt; memo)</span> </span>&#123;</span><br><span class=\"line\">    String key = i + <span class=\"string\">\"@\"</span> + j;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (memo.containsKey(key))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == s1.length() &amp;&amp; j == s2.length() &amp;&amp; k == s3.length()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == s1.length()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt; s2.length()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s2.charAt(j) != s3.charAt(k)) &#123;</span><br><span class=\"line\">                memo.put(key, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j == s2.length()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; s1.length()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s1.charAt(i) != s3.charAt(k)) &#123;</span><br><span class=\"line\">                memo.put(key, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s1.charAt(i) == s3.charAt(k)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (backtrack2(s1, s2, s3, i + <span class=\"number\">1</span>, j, k + <span class=\"number\">1</span>, memo)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s2.charAt(j) == s3.charAt(k)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (backtrack2(s1, s2, s3, i, j + <span class=\"number\">1</span>, k + <span class=\"number\">1</span>, memo))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    memo.put(key, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-4-方法三：动态规划\"><a href=\"#15-4-方法三：动态规划\" class=\"headerlink\" title=\"15.4. 方法三：动态规划\"></a>15.4. 方法三：动态规划</h3><p>参考：<a href=\"https://leetcode.wang/leetCode-97-Interleaving-String.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>dp 数组定义：定义一个 boolean 二维数组 dp [ i ] [ j ] 来表示 s1[ 0, i ) 和 s2 [ 0, j ） 组合后能否构成 s3 [ 0, i + j )，注意不包括右边界，主要是为了考虑开始的时候如果只取 s1，那么 s2 就是空串，这样的话 dp [ i ] [ 0 ] 就能表示 s2 取空串。</p>\n<p>注意，<code>dp[0][0]</code> 表示 s1 和 s2 都取空串，组成一个空串，则值为 true。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isInterleave</span><span class=\"params\">(String s1, String s2, String s3)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s1.length() + s2.length() != s3.length()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s1.length() == <span class=\"number\">0</span> &amp;&amp; s2.length() == <span class=\"number\">0</span> &amp;&amp; s3.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len1 = s1.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len2 = s2.length();</span><br><span class=\"line\">    <span class=\"comment\">// dp[i][j] = true 表示：s1[0..i) 和 s2[0..j) 组合后能构成 s3[0..i+j)</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[len1 + <span class=\"number\">1</span>][len2 + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= len1; i++) &#123;</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] &amp;&amp; s1.charAt(i - <span class=\"number\">1</span>) == s3.charAt(i - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= len2; j++) &#123;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][j] = dp[<span class=\"number\">0</span>][j - <span class=\"number\">1</span>] &amp;&amp; s2.charAt(j - <span class=\"number\">1</span>) == s3.charAt(j - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= len1; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= len2; j++) &#123;</span><br><span class=\"line\">            dp[i][j] = (dp[i - <span class=\"number\">1</span>][j] &amp;&amp; s1.charAt(i - <span class=\"number\">1</span>) == s3.charAt(i + j - <span class=\"number\">1</span>))</span><br><span class=\"line\">                || (dp[i][j - <span class=\"number\">1</span>] &amp;&amp; s2.charAt(j - <span class=\"number\">1</span>) == s3.charAt(i + j - <span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[len1][len2];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"16-路径总和-II-113\"><a href=\"#16-路径总和-II-113\" class=\"headerlink\" title=\"16. 路径总和 II [113]\"></a>16. 路径总和 II [113]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/path-sum-ii/\" target=\"_blank\" rel=\"noopener\">113. 路径总和 II</a></p>\n<h3 id=\"16-1-题目描述\"><a href=\"#16-1-题目描述\" class=\"headerlink\" title=\"16.1. 题目描述\"></a>16.1. 题目描述</h3><p><img src=\"/pictures/image-20200903093332125.png\" alt=\"image-20200903093332125\"></p>\n<h3 id=\"16-2-代码\"><a href=\"#16-2-代码\" class=\"headerlink\" title=\"16.2. 代码\"></a>16.2. 代码</h3><p>典型的回溯思路：采用试错的思想，尝试分步去解决问题，在分步解决问题的过程中，当通过尝试发现现有的分布答案不能得到有效的正确答案时，取消上一步甚至是上几步的计算，再通过其他的分布尝试寻找问题的答案。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, <span class=\"keyword\">int</span> sum) &#123;</span><br><span class=\"line\">    LinkedList&lt;Integer&gt; track = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    track.add(root.val);</span><br><span class=\"line\">    backtrack(root, sum, track, root.val);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backtrack</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">int</span> sum, LinkedList&lt;Integer&gt; track, <span class=\"keyword\">int</span> tmp)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tmp == sum &amp;&amp; root.left == <span class=\"keyword\">null</span> &amp;&amp; root.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        res.add(<span class=\"keyword\">new</span> LinkedList&lt;&gt;(track));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 做出选择：左子树</span></span><br><span class=\"line\">        track.add(root.left.val);</span><br><span class=\"line\">        backtrack(root.left, sum, track, tmp + root.left.val);</span><br><span class=\"line\">        <span class=\"comment\">// 撤销选择</span></span><br><span class=\"line\">        track.removeLast();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        track.add(root.right.val);</span><br><span class=\"line\">        backtrack(root.right, sum, track, tmp + root.right.val);</span><br><span class=\"line\">        track.removeLast();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"17-参考引用\"><a href=\"#17-参考引用\" class=\"headerlink\" title=\"17. 参考引用\"></a>17. 参考引用</h2><ol>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E5%9B%9E%E6%BA%AF%E6%B3%95\" target=\"_blank\" rel=\"noopener\">Wikipedia</a></li>\n<li><a href=\"https://labuladong.gitbook.io/algo/di-ling-zhang-bi-du-xi-lie/hui-su-suan-fa-xiang-jie-xiu-ding-ban\" target=\"_blank\" rel=\"noopener\">https://labuladong.gitbook.io/algo/di-ling-zhang-bi-du-xi-lie/hui-su-suan-fa-xiang-jie-xiu-ding-ban</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/permutations/solution/hui-su-suan-fa-python-dai-ma-java-dai-ma-by-liweiw/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/permutations/solution/hui-su-suan-fa-python-dai-ma-java-dai-ma-by-liweiw/</a></li>\n<li><a href=\"https://leetcode.wang/leetCode-77-Combinations.html\" target=\"_blank\" rel=\"noopener\">https://leetcode.wang/leetCode-77-Combinations.html</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/qT6WgR6Qwn7ayZkI3AineA\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/qT6WgR6Qwn7ayZkI3AineA</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/restore-ip-addresses/solution/hui-su-suan-fa-hua-tu-fen-xi-jian-zhi-tiao-jian-by/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/restore-ip-addresses/solution/hui-su-suan-fa-hua-tu-fen-xi-jian-zhi-tiao-jian-by/</a></li>\n<li><a href=\"https://leetcode.wang/leetCode-97-Interleaving-String.html\" target=\"_blank\" rel=\"noopener\">https://leetcode.wang/leetCode-97-Interleaving-String.html</a></li>\n</ol>\n","site":{"data":{}},"length":24734,"excerpt":"<p>本文主要介绍了回溯法的定义、回溯法的代码框架，以及回溯法的典型问题全排列问题、N皇后问题等。另外，还介绍了LeetCode中使用回溯法的部分题目，这部分内容会持续更新。</p>\n<h2 id=\"1-什么是回溯法？\"><a href=\"#1-什么是回溯法？\" class=\"headerlink\" title=\"1. 什么是回溯法？\"></a>1. 什么是回溯法？</h2><p><strong><a href=\"https://zh.wikipedia.org/wiki/回溯法\" target=\"_blank\" rel=\"noopener\">维基定义</a></strong> : （英语：backtracking）是<a href=\"https://zh.wikipedia.org/wiki/暴力搜尋法\" target=\"_blank\" rel=\"noopener\">暴力搜索法</a>中的一种。</p>\n<p>对于某些计算问题而言，回溯法是一种可以找出所有（或一部分）解的一般性算法，尤其适用于约束满足问题（在解决约束满足问题时，我们逐步构造更多的候选解，并且在确定某一部分候选解不可能补全成正确解之后放弃继续搜索这个部分候选解本身及其可以拓展出的子候选解，转而测试其他的部分候选解）。在经典的教科书中，<strong><a href=\"https://zh.wikipedia.org/wiki/八皇后问题\" target=\"_blank\" rel=\"noopener\">八皇后问题</a></strong>展示了回溯法的用例。</p>","more":"<p>回溯法采用<a href=\"https://zh.wikipedia.org/wiki/试错\" target=\"_blank\" rel=\"noopener\">试错</a>的思想，它尝试分步的去解决一个问题。在分步解决问题的过程中，当它通过尝试发现现有的分步答案不能得到有效的正确的解答的时候，它将取消上一步甚至是上几步的计算，再通过其它的可能的分步解答再次尝试寻找问题的答案。回溯法通常用最简单的递归方法来实现，在反复重复上述的步骤后可能出现两种情况：</p>\n<ul>\n<li>找到一个可能存在的正确的答案</li>\n<li>在尝试了所有可能的分步方法后宣告该问题没有答案</li>\n</ul>\n<p>在最坏的情况下，回溯法会导致一次复杂度为指数时间的计算。</p>\n<p>“回溯”指的是“状态重置”，可以理解为“回到过去”、“恢复现场”，是在编码的过程中，是为了节约空间而使用的一种技巧。而回溯其实是“深度优先遍历”特有的一种现象。之所以是“深度优先遍历”，是因为我们要解决的问题通常是在一棵树上完成的，在这棵树上搜索需要的答案，一般使用深度优先遍历。</p>\n<h2 id=\"2-回溯法框架\"><a href=\"#2-回溯法框架\" class=\"headerlink\" title=\"2. 回溯法框架\"></a>2. 回溯法框架</h2><p>上文主要是 Wikipedia 对于回溯法的介绍，这一节，将参考 <a href=\"https://labuladong.gitbook.io/algo/di-ling-zhang-bi-du-xi-lie/hui-su-suan-fa-xiang-jie-xiu-ding-ban\" target=\"_blank\" rel=\"noopener\">这里</a> 给出一个回溯算法的框架。</p>\n<p><strong>解决一个回溯问题，实际上就是一个决策树的遍历过程</strong>。你只需要思考 3 个问题：</p>\n<ol>\n<li>路径：也就是已经做出的选择</li>\n<li>选择列表：也就是你当前可以做的选择</li>\n<li>结束条件：也就是到达决策树底层，无法再做选择的条件</li>\n</ol>\n<p>如果现在不理解这三个词语没关系，下一节我们将以全排列问题为例，进行详细介绍。下面给出回溯法的框架：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = []</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">backtrack</span><span class=\"params\">(路径, 选择列表)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> 满足结束条件:</span><br><span class=\"line\">        result.add(路径)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> 选择 <span class=\"keyword\">in</span> 选择列表:</span><br><span class=\"line\">        做选择</span><br><span class=\"line\">        backtrack(路径, 选择列表)</span><br><span class=\"line\">        撤销选择</span><br></pre></td></tr></table></figure>\n\n<p><strong>其核心就是 for 循环里面的递归，在递归调用之前「做选择」，在递归调用之后「撤销选择」。</strong></p>\n<h2 id=\"3-以全排列问题（无重复数字）为例-46\"><a href=\"#3-以全排列问题（无重复数字）为例-46\" class=\"headerlink\" title=\"3. 以全排列问题（无重复数字）为例 [46]\"></a>3. 以全排列问题（无重复数字）为例 [46]</h2><h3 id=\"3-1-题目描述\"><a href=\"#3-1-题目描述\" class=\"headerlink\" title=\"3.1 题目描述\"></a>3.1 题目描述</h3><p>题目来源：<a href=\"https://leetcode-cn.com/problems/permutations/\" target=\"_blank\" rel=\"noopener\">46. 全排列</a></p>\n<p>给定一个 <strong>没有重复</strong> 数字的序列，返回其所有可能的全排列。</p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,2,3]</span><br><span class=\"line\">输出:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [1,2,3],</span><br><span class=\"line\">  [1,3,2],</span><br><span class=\"line\">  [2,1,3],</span><br><span class=\"line\">  [2,3,1],</span><br><span class=\"line\">  [3,1,2],</span><br><span class=\"line\">  [3,2,1]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-问题分析\"><a href=\"#3-2-问题分析\" class=\"headerlink\" title=\"3.2 问题分析\"></a>3.2 问题分析</h3><p>我们知道，对于 n 个不重复的数，全排列共有 n! 个。如果使用穷举法，我们一般会：</p>\n<p>先固定第一位为 1，然后第二位可以是 2，那么第三位只能是 3；然后可以把第二位变成 3，第三位就只能是 2 了；然后就只能变化第一位，变成 2，然后再穷举后两位……</p>\n<p>其实这就是回溯算法，可以转化为下面的回溯树：</p>\n<img src=\"/pictures/1.jpg\" alt=\"img\" style=\"zoom: 33%;\" />\n\n<p>只要从根遍历这棵树，记录路径上的数字，其实就是所有的全排列。<strong>我们不妨把这棵树称为回溯算法的「决策树」</strong>。</p>\n<p><strong>为啥说这是决策树呢，因为你在每个节点上其实都在做决策</strong>。比如说你站在下图的红色节点上：</p>\n<img src=\"/pictures/2.jpg\" alt=\"img\" style=\"zoom:33%;\" />\n\n<p>你现在就在做决策，可以选择 1 那条树枝，也可以选择 3 那条树枝。为啥只能在 1 和 3 之中选择呢？因为 2 这个树枝在你身后，这个选择你之前做过了，而全排列是不允许重复使用数字的。</p>\n<p><strong>现在可以解答开头的几个名词：</strong><code>[2]</code> <strong>就是「路径」，记录你已经做过的选择；<code>[1,3]</code>就是「选择列表」，表示你当前可以做出的选择；「结束条件」就是遍历到树的底层，在这里就是选择列表为空的时候</strong>。</p>\n<p>如果明白了这几个名词，<strong>可以把「路径」和「选择」列表作为决策树上每个节点的属性</strong>，比如下图列出了几个节点的属性：</p>\n<img src=\"/pictures/3.jpg\" alt=\"img\" style=\"zoom:33%;\" />\n\n<p><strong>框架中定义的 <code>backtrace</code>  函数其实就像一个指针，在这棵树上游走，同时要正确维护每个节点的属性，每当走到树的底层，其「路径」就是一个全排列</strong>。</p>\n<p>在回溯法中，<strong>我们只要在递归之前做出选择，在递归之后撤销刚才的选择</strong>，就能正确得到每个节点的选择列表和路径。因此，框架中的核心代码详细化如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> 选择 <span class=\"keyword\">in</span> 选择列表:</span><br><span class=\"line\">    <span class=\"comment\"># 做选择</span></span><br><span class=\"line\">    将该选择从选择列表移除</span><br><span class=\"line\">    路径.add(选择)</span><br><span class=\"line\">    backtrack(路径, 选择列表)</span><br><span class=\"line\">    <span class=\"comment\"># 撤销选择</span></span><br><span class=\"line\">    路径.remove(选择)</span><br><span class=\"line\">    将该选择再加入选择列表</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-代码\"><a href=\"#3-3-代码\" class=\"headerlink\" title=\"3.3 代码\"></a>3.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 记录路径（已做出的选择）</span></span><br><span class=\"line\">    LinkedList&lt;Integer&gt; track = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    backtrack(nums, track);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> track</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backtrack</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, LinkedList&lt;Integer&gt; track)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 满足结束条件（到达决策树底层，无法再做选择的条件）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums.length == track.size())&#123;</span><br><span class=\"line\">        res.add(<span class=\"keyword\">new</span> LinkedList&lt;&gt;(track));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 排除不合法的选择</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(track.contains(num))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 做选择</span></span><br><span class=\"line\">        track.add(num);</span><br><span class=\"line\">        <span class=\"comment\">// 进入下一层决策树</span></span><br><span class=\"line\">        backtrack(nums, track);</span><br><span class=\"line\">        <span class=\"comment\">// 撤销选择</span></span><br><span class=\"line\">        track.removeLast();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们并没有显示记录「选择列表」，而是通过 <code>nums</code> 和 <code>track</code> 推导出当前的选择列表。</p>\n<p>至此，我们就通过全排列问题详解了回溯算法的底层原理。当然，这个算法解决全排列不是很高效，应为对链表使用 <code>contains</code> 方法需要 O(N) 的时间复杂度。有更好的方法通过交换元素达到目的，但是难理解一些，这里就不写了，有兴趣可以自行搜索一下。</p>\n<p>但是必须说明的是，不管怎么优化，都符合回溯框架，而且时间复杂度都不可能低于 O(N!)，因为穷举整棵决策树是无法避免的。<strong>这也是回溯算法的一个特点，不像动态规划存在重叠子问题可以优化，回溯算法就是纯暴力穷举，复杂度一般都很高</strong>。</p>\n<p>明白了全排列问题，就可以直接套回溯算法框架了。</p>\n<h3 id=\"3-4-另一种方法\"><a href=\"#3-4-另一种方法\" class=\"headerlink\" title=\"3.4 另一种方法\"></a>3.4 另一种方法</h3><p>上文中没有显示记录「选择列表」，通过用路径的 <code>contains</code> 方法来判断是否选择。这里我们 <strong>“以空间换时间”</strong> 的思想，使用一个布尔数组 used，初始化的时候都为 false 表示这些数还没有被选择，当我们选定一个数的时候，就将这个数组的相应位置设置为 true ，这样在考虑下一个位置的时候，就能够以 O(1)  的时间复杂度判断这个数是否被选择过。（参考 <a href=\"https://leetcode-cn.com/problems/permutations/solution/hui-su-suan-fa-python-dai-ma-java-dai-ma-by-liweiw/\" target=\"_blank\" rel=\"noopener\">这里</a>）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; res2 = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; permute2(<span class=\"keyword\">int</span>[] nums)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    LinkedList&lt;Integer&gt; track = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 标记数组</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[] used = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[len];</span><br><span class=\"line\">    backtrace2(nums, track, used);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> track</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> used 标记数组，used[i]=true时，表示已被选择</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backtrace2</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, LinkedList&lt;Integer&gt; track, <span class=\"keyword\">boolean</span>[] used)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(track.size() == len)&#123;</span><br><span class=\"line\">        res2.add(<span class=\"keyword\">new</span> LinkedList&lt;&gt;(track));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(used[i])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        track.add(nums[i]);</span><br><span class=\"line\">        used[i] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        backtrace2(nums, track, used);</span><br><span class=\"line\"></span><br><span class=\"line\">        track.removeLast();</span><br><span class=\"line\">        used[i] = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-N皇后问题-51\"><a href=\"#4-N皇后问题-51\" class=\"headerlink\" title=\"4. N皇后问题 [51]\"></a>4. N皇后问题 [51]</h2><h3 id=\"4-1-题目描述\"><a href=\"#4-1-题目描述\" class=\"headerlink\" title=\"4.1 题目描述\"></a>4.1 题目描述</h3><p>题目来源：<a href=\"https://leetcode-cn.com/problems/n-queens/\" target=\"_blank\" rel=\"noopener\">51. N皇后</a></p>\n<p><em>n</em> 皇后问题研究的是如何将 <em>n</em> 个皇后放置在 <em>n</em>×<em>n</em> 的棋盘上，并且使皇后彼此之间不能相互攻击。PS：皇后可以攻击同一行、同一列、左上左下右上右下四个方向的任意单位。</p>\n<p><img src=\"/pictures/8-queens.png\" alt=\"img\"></p>\n<p>给定一个整数 n，返回所有不同的 n 皇后问题的解决方案。</p>\n<p>每一种解法包含一个明确的 n 皇后问题的棋子放置方案，该方案中 ‘Q’ 和 ‘.’ 分别代表了皇后和空位。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: 4</span><br><span class=\"line\">输出: [</span><br><span class=\"line\"> [<span class=\"string\">\".Q..\"</span>,  // 解法 1</span><br><span class=\"line\">  <span class=\"string\">\"...Q\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Q...\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"..Q.\"</span>],</span><br><span class=\"line\"></span><br><span class=\"line\"> [<span class=\"string\">\"..Q.\"</span>,  // 解法 2</span><br><span class=\"line\">  <span class=\"string\">\"Q...\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"...Q\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\".Q..\"</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\">解释: 4 皇后问题存在两个不同的解法。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-问题分析\"><a href=\"#4-2-问题分析\" class=\"headerlink\" title=\"4.2 问题分析\"></a>4.2 问题分析</h3><p>这个问题本质上跟全排列问题差不多，决策树的每一层表示棋盘上的每一行；每个节点可以做出的选择是，在该行的任意一列放置一个皇后。</p>\n<h3 id=\"4-3-代码\"><a href=\"#4-3-代码\" class=\"headerlink\" title=\"4.3 代码\"></a>4.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;List&lt;String&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;String&gt;&gt; solveNQueens(<span class=\"keyword\">int</span> n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化棋盘 board 为二维字符数组</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span>[][] board = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[n][n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span>[] chars : board)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">        Arrays.fill(chars, <span class=\"string\">'.'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    backtrack(board, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 路径：board中小于row的那些行都已经成功放置了皇后</span></span><br><span class=\"line\"><span class=\"comment\">     * 可选择列表: 第row行的所有列都是放置 Q 的选择</span></span><br><span class=\"line\"><span class=\"comment\">     * 结束条件: row超过board的最后一行</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> board 记录路径</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> row 当前放置第几行</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backtrack</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] board, <span class=\"keyword\">int</span> row)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//触发结束条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (row == board.length) &#123;</span><br><span class=\"line\">        res.add(charToString(board));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = board[row].length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> col = <span class=\"number\">0</span>; col &lt; n; col++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//排除不合法选择</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isValid(board, row, col))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//做选择</span></span><br><span class=\"line\">        board[row][col] = <span class=\"string\">'Q'</span>;</span><br><span class=\"line\">        <span class=\"comment\">//进入下一层决策树</span></span><br><span class=\"line\">        backtrack(board, row + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//撤销选择</span></span><br><span class=\"line\">        board[row][col] = <span class=\"string\">'.'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否可以在 board[row][col] 放置皇后</span></span><br><span class=\"line\"><span class=\"comment\">     * 不需要检查 这一行，因为每一行只放一个皇后就到下一行</span></span><br><span class=\"line\"><span class=\"comment\">     * 不需要检查 左下、右下斜线，因为下面还没放元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> board</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> row</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> col</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] board, <span class=\"keyword\">int</span> row, <span class=\"keyword\">int</span> col)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> rows = board.length;</span><br><span class=\"line\">    <span class=\"comment\">//检查这一列是否有皇后</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span>[] chars : board)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (chars[col] == <span class=\"string\">'Q'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 检查左上斜线上是否有皇后</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = row - <span class=\"number\">1</span>, j = col + <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span> &amp;&amp; j &lt; rows; i--, j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board[i][j] == <span class=\"string\">'Q'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 检查右上斜线上是否有皇后</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = row - <span class=\"number\">1</span>, j = col - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span> &amp;&amp; j &gt;= <span class=\"number\">0</span>; i--, j--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board[i][j] == <span class=\"string\">'Q'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">charToString</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] array)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;String&gt; result = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span>[] chars : array) &#123;</span><br><span class=\"line\">        result.add(String.valueOf(chars));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数 <code>backtrack</code> 依然像个在决策树上游走的指针，通过 <code>row</code> 和 <code>col</code> 就可以表示函数遍历到的位置，通过 <code>isValid</code> 函数可以将不符合条件的情况剪枝。</p>\n<h2 id=\"5-回溯法总结\"><a href=\"#5-回溯法总结\" class=\"headerlink\" title=\"5. 回溯法总结\"></a>5. 回溯法总结</h2><p>回溯算法就是个多叉树的遍历问题，关键就是在前序遍历和后序遍历的位置做一些操作，算法框架如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">backtrack</span><span class=\"params\">(...)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> 选择 <span class=\"keyword\">in</span> 选择列表:</span><br><span class=\"line\">        做选择</span><br><span class=\"line\">        backtrack(...)</span><br><span class=\"line\">        撤销选择</span><br></pre></td></tr></table></figure>\n\n<p><strong>写</strong> <strong><code>backtrack</code></strong> <strong>函数时，需要维护走过的「路径」和当前可以做的「选择列表」，当触发「结束条件」时，将「路径」记入结果集</strong>。</p>\n<p>下面几节记录了一些平时遇到的，可以使用回溯解决的经典例题，会持续更新~</p>\n<h2 id=\"6-使用回溯法的题目列表\"><a href=\"#6-使用回溯法的题目列表\" class=\"headerlink\" title=\"6. 使用回溯法的题目列表\"></a>6. 使用回溯法的题目列表</h2><p>本文中使用回溯法解决的 LeetCode 题目列表如下，持续更新中~</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">#</th>\n<th align=\"center\">Title</th>\n<th align=\"center\">Remark</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">46</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/permutations/\" target=\"_blank\" rel=\"noopener\">全排列</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">51</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/n-queens/\" target=\"_blank\" rel=\"noopener\">N皇后</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">47</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/permutations-ii/\" target=\"_blank\" rel=\"noopener\">全排列 II</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">39</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/combination-sum/\" target=\"_blank\" rel=\"noopener\">组合总和</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">40</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/combination-sum-ii/\" target=\"_blank\" rel=\"noopener\">组合总和 II</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">70</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/combinations/\" target=\"_blank\" rel=\"noopener\">组合</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">79</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/word-search/\" target=\"_blank\" rel=\"noopener\">单词搜索</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">78</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/subsets/\" target=\"_blank\" rel=\"noopener\">子集</a></td>\n<td align=\"center\">Medium</td>\n</tr>\n<tr>\n<td align=\"center\">90</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/subsets-ii/\" target=\"_blank\" rel=\"noopener\">子集 II</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">93</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/restore-ip-addresses/\" target=\"_blank\" rel=\"noopener\">复原IP地址</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">97</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/interleaving-string/\" target=\"_blank\" rel=\"noopener\">交错字符串</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">113</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/path-sum-ii/\" target=\"_blank\" rel=\"noopener\">路径总和 II</a></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"7-例题：全排列问题（有重复数字）-47\"><a href=\"#7-例题：全排列问题（有重复数字）-47\" class=\"headerlink\" title=\"7. 例题：全排列问题（有重复数字）[47]\"></a>7. 例题：全排列问题（有重复数字）[47]</h2><h3 id=\"7-1-题目描述\"><a href=\"#7-1-题目描述\" class=\"headerlink\" title=\"7.1 题目描述\"></a>7.1 题目描述</h3><p>题目来源：<a href=\"https://leetcode-cn.com/problems/permutations-ii/\" target=\"_blank\" rel=\"noopener\">47. 全排列 II</a></p>\n<p>给定一个可包含重复数字的序列，返回所有不重复的全排列。</p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,1,2]</span><br><span class=\"line\">输出:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [1,1,2],</span><br><span class=\"line\">  [1,2,1],</span><br><span class=\"line\">  [2,1,1]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-2-题目分析\"><a href=\"#7-2-题目分析\" class=\"headerlink\" title=\"7.2 题目分析\"></a>7.2 题目分析</h3><p>这道题与上面 46 题不同，给出的序列是包含重复数字的，所以，46题的第一种方法使用track的contain来判断是否选择在这里不使用。而第二种方法，标记数组是可行的，但直接使用 used 数组判断，最终得到的全排列结果可能会有重复，如下图所示：（图片来自：<a href=\"https://leetcode-cn.com/problems/permutations-ii/solution/hui-su-suan-fa-python-dai-ma-java-dai-ma-by-liwe-2/\" target=\"_blank\" rel=\"noopener\">这里</a>）</p>\n<img src=\"/pictures/全排列2.png\" alt=\"全排列2\" style=\"zoom: 33%;\" />\n\n<p>如上所示，绿色框中的序列都是重复的，不属于结果集。为什么会出现这种情况呢？</p>\n<p>观察发现，在决策树中，同一父节点下的子节点中，选中两个相同的数字时，必然出现重复的全排列结果。那么如何避免这种情况呢？</p>\n<p>对给出的序列进行排序，这样相同的数字都会放在一起。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> 选择 <span class=\"keyword\">in</span> 选择列表:</span><br><span class=\"line\">\t做选择</span><br><span class=\"line\">\tbacktrack(路径, 选择列表)</span><br><span class=\"line\">\t撤销选择</span><br></pre></td></tr></table></figure>\n\n<p>在框架的核心代码中，撤销选择处撤销的数字，就是下一个遍历节点的左侧兄弟节点，保存这个数组为 pre，如下图所示，当遍历到nums[i] 处时，如果 pre == nums[i]，则说明需要剪枝。</p>\n<img src=\"/pictures/image-20200725154024914.png\" alt=\"image-20200725154024914\" style=\"zoom:67%;\" />\n\n<h3 id=\"7-3-代码\"><a href=\"#7-3-代码\" class=\"headerlink\" title=\"7.3 代码\"></a>7.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; permuteUnique(<span class=\"keyword\">int</span>[] nums)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 排序；相同的数字放在一起，重复的剪枝方便</span></span><br><span class=\"line\">    Arrays.sort(nums);</span><br><span class=\"line\">    LinkedList&lt;Integer&gt; track = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[] used = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[len];</span><br><span class=\"line\">    backtrack(nums, track, used);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backtrack</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, LinkedList&lt;Integer&gt; track, <span class=\"keyword\">boolean</span>[] used)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = nums.length;</span><br><span class=\"line\">    <span class=\"comment\">// 满足结束条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(track.size() == len)&#123;</span><br><span class=\"line\">        res.add(<span class=\"keyword\">new</span> LinkedList&lt;&gt;(track));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化为数组中没有的数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> pre = nums[<span class=\"number\">0</span>] - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 排除不合法选择</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(used[i] || pre == nums[i])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 做选择</span></span><br><span class=\"line\">        track.add(nums[i]);</span><br><span class=\"line\">        used[i] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 进入下一层决策树</span></span><br><span class=\"line\">        backtrack(nums, track, used);</span><br><span class=\"line\">        <span class=\"comment\">// 撤销选择</span></span><br><span class=\"line\">        track.removeLast();</span><br><span class=\"line\">        used[i] = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 记录刚被撤销的数字</span></span><br><span class=\"line\">        pre = nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-4-小结\"><a href=\"#7-4-小结\" class=\"headerlink\" title=\"7.4 小结\"></a>7.4 小结</h3><p>还是按照回溯法的框架来解决，但是剪枝的部分一开始想不到。</p>\n<h2 id=\"8-例题：组合总和-39\"><a href=\"#8-例题：组合总和-39\" class=\"headerlink\" title=\"8. 例题：组合总和 [39]\"></a>8. 例题：组合总和 [39]</h2><h3 id=\"8-1-题目描述\"><a href=\"#8-1-题目描述\" class=\"headerlink\" title=\"8.1 题目描述\"></a>8.1 题目描述</h3><p>题目来源：<a href=\"https://leetcode-cn.com/problems/combination-sum/\" target=\"_blank\" rel=\"noopener\">39. 组合总和</a></p>\n<p>给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p>\n<p>candidates 中的数字可以无限制重复被选取。</p>\n<p>说明：</p>\n<p>所有数字（包括 target）都是正整数。<br>解集不能包含重复的组合。<br>示例 1：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：candidates = [2,3,6,7], target = 7,</span><br><span class=\"line\">所求解集为：</span><br><span class=\"line\">[</span><br><span class=\"line\">  [7],</span><br><span class=\"line\">  [2,2,3]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>示例 2：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：candidates = [2,3,5], target = 8,</span><br><span class=\"line\">所求解集为：</span><br><span class=\"line\">[</span><br><span class=\"line\">  [2,2,2,2],</span><br><span class=\"line\">  [2,3,3],</span><br><span class=\"line\">  [3,5]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>提示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 &lt;= candidates.length &lt;= 30</span><br><span class=\"line\">1 &lt;= candidates[i] &lt;= 200</span><br><span class=\"line\">candidate 中的每个元素都是独一无二的。</span><br><span class=\"line\">1 &lt;= target &lt;= 500</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-2-题目分析\"><a href=\"#8-2-题目分析\" class=\"headerlink\" title=\"8.2 题目分析\"></a>8.2 题目分析</h3><p>这道题依旧可以使用回溯法进行暴力穷举。有几点需要注意：</p>\n<ol>\n<li>选择列表candidates可以重复选择，即选择列表自始至终都不变，是candidates</li>\n<li>candidate 中的每个元素都是独一无二的</li>\n<li>解集不能包含重复的组合，即最终的结果不能重复</li>\n</ol>\n<p>鉴于最终结果不可以重复，我们可以剪掉会重复的枝，即将选择列表排序，路径的下一个节点选择从当前节点开始遍历（由于candidate 中的每个元素不重复，所以start从 i 开始就可以解决结果重复的问题）。另外，这道题改用减法更好理解。</p>\n<h3 id=\"8-3-代码\"><a href=\"#8-3-代码\" class=\"headerlink\" title=\"8.3 代码\"></a>8.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class=\"keyword\">int</span>[] candidates, <span class=\"keyword\">int</span> target)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(candidates.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 优化添加的代码1：先对数组排序，可以提前终止判断</span></span><br><span class=\"line\">    Arrays.sort(candidates);</span><br><span class=\"line\">    LinkedList&lt;Integer&gt; track = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    backtrack(candidates, track, target, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> candidates</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> track 记录路径</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> residue 剩余</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start 下一次从 start 开始判断是否添加到路径</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backtrack</span><span class=\"params\">(<span class=\"keyword\">int</span>[] candidates, LinkedList&lt;Integer&gt; track, <span class=\"keyword\">int</span> residue, <span class=\"keyword\">int</span> start)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//触发结束条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(residue == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        res.add(<span class=\"keyword\">new</span> LinkedList&lt;&gt;(track));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// i 从 start 开始，剪掉小于 candidates[i] 的枝</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = start; i &lt; candidates.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 排除不合法的选择</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(residue - candidates[i] &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 做选择</span></span><br><span class=\"line\">        track.add(candidates[i]);</span><br><span class=\"line\">        <span class=\"comment\">// 进入下一层决策树</span></span><br><span class=\"line\">        <span class=\"comment\">// residue-candidates[i] 为下一轮剩余</span></span><br><span class=\"line\">        <span class=\"comment\">// i 为下一轮的 start值，原因：为了避免重复，选择的数字只能大于等于candidates[i]</span></span><br><span class=\"line\">        backtrack(candidates, track, residue-candidates[i], i);</span><br><span class=\"line\">        <span class=\"comment\">// 撤销选择</span></span><br><span class=\"line\">        track.removeLast();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-例题：组合总和-2-40\"><a href=\"#9-例题：组合总和-2-40\" class=\"headerlink\" title=\"9. 例题：组合总和 2 [40]\"></a>9. 例题：组合总和 2 [40]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/combination-sum-ii/\" target=\"_blank\" rel=\"noopener\">40. 组合总和 II</a></p>\n<h3 id=\"9-1-题目描述\"><a href=\"#9-1-题目描述\" class=\"headerlink\" title=\"9.1 题目描述\"></a>9.1 题目描述</h3><p>给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p>\n<p>candidates 中的每个数字在每个组合中只能使用一次。</p>\n<p>说明：</p>\n<p>所有数字（包括目标数）都是正整数。<br>解集不能包含重复的组合。<br>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: candidates = [10,1,2,7,6,1,5], target = 8,</span><br><span class=\"line\">所求解集为:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [1, 7],</span><br><span class=\"line\">  [1, 2, 5],</span><br><span class=\"line\">  [2, 6],</span><br><span class=\"line\">  [1, 1, 6]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n\n<p>示例 2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: candidates = [2,5,2,1,2], target = 5,</span><br><span class=\"line\">所求解集为:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [1,2,2],</span><br><span class=\"line\">  [5]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-2-题目分析\"><a href=\"#9-2-题目分析\" class=\"headerlink\" title=\"9.2 题目分析\"></a>9.2 题目分析</h3><p>本题与上一题的区别有两个：</p>\n<ol>\n<li>candidates 中的每个数字在每个组合中只能使用一次</li>\n<li>candidates 中有重复数字</li>\n</ol>\n<p>思路如下：</p>\n<ol>\n<li>要保证每个数字用一次，先对序列排序， 且 start 从 i+1 开始</li>\n<li>要保证结果不重复，第一步是不够的，因为 candidates 中有重复数字。这个问题和上文的 <strong>全排列问题（有重复数字）</strong> 类似，使用 pre 标记刚撤销的数字，与当前值比较后进行剪枝。</li>\n</ol>\n<h3 id=\"9-3-代码\"><a href=\"#9-3-代码\" class=\"headerlink\" title=\"9.3 代码\"></a>9.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum2(<span class=\"keyword\">int</span>[] candidates, <span class=\"keyword\">int</span> target)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(candidates.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 排序</span></span><br><span class=\"line\">    Arrays.sort(candidates);</span><br><span class=\"line\">    LinkedList&lt;Integer&gt; track = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    backtrack(candidates, track, target, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> candidates</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> track 记录路径</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> residue 剩余</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start 下一次从 start 开始判断是否添加到路径</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backtrack</span><span class=\"params\">(<span class=\"keyword\">int</span>[] candidates, LinkedList&lt;Integer&gt; track, <span class=\"keyword\">int</span> residue, <span class=\"keyword\">int</span> start)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//触发结束条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(residue == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        res.add(<span class=\"keyword\">new</span> LinkedList&lt;&gt;(track));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> pre = candidates[<span class=\"number\">0</span>] - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = start; i &lt; candidates.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 排除不合法的选择</span></span><br><span class=\"line\">        <span class=\"comment\">// candidates排序之后，如果第一个不满足，后面的肯定不满足，直接break</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(residue - candidates[i] &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 当前值和上一个撤销的值相同，会重复，continue</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(candidates[i] == pre)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//做选择</span></span><br><span class=\"line\">        track.add(candidates[i]);</span><br><span class=\"line\">        <span class=\"comment\">// 进入下一层决策树</span></span><br><span class=\"line\">        <span class=\"comment\">// start 从 i+1 开始</span></span><br><span class=\"line\">        backtrack(candidates, track, residue-candidates[i], i+<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//撤销选择</span></span><br><span class=\"line\">        track.removeLast();</span><br><span class=\"line\">        pre = candidates[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-例题：组合-70\"><a href=\"#10-例题：组合-70\" class=\"headerlink\" title=\"10. 例题：组合 [70]\"></a>10. 例题：组合 [70]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/combinations/\" target=\"_blank\" rel=\"noopener\">77. 组合</a></p>\n<h3 id=\"10-1-题目描述\"><a href=\"#10-1-题目描述\" class=\"headerlink\" title=\"10.1 题目描述\"></a>10.1 题目描述</h3><p>给定两个整数 n 和 k，返回 1 … n 中所有可能的 k 个数的组合。</p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: n = 4, k = 2</span><br><span class=\"line\">输出:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [2,4],</span><br><span class=\"line\">  [3,4],</span><br><span class=\"line\">  [2,3],</span><br><span class=\"line\">  [1,2],</span><br><span class=\"line\">  [1,3],</span><br><span class=\"line\">  [1,4],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-2-题目分析\"><a href=\"#10-2-题目分析\" class=\"headerlink\" title=\"10.2 题目分析\"></a>10.2 题目分析</h3><p>这种数字组合的题目是典型的回溯法问题，先选一个数字，进入递归继续选，如果满足条件则加入结果中，然后回溯到上一步，继续递归。</p>\n<h3 id=\"10-3-代码\"><a href=\"#10-3-代码\" class=\"headerlink\" title=\"10.3 代码\"></a>10.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解法一：回溯法</span></span><br><span class=\"line\"><span class=\"comment\">     * 回溯的常规解法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> n</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> k</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; combine(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k) &#123;</span><br><span class=\"line\">    LinkedList&lt;Integer&gt; track = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    backtrack(track, n, k, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backtrack</span><span class=\"params\">(LinkedList&lt;Integer&gt; track, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> start)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果满足条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(track.size() == k)&#123;</span><br><span class=\"line\">        res.add(<span class=\"keyword\">new</span> LinkedList&lt;&gt;(track));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为避免重复，i 从 start 开始</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = start; i &lt;= n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 做选择</span></span><br><span class=\"line\">        track.add(i);</span><br><span class=\"line\">        backtrack(track, n, k, i+<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 撤销选择</span></span><br><span class=\"line\">        track.removeLast();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-4-优化\"><a href=\"#10-4-优化\" class=\"headerlink\" title=\"10.4 优化\"></a>10.4 优化</h3><p>参考 <a href=\"https://leetcode.wang/leetCode-77-Combinations.html\" target=\"_blank\" rel=\"noopener\">这里</a> 对上面代码进行优化。将 for 循环改为 <code>for(int i = start; i &lt;= (n-k)+1 + track.size(); i++)</code>, 其中，<code>(n-k)+1</code>  表示要在 n 中找到 k 个数字组合，start 必须从 (n-k)+1 处开始；<code>(n-k)+1 + track.size()</code>  表示当前 i 取到的最大数字。原因如下：</p>\n<p>我们发现，如果 n = 5, k = 3,  那么 start 最大取到3，因为如果 start = 4，最终结果只能得到到 (4,5), 结果的个数必定小于k，不满足条件。</p>\n<p>如果 n = 5, k = 3, start = 1, 当 i = 2, track.size() = 1时，i 最大取到 (5-3)+1 + 1 = 4，否则，如果 i 取到 5，结果只能为 (1,5), 数字个数肯定不满足条件。</p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backtrack2</span><span class=\"params\">(LinkedList&lt;Integer&gt; track, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> start)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(track.size() == k)&#123;</span><br><span class=\"line\">        res.add(<span class=\"keyword\">new</span> LinkedList&lt;&gt;(track));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// (n-k)+1 表示要在n中找到k个数字组合，start必须从(n-k)+1处开始</span></span><br><span class=\"line\">    <span class=\"comment\">// 即如果n=5,k=3, 那么start最大取到3，因为如果当start=4时，组合中数字的个数不足</span></span><br><span class=\"line\">    <span class=\"comment\">// (n-k)+1 + track.size() 表示当前i取到的最大数字</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = start; i &lt;= (n-k)+<span class=\"number\">1</span> + track.size(); i++)&#123;</span><br><span class=\"line\">        track.add(i);</span><br><span class=\"line\">        backtrack(track, n, k, i+<span class=\"number\">1</span>);</span><br><span class=\"line\">        track.removeLast();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>虽然只改了一句代码，但速度快了很多。</p>\n<h2 id=\"11-单词搜索-79\"><a href=\"#11-单词搜索-79\" class=\"headerlink\" title=\"11. 单词搜索 [79]\"></a>11. 单词搜索 [79]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/word-search/\" target=\"_blank\" rel=\"noopener\">79. 单词搜索</a></p>\n<h3 id=\"11-1-题目描述\"><a href=\"#11-1-题目描述\" class=\"headerlink\" title=\"11.1. 题目描述\"></a>11.1. 题目描述</h3><p>给定一个二维网格和一个单词，找出该单词是否存在于网格中。</p>\n<p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p>\n<p>示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">board =</span><br><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>,<span class=\"string\">'E'</span>],</span><br><span class=\"line\">  [<span class=\"string\">'S'</span>,<span class=\"string\">'F'</span>,<span class=\"string\">'C'</span>,<span class=\"string\">'S'</span>],</span><br><span class=\"line\">  [<span class=\"string\">'A'</span>,<span class=\"string\">'D'</span>,<span class=\"string\">'E'</span>,<span class=\"string\">'E'</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">给定 word = <span class=\"string\">\"ABCCED\"</span>, 返回 <span class=\"literal\">true</span></span><br><span class=\"line\">给定 word = <span class=\"string\">\"SEE\"</span>, 返回 <span class=\"literal\">true</span></span><br><span class=\"line\">给定 word = <span class=\"string\">\"ABCB\"</span>, 返回 <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n\n<p>提示：</p>\n<ul>\n<li>board 和 word 中只包含大写和小写英文字母。</li>\n<li>1 &lt;= board.length &lt;= 200</li>\n<li>1 &lt;= board[i].length &lt;= 200</li>\n<li>1 &lt;= word.length &lt;= 10^3</li>\n</ul>\n<h3 id=\"11-2-题目分析\"><a href=\"#11-2-题目分析\" class=\"headerlink\" title=\"11.2. 题目分析\"></a>11.2. 题目分析</h3><p>基本思路：找第一个匹配的字符，然后在其上下左右的四个字符中找与第二个字符匹配的字符，找到后，以次类推。上下左右字符需要首先判断是否越界、是否已经访问过。</p>\n<p>但是，在做题的过程中，完全忽略了这是标准的回溯思想，参考之前的博客：<a href=\"https://juliajiang7.github.io/2020/07/25/回溯算法总结/#more\" target=\"_blank\" rel=\"noopener\">回溯算法</a>.</p>\n<p>回溯法采用试错的思想，尝试分步解决一个问题。在本题中，匹配下一个字符时就有上下左右四种选择。当它发现现有的分布答辩不能得到有效的正确答案时，将取消上一步或者上几步的计算，再通过其他分步尝试得到问题答案。</p>\n<p>在做题中有一个很大问题：忽略了回溯，即选择一条路走完发现不能匹配时，就返回了false，没有取消这一步操作。这一点要注意。</p>\n<p>另外，这一题使用框架不太好写，还是基于回溯思想（DFS），按照正常的思路来写。</p>\n<h3 id=\"11-3-代码\"><a href=\"#11-3-代码\" class=\"headerlink\" title=\"11.3. 代码\"></a>11.3. 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">exist</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(board.length == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> row = board.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> col = board[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; row; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; col; j++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 找到第一个字母</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(board[i][j] == word.charAt(<span class=\"number\">0</span>))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span>[][] visited = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[row][col];</span><br><span class=\"line\">                visited[i][j] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 判断从 board[i][j] 出发，后面能否全部匹配</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(isValid(i, j, word, <span class=\"number\">0</span>, board, visited))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当 board[i][j] 匹配 word[k] 时，后面是否可以全部匹配</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> j</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> word</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> k</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> board</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> visited 当前已访问的字符</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, String word, <span class=\"keyword\">int</span> k, <span class=\"keyword\">char</span>[][] board, <span class=\"keyword\">boolean</span>[][] visited)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> row = board.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> col = board[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k == word.length() - <span class=\"number\">1</span>)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 上面</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> left = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; !visited[i - <span class=\"number\">1</span>][j] &amp;&amp; board[i - <span class=\"number\">1</span>][j] == word.charAt(k + <span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">        visited[i - <span class=\"number\">1</span>][j] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        left = isValid(i - <span class=\"number\">1</span>, j, word, k + <span class=\"number\">1</span>, board, visited);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left)&#123;<span class=\"keyword\">return</span> left;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 下面</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> right = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i + <span class=\"number\">1</span> &lt; row &amp;&amp; !visited[i + <span class=\"number\">1</span>][j] &amp;&amp; board[i + <span class=\"number\">1</span>][j] == word.charAt(k + <span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">        visited[i + <span class=\"number\">1</span>][j] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        right = isValid(i + <span class=\"number\">1</span>, j, word, k + <span class=\"number\">1</span>, board, visited);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(right)&#123;<span class=\"keyword\">return</span> right;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 左边</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> up = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; !visited[i][j - <span class=\"number\">1</span>] &amp;&amp; board[i][j - <span class=\"number\">1</span>] == word.charAt(k + <span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">        visited[i][j - <span class=\"number\">1</span>] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        up = isValid(i, j - <span class=\"number\">1</span>, word, k + <span class=\"number\">1</span>, board, visited);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(up)&#123;<span class=\"keyword\">return</span> up;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 右边</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> down = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j + <span class=\"number\">1</span> &lt; col &amp;&amp; !visited[i][j + <span class=\"number\">1</span>] &amp;&amp; board[i][j + <span class=\"number\">1</span>] == word.charAt(k + <span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">        visited[i][j + <span class=\"number\">1</span>] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        down = isValid(i, j + <span class=\"number\">1</span>, word, k + <span class=\"number\">1</span>, board, visited);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(down)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果上下左右都没有匹配，则取消这一步，回溯</span></span><br><span class=\"line\">    visited[i][j] = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-子集-78\"><a href=\"#12-子集-78\" class=\"headerlink\" title=\"12. 子集 [78]\"></a>12. 子集 [78]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/subsets/\" target=\"_blank\" rel=\"noopener\">78. 子集</a></p>\n<h3 id=\"12-1-题目描述\"><a href=\"#12-1-题目描述\" class=\"headerlink\" title=\"12.1. 题目描述\"></a>12.1. 题目描述</h3><p><img src=\"/pictures/image-20200824094845802.png\" alt=\"image-20200824094845802\"></p>\n<h3 id=\"12-1-方法一：迭代\"><a href=\"#12-1-方法一：迭代\" class=\"headerlink\" title=\"12.1. 方法一：迭代\"></a>12.1. 方法一：迭代</h3><p>利用数学归纳的思想：假设现在知道了规模更小的子问题，如何推导出当前问题的结果呢？即知道了 [1,2] 的子集，如何求 [1,2,3] 的子集。</p>\n<p>可以发现，[1,2,3] 的子集包括两部分：第一部分是已知的 [1,2] 的子集；另一部分是给每一个 [1,2] 子集加上 3。发现这个规律后，即可写出下面的迭代代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    res.add(<span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = res.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 注意：这里需要 new 一个对象，不可以直接赋值</span></span><br><span class=\"line\">            List&lt;Integer&gt; cur = <span class=\"keyword\">new</span> LinkedList&lt;&gt;(res.get(i));</span><br><span class=\"line\">            cur.add(num);</span><br><span class=\"line\">            res.add(cur);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>时间复杂度：迭代次数是 N，每次迭代都遍历 res，res 的长度应该是每次递归都翻倍，所以说总的迭代次数应该是 2^N。所以，总的时间复杂度是 O(N * 2 ^ N)。</p>\n<p>空间复杂度：如果不计算储存返回结果所用的空间的，只需要 O(N) 的递归堆栈空间。如果计算 <code>res</code> 所需的空间，应该是 O(N*2^N)。</p>\n<h3 id=\"12-2-方法二：回溯算法\"><a href=\"#12-2-方法二：回溯算法\" class=\"headerlink\" title=\"12.2. 方法二：回溯算法\"></a>12.2. 方法二：回溯算法</h3><p>参考 <a href=\"https://mp.weixin.qq.com/s/qT6WgR6Qwn7ayZkI3AineA\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">    LinkedList&lt;Integer&gt; track = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    backtrack(nums, track, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backtrack</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, LinkedList&lt;Integer&gt; track, <span class=\"keyword\">int</span> start)</span> </span>&#123;</span><br><span class=\"line\">    res.add(<span class=\"keyword\">new</span> LinkedList&lt;&gt;(track));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = start; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">        track.add(nums[i]);</span><br><span class=\"line\">        backtrack(nums, track, start + <span class=\"number\">1</span>);</span><br><span class=\"line\">        track.removeLast();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"13-子集-II-90\"><a href=\"#13-子集-II-90\" class=\"headerlink\" title=\"13. 子集 II [90]\"></a>13. 子集 II [90]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/subsets-ii/\" target=\"_blank\" rel=\"noopener\">90. 子集 II</a></p>\n<h3 id=\"13-1-题目描述\"><a href=\"#13-1-题目描述\" class=\"headerlink\" title=\"13.1. 题目描述\"></a>13.1. 题目描述</h3><p><img src=\"/pictures/image-20200824101740024.png\" alt=\"image-20200824101740024\"></p>\n<h3 id=\"13-2-代码\"><a href=\"#13-2-代码\" class=\"headerlink\" title=\"13.2. 代码\"></a>13.2. 代码</h3><p>有了上一题的基础，回溯法稍作修改即可。</p>\n<p>为了方便的剪枝，要对序列进行排序，排序之后所有相同的数字都会放在一起。为了避免结果中出现相同的子集，兄弟节点中不能出现相同的数字，即在 <code>track.add</code> 之前，需要先判断，是否和已经加入的兄弟节点值相同（如果是第一个加入的子节点，不需要判断）。 代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">    LinkedList&lt;Integer&gt; track = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    Arrays.sort(nums);</span><br><span class=\"line\">    backtrack(nums, track, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backtrack</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, LinkedList&lt;Integer&gt; track, <span class=\"keyword\">int</span> start)</span> </span>&#123;</span><br><span class=\"line\">    res.add(<span class=\"keyword\">new</span> LinkedList&lt;&gt;(track));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = start; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == start || nums[i] != nums[i - <span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">            track.add(nums[i]);</span><br><span class=\"line\">            backtrack(nums, track, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            track.removeLast();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"14-复原IP地址-93\"><a href=\"#14-复原IP地址-93\" class=\"headerlink\" title=\"14. 复原IP地址 [93]\"></a>14. 复原IP地址 [93]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/restore-ip-addresses/\" target=\"_blank\" rel=\"noopener\">93. 复原IP地址</a></p>\n<h3 id=\"14-1-题目描述\"><a href=\"#14-1-题目描述\" class=\"headerlink\" title=\"14.1. 题目描述\"></a>14.1. 题目描述</h3><p><img src=\"/pictures/image-20200827104857215.png\" alt=\"image-20200827104857215\"></p>\n<h3 id=\"14-2-解法一：暴力破解（迭代）\"><a href=\"#14-2-解法一：暴力破解（迭代）\" class=\"headerlink\" title=\"14.2. 解法一：暴力破解（迭代）\"></a>14.2. 解法一：暴力破解（迭代）</h3><p>参考 <a href=\"https://leetcode.wang/leetCode-93-Restore-IP-Addresses.html\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<p>要求划分为四部分，我们直接利用三个指针将字符串强行分为4部分，遍历所有的划分，然后选取合法的解。这种解法没有超时。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">restoreIpAddresses</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;String&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = s.length();</span><br><span class=\"line\">    <span class=\"comment\">// i &lt; 4 保证第一部分不超过3位数</span></span><br><span class=\"line\">    <span class=\"comment\">// i &lt; len - 2 保证剩余的字符串还能分成3部分</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">4</span> &amp;&amp; i &lt; len - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; i + <span class=\"number\">4</span> &amp;&amp; j &lt; len - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = j + <span class=\"number\">1</span>; k &lt; j + <span class=\"number\">4</span> &amp;&amp; k &lt; len; k++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 保存四部分字符串</span></span><br><span class=\"line\">                String s1 = s.substring(<span class=\"number\">0</span>, i), s2 = s.substring(i, j), s3 = s.substring(j, k), s4 = s.substring(k, len);</span><br><span class=\"line\">                <span class=\"comment\">// 判断是否合法</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isValid(s1) &amp;&amp; isValid(s2) &amp;&amp; isValid(s3) &amp;&amp; isValid(s4)) &#123;</span><br><span class=\"line\">                    res.add(s1 + <span class=\"string\">\".\"</span> + s2 + <span class=\"string\">\".\"</span> + s3 + <span class=\"string\">\".\"</span> + s4);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length() &gt; <span class=\"number\">3</span> || s.length() == <span class=\"number\">0</span> || (s.charAt(<span class=\"number\">0</span>) == <span class=\"string\">'0'</span> &amp;&amp; s.length() &gt; <span class=\"number\">1</span>) || Integer.parseInt(s) &gt; <span class=\"number\">255</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>时间复杂度：如果不考虑我们调用的内部函数，Integer.parseInt，s.substring，那么就是 O（1）。因为每一层循环最多遍历 4 次。考虑的话每次调用的时间复杂度是 O（n），常数次调用，所以是 O（n）。</p>\n<p>空间复杂度：O（1）。</p>\n<h3 id=\"14-3-解法二：回溯\"><a href=\"#14-3-解法二：回溯\" class=\"headerlink\" title=\"14.3. 解法二：回溯\"></a>14.3. 解法二：回溯</h3><p>字符串划分问题，需要划分为4部分。直接使用回溯的思想，第一部分可能是 1 位数，然后进入递归；也可能是2位数，然后进入递归；也可能是三位数，然后进入递归。即每一次循环有三种选择。</p>\n<p>本题虽然使用了回溯的思想，但前面总结的框架不能直接使用，下面代码是它的变形，而且本题的难点在于需要考虑的情况比较多，剪枝条件也比较多。具体剪枝的分析参考 <a href=\"https://leetcode-cn.com/problems/restore-ip-addresses/solution/hui-su-suan-fa-hua-tu-fen-xi-jian-zhi-tiao-jian-by/\" target=\"_blank\" rel=\"noopener\">这里</a> .</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">restoreIpAddresses</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;String&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    backtrack(s, <span class=\"number\">0</span>, <span class=\"keyword\">new</span> StringBuilder(), res, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> s</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start 字符串开始部分</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> track 已经划分部分</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> res   保存所有的解</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> count 当前已经加入了几部分</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backtrack</span><span class=\"params\">(String s, <span class=\"keyword\">int</span> start, StringBuilder track, List&lt;String&gt; res, <span class=\"keyword\">int</span> count)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果剩余长度大于剩下部分都取3位数的长度，剪枝</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length() - start &gt; <span class=\"number\">3</span> * (<span class=\"number\">4</span> - count)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当前刚好到达末尾</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start == s.length()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当前刚好是4部分，将结果加入，否则剪枝</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            res.add(track.substring(<span class=\"number\">0</span>, track.length() - <span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 当前到达末尾，但不是4部分，剪枝</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当前超过末尾，剪枝</span></span><br><span class=\"line\">    <span class=\"comment\">// 当前未到达末尾，但有4部分，剪枝</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt; s.length() || count == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 保存当前的解</span></span><br><span class=\"line\">    StringBuilder before = <span class=\"keyword\">new</span> StringBuilder(track);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 选择：加入一位数</span></span><br><span class=\"line\">    track.append(s.charAt(start) + <span class=\"string\">\"\"</span> + <span class=\"string\">'.'</span>);</span><br><span class=\"line\">    backtrack(s, start + <span class=\"number\">1</span>, track, res, count + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果开头是0，直接结束，即选择2或3位数之前可进行剪枝</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.charAt(start) == <span class=\"string\">'0'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 做出选择：加入2位数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start + <span class=\"number\">1</span> &lt; s.length()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 撤销选择：恢复为之前的解</span></span><br><span class=\"line\">        track = <span class=\"keyword\">new</span> StringBuilder(before);</span><br><span class=\"line\">        track.append(s.substring(start, start + <span class=\"number\">2</span>) + <span class=\"string\">\"\"</span> + <span class=\"string\">'.'</span>);</span><br><span class=\"line\">        backtrack(s, start + <span class=\"number\">2</span>, track, res, count + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 做出选择：加入3位数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start + <span class=\"number\">2</span> &lt; s.length()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 撤销选择：恢复为之前的解</span></span><br><span class=\"line\">        track = <span class=\"keyword\">new</span> StringBuilder(before);</span><br><span class=\"line\">        <span class=\"comment\">// 当选择3位数时，要判断数字大小</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = Integer.parseInt(s.substring(start, start + <span class=\"number\">3</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0</span> &lt;= num &amp;&amp; num &lt;= <span class=\"number\">255</span>) &#123;</span><br><span class=\"line\">            track.append(s.substring(start, start + <span class=\"number\">3</span>) + <span class=\"string\">\"\"</span> + <span class=\"string\">'.'</span>);</span><br><span class=\"line\">            backtrack(s, start + <span class=\"number\">3</span>, track, res, count + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"15-交错字符串-97\"><a href=\"#15-交错字符串-97\" class=\"headerlink\" title=\"15. 交错字符串 [97]\"></a>15. 交错字符串 [97]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/interleaving-string/\" target=\"_blank\" rel=\"noopener\">97. 交错字符串</a></p>\n<h3 id=\"15-1-题目描述\"><a href=\"#15-1-题目描述\" class=\"headerlink\" title=\"15.1. 题目描述\"></a>15.1. 题目描述</h3><p><img src=\"/pictures/image-20200828102111964.png\" alt=\"image-20200828102111964\"></p>\n<h3 id=\"15-2-方法一：回溯法\"><a href=\"#15-2-方法一：回溯法\" class=\"headerlink\" title=\"15.2. 方法一：回溯法\"></a>15.2. 方法一：回溯法</h3><p>参考：<a href=\"https://leetcode.wang/leetCode-97-Interleaving-String.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>感觉要用回溯解决，但是不知道怎么回溯，如何递归。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isInterleave</span><span class=\"params\">(String s1, String s2, String s3)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s1.length() + s2.length() != s3.length()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> backtrack(s1, s2, s3, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">backtrack</span><span class=\"params\">(String s1, String s2, String s3, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// i，j,k 全部到达末尾就返回true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == s1.length() &amp;&amp; j == s2.length() &amp;&amp; k == s3.length()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// i 到达末尾，直接移动 j 和 k 不停比较</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == s1.length()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt; s2.length()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s2.charAt(j) != s3.charAt(k)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// j 到达末尾，直接移动 i 和 k 不停比较</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j == s2.length()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; s1.length()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s1.charAt(i) != s3.charAt(k)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 判断 i 和 k 指向的字符是否相等</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s1.charAt(i) == s3.charAt(k)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 后移 i 和 k 继续判断，如果成功直接返回true</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (backtrack(s1, s2, s3, i + <span class=\"number\">1</span>, j, k + <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 移动 i 和 k 失败，尝试移动 j 和 k</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s2.charAt(j) == s3.charAt(k)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (backtrack(s1, s2, s3, i, j + <span class=\"number\">1</span>, k + <span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 移动 i 和 j 都失败，返回 false</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-3-方法二：回溯法的优化（备忘录）\"><a href=\"#15-3-方法二：回溯法的优化（备忘录）\" class=\"headerlink\" title=\"15.3. 方法二：回溯法的优化（备忘录）\"></a>15.3. 方法二：回溯法的优化（备忘录）</h3><p>参考：<a href=\"https://leetcode.wang/leetCode-97-Interleaving-String.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>由于递归的分支，所以会造成很多重复情况的判断，所以我们用 memoization 技术，把求出的结果用 hashmap 保存起来，第二次过来的时候直接返回结果以免再次进入递归。</p>\n<p>hashmap key 的话用字符串 i + “@” + j ，之所以中间加 “@”，是为了防止 i = 1 和 j = 22。以及 i = 12，j = 2。这样的两种情况产生的就都是 122。加上 “@” 可以区分开来。</p>\n<p>原文中：map 的 value 取值有三个，用 1 表示 true，0 表示 false，-1 代表还未赋值。</p>\n<p>但其实这里并不会用到三个值，因为一旦遇到的 i 和 j 满足要求，直接返回 true 即可，不需要再存入 map 中。因此，这里定义的 memo 就是一个不满足要求的 i 和 j 组合，只要 memo中含有 i 和 j 的组合，则直接返回 false。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isInterleave</span><span class=\"params\">(String s1, String s2, String s3)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s1.length() + s2.length() != s3.length()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// memo 的 key 是：i + \"@\" + j，用@隔开是为了防止i=1,j=22时，可能出现两种组合情况：(1,22),(12,2)</span></span><br><span class=\"line\">    <span class=\"comment\">// memo 的 value 取值：-1 表示为赋值；0 表示false；1 表示true</span></span><br><span class=\"line\">    <span class=\"comment\">// value 其实用不到三个值，因为一旦当前的 i 和 j 符合要求，直接返回 true 即可。因此 memo 中只需要存不满足情况的 i 和 j 即可</span></span><br><span class=\"line\">    Map&lt;String, Integer&gt; memo = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> backtrack2(s1, s2, s3, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, memo);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">backtrack2</span><span class=\"params\">(String s1, String s2, String s3, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, <span class=\"keyword\">int</span> k, Map&lt;String, Integer&gt; memo)</span> </span>&#123;</span><br><span class=\"line\">    String key = i + <span class=\"string\">\"@\"</span> + j;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (memo.containsKey(key))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == s1.length() &amp;&amp; j == s2.length() &amp;&amp; k == s3.length()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == s1.length()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt; s2.length()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s2.charAt(j) != s3.charAt(k)) &#123;</span><br><span class=\"line\">                memo.put(key, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j == s2.length()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; s1.length()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s1.charAt(i) != s3.charAt(k)) &#123;</span><br><span class=\"line\">                memo.put(key, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s1.charAt(i) == s3.charAt(k)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (backtrack2(s1, s2, s3, i + <span class=\"number\">1</span>, j, k + <span class=\"number\">1</span>, memo)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s2.charAt(j) == s3.charAt(k)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (backtrack2(s1, s2, s3, i, j + <span class=\"number\">1</span>, k + <span class=\"number\">1</span>, memo))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    memo.put(key, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-4-方法三：动态规划\"><a href=\"#15-4-方法三：动态规划\" class=\"headerlink\" title=\"15.4. 方法三：动态规划\"></a>15.4. 方法三：动态规划</h3><p>参考：<a href=\"https://leetcode.wang/leetCode-97-Interleaving-String.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>dp 数组定义：定义一个 boolean 二维数组 dp [ i ] [ j ] 来表示 s1[ 0, i ) 和 s2 [ 0, j ） 组合后能否构成 s3 [ 0, i + j )，注意不包括右边界，主要是为了考虑开始的时候如果只取 s1，那么 s2 就是空串，这样的话 dp [ i ] [ 0 ] 就能表示 s2 取空串。</p>\n<p>注意，<code>dp[0][0]</code> 表示 s1 和 s2 都取空串，组成一个空串，则值为 true。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isInterleave</span><span class=\"params\">(String s1, String s2, String s3)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s1.length() + s2.length() != s3.length()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s1.length() == <span class=\"number\">0</span> &amp;&amp; s2.length() == <span class=\"number\">0</span> &amp;&amp; s3.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len1 = s1.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len2 = s2.length();</span><br><span class=\"line\">    <span class=\"comment\">// dp[i][j] = true 表示：s1[0..i) 和 s2[0..j) 组合后能构成 s3[0..i+j)</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[len1 + <span class=\"number\">1</span>][len2 + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= len1; i++) &#123;</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] &amp;&amp; s1.charAt(i - <span class=\"number\">1</span>) == s3.charAt(i - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= len2; j++) &#123;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][j] = dp[<span class=\"number\">0</span>][j - <span class=\"number\">1</span>] &amp;&amp; s2.charAt(j - <span class=\"number\">1</span>) == s3.charAt(j - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= len1; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= len2; j++) &#123;</span><br><span class=\"line\">            dp[i][j] = (dp[i - <span class=\"number\">1</span>][j] &amp;&amp; s1.charAt(i - <span class=\"number\">1</span>) == s3.charAt(i + j - <span class=\"number\">1</span>))</span><br><span class=\"line\">                || (dp[i][j - <span class=\"number\">1</span>] &amp;&amp; s2.charAt(j - <span class=\"number\">1</span>) == s3.charAt(i + j - <span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[len1][len2];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"16-路径总和-II-113\"><a href=\"#16-路径总和-II-113\" class=\"headerlink\" title=\"16. 路径总和 II [113]\"></a>16. 路径总和 II [113]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/path-sum-ii/\" target=\"_blank\" rel=\"noopener\">113. 路径总和 II</a></p>\n<h3 id=\"16-1-题目描述\"><a href=\"#16-1-题目描述\" class=\"headerlink\" title=\"16.1. 题目描述\"></a>16.1. 题目描述</h3><p><img src=\"/pictures/image-20200903093332125.png\" alt=\"image-20200903093332125\"></p>\n<h3 id=\"16-2-代码\"><a href=\"#16-2-代码\" class=\"headerlink\" title=\"16.2. 代码\"></a>16.2. 代码</h3><p>典型的回溯思路：采用试错的思想，尝试分步去解决问题，在分步解决问题的过程中，当通过尝试发现现有的分布答案不能得到有效的正确答案时，取消上一步甚至是上几步的计算，再通过其他的分布尝试寻找问题的答案。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, <span class=\"keyword\">int</span> sum) &#123;</span><br><span class=\"line\">    LinkedList&lt;Integer&gt; track = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    track.add(root.val);</span><br><span class=\"line\">    backtrack(root, sum, track, root.val);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backtrack</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">int</span> sum, LinkedList&lt;Integer&gt; track, <span class=\"keyword\">int</span> tmp)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tmp == sum &amp;&amp; root.left == <span class=\"keyword\">null</span> &amp;&amp; root.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        res.add(<span class=\"keyword\">new</span> LinkedList&lt;&gt;(track));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 做出选择：左子树</span></span><br><span class=\"line\">        track.add(root.left.val);</span><br><span class=\"line\">        backtrack(root.left, sum, track, tmp + root.left.val);</span><br><span class=\"line\">        <span class=\"comment\">// 撤销选择</span></span><br><span class=\"line\">        track.removeLast();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        track.add(root.right.val);</span><br><span class=\"line\">        backtrack(root.right, sum, track, tmp + root.right.val);</span><br><span class=\"line\">        track.removeLast();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"17-参考引用\"><a href=\"#17-参考引用\" class=\"headerlink\" title=\"17. 参考引用\"></a>17. 参考引用</h2><ol>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E5%9B%9E%E6%BA%AF%E6%B3%95\" target=\"_blank\" rel=\"noopener\">Wikipedia</a></li>\n<li><a href=\"https://labuladong.gitbook.io/algo/di-ling-zhang-bi-du-xi-lie/hui-su-suan-fa-xiang-jie-xiu-ding-ban\" target=\"_blank\" rel=\"noopener\">https://labuladong.gitbook.io/algo/di-ling-zhang-bi-du-xi-lie/hui-su-suan-fa-xiang-jie-xiu-ding-ban</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/permutations/solution/hui-su-suan-fa-python-dai-ma-java-dai-ma-by-liweiw/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/permutations/solution/hui-su-suan-fa-python-dai-ma-java-dai-ma-by-liweiw/</a></li>\n<li><a href=\"https://leetcode.wang/leetCode-77-Combinations.html\" target=\"_blank\" rel=\"noopener\">https://leetcode.wang/leetCode-77-Combinations.html</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/qT6WgR6Qwn7ayZkI3AineA\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/qT6WgR6Qwn7ayZkI3AineA</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/restore-ip-addresses/solution/hui-su-suan-fa-hua-tu-fen-xi-jian-zhi-tiao-jian-by/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/restore-ip-addresses/solution/hui-su-suan-fa-hua-tu-fen-xi-jian-zhi-tiao-jian-by/</a></li>\n<li><a href=\"https://leetcode.wang/leetCode-97-Interleaving-String.html\" target=\"_blank\" rel=\"noopener\">https://leetcode.wang/leetCode-97-Interleaving-String.html</a></li>\n</ol>"},{"title":"二叉树总结","date":"2020-07-10T00:45:47.000Z","_content":"\n本文介绍了什么是二叉树，同时解决了部分LeetCode上二叉树相关的题目，这部分会持续更新。\n\n## 1. 什么是二叉树？\n\n[维基定义](https://zh.wikipedia.org/wiki/二叉树)：在计算机科学中，二叉树（英语：Binary tree）是每个节点最多只有两个分支（即不存在分支度大于2的节点）的树结构。通常分支被称作“左子树”或“右子树”。二叉树的分支具有左右次序，不能随意颠倒。\n\n二叉树的第 ``i`` 层至多拥有 2<sup>i-1</sup> 个节点；深度为 k 的二叉树至多总共有 2<sup>k</sup>-1 个节点（定义根节点所在深度 k<sub>0</sub>=0}），而总计拥有节点数符合的，称为 **满二叉树**；深度为 k 有 n 个节点的二叉树，当且仅当其中的每一节点，都可以和同样深度 k 的满二叉树，序号为1到 n 的节点一对一对应时，称为 **完全二叉树**。对任何一棵非空的二叉树T，如果其叶片（终端节点）数为 n<sub>0</sub>，分支度为2的节点数为 n<sub>2</sub>，则 n<sub>0</sub> = n<sub>2</sub> + 1。\n\n与普通树不同，普通树的节点个数至少为1，而二叉树的节点个数可以为0；普通树节点的最大分支度没有限制，而二叉树节点的最大分支度为2；普通树的节点无左、右次序之分，而二叉树的节点有左、右次序之分。\n\n二叉树通常作为数据结构应用，典型用法是对节点定义一个标记函数，将一些值与每个节点相关系。这样标记的二叉树就可以实现二叉搜索树和二叉堆，并应用于高效率的搜索和排序。\n\n<!--more-->\n\n## 2. 二叉树相关的题目列表\n\n|  #   |                            Title                             | Remark |\n| :--: | :----------------------------------------------------------: | :----: |\n|  94  | [二叉树的中序遍历](https://leetcode-cn.com/problems/binary-tree-inorder-traversal/) |        |\n| 144  | [二叉树的前序遍历](https://leetcode-cn.com/problems/binary-tree-preorder-traversal/) |        |\n| 145  | [二叉树的后序遍历](https://leetcode-cn.com/problems/binary-tree-postorder-traversal/) |        |\n| 102  | [二叉树的层序遍历](https://leetcode-cn.com/problems/binary-tree-level-order-traversal/) |        |\n| 107  | [二叉树的层次遍历 II](https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/) |        |\n| 104  | [二叉树的最大深度](https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/) |        |\n| 100  |   [相同的树](https://leetcode-cn.com/problems/same-tree/)    |        |\n| 101  | [对称二叉树](https://leetcode-cn.com/problems/symmetric-tree/) |  Hard  |\n| 103  | [二叉树的锯齿形层次遍历](https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/) |  Hard  |\n| 105  | [从前序与中序遍历序列构造二叉树](https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/) |        |\n| 106  | [从中序与后序遍历序列构造二叉树](https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/) |        |\n|  98  | [验证二叉搜索树](https://leetcode-cn.com/problems/validate-binary-search-tree/) |  Hard  |\n|  99  | [恢复二叉搜索树](https://leetcode-cn.com/problems/recover-binary-search-tree/) |  Hard  |\n| 108  | [将有序数组转换为二叉搜索树](https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/) |        |\n| 109  | [有序链表转换二叉搜索树](https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/) |  Hard  |\n| 110  | [平衡二叉树](https://leetcode-cn.com/problems/balanced-binary-tree/) |  Hard  |\n| 114  | [二叉树展开为链表](https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/) |  Hard  |\n| 116  | [ 填充每个节点的下一个右侧节点指针](https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/) |  Hard  |\n| 117  | [填充每个节点的下一个右侧节点指针 II](https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node-ii/) |  Hard  |\n| 124  | [二叉树中的最大路径和](https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/) |  Hard  |\n\n### 2.1. 队列操作总结（LinkedList）\n\n参考 [这里](https://blog.csdn.net/NRlovestudy/article/details/98666030)，具体操作如下：\n\n```java\nDeque<String> queue = new LinkedList<>();\n// 入队\n// 尾部添加元素\nqueue.add(\"A\");\nqueue.add(\"B\");\nqueue.add(\"C\");\nSystem.out.println(queue); // [A, B, C]\n\n// 获取但不删除第一个元素\nString peek = queue.peek();\nSystem.out.println(peek + \" ## \" + queue); // A ## [A, B, C]\n\n// 获取并删除第一个元素，没有元素时会发生异常\nString pop = queue.pop();\nSystem.out.println(pop + \" ## \" + queue); // A ## [B, C]\n\n// 出队\n// 获取并删除第一个元素，没有元素时返回null\nString poll = queue.poll();\nSystem.out.println(poll + \" ## \" + poll); // B ## B\n\n// 判空\nSystem.out.println(queue.isEmpty());    //false\n```\n\n总结：pop 与 poll 都是取出 LinkedList 的第一个元素，并将该元素删除，等效于 removeFirst；不同点：两者的实现所用数据结构不同：\n\n- poll 是基于队列结构实现的方法，当队列中没有元素时，调用该方法返回 null\n- pop 是基于栈结构实现的方法，当栈中没有元素时，调用该方法会发生异常\n\n### 2.2. 栈操作总结（ArrayDeque）\n\n```java\nDeque<String> stack = new ArrayDeque<>();\n// 入栈，即在首部添加元素\nstack.push(\"A\");\nstack.push(\"B\");\nstack.push(\"C\");\nSystem.out.println(stack);      // [C, B, A]\n\n// 获取栈顶元素，即第一个元素\nSystem.out.println(stack.peek() + \" ## \" + stack); // C ## [C, B, A]\n\n// 出栈，即获取并删除第一个元素\nSystem.out.println(stack.pop() + \" ## \" + stack);    // C ## [B, A]\n\n// 判空\nSystem.out.println(stack.isEmpty());    //false\n```\n\n## 3. 二叉树的中序遍历 [94]\n\n题目来源：[94. 二叉树的中序遍历](https://leetcode-cn.com/problems/binary-tree-inorder-traversal/)\n\n### 3.1. 题目描述\n\n给定一个二叉树，返回它的中序 遍历。\n\n示例:\n\n```bash\n输入: [1,null,2,3]\n   1\n    \\\n     2\n    /\n   3\n\n输出: [1,3,2]\n```\n\n\n进阶: 递归算法很简单，你可以通过迭代算法完成吗？\n\n### 3.2. 题目分析\n\n分析参考 [这里](https://leetcode.wang/leetCode-94-Binary-Tree-Inorder-Traversal.html).\n\n中序遍历使用两种方法：递归和迭代。\n\n### 3.3. 方法一：递归\n\n时间：O(n)，遍历每个节点；空间：O(h)，压栈消耗，h 是二叉树的高度。\n\n```java\npublic List<Integer> inorderTraversal(TreeNode root){\n    List<Integer> res = new ArrayList<>();\n    helper(root, res);\n    return res;\n}\n\nprivate void helper(TreeNode node, List<Integer> res){\n    if (node == null){return;}\n\n    helper(node.left, res);\n    res.add(node.val);\n    helper(node.right, res);\n}\n```\n\n### 3.4. 方法二：栈\n\n时间：O(n)，遍历每个节点；空间：O(h)，压栈消耗，h 是二叉树的高度。\n\n利用栈模拟递归。递归压栈过程，就是保存现场，保存当前的变量。在方法一中，当前有用的变量就是 node，所以我们用栈把每一次的 node 保存起来。\n\n```java\npublic List<Integer> inorderTraversal(TreeNode root){\n    List<Integer> res = new ArrayList<>();\n    // 程序中尽量避免使用Stack类，太古老，性能差，使用ArrayDeque代替\n    Deque<TreeNode> stack = new ArrayDeque<>();\n    TreeNode curr = root;\n    while (curr != null || !stack.isEmpty()){\n        // 节点不为空就一直压栈\n        while (curr != null){\n            stack.push(curr);\n            // 考虑左子树\n            curr = curr.left;\n        }\n        // 节点为空，就出栈\n        curr = stack.pop();\n        res.add(curr.val);\n        // 考虑右子树\n        curr = curr.right;\n    }\n    return res;\n}\n```\n\n## 4. 二叉树的前序遍历 [144]\n\n题目来源：[144. 二叉树的前序遍历](https://leetcode-cn.com/problems/binary-tree-preorder-traversal/)\n\n### 4.1. 题目描述\n\n给定一个二叉树，返回它的 前序 遍历。\n\n示例:\n\n```bash\n输入: [1,null,2,3]  \n   1\n    \\\n     2\n    /\n   3 \n\n输出: [1,2,3]\n```\n\n\n进阶: 递归算法很简单，你可以通过迭代算法完成吗？\n\n### 4.2. 题目分析\n\n中序遍历的迭代法也使用栈实现。\n\n### 4.3. 方法一：递归\n\n```java\npublic List<Integer> preorderTraversal(TreeNode root){\n    List<Integer> res = new ArrayList<>();\n    helper(root, res);\n    return res;\n}\n\nprivate void helper(TreeNode node, List<Integer> res){\n    if (node == null){return;}\n\n    res.add(node.val);\n    helper(node.left, res);\n    helper(node.right, res);\n}\n```\n\n### 4.4. 方法二：栈\n\n与中序遍历的迭代方法相比，前序遍历只需要将访问的位置改到根节点处即可，其他代码不变。\n\n```java\npublic List<Integer> preorderTraversal(TreeNode root) {\n    List<Integer> res = new ArrayList<>();\n    Deque<TreeNode> stack = new ArrayDeque<>();\n    TreeNode curr = root;\n    while (curr != null || !stack.isEmpty()){\n        while (curr != null){\n            // 在此处访问节点\n            res.add(curr.val);\n            stack.push(curr);\n            curr = curr.left;\n        }\n        curr = stack.poll();\n        curr = curr.right;\n    }\n    return res;\n}\n```\n\n## 5. 二叉树的后序遍历 [145]\n\n题目来源：[145. 二叉树的后序遍历](https://leetcode-cn.com/problems/binary-tree-postorder-traversal/)\n\n### 5.1. 题目描述\n\n给定一个二叉树，返回它的 后序 遍历。\n\n示例:\n\n```bash\n输入: [1,null,2,3]  \n   1\n    \\\n     2\n    /\n   3 \n\n输出: [3,2,1]\n```\n\n\n进阶: 递归算法很简单，你可以通过迭代算法完成吗？\n\n### 5.2. 方法一：递归\n\n```java\npublic List<Integer> postorderTraversal(TreeNode root){\n    List<Integer> res = new ArrayList<>();\n    helper(root, res);\n    return res;\n}\n\nprivate void helper(TreeNode node, List<Integer> res){\n    if (node == null){return;}\n\n    helper(node.left, res);\n    helper(node.right, res);\n    res.add(node.val);\n}\n```\n\n### 5.3. 方法二：栈\n\n相比于前序、中序的栈解法，后序遍历的栈解法会难一些。\n\n原因在于，当遍历完某个根节点的左子树，回到根节点时，中序、先序可以把当前根节点从栈中弹出，然后转到右子树。举例如下：\n\n```bash\n     1\n    / \\\n   2   3\n  / \\\n 4   5\n```\n\n当遍历完 2,4,5 时，回到 1 之后就可以把 1 弹出，然后通过 1 到达右子树继续遍历。\n\n而对于后序遍历，当我们到达 1 时，并不能立即把 1 弹出，因为遍历完右子树，还需要将根节点加入到 res 中。\n\n因此，我们就需要判断是从左子树到的根节点，还是从右子树到的根节点。\n\n如果是从左子树到的根节点，此时应该转到右子树。如果从右子树到的根节点，那么就可以弹出当前节点，并存储到 res 中。\n\n当然，如果从左子树到的根节点，此时右子树为 null, 也需要把根节点弹出，并加入到 res 中。\n\n基于上述分析，我们可以写出代码：\n\n```java\npublic List<Integer> postorderTraversal(TreeNode root){\n    List<Integer> res = new ArrayList<>();\n    Deque<TreeNode> stack = new ArrayDeque<>();\n    TreeNode curr = root;\n    // 记录上一个遍历的节点\n    TreeNode pre = null;\n    while (curr != null || !stack.isEmpty()){\n        while (curr != null){\n            stack.push(curr);\n            curr = curr.left;\n        }\n        // 获取当前根节点\n        TreeNode temp = stack.peek();\n        // 是否变到右子树\n        if(temp.right != null && temp.right != pre){\n            curr = temp.right;\n        }else{\n            res.add(temp.val);\n            // 记录上一个遍历的节点\n            pre = temp;\n            stack.pop();\n        }\n    }\n    return res;\n}\n```\n\n## 6. 二叉树的层序遍历 [102]\n\n题目来源：[102. 二叉树的层序遍历](https://leetcode-cn.com/problems/binary-tree-level-order-traversal/)\n\n### 6.1. 题目描述\n\n给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。\n\n示例：\n二叉树：[3,9,20,null,null,15,7],\n\n```bash\n\t3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\n返回其层次遍历结果：\n\n```bash\n[\n  [3],\n  [9,20],\n  [15,7]\n]\n```\n\n### 6.2. 方法一：递归（DFS）\n\n由于本题对于层序遍历的结果要求为 ``List<List<Integer>>``, 要把每一层的元素放在一个单独的列表中，因此在递归时需要传入当前层数，如果是新的一层，创建一个新的 ``List`` , 存储这一层的元素。\n\n```java\nList<List<Integer>> res = new ArrayList<>();\n\npublic List<List<Integer>> levelOrder(TreeNode root) {\n    if(root == null){return res;}\n    helper(root, 0);\n    return res;\n}\n\nprivate void helper(TreeNode node, Integer level){\n    if(res.size() == level){\n        res.add(new ArrayList<>());\n    }\n    res.get(level).add(node.val);\n    if(node.left != null){\n        helper(node.left, level + 1);\n    }\n    if(node.right != null){\n        helper(node.right, level + 1);\n    }\n}\n```\n\n### 6.3. 方法二：队列（BFS）\n\n依旧是本题对于返回结果的要求，每一层需要单独处理。\n\n```java\npublic List<List<Integer>> levelOrder(TreeNode root) {\n    List<List<Integer>> res = new ArrayList<>();\n    if (root == null) {\n        return res;\n    }\n    Queue<TreeNode> queue = new LinkedList<>();\n    queue.add(root);\n    while(!queue.isEmpty()){\n        // 当前层列表\n        List<Integer> level = new ArrayList<>();\n\n        // 当前队列中的元素个数，即就是当前层的节点数\n        int levelNum = queue.size();\n        // levelNum 必须在外面定义，因为 queue 的大小在不停的变化\n        for(int i = 0; i < levelNum; i++){\n            // 移除队列第一个元素\n            TreeNode node = queue.remove();\n            level.add(node.val);\n            if(node.left != null){queue.add(node.left);}\n            if(node.right != null){queue.add(node.right);}\n        }\n        res.add(level);\n    }\n    return res;\n}\n```\n\n## 7. 二叉树的层次遍历 II [107]\n\n题目来源：[107. 二叉树的层次遍历 II](https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/)\n\n### 7.1. 题目描述\n\n给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）\n\n例如：\n给定二叉树 [3,9,20,null,null,15,7],\n\n```bash\n\t3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\n返回其自底向上的层次遍历为：\n\n```bash\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n```\n\n### 7.2. 方法一：递归\n\n本题的结果是上一题结果的反序，只需要在上一题添加列表时，在表头插入，以此得到反序序列即可。如下代码，改变三处：\n\n```java\n// 使用链表存储，在表头插入效率更高\nLinkedList<List<Integer>> res = new LinkedList<>();\n\npublic List<List<Integer>> levelOrderBottom(TreeNode root) {\n    if(root == null){return res;}\n    helper(root, 0);\n    return res;\n}\n\nprivate void helper(TreeNode node, Integer level){\n    if(res.size() == level){\n        // 在链表表头插入，得到反序序列\n        res.addFirst(new ArrayList<>());\n    }\n    // 插入当前值，注意下标\n    res.get(res.size() - level - 1).add(node.val);\n\n    if(node.left != null){\n        helper(node.left, level + 1);\n    }\n    if(node.right != null){\n        helper(node.right, level + 1);\n    }\n}\n```\n\n### 7.3. 方法二：队列\n\n与上一题区别：使用链表存储，插入时从表头插入，得到反序序列。\n\n```java\npublic List<List<Integer>> levelOrderBottom(TreeNode root) {\n    // 使用链表，在表头插入效率更高\n    LinkedList<List<Integer>> res = new LinkedList<>();\n    if (root == null) {\n        return res;\n    }\n    Queue<TreeNode> queue = new LinkedList<>();\n    queue.add(root);\n    while(!queue.isEmpty()){\n        List<Integer> level = new ArrayList<>();\n        int levelNum = queue.size();\n        for(int i = 0; i < levelNum; i++){\n            TreeNode node = queue.remove();\n            level.add(node.val);\n            if(node.left != null){queue.add(node.left);}\n            if(node.right != null){queue.add(node.right);}\n        }\n        // 在表头插入，得到反序结果\n        res.addFirst(level);\n    }\n    return res;\n}\n```\n\n## 8. 二叉树的最大深度 [104]\n\n题目来源：[104. 二叉树的最大深度](https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/)\n\n### 8.1.. 题目描述\n\n给定一个二叉树，找出其最大深度。\n\n二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。\n\n说明: 叶子节点是指没有子节点的节点。\n\n示例：\n给定二叉树 [3,9,20,null,null,15,7]，\n\n    \t3\n       / \\\n      9  20\n        /  \\\n       15   7\n\n返回它的最大深度 3 。\n\n### 8.2. 方法一：递归（DFS）\n\n```java\npublic int maxDepth(TreeNode root) {\n    if(root == null){return 0;}\n    return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;\n}\n```\n\n### 8.3. 方法二：层次遍历（BFS）\n\n```java\npublic int maxDepth(TreeNode root) {\n    if(root == null){return 0;}\n    LinkedList<TreeNode> queue = new LinkedList<>();\n    queue.add(root);\n    int level = 0;\n    while (!queue.isEmpty()){\n        level++;\n        int size = queue.size();\n        for(int i = 0; i < size; i++){\n            TreeNode node = queue.remove();\n            if(node.left != null){queue.add(node.left);}\n            if(node.right != null){ queue.add(node.right);}\n        }\n    }\n    return level;\n}\n```\n\n## 9. 相同的树 [100]\n\n题目来源：[100. 相同的树](https://leetcode-cn.com/problems/same-tree/)\n\n### 9.1. 题目描述\n\n给定两个二叉树，编写一个函数来检验它们是否相同。\n\n如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。\n\n示例 1:\n\n```bash\n输入:       1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\n输出: true\n```\n\n示例 2:\n\n```bash\n输入:      1          1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\n输出: false\n```\n\n\n示例 3:\n\n```bash\n输入:       1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\n输出: false\n```\n\n### 9.2. 代码\n\n思路：对两颗树同时进行遍历比较，这里使用的是中序遍历。\n\n```java\npublic boolean isSameTree(TreeNode p, TreeNode q){\n    if(p == null && q == null){\n        return true;\n    }\n    if(p != null && q != null && p.val == q.val){\n        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\n    }\n    return false;\n}\n```\n\n## 10. 对称二叉树 [101]\n\n题目来源：[101. 对称二叉树](https://leetcode-cn.com/problems/symmetric-tree/)\n\n### 10.1. 题目描述\n\n给定一个二叉树，检查它是否是镜像对称的。\n\n例如，二叉树 [1,2,2,3,4,4,3] 是对称的。\n\n    \t1\n       / \\\n      2   2\n     / \\ / \\\n    3  4 4  3\n\n但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:\n\n    \t1\n       / \\\n      2   2\n       \\   \\\n       3    3\n\n进阶：\n\n你可以运用递归和迭代两种方法解决这个问题吗？\n\n### 10.2. 方法一：递归\n\n不是简单的比较左右就行，注意这道题是镜像对称的。这里的递归是基于先序遍历的，先看根节点，再判断左右节点，再判断左右节点的子节点是否为镜像对称。\n\n其实就是类似于 DFS 的先序遍历。不同之处是对于 left 子树是正常的先序遍历 根节点 -> 左子树 -> 右子树 的顺序，对于 right 子树的话是 根节点 -> 右子树 -> 左子树 的顺序。\n\n```java\npublic boolean isSymmetric(TreeNode root){\n    if(root == null){return true;}\n    return isMirror(root.left, root.right);\n}\n\npublic boolean isMirror(TreeNode p, TreeNode q){\n    if(p == null && q == null){return true;}\n    if(p == null || q == null){return false;}\n    if(p.val == q.val){\n        return isMirror(p.left, q.right) && isMirror(p.right, q.left);\n    }\n    return false;\n}\n```\n\n### 10.3. 方法二：迭代（栈）\n\n参考：[这里](https://leetcode.wang/leetcode-101-Symmetric-Tree.html#解法二-dfs-栈).\n\n把方法一的先序遍历，使用栈将递归改为迭代。使用两个栈分别存储左右字数的序列，出栈时比较。\n\n```java\npublic boolean isSymmetric(TreeNode root){\n    if(root == null){return true;}\n    Deque<TreeNode> leftStack = new ArrayDeque<>();\n    Deque<TreeNode> rightStack = new ArrayDeque<>();\n    TreeNode leftCur = root.left;\n    TreeNode rightCur = root.right;\n    while (leftCur != null || rightCur != null || !leftStack.isEmpty() || !rightStack.isEmpty()){\n        while (leftCur != null){\n            leftStack.push(leftCur);\n            // 考虑左子树\n            leftCur = leftCur.left;\n        }\n        while (rightCur != null){\n            rightStack.push(rightCur);\n            // 考虑右子树\n            rightCur = rightCur.right;\n        }\n        // 长度不同，就返回\n        if(leftStack.size() != rightStack.size()){\n            return false;\n        }\n        // 出栈\n        leftCur = leftStack.poll();\n        rightCur = rightStack.poll();\n        if(leftCur.val != rightCur.val){\n            return false;\n        }\n        // 考虑右子树\n        leftCur = leftCur.right;\n        // 考虑左子树\n        rightCur = rightCur.left;\n    }\n    return true;\n}\n```\n\n## 11. 二叉树的锯齿形层次遍历 [103]\n\n题目来源：[103. 二叉树的锯齿形层次遍历](https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/)\n\n### 11.1. 题目描述\n\n![image-20200819111819257](/pictures/image-20200819111819257.png)\n\n### 11.2. 代码\n\n在 [102] 题的基础上，改变在当前层中加入元素的顺序即可完成。\n\n```java\npublic List<List<Integer>> zigzagLevelOrder(TreeNode root) {\n    List<List<Integer>> res = new ArrayList<>();\n    if (root == null) {\n        return res;\n    }\n    Deque<TreeNode> queue = new LinkedList<>();\n    queue.add(root);\n    int depth = 0;\n    while(!queue.isEmpty()){\n        // 当前层列表\n        List<Integer> level = new ArrayList<>();\n        int levelNum = queue.size();\n        for(int i = 0; i < levelNum; i++){\n            TreeNode node = queue.remove();\n            // 在当前层列表中加入元素（只需要改变这里）\n            if(depth % 2 == 0){\n                level.add(node.val);\n            }else{\n                level.add(0, node.val);\n            }\n            if(node.left != null){queue.add(node.left);}\n            if(node.right != null){queue.add(node.right);}\n        }\n        res.add(level);\n        depth++;\n    }\n    return res;\n}\n```\n\n通过本题加深了对层次遍历迭代解法的理解，代码中通过队列进行层次遍历，即整个遍历的顺序都是在队列的帮助下实现的，其中的 res、level 等都是为了输出结果的形式而定义的。本题依旧是层次遍历，只是在添加结果时，不同的层添加结果的顺序不同。\n\n## 12. 从前序与中序遍历序列构造二叉树 [105]\n\n题目来源：[105. 从前序与中序遍历序列构造二叉树](https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/)\n\n### 12.1. 题目描述\n\n![image-20200821111825878](/pictures/image-20200821111825878.png)\n\n### 12.2. 方法一：递归\n\n```java\npublic TreeNode buildTree(int[] preorder, int[] inorder) {\n    return helper(preorder, 0, preorder.length - 1, inorder, 0, inorder.length - 1);\n}\n\nprivate TreeNode helper(int[] preorder, int pStart, int pEnd, int[] inorder, int iStart, int iEnd) {\n    // pStart 表示先序的第一位索引\n    // pEnd 表示先序的最后一位索引\n    // 如果输入的前序序列为空，返回 null\n    if(pEnd < pStart){return null;}\n\n    int root = preorder[pStart];\n    TreeNode node = new TreeNode(root);\n\n    // 在中序遍历中找root，即分隔点\n    int point = iStart;\n    for(; point <= iEnd; point++){\n        if(inorder[point] == root){\n            break;\n        }\n    }\n    // 左子树长度\n    int leftLen = point - iStart;\n\n    node.left = helper(preorder, pStart + 1, pStart + leftLen, inorder, iStart, point - 1);\n    node.right = helper(preorder, pStart + leftLen + 1, pEnd, inorder, point + 1, iEnd);\n\n    return node;\n}\n```\n\n复杂度分析：\n\n- 时间复杂度：O(N^2)，这里 N 是二叉树的结点个数，每调用一次递归方法创建一个结点，一共创建 N 个结点，在中序遍历中找到根结点在中序遍历中的位置，是与 N 相关的，这里不计算递归方法占用的时间。\n- 空间复杂度：O(1)，这里不计算递归方法占用的空间。\n\n### 12.3. 方法二：使用 HashMap 对递归进行优化\n\n参考 [这里](https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/qian-xu-bian-li-python-dai-ma-java-dai-ma-by-liwei/).\n\n上一方法中每执行一次 helper 都要在中序中寻找根节点，这里使用 HashMap 存储中序序列的索引与节点值，找根节点只需要 O(1)。\n\n```java\npublic TreeNode buildTree(int[] preorder, int[] inorder) {\n    HashMap<Integer, Integer> map = new HashMap<>();\n    for(int i = 0; i < inorder.length; i++){\n        map.put(inorder[i], i);\n    }\n    return helper2(preorder, 0, preorder.length - 1, inorder, 0, inorder.length - 1, map);\n}\n\nprivate TreeNode helper2(int[] preorder, int pStart, int pEnd, int[] inorder, int iStart, int iEnd, HashMap<Integer, Integer> map) {\n    if(pEnd < pStart){return null;}\n\n    int root = preorder[pStart];\n    TreeNode node = new TreeNode(root);\n\n    // 使用map找分隔点\n    int point = map.get(root);\n\n    int leftLen = point - iStart;\n\n    node.left = helper2(preorder, pStart + 1, pStart + leftLen, inorder, iStart, point - 1, map);\n    node.right = helper2(preorder, pStart + leftLen + 1, pEnd, inorder, point + 1, iEnd, map);\n\n    return node;\n}\n```\n\n- 时间复杂度：O(N)，这里 N 是二叉树的结点个数，每调用一次递归方法创建一个结点，一共创建 N 个结点，这里不计算递归方法占用的时间。\n- 空间复杂度：O(N)，这里忽略递归方法占用的空间，因为是对数级别的，比 N 小。\n\n## 13. 验证二叉搜索树 [98]\n\n题目来源：[98. 验证二叉搜索树](https://leetcode-cn.com/problems/validate-binary-search-tree/)\n\n### 13.1. 题目描述\n\n![image-20200831101224071](/pictures/image-20200831101224071.png)\n\n### 13.1. 方法一：递归\n\n可以很简单的用递归写出来。想法是，左子树是合法二分查找树，右子树是合法二分查找树，并且根节点大于左孩子，小于右孩子，那么当前树就是合法二分查找树。\n\n注意：判断是否是二叉搜索树，不能只是简单的判断根节点和左右节点的大小关系。而是需要判断左子树和右子树上的所有节点都满足大小关系，并且左子树和右子树也都是二分查找树。\n\n```java\npublic boolean isValidBST(TreeNode root) {\n    // 递归终止条件\n    if (root == null || (root.right == null && root.left == null)) {\n        return true;\n    }\n\n    // 判断左子树 和 左子树与根节点的关系\n    if (isValidBST(root.left)) {\n        if (root.left != null) {\n            // 获取左子树的最大值\n            int maxLeft = getMaxOfBST(root.left);\n            if (root.val <= maxLeft) {\n                return false;\n            }\n        }\n    } else {\n        return false;\n    }\n\n    // 判断右子树 和 右子树与根节点的关系\n    if (isValidBST(root.right)) {\n        if (root.right != null) {\n            // 获取右子树最小值\n            int minRight = getMinOfBST(root.right);\n            if (root.val >= minRight) {\n                return false;\n            }\n        }\n    } else {\n        return false;\n    }\n\n    return true;\n}\n\n/**\n     * 获取搜索二叉树的最大值\n     *\n     * @param root\n     * @return\n     */\nprivate int getMaxOfBST(TreeNode root) {\n    int max = root.val;\n    while (root.right != null) {\n        max = root.right.val;\n        root = root.right;\n    }\n    return max;\n}\n\n/**\n     * 获取搜索二叉树最小值\n     *\n     * @param root\n     * @return\n     */\nprivate int getMinOfBST(TreeNode root) {\n    int min = root.val;\n    while (root.left != null) {\n        min = root.left.val;\n        root = root.left;\n    }\n    return min;\n}\n```\n\n### 13.3. 方法二：另一种递归（推荐）\n\n参考 [这里](https://leetcode.wang/leetCode-98-Validate-Binary-Search-Tree.html) 的解法二，把代码写的简洁了一些。这种递归代码更为简洁，推荐。\n\n解法一中，我们是判断根节点是否合法，找到了左子树中最大的数，右子树中最小的数。 由左子树和右子树决定当前根节点是否合法。\n\n但如果正常的来讲，明明先有的根节点，按理说根节点是任何数都行，而不是由左子树和右子树限定。相反，根节点反而决定了左孩子和右孩子的合法取值范围。\n\n所以，我们可以从根节点进行 DFS，然后计算每个节点应该的取值范围，如果当前节点不符合就返回 false。\n\n也就是说，本题使用先序遍历，判断根节点是否在范围之内，这个范围根据上一层根节点来限制。\n\n```java\npublic boolean isValidBST(TreeNode root) {\n    // 节点值均为 Int 型，故最大值设为 long\n    long max = (long) Integer.MAX_VALUE + 1;\n    long min = (long) Integer.MIN_VALUE - 1;\n    return getAns(root, max, min);\n}\n\nprivate boolean getAns(TreeNode root, long max, long min) {\n    if(root == null){\n        return true;\n    }\n\t// 判断根节点是否在限定范围内\n    if(root.val <= min || root.val >= max){\n        return false;\n    }\n\t// 判断左右子树，同时更新左右子树的限定范围\n    return getAns(root.left, min, root.val) && getAns(root.right, root.val, max);\n}\n```\n\n### 13.4. 方法三：迭代（中序遍历的栈解法）\n\n这种解法基于：二叉搜索树中序遍历后，会得到有序序列。\n\n```java\npublic boolean isValidBTS(TreeNode root) {\n    Stack<TreeNode> stack = new Stack<>();\n    TreeNode curr = root;\n    TreeNode pre = null;\n    while (curr != null || !stack.isEmpty()) {\n        while (curr != null) {\n            stack.push(curr);\n            curr = curr.left;\n        }\n        // 出栈（这里出栈的值会添加到中序序列后）\n        curr = stack.pop();\n        if (pre != null && pre.val >= curr.val) {\n            return false;\n        }\n        pre = curr;\n        curr = curr.right;\n    }\n    return true;\n}\n```\n\n## 14. 恢复二叉搜索树 [99]\n\n题目来源：[99. 恢复二叉搜索树](https://leetcode-cn.com/problems/recover-binary-search-tree/)\n\n### 14.1. 题目描述\n\n![image-20200831105056785](/pictures/image-20200831105056785.png)\n\n### 14.2. 方法一：迭代（栈的中序遍历）\n\n参考 [这里](https://leetcode.wang/leetcode-99-Recover-Binary-Search-Tree.html) 的解法二，代码稍微做了一些简化。\n\n对上一题 [98] 的第三种解法进行修改实现本题。\n\n我们判断是否是一个合法的二分查找树是使用到了中序遍历。原因就是二分查找树的一个性质，左孩子小于根节点，根节点小于右孩子。所以做一次中序遍历，产生的序列就是从小到大排列的有序序列。\n\n回到这道题，题目交换了两个数字，其实就是在有序序列中交换了两个数字。而我们只需要把它还原。\n\n交换的位置的话就是两种情况。\n\n- 相邻的两个数字交换\n\n  [ 1 2 3 4 5 ] 中 2 和 3 进行交换，[ 1 3 2 4 5 ]，这样的话只产生 **一组** 逆序的数字（正常情况是从小到大排序，交换后产生了从大到小），3 2。\n\n  我们只需要遍历数组，找到后，把这一组的两个数字进行交换即可。\n\n- 不相邻的两个数字交换\n\n  [ 1 2 3 4 5 ] 中 2 和 5 进行交换，[ 1 5 3 4 2 ]，这样的话其实就是产生了 **两组** 逆序的数字对。5 3 和 4 2。\n\n  所以我们只需要遍历数组，然后找到这两组逆序对，然后把第一组前一个数字和第二组后一个数字进行交换即完成了还原。\n\n所以在中序遍历中，只需要利用一个 pre 节点和当前节点比较，如果 pre 节点的值大于当前节点的值，那么就是我们要找的逆序的数字。分别用两个指针 first 和 second 保存即可。如果找到第二组逆序的数字，我们就把 second 更新为当前节点。最后把 first 和 second 两个的 **数字** 交换即可。\n\n注意：本题逆序出现的两种情况和节点的交换。\n\n```java\npublic void recoverTree(TreeNode root) {\n    TreeNode cur = root;\n    TreeNode pre = null, first = null, second = null;\n    Deque<TreeNode> stack = new ArrayDeque<>();\n    while (cur != null || !stack.isEmpty()) {\n        while (cur != null) {\n            stack.push(cur);\n            cur = cur.left;\n        }\n        cur = stack.pop();\n        if (pre != null && pre.val >= cur.val) {\n            // 第一次遇到逆序对\n            if (first == null) {\n                // 如果相邻的数字交换，只会出现一次逆序，因此这里 second 也要赋值\n                first = pre;\n                second = cur;\n                // 第二次遇到逆序对\n            } else {\n                second = cur;\n            }\n        }\n        pre = cur;\n        cur = cur.right;\n    }\n\n    // 交换\n    int tmp = first.val;\n    first.val = second.val;\n    second.val = tmp;\n}\n```\n\n## 15. 将有序数组转换为二叉搜索树 [108]\n\n题目来源：[108. 将有序数组转换为二叉搜索树](https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/)\n\n### 15.1. 题目描述\n\n![image-20200901091510832](/pictures/image-20200901091510832.png)\n\n### 15.2. 递归\n\n题目要求平衡二叉树，那么根节点就是数组的中点。找到了数组的中点，作为根节点，进入递归即可。\n\n```java\npublic TreeNode sortedArrayToBST(int[] nums) {\n    return helper(nums, 0, nums.length - 1);\n\n}\n\nprivate TreeNode helper(int[] nums, int start, int end){\n    if(start > end){\n        return null;\n    }\n    int len = end - start + 1;\n    int mid = start + len / 2;\n    TreeNode root = new TreeNode(nums[mid]);\n    root.left = helper(nums, start , mid - 1);\n    root.right = helper(nums, mid + 1, end);\n    return root;\n}\n```\n\n## 16.  有序链表转换二叉搜索树 [109]\n\n题目来源：[109. 有序链表转换二叉搜索树](https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/)\n\n### 16.1. 题目描述\n\n![image-20200902100344960](/pictures/image-20200902100344960.png)\n\n### 16.2. 方法一：将链表转为 ArrayList\n\n本题就是把上一题 [108] 的数组换成了链表，如果使用上一题的思路，链表不支持随机访问，找中点时时间复杂度很高。所以，我们可以把链表先转为 ArrayList，再使用上一题的思路。代码如下：\n\n```java\npublic TreeNode sortedListToBST(ListNode head) {\n    List<Integer> list = new ArrayList<>();\n    while (head != null) {\n        list.add(head.val);\n        head = head.next;\n    }\n    return helper(list, 0, list.size());\n}\n\nprivate TreeNode helper(List<Integer> list, int start, int end) {\n    if (start == end) {\n        return null;\n    }\n    int mid = start + (end - start) / 2;\n    TreeNode root = new TreeNode(list.get(mid));\n    root.left = helper(list, start, mid);\n    root.right = helper(list, mid + 1, end);\n    return root;\n}\n```\n\n时复：O(n)\n\n空复：O(n)\n\n### 16.3. 方法二：中序遍历思路\n\n参考 [这里](https://leetcode.wang/leetcode-109-Convert-Sorted-List-to-Binary-Search-Tree.html)。\n\n我们知道升序数组其实就是二叉搜索树的中序遍历。那么，我们可以按照这个顺序去为每个节点赋值。\n\n如何实现呢？套用中序遍历的递归过程，将 start 和 end 作为递归参数，当 start ==  end 时，返回 null。\n\n我们先看一下中序遍历的递归算法：\n\n```java\npublic List<Integer> inorderTraversal(TreeNode root){\n    List<Integer> res = new ArrayList<>();\n    helper(root, res);\n    return res;\n}\n\nprivate void helper(TreeNode node, List<Integer> res){\n    if (node == null){return;}\n\n    helper(node.left, res);\n    res.add(node.val);\n    helper(node.right, res);\n}\n```\n\n中序遍历中是将 node.val 进行保存，本题我们是给当前节点进行赋值，为了依次赋值，我们需要一个 cur 指针指向所给定的数列，每赋一个值就后移一位：\n\n```java\nListNode cur = null;\n\npublic TreeNode sortedListToBST2(ListNode head) {\n    cur = head;\n    int end = 0;\n    while (head != null) {\n        end++;\n        head = head.next;\n    }\n    return helper2(0, end);\n}\n\nprivate TreeNode helper2(int start, int end) {\n    if(start == end){\n        return null;\n    }\n    int mid = start + (end - start) / 2;\n    // 遍历左子树并且将根节点返回\n    TreeNode left = helper2(start, mid);\n    // 遍历当前节点\n    TreeNode root = new TreeNode(cur.val);\n    root.left = left;\n    // 指针后移，进行下一次赋值\n    cur = cur.next;\n    // 遍历右子树并将根节点返回\n    TreeNode right = helper2(mid + 1, end);\n    root.right = right;\n    return root;\n}\n```\n\n时复：O(n)\n\n空复：O(log(n))，递归压栈消耗。\n\n## 17. 平衡二叉树 [110]\n\n题目来源：[110. 平衡二叉树](https://leetcode-cn.com/problems/balanced-binary-tree/)\n\n### 17.1. 题目描述\n\n![image-20200901093602332](/pictures/image-20200901093602332.png)\n\n### 17.2. 方法一：递归\n\n参考 [这里](https://leetcode.wang/leetcode-110-Balanced-Binary-Tree.html).\n\n参考平衡二叉树的定义：\n\n> 它是一颗空树或它的左右子树的高度差绝对值不超过1，并且左右子树均为平衡二叉树。\n\n直接按照定义来递归求解。\n\n```java\npublic boolean isBalanced(TreeNode root) {\n    if(root == null){return true;}\n    int left = getHeight(root.left);\n    int right = getHeight(root.right);\n    if(Math.abs(left - right) > 1){\n        return false;\n    }\n    return isBalanced(root.left) && isBalanced(root.right);\n}\n\nprivate int getHeight(TreeNode root){\n    if(root == null){\n        return 0;\n    }\n    return Math.max(getHeight(root.left), getHeight(root.right)) + 1;\n}\n```\n\n时复：O(n^2)，n 为二叉树节点个数。isBalanced 需要遍历二叉树中的所有节点，时复为 O(n)，求高度 getHeight，一般情况下为 O(log n)，对于最坏情况，二叉树形成链式结构，需要 O(n)，此时时间复杂度为 O(n^2)。\n\n空复：O(n)，空间复杂度主要取决于递归调用的层数，递归调用不会超过 n。\n\n### 17.3. 方法二：递归的优化\n\n参考 [这里](https://leetcode.wang/leetcode-110-Balanced-Binary-Tree.html) 的解法二。\n\n在方法一中，可以发现，子树的高度重复算了很多次。在求左子树高度时，使用递归求解它的左右子树高度；在判断左子树是否为平衡二叉树时，又使用递归求解了它的左右子树高度。\n\n方法一的另一个问题是：在 getHeight 方法中，求得左右子树高度时，就可以判断当前是否是平衡二叉树了。\n\n综上，只需要求一次高度，并且在求左右子树高度时，就可以判断当前是否是平衡二叉树。\n\n考虑到 `getTreeDepth` 函数返回的是`int`值，同时高度不可能为负数，那么如果求高度过程中我们发现了当前不是平衡二叉树，就返回`-1`。\n\n```java\npublic boolean isBalanced(TreeNode root) {\n    return getHeight2(root) != -1;\n}\n\nprivate int getHeight2(TreeNode root){\n    if(root == null){\n        return 0;\n    }\n    int left = getHeight2(root.left);\n    if(left == -1){\n        return -1;\n    }\n    int right = getHeight2(root.right);\n    if(right == -1){\n        return -1;\n    }\n    if(Math.abs(left - right) > 1){\n        return -1;\n    }\n    return Math.max(left, right) + 1;\n}\n```\n\n时复：O(n)，其中 n 是二叉树中的节点个数。使用自底向上的递归，每个节点的计算高度和判断是否平衡都只需要处理一次，最坏情况下需要遍历二叉树中的所有节点，因此时间复杂度是 O(n) 。\n\n空间复杂度：O(n)，其中 n*n* 是二叉树中的节点个数。空间复杂度主要取决于递归调用的层数，递归调用的层数不会超过 n。\n\n## 18. 从中序与后序遍历序列构造二叉树 [106]\n\n题目来源：[106. 从中序与后序遍历序列构造二叉树](https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/)\n\n### 18.1. 题目描述\n\n![image-20200902104235073](/pictures/image-20200902104235073.png)\n\n### 18.2. 代码\n\n递归，注意使用 map 优化。\n\n```java\npublic TreeNode buildTree(int[] inorder, int[] postorder) {\n    int len = inorder.length;\n    if(len == 0){return null;}\n    Map<Integer, Integer> map = new HashMap<>();\n    for(int i = 0; i < len; i++){\n        map.put(inorder[i], i);\n    }\n    return helper(inorder, 0, len, postorder, 0, len, map);\n}\n\nprivate TreeNode helper(int[] inorder, int iStart, int iEnd, int[] postorder, int pStart, int pEnd, Map<Integer, Integer> map) {\n    if(iStart == iEnd){return null;}\n    TreeNode root = new TreeNode(postorder[pEnd - 1]);\n\n    int rootIndex = map.get(postorder[pEnd - 1]);\n\n    int leftLen = rootIndex - iStart;\n    root.left = helper(inorder, iStart, rootIndex , postorder, pStart, pStart + leftLen, map);\n    root.right = helper(inorder, rootIndex + 1, iEnd, postorder, pStart + leftLen, pEnd - 1, map);\n    return root;\n}\n```\n\n## 19. 二叉树展开为链表 [114]\n\n题目来源：[114. 二叉树展开为链表](https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/)\n\n### 19.1. 题目描述\n\n![image-20200903095901434](/pictures/image-20200903095901434.png)\n\n### 19.2. 代码\n\n参考 [这里](https://leetcode.wang/leetcode-114-Flatten-Binary-Tree-to-Linked-List.html) 的解法一。\n\n这道题难点在于：解法一的思路想不到...\n\n```java\npublic void flatten(TreeNode root) {\n    while (root != null){\n        if(root.left == null){\n            root = root.right;\n        }else{\n            // 找左子树最右边节点\n            TreeNode pre = root.left;\n            while (pre.right != null){\n                pre = pre.right;\n            }\n            // 将原来的右子树接到左子树的最右边\n            pre.right = root.right;\n            // 将左子树茶润到右子树的地方\n            root.right = root.left;\n            root.left = null;\n            // 考虑下一个节点\n            root = root.right;\n        }\n    }\n}\n```\n\n## 20. 填充每个节点的下一个右侧节点指针 [116]\n\n题目来源：[116. 填充每个节点的下一个右侧节点指针](https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/)\n\n### 20.1. 题目描述\n\n![image-20200907095746263](/pictures/image-20200907095746263.png)\n\n![image-20200907095838051](/pictures/image-20200907095838051.png)\n\n### 20.2. 解法一：层次遍历\n\n参考 [这里](https://leetcode.wang/leetcode-116-Populating-Next-Right-Pointers-in-Each-Node.html).\n\n但是这种解法不符合空间复杂度的要求，层次遍历需要 O(n) 空复。\n\n```java\npublic Node connect(Node root) {\n    if (root == null) {\n        return root;\n    }\n\n    Queue<Node> queue = new LinkedList<>();\n    // 在尾部添加元素\n    queue.add(root);\n\n    while (!queue.isEmpty()) {\n        int size = queue.size();\n        Node pre = null;\n        for (int i = 0; i < size; i++) {\n            // 移除队列第一个元素\n            Node cur = queue.poll();\n            if (i > 0) {\n                pre.next = cur;\n            }\n            pre = cur;\n            if (cur.left != null) {\n                queue.add(cur.left);\n            }\n            if (cur.right != null) {\n                queue.add(cur.right);\n            }\n        }\n    }\n    return root;\n}\n```\n\n### 20.3. 解法二：迭代\n\n参考 [这里](https://leetcode.wang/leetcode-116-Populating-Next-Right-Pointers-in-Each-Node.html).\n\n基本思路：因为只能使用常数级别的空复，所以在遍历当前层时，就把下一层的 next 指针指好。定义三个节点，cur 当前访问节点，pre 当前节点的左侧节点，start 当前层的开始节点。\n\n```java\npublic Node connect(Node root) {\n    if (root == null) {\n        return root;\n    }\n    Node pre = root;\n    Node cur = null;\n    Node start = pre;\n    while (pre.left != null) {\n        // 遍历到了最右边节点，要将 pre 和 cur 更新到下一层，并且记录 start\n        if (cur == null) {\n            // 只需要把 pre 的左孩子的 next 指向右孩子（即更新下一层第一个节点的next）\n            pre.left.next = pre.right;\n\n            pre = start.left;\n            cur = start.right;\n            start = pre;\n            // 将下一层的 next 连起来，同时 pre next 后移\n        } else {\n            // 把 pre 的左孩子的 next 指向右孩子\n            pre.left.next = pre.right;\n            // 把 pre 的右孩子的 next 指向 cur 的左孩子\n            pre.right.next = cur.left;\n\n            pre = pre.next;\n            cur = cur.next;\n        }\n    }\n    return root;\n}\n```\n\n### 20.4. 解法三：（推荐）\n\n参考 [这里](https://leetcode.wang/leetcode-117-Populating-Next-Right-Pointers-in-Each-NodeII.html) ，这是 [117] 题的解法，同样适用于本题，而且好理解。\n\n基本思路：利用层次遍历的思路，同时使用上一层已经存好的 next 指针，在依次访问当前层元素时，把下一层的 next 指针指好。每一层的开始节点利用 dummy 节点，即 dummy 节点的 next 指针指向每一层的开始节点。\n\n```java\npublic Node connect(Node root) {\n    Node cur = root;\n    while (cur != null){\n        Node dummy = new Node();\n        Node tail = dummy;\n        // 遍历当前层\n        while (cur != null){\n            if(cur.left != null){\n                tail.next = cur.left;\n                tail = tail.next;\n            }\n            if(cur.right != null){\n                tail.next = cur.right;\n                tail = tail.next;\n            }\n            cur = cur.next;\n        }\n        // 更新到下一层\n        cur = dummy.next;\n    }\n    return root;\n}\n```\n\n## 21. 填充每个节点的下一个右侧节点指针 II [117]\n\n题目来源：[117. 填充每个节点的下一个右侧节点指针 II](https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node-ii/)\n\n### 21.1. 题目描述\n\n![image-20200908091720713](../pictures/image-20200908091720713.png)\n\n### 21.2. 方法一：层次遍历\n\n同上一题的层次遍历。依旧是空复不符合要求。\n\n```java\npublic Node connect(Node root) {\n    if (root == null) {\n        return root;\n    }\n\n    Queue<Node> queue = new LinkedList<>();\n    // 在尾部添加元素\n    queue.add(root);\n\n    while (!queue.isEmpty()) {\n        int size = queue.size();\n        Node pre = null;\n        for (int i = 0; i < size; i++) {\n            // 移除队列第一个元素\n            Node cur = queue.poll();\n            if (i > 0) {\n                pre.next = cur;\n            }\n            pre = cur;\n            if (cur.left != null) {\n                queue.add(cur.left);\n            }\n            if (cur.right != null) {\n                queue.add(cur.right);\n            }\n        }\n    }\n    return root;\n}\n```\n\n### 21.3. 方法二\n\n参考 [这里](https://leetcode.wang/leetcode-117-Populating-Next-Right-Pointers-in-Each-NodeII.html) 的解法三。\n\n利用层次遍历的思路，同时使用上一层已经存好的 next 指针，在依次访问当前层元素时，把下一层的 next 指针指好。\n\n每一层的开始节点使用 dummy 节点，dummy 节点的 next 指针指向每一层的开始节点。\n\n这种解法同样适用于上一题 [116]。\n\n```java\npublic Node connect2(Node root) {\n    Node cur = root;\n    while (cur != null){\n        Node dummy = new Node();\n        Node tail = dummy;\n        // 遍历当前层\n        while (cur != null){\n            if(cur.left != null){\n                tail.next = cur.left;\n                tail = tail.next;\n            }\n            if(cur.right != null){\n                tail.next = cur.right;\n                tail = tail.next;\n            }\n            cur = cur.next;\n        }\n        // 更新到下一层\n        cur = dummy.next;\n    }\n    return root;\n}\n```\n\n## 22. 二叉树中的最大路径和 [124]\n\n题目来源：[124. 二叉树中的最大路径和](https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/)\n\n### 22.1. 题目描述\n\n![image-20200915154342061](../pictures/image-20200915154342061.png)\n\n### 22.2. 代码\n\n参考 [这里](https://leetcode.wang/leetcode-124-Binary-Tree-Maximum-Path-Sum.html) ，难点在于根本想不到..\n\n```java\nint max = Integer.MIN_VALUE;\n\npublic int maxPathSum(TreeNode root) {\n    helper(root);\n    return max;\n}\n\nprivate int helper(TreeNode root) {\n    if(root == null){return 0;}\n    int left = Math.max(helper(root.left), 0);\n    int right = Math.max(helper(root.right), 0);\n\n    // 求的过程中考虑包含当前根节点的最大路径\n    max = Math.max(max, root.val + left + right);\n\n    // 只返回包含当前根节点和左子树或者右子树的路径\n    return root.val + Math.max(left, right);\n}\n```\n\n## 23. 参考引用\n\n1. [Wikipedia](https://zh.wikipedia.org/wiki/二叉树)\n2. https://leetcode.wang/leetCode-94-Binary-Tree-Inorder-Traversal.html\n3. https://leetcode.wang/leetcode-102-Binary-Tree-Level-Order-Traversal.html\n4. https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/qian-xu-bian-li-python-dai-ma-java-dai-ma-by-liwei/\n5. https://leetcode.wang/leetcode-99-Recover-Binary-Search-Tree.html\n6. https://leetcode.wang/leetcode-117-Populating-Next-Right-Pointers-in-Each-NodeII.html","source":"_posts/二叉树总结.md","raw":"---\ntitle: 二叉树总结\ndate: 2020-07-10 08:45:47\ntags:\n  - Algorithm\n  - Java\n  - 二叉树\ncategories: Algorithm\n---\n\n本文介绍了什么是二叉树，同时解决了部分LeetCode上二叉树相关的题目，这部分会持续更新。\n\n## 1. 什么是二叉树？\n\n[维基定义](https://zh.wikipedia.org/wiki/二叉树)：在计算机科学中，二叉树（英语：Binary tree）是每个节点最多只有两个分支（即不存在分支度大于2的节点）的树结构。通常分支被称作“左子树”或“右子树”。二叉树的分支具有左右次序，不能随意颠倒。\n\n二叉树的第 ``i`` 层至多拥有 2<sup>i-1</sup> 个节点；深度为 k 的二叉树至多总共有 2<sup>k</sup>-1 个节点（定义根节点所在深度 k<sub>0</sub>=0}），而总计拥有节点数符合的，称为 **满二叉树**；深度为 k 有 n 个节点的二叉树，当且仅当其中的每一节点，都可以和同样深度 k 的满二叉树，序号为1到 n 的节点一对一对应时，称为 **完全二叉树**。对任何一棵非空的二叉树T，如果其叶片（终端节点）数为 n<sub>0</sub>，分支度为2的节点数为 n<sub>2</sub>，则 n<sub>0</sub> = n<sub>2</sub> + 1。\n\n与普通树不同，普通树的节点个数至少为1，而二叉树的节点个数可以为0；普通树节点的最大分支度没有限制，而二叉树节点的最大分支度为2；普通树的节点无左、右次序之分，而二叉树的节点有左、右次序之分。\n\n二叉树通常作为数据结构应用，典型用法是对节点定义一个标记函数，将一些值与每个节点相关系。这样标记的二叉树就可以实现二叉搜索树和二叉堆，并应用于高效率的搜索和排序。\n\n<!--more-->\n\n## 2. 二叉树相关的题目列表\n\n|  #   |                            Title                             | Remark |\n| :--: | :----------------------------------------------------------: | :----: |\n|  94  | [二叉树的中序遍历](https://leetcode-cn.com/problems/binary-tree-inorder-traversal/) |        |\n| 144  | [二叉树的前序遍历](https://leetcode-cn.com/problems/binary-tree-preorder-traversal/) |        |\n| 145  | [二叉树的后序遍历](https://leetcode-cn.com/problems/binary-tree-postorder-traversal/) |        |\n| 102  | [二叉树的层序遍历](https://leetcode-cn.com/problems/binary-tree-level-order-traversal/) |        |\n| 107  | [二叉树的层次遍历 II](https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/) |        |\n| 104  | [二叉树的最大深度](https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/) |        |\n| 100  |   [相同的树](https://leetcode-cn.com/problems/same-tree/)    |        |\n| 101  | [对称二叉树](https://leetcode-cn.com/problems/symmetric-tree/) |  Hard  |\n| 103  | [二叉树的锯齿形层次遍历](https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/) |  Hard  |\n| 105  | [从前序与中序遍历序列构造二叉树](https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/) |        |\n| 106  | [从中序与后序遍历序列构造二叉树](https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/) |        |\n|  98  | [验证二叉搜索树](https://leetcode-cn.com/problems/validate-binary-search-tree/) |  Hard  |\n|  99  | [恢复二叉搜索树](https://leetcode-cn.com/problems/recover-binary-search-tree/) |  Hard  |\n| 108  | [将有序数组转换为二叉搜索树](https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/) |        |\n| 109  | [有序链表转换二叉搜索树](https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/) |  Hard  |\n| 110  | [平衡二叉树](https://leetcode-cn.com/problems/balanced-binary-tree/) |  Hard  |\n| 114  | [二叉树展开为链表](https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/) |  Hard  |\n| 116  | [ 填充每个节点的下一个右侧节点指针](https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/) |  Hard  |\n| 117  | [填充每个节点的下一个右侧节点指针 II](https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node-ii/) |  Hard  |\n| 124  | [二叉树中的最大路径和](https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/) |  Hard  |\n\n### 2.1. 队列操作总结（LinkedList）\n\n参考 [这里](https://blog.csdn.net/NRlovestudy/article/details/98666030)，具体操作如下：\n\n```java\nDeque<String> queue = new LinkedList<>();\n// 入队\n// 尾部添加元素\nqueue.add(\"A\");\nqueue.add(\"B\");\nqueue.add(\"C\");\nSystem.out.println(queue); // [A, B, C]\n\n// 获取但不删除第一个元素\nString peek = queue.peek();\nSystem.out.println(peek + \" ## \" + queue); // A ## [A, B, C]\n\n// 获取并删除第一个元素，没有元素时会发生异常\nString pop = queue.pop();\nSystem.out.println(pop + \" ## \" + queue); // A ## [B, C]\n\n// 出队\n// 获取并删除第一个元素，没有元素时返回null\nString poll = queue.poll();\nSystem.out.println(poll + \" ## \" + poll); // B ## B\n\n// 判空\nSystem.out.println(queue.isEmpty());    //false\n```\n\n总结：pop 与 poll 都是取出 LinkedList 的第一个元素，并将该元素删除，等效于 removeFirst；不同点：两者的实现所用数据结构不同：\n\n- poll 是基于队列结构实现的方法，当队列中没有元素时，调用该方法返回 null\n- pop 是基于栈结构实现的方法，当栈中没有元素时，调用该方法会发生异常\n\n### 2.2. 栈操作总结（ArrayDeque）\n\n```java\nDeque<String> stack = new ArrayDeque<>();\n// 入栈，即在首部添加元素\nstack.push(\"A\");\nstack.push(\"B\");\nstack.push(\"C\");\nSystem.out.println(stack);      // [C, B, A]\n\n// 获取栈顶元素，即第一个元素\nSystem.out.println(stack.peek() + \" ## \" + stack); // C ## [C, B, A]\n\n// 出栈，即获取并删除第一个元素\nSystem.out.println(stack.pop() + \" ## \" + stack);    // C ## [B, A]\n\n// 判空\nSystem.out.println(stack.isEmpty());    //false\n```\n\n## 3. 二叉树的中序遍历 [94]\n\n题目来源：[94. 二叉树的中序遍历](https://leetcode-cn.com/problems/binary-tree-inorder-traversal/)\n\n### 3.1. 题目描述\n\n给定一个二叉树，返回它的中序 遍历。\n\n示例:\n\n```bash\n输入: [1,null,2,3]\n   1\n    \\\n     2\n    /\n   3\n\n输出: [1,3,2]\n```\n\n\n进阶: 递归算法很简单，你可以通过迭代算法完成吗？\n\n### 3.2. 题目分析\n\n分析参考 [这里](https://leetcode.wang/leetCode-94-Binary-Tree-Inorder-Traversal.html).\n\n中序遍历使用两种方法：递归和迭代。\n\n### 3.3. 方法一：递归\n\n时间：O(n)，遍历每个节点；空间：O(h)，压栈消耗，h 是二叉树的高度。\n\n```java\npublic List<Integer> inorderTraversal(TreeNode root){\n    List<Integer> res = new ArrayList<>();\n    helper(root, res);\n    return res;\n}\n\nprivate void helper(TreeNode node, List<Integer> res){\n    if (node == null){return;}\n\n    helper(node.left, res);\n    res.add(node.val);\n    helper(node.right, res);\n}\n```\n\n### 3.4. 方法二：栈\n\n时间：O(n)，遍历每个节点；空间：O(h)，压栈消耗，h 是二叉树的高度。\n\n利用栈模拟递归。递归压栈过程，就是保存现场，保存当前的变量。在方法一中，当前有用的变量就是 node，所以我们用栈把每一次的 node 保存起来。\n\n```java\npublic List<Integer> inorderTraversal(TreeNode root){\n    List<Integer> res = new ArrayList<>();\n    // 程序中尽量避免使用Stack类，太古老，性能差，使用ArrayDeque代替\n    Deque<TreeNode> stack = new ArrayDeque<>();\n    TreeNode curr = root;\n    while (curr != null || !stack.isEmpty()){\n        // 节点不为空就一直压栈\n        while (curr != null){\n            stack.push(curr);\n            // 考虑左子树\n            curr = curr.left;\n        }\n        // 节点为空，就出栈\n        curr = stack.pop();\n        res.add(curr.val);\n        // 考虑右子树\n        curr = curr.right;\n    }\n    return res;\n}\n```\n\n## 4. 二叉树的前序遍历 [144]\n\n题目来源：[144. 二叉树的前序遍历](https://leetcode-cn.com/problems/binary-tree-preorder-traversal/)\n\n### 4.1. 题目描述\n\n给定一个二叉树，返回它的 前序 遍历。\n\n示例:\n\n```bash\n输入: [1,null,2,3]  \n   1\n    \\\n     2\n    /\n   3 \n\n输出: [1,2,3]\n```\n\n\n进阶: 递归算法很简单，你可以通过迭代算法完成吗？\n\n### 4.2. 题目分析\n\n中序遍历的迭代法也使用栈实现。\n\n### 4.3. 方法一：递归\n\n```java\npublic List<Integer> preorderTraversal(TreeNode root){\n    List<Integer> res = new ArrayList<>();\n    helper(root, res);\n    return res;\n}\n\nprivate void helper(TreeNode node, List<Integer> res){\n    if (node == null){return;}\n\n    res.add(node.val);\n    helper(node.left, res);\n    helper(node.right, res);\n}\n```\n\n### 4.4. 方法二：栈\n\n与中序遍历的迭代方法相比，前序遍历只需要将访问的位置改到根节点处即可，其他代码不变。\n\n```java\npublic List<Integer> preorderTraversal(TreeNode root) {\n    List<Integer> res = new ArrayList<>();\n    Deque<TreeNode> stack = new ArrayDeque<>();\n    TreeNode curr = root;\n    while (curr != null || !stack.isEmpty()){\n        while (curr != null){\n            // 在此处访问节点\n            res.add(curr.val);\n            stack.push(curr);\n            curr = curr.left;\n        }\n        curr = stack.poll();\n        curr = curr.right;\n    }\n    return res;\n}\n```\n\n## 5. 二叉树的后序遍历 [145]\n\n题目来源：[145. 二叉树的后序遍历](https://leetcode-cn.com/problems/binary-tree-postorder-traversal/)\n\n### 5.1. 题目描述\n\n给定一个二叉树，返回它的 后序 遍历。\n\n示例:\n\n```bash\n输入: [1,null,2,3]  \n   1\n    \\\n     2\n    /\n   3 \n\n输出: [3,2,1]\n```\n\n\n进阶: 递归算法很简单，你可以通过迭代算法完成吗？\n\n### 5.2. 方法一：递归\n\n```java\npublic List<Integer> postorderTraversal(TreeNode root){\n    List<Integer> res = new ArrayList<>();\n    helper(root, res);\n    return res;\n}\n\nprivate void helper(TreeNode node, List<Integer> res){\n    if (node == null){return;}\n\n    helper(node.left, res);\n    helper(node.right, res);\n    res.add(node.val);\n}\n```\n\n### 5.3. 方法二：栈\n\n相比于前序、中序的栈解法，后序遍历的栈解法会难一些。\n\n原因在于，当遍历完某个根节点的左子树，回到根节点时，中序、先序可以把当前根节点从栈中弹出，然后转到右子树。举例如下：\n\n```bash\n     1\n    / \\\n   2   3\n  / \\\n 4   5\n```\n\n当遍历完 2,4,5 时，回到 1 之后就可以把 1 弹出，然后通过 1 到达右子树继续遍历。\n\n而对于后序遍历，当我们到达 1 时，并不能立即把 1 弹出，因为遍历完右子树，还需要将根节点加入到 res 中。\n\n因此，我们就需要判断是从左子树到的根节点，还是从右子树到的根节点。\n\n如果是从左子树到的根节点，此时应该转到右子树。如果从右子树到的根节点，那么就可以弹出当前节点，并存储到 res 中。\n\n当然，如果从左子树到的根节点，此时右子树为 null, 也需要把根节点弹出，并加入到 res 中。\n\n基于上述分析，我们可以写出代码：\n\n```java\npublic List<Integer> postorderTraversal(TreeNode root){\n    List<Integer> res = new ArrayList<>();\n    Deque<TreeNode> stack = new ArrayDeque<>();\n    TreeNode curr = root;\n    // 记录上一个遍历的节点\n    TreeNode pre = null;\n    while (curr != null || !stack.isEmpty()){\n        while (curr != null){\n            stack.push(curr);\n            curr = curr.left;\n        }\n        // 获取当前根节点\n        TreeNode temp = stack.peek();\n        // 是否变到右子树\n        if(temp.right != null && temp.right != pre){\n            curr = temp.right;\n        }else{\n            res.add(temp.val);\n            // 记录上一个遍历的节点\n            pre = temp;\n            stack.pop();\n        }\n    }\n    return res;\n}\n```\n\n## 6. 二叉树的层序遍历 [102]\n\n题目来源：[102. 二叉树的层序遍历](https://leetcode-cn.com/problems/binary-tree-level-order-traversal/)\n\n### 6.1. 题目描述\n\n给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。\n\n示例：\n二叉树：[3,9,20,null,null,15,7],\n\n```bash\n\t3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\n返回其层次遍历结果：\n\n```bash\n[\n  [3],\n  [9,20],\n  [15,7]\n]\n```\n\n### 6.2. 方法一：递归（DFS）\n\n由于本题对于层序遍历的结果要求为 ``List<List<Integer>>``, 要把每一层的元素放在一个单独的列表中，因此在递归时需要传入当前层数，如果是新的一层，创建一个新的 ``List`` , 存储这一层的元素。\n\n```java\nList<List<Integer>> res = new ArrayList<>();\n\npublic List<List<Integer>> levelOrder(TreeNode root) {\n    if(root == null){return res;}\n    helper(root, 0);\n    return res;\n}\n\nprivate void helper(TreeNode node, Integer level){\n    if(res.size() == level){\n        res.add(new ArrayList<>());\n    }\n    res.get(level).add(node.val);\n    if(node.left != null){\n        helper(node.left, level + 1);\n    }\n    if(node.right != null){\n        helper(node.right, level + 1);\n    }\n}\n```\n\n### 6.3. 方法二：队列（BFS）\n\n依旧是本题对于返回结果的要求，每一层需要单独处理。\n\n```java\npublic List<List<Integer>> levelOrder(TreeNode root) {\n    List<List<Integer>> res = new ArrayList<>();\n    if (root == null) {\n        return res;\n    }\n    Queue<TreeNode> queue = new LinkedList<>();\n    queue.add(root);\n    while(!queue.isEmpty()){\n        // 当前层列表\n        List<Integer> level = new ArrayList<>();\n\n        // 当前队列中的元素个数，即就是当前层的节点数\n        int levelNum = queue.size();\n        // levelNum 必须在外面定义，因为 queue 的大小在不停的变化\n        for(int i = 0; i < levelNum; i++){\n            // 移除队列第一个元素\n            TreeNode node = queue.remove();\n            level.add(node.val);\n            if(node.left != null){queue.add(node.left);}\n            if(node.right != null){queue.add(node.right);}\n        }\n        res.add(level);\n    }\n    return res;\n}\n```\n\n## 7. 二叉树的层次遍历 II [107]\n\n题目来源：[107. 二叉树的层次遍历 II](https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/)\n\n### 7.1. 题目描述\n\n给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）\n\n例如：\n给定二叉树 [3,9,20,null,null,15,7],\n\n```bash\n\t3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n\n返回其自底向上的层次遍历为：\n\n```bash\n[\n  [15,7],\n  [9,20],\n  [3]\n]\n```\n\n### 7.2. 方法一：递归\n\n本题的结果是上一题结果的反序，只需要在上一题添加列表时，在表头插入，以此得到反序序列即可。如下代码，改变三处：\n\n```java\n// 使用链表存储，在表头插入效率更高\nLinkedList<List<Integer>> res = new LinkedList<>();\n\npublic List<List<Integer>> levelOrderBottom(TreeNode root) {\n    if(root == null){return res;}\n    helper(root, 0);\n    return res;\n}\n\nprivate void helper(TreeNode node, Integer level){\n    if(res.size() == level){\n        // 在链表表头插入，得到反序序列\n        res.addFirst(new ArrayList<>());\n    }\n    // 插入当前值，注意下标\n    res.get(res.size() - level - 1).add(node.val);\n\n    if(node.left != null){\n        helper(node.left, level + 1);\n    }\n    if(node.right != null){\n        helper(node.right, level + 1);\n    }\n}\n```\n\n### 7.3. 方法二：队列\n\n与上一题区别：使用链表存储，插入时从表头插入，得到反序序列。\n\n```java\npublic List<List<Integer>> levelOrderBottom(TreeNode root) {\n    // 使用链表，在表头插入效率更高\n    LinkedList<List<Integer>> res = new LinkedList<>();\n    if (root == null) {\n        return res;\n    }\n    Queue<TreeNode> queue = new LinkedList<>();\n    queue.add(root);\n    while(!queue.isEmpty()){\n        List<Integer> level = new ArrayList<>();\n        int levelNum = queue.size();\n        for(int i = 0; i < levelNum; i++){\n            TreeNode node = queue.remove();\n            level.add(node.val);\n            if(node.left != null){queue.add(node.left);}\n            if(node.right != null){queue.add(node.right);}\n        }\n        // 在表头插入，得到反序结果\n        res.addFirst(level);\n    }\n    return res;\n}\n```\n\n## 8. 二叉树的最大深度 [104]\n\n题目来源：[104. 二叉树的最大深度](https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/)\n\n### 8.1.. 题目描述\n\n给定一个二叉树，找出其最大深度。\n\n二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。\n\n说明: 叶子节点是指没有子节点的节点。\n\n示例：\n给定二叉树 [3,9,20,null,null,15,7]，\n\n    \t3\n       / \\\n      9  20\n        /  \\\n       15   7\n\n返回它的最大深度 3 。\n\n### 8.2. 方法一：递归（DFS）\n\n```java\npublic int maxDepth(TreeNode root) {\n    if(root == null){return 0;}\n    return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;\n}\n```\n\n### 8.3. 方法二：层次遍历（BFS）\n\n```java\npublic int maxDepth(TreeNode root) {\n    if(root == null){return 0;}\n    LinkedList<TreeNode> queue = new LinkedList<>();\n    queue.add(root);\n    int level = 0;\n    while (!queue.isEmpty()){\n        level++;\n        int size = queue.size();\n        for(int i = 0; i < size; i++){\n            TreeNode node = queue.remove();\n            if(node.left != null){queue.add(node.left);}\n            if(node.right != null){ queue.add(node.right);}\n        }\n    }\n    return level;\n}\n```\n\n## 9. 相同的树 [100]\n\n题目来源：[100. 相同的树](https://leetcode-cn.com/problems/same-tree/)\n\n### 9.1. 题目描述\n\n给定两个二叉树，编写一个函数来检验它们是否相同。\n\n如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。\n\n示例 1:\n\n```bash\n输入:       1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\n输出: true\n```\n\n示例 2:\n\n```bash\n输入:      1          1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\n输出: false\n```\n\n\n示例 3:\n\n```bash\n输入:       1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\n输出: false\n```\n\n### 9.2. 代码\n\n思路：对两颗树同时进行遍历比较，这里使用的是中序遍历。\n\n```java\npublic boolean isSameTree(TreeNode p, TreeNode q){\n    if(p == null && q == null){\n        return true;\n    }\n    if(p != null && q != null && p.val == q.val){\n        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\n    }\n    return false;\n}\n```\n\n## 10. 对称二叉树 [101]\n\n题目来源：[101. 对称二叉树](https://leetcode-cn.com/problems/symmetric-tree/)\n\n### 10.1. 题目描述\n\n给定一个二叉树，检查它是否是镜像对称的。\n\n例如，二叉树 [1,2,2,3,4,4,3] 是对称的。\n\n    \t1\n       / \\\n      2   2\n     / \\ / \\\n    3  4 4  3\n\n但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:\n\n    \t1\n       / \\\n      2   2\n       \\   \\\n       3    3\n\n进阶：\n\n你可以运用递归和迭代两种方法解决这个问题吗？\n\n### 10.2. 方法一：递归\n\n不是简单的比较左右就行，注意这道题是镜像对称的。这里的递归是基于先序遍历的，先看根节点，再判断左右节点，再判断左右节点的子节点是否为镜像对称。\n\n其实就是类似于 DFS 的先序遍历。不同之处是对于 left 子树是正常的先序遍历 根节点 -> 左子树 -> 右子树 的顺序，对于 right 子树的话是 根节点 -> 右子树 -> 左子树 的顺序。\n\n```java\npublic boolean isSymmetric(TreeNode root){\n    if(root == null){return true;}\n    return isMirror(root.left, root.right);\n}\n\npublic boolean isMirror(TreeNode p, TreeNode q){\n    if(p == null && q == null){return true;}\n    if(p == null || q == null){return false;}\n    if(p.val == q.val){\n        return isMirror(p.left, q.right) && isMirror(p.right, q.left);\n    }\n    return false;\n}\n```\n\n### 10.3. 方法二：迭代（栈）\n\n参考：[这里](https://leetcode.wang/leetcode-101-Symmetric-Tree.html#解法二-dfs-栈).\n\n把方法一的先序遍历，使用栈将递归改为迭代。使用两个栈分别存储左右字数的序列，出栈时比较。\n\n```java\npublic boolean isSymmetric(TreeNode root){\n    if(root == null){return true;}\n    Deque<TreeNode> leftStack = new ArrayDeque<>();\n    Deque<TreeNode> rightStack = new ArrayDeque<>();\n    TreeNode leftCur = root.left;\n    TreeNode rightCur = root.right;\n    while (leftCur != null || rightCur != null || !leftStack.isEmpty() || !rightStack.isEmpty()){\n        while (leftCur != null){\n            leftStack.push(leftCur);\n            // 考虑左子树\n            leftCur = leftCur.left;\n        }\n        while (rightCur != null){\n            rightStack.push(rightCur);\n            // 考虑右子树\n            rightCur = rightCur.right;\n        }\n        // 长度不同，就返回\n        if(leftStack.size() != rightStack.size()){\n            return false;\n        }\n        // 出栈\n        leftCur = leftStack.poll();\n        rightCur = rightStack.poll();\n        if(leftCur.val != rightCur.val){\n            return false;\n        }\n        // 考虑右子树\n        leftCur = leftCur.right;\n        // 考虑左子树\n        rightCur = rightCur.left;\n    }\n    return true;\n}\n```\n\n## 11. 二叉树的锯齿形层次遍历 [103]\n\n题目来源：[103. 二叉树的锯齿形层次遍历](https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/)\n\n### 11.1. 题目描述\n\n![image-20200819111819257](/pictures/image-20200819111819257.png)\n\n### 11.2. 代码\n\n在 [102] 题的基础上，改变在当前层中加入元素的顺序即可完成。\n\n```java\npublic List<List<Integer>> zigzagLevelOrder(TreeNode root) {\n    List<List<Integer>> res = new ArrayList<>();\n    if (root == null) {\n        return res;\n    }\n    Deque<TreeNode> queue = new LinkedList<>();\n    queue.add(root);\n    int depth = 0;\n    while(!queue.isEmpty()){\n        // 当前层列表\n        List<Integer> level = new ArrayList<>();\n        int levelNum = queue.size();\n        for(int i = 0; i < levelNum; i++){\n            TreeNode node = queue.remove();\n            // 在当前层列表中加入元素（只需要改变这里）\n            if(depth % 2 == 0){\n                level.add(node.val);\n            }else{\n                level.add(0, node.val);\n            }\n            if(node.left != null){queue.add(node.left);}\n            if(node.right != null){queue.add(node.right);}\n        }\n        res.add(level);\n        depth++;\n    }\n    return res;\n}\n```\n\n通过本题加深了对层次遍历迭代解法的理解，代码中通过队列进行层次遍历，即整个遍历的顺序都是在队列的帮助下实现的，其中的 res、level 等都是为了输出结果的形式而定义的。本题依旧是层次遍历，只是在添加结果时，不同的层添加结果的顺序不同。\n\n## 12. 从前序与中序遍历序列构造二叉树 [105]\n\n题目来源：[105. 从前序与中序遍历序列构造二叉树](https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/)\n\n### 12.1. 题目描述\n\n![image-20200821111825878](/pictures/image-20200821111825878.png)\n\n### 12.2. 方法一：递归\n\n```java\npublic TreeNode buildTree(int[] preorder, int[] inorder) {\n    return helper(preorder, 0, preorder.length - 1, inorder, 0, inorder.length - 1);\n}\n\nprivate TreeNode helper(int[] preorder, int pStart, int pEnd, int[] inorder, int iStart, int iEnd) {\n    // pStart 表示先序的第一位索引\n    // pEnd 表示先序的最后一位索引\n    // 如果输入的前序序列为空，返回 null\n    if(pEnd < pStart){return null;}\n\n    int root = preorder[pStart];\n    TreeNode node = new TreeNode(root);\n\n    // 在中序遍历中找root，即分隔点\n    int point = iStart;\n    for(; point <= iEnd; point++){\n        if(inorder[point] == root){\n            break;\n        }\n    }\n    // 左子树长度\n    int leftLen = point - iStart;\n\n    node.left = helper(preorder, pStart + 1, pStart + leftLen, inorder, iStart, point - 1);\n    node.right = helper(preorder, pStart + leftLen + 1, pEnd, inorder, point + 1, iEnd);\n\n    return node;\n}\n```\n\n复杂度分析：\n\n- 时间复杂度：O(N^2)，这里 N 是二叉树的结点个数，每调用一次递归方法创建一个结点，一共创建 N 个结点，在中序遍历中找到根结点在中序遍历中的位置，是与 N 相关的，这里不计算递归方法占用的时间。\n- 空间复杂度：O(1)，这里不计算递归方法占用的空间。\n\n### 12.3. 方法二：使用 HashMap 对递归进行优化\n\n参考 [这里](https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/qian-xu-bian-li-python-dai-ma-java-dai-ma-by-liwei/).\n\n上一方法中每执行一次 helper 都要在中序中寻找根节点，这里使用 HashMap 存储中序序列的索引与节点值，找根节点只需要 O(1)。\n\n```java\npublic TreeNode buildTree(int[] preorder, int[] inorder) {\n    HashMap<Integer, Integer> map = new HashMap<>();\n    for(int i = 0; i < inorder.length; i++){\n        map.put(inorder[i], i);\n    }\n    return helper2(preorder, 0, preorder.length - 1, inorder, 0, inorder.length - 1, map);\n}\n\nprivate TreeNode helper2(int[] preorder, int pStart, int pEnd, int[] inorder, int iStart, int iEnd, HashMap<Integer, Integer> map) {\n    if(pEnd < pStart){return null;}\n\n    int root = preorder[pStart];\n    TreeNode node = new TreeNode(root);\n\n    // 使用map找分隔点\n    int point = map.get(root);\n\n    int leftLen = point - iStart;\n\n    node.left = helper2(preorder, pStart + 1, pStart + leftLen, inorder, iStart, point - 1, map);\n    node.right = helper2(preorder, pStart + leftLen + 1, pEnd, inorder, point + 1, iEnd, map);\n\n    return node;\n}\n```\n\n- 时间复杂度：O(N)，这里 N 是二叉树的结点个数，每调用一次递归方法创建一个结点，一共创建 N 个结点，这里不计算递归方法占用的时间。\n- 空间复杂度：O(N)，这里忽略递归方法占用的空间，因为是对数级别的，比 N 小。\n\n## 13. 验证二叉搜索树 [98]\n\n题目来源：[98. 验证二叉搜索树](https://leetcode-cn.com/problems/validate-binary-search-tree/)\n\n### 13.1. 题目描述\n\n![image-20200831101224071](/pictures/image-20200831101224071.png)\n\n### 13.1. 方法一：递归\n\n可以很简单的用递归写出来。想法是，左子树是合法二分查找树，右子树是合法二分查找树，并且根节点大于左孩子，小于右孩子，那么当前树就是合法二分查找树。\n\n注意：判断是否是二叉搜索树，不能只是简单的判断根节点和左右节点的大小关系。而是需要判断左子树和右子树上的所有节点都满足大小关系，并且左子树和右子树也都是二分查找树。\n\n```java\npublic boolean isValidBST(TreeNode root) {\n    // 递归终止条件\n    if (root == null || (root.right == null && root.left == null)) {\n        return true;\n    }\n\n    // 判断左子树 和 左子树与根节点的关系\n    if (isValidBST(root.left)) {\n        if (root.left != null) {\n            // 获取左子树的最大值\n            int maxLeft = getMaxOfBST(root.left);\n            if (root.val <= maxLeft) {\n                return false;\n            }\n        }\n    } else {\n        return false;\n    }\n\n    // 判断右子树 和 右子树与根节点的关系\n    if (isValidBST(root.right)) {\n        if (root.right != null) {\n            // 获取右子树最小值\n            int minRight = getMinOfBST(root.right);\n            if (root.val >= minRight) {\n                return false;\n            }\n        }\n    } else {\n        return false;\n    }\n\n    return true;\n}\n\n/**\n     * 获取搜索二叉树的最大值\n     *\n     * @param root\n     * @return\n     */\nprivate int getMaxOfBST(TreeNode root) {\n    int max = root.val;\n    while (root.right != null) {\n        max = root.right.val;\n        root = root.right;\n    }\n    return max;\n}\n\n/**\n     * 获取搜索二叉树最小值\n     *\n     * @param root\n     * @return\n     */\nprivate int getMinOfBST(TreeNode root) {\n    int min = root.val;\n    while (root.left != null) {\n        min = root.left.val;\n        root = root.left;\n    }\n    return min;\n}\n```\n\n### 13.3. 方法二：另一种递归（推荐）\n\n参考 [这里](https://leetcode.wang/leetCode-98-Validate-Binary-Search-Tree.html) 的解法二，把代码写的简洁了一些。这种递归代码更为简洁，推荐。\n\n解法一中，我们是判断根节点是否合法，找到了左子树中最大的数，右子树中最小的数。 由左子树和右子树决定当前根节点是否合法。\n\n但如果正常的来讲，明明先有的根节点，按理说根节点是任何数都行，而不是由左子树和右子树限定。相反，根节点反而决定了左孩子和右孩子的合法取值范围。\n\n所以，我们可以从根节点进行 DFS，然后计算每个节点应该的取值范围，如果当前节点不符合就返回 false。\n\n也就是说，本题使用先序遍历，判断根节点是否在范围之内，这个范围根据上一层根节点来限制。\n\n```java\npublic boolean isValidBST(TreeNode root) {\n    // 节点值均为 Int 型，故最大值设为 long\n    long max = (long) Integer.MAX_VALUE + 1;\n    long min = (long) Integer.MIN_VALUE - 1;\n    return getAns(root, max, min);\n}\n\nprivate boolean getAns(TreeNode root, long max, long min) {\n    if(root == null){\n        return true;\n    }\n\t// 判断根节点是否在限定范围内\n    if(root.val <= min || root.val >= max){\n        return false;\n    }\n\t// 判断左右子树，同时更新左右子树的限定范围\n    return getAns(root.left, min, root.val) && getAns(root.right, root.val, max);\n}\n```\n\n### 13.4. 方法三：迭代（中序遍历的栈解法）\n\n这种解法基于：二叉搜索树中序遍历后，会得到有序序列。\n\n```java\npublic boolean isValidBTS(TreeNode root) {\n    Stack<TreeNode> stack = new Stack<>();\n    TreeNode curr = root;\n    TreeNode pre = null;\n    while (curr != null || !stack.isEmpty()) {\n        while (curr != null) {\n            stack.push(curr);\n            curr = curr.left;\n        }\n        // 出栈（这里出栈的值会添加到中序序列后）\n        curr = stack.pop();\n        if (pre != null && pre.val >= curr.val) {\n            return false;\n        }\n        pre = curr;\n        curr = curr.right;\n    }\n    return true;\n}\n```\n\n## 14. 恢复二叉搜索树 [99]\n\n题目来源：[99. 恢复二叉搜索树](https://leetcode-cn.com/problems/recover-binary-search-tree/)\n\n### 14.1. 题目描述\n\n![image-20200831105056785](/pictures/image-20200831105056785.png)\n\n### 14.2. 方法一：迭代（栈的中序遍历）\n\n参考 [这里](https://leetcode.wang/leetcode-99-Recover-Binary-Search-Tree.html) 的解法二，代码稍微做了一些简化。\n\n对上一题 [98] 的第三种解法进行修改实现本题。\n\n我们判断是否是一个合法的二分查找树是使用到了中序遍历。原因就是二分查找树的一个性质，左孩子小于根节点，根节点小于右孩子。所以做一次中序遍历，产生的序列就是从小到大排列的有序序列。\n\n回到这道题，题目交换了两个数字，其实就是在有序序列中交换了两个数字。而我们只需要把它还原。\n\n交换的位置的话就是两种情况。\n\n- 相邻的两个数字交换\n\n  [ 1 2 3 4 5 ] 中 2 和 3 进行交换，[ 1 3 2 4 5 ]，这样的话只产生 **一组** 逆序的数字（正常情况是从小到大排序，交换后产生了从大到小），3 2。\n\n  我们只需要遍历数组，找到后，把这一组的两个数字进行交换即可。\n\n- 不相邻的两个数字交换\n\n  [ 1 2 3 4 5 ] 中 2 和 5 进行交换，[ 1 5 3 4 2 ]，这样的话其实就是产生了 **两组** 逆序的数字对。5 3 和 4 2。\n\n  所以我们只需要遍历数组，然后找到这两组逆序对，然后把第一组前一个数字和第二组后一个数字进行交换即完成了还原。\n\n所以在中序遍历中，只需要利用一个 pre 节点和当前节点比较，如果 pre 节点的值大于当前节点的值，那么就是我们要找的逆序的数字。分别用两个指针 first 和 second 保存即可。如果找到第二组逆序的数字，我们就把 second 更新为当前节点。最后把 first 和 second 两个的 **数字** 交换即可。\n\n注意：本题逆序出现的两种情况和节点的交换。\n\n```java\npublic void recoverTree(TreeNode root) {\n    TreeNode cur = root;\n    TreeNode pre = null, first = null, second = null;\n    Deque<TreeNode> stack = new ArrayDeque<>();\n    while (cur != null || !stack.isEmpty()) {\n        while (cur != null) {\n            stack.push(cur);\n            cur = cur.left;\n        }\n        cur = stack.pop();\n        if (pre != null && pre.val >= cur.val) {\n            // 第一次遇到逆序对\n            if (first == null) {\n                // 如果相邻的数字交换，只会出现一次逆序，因此这里 second 也要赋值\n                first = pre;\n                second = cur;\n                // 第二次遇到逆序对\n            } else {\n                second = cur;\n            }\n        }\n        pre = cur;\n        cur = cur.right;\n    }\n\n    // 交换\n    int tmp = first.val;\n    first.val = second.val;\n    second.val = tmp;\n}\n```\n\n## 15. 将有序数组转换为二叉搜索树 [108]\n\n题目来源：[108. 将有序数组转换为二叉搜索树](https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/)\n\n### 15.1. 题目描述\n\n![image-20200901091510832](/pictures/image-20200901091510832.png)\n\n### 15.2. 递归\n\n题目要求平衡二叉树，那么根节点就是数组的中点。找到了数组的中点，作为根节点，进入递归即可。\n\n```java\npublic TreeNode sortedArrayToBST(int[] nums) {\n    return helper(nums, 0, nums.length - 1);\n\n}\n\nprivate TreeNode helper(int[] nums, int start, int end){\n    if(start > end){\n        return null;\n    }\n    int len = end - start + 1;\n    int mid = start + len / 2;\n    TreeNode root = new TreeNode(nums[mid]);\n    root.left = helper(nums, start , mid - 1);\n    root.right = helper(nums, mid + 1, end);\n    return root;\n}\n```\n\n## 16.  有序链表转换二叉搜索树 [109]\n\n题目来源：[109. 有序链表转换二叉搜索树](https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/)\n\n### 16.1. 题目描述\n\n![image-20200902100344960](/pictures/image-20200902100344960.png)\n\n### 16.2. 方法一：将链表转为 ArrayList\n\n本题就是把上一题 [108] 的数组换成了链表，如果使用上一题的思路，链表不支持随机访问，找中点时时间复杂度很高。所以，我们可以把链表先转为 ArrayList，再使用上一题的思路。代码如下：\n\n```java\npublic TreeNode sortedListToBST(ListNode head) {\n    List<Integer> list = new ArrayList<>();\n    while (head != null) {\n        list.add(head.val);\n        head = head.next;\n    }\n    return helper(list, 0, list.size());\n}\n\nprivate TreeNode helper(List<Integer> list, int start, int end) {\n    if (start == end) {\n        return null;\n    }\n    int mid = start + (end - start) / 2;\n    TreeNode root = new TreeNode(list.get(mid));\n    root.left = helper(list, start, mid);\n    root.right = helper(list, mid + 1, end);\n    return root;\n}\n```\n\n时复：O(n)\n\n空复：O(n)\n\n### 16.3. 方法二：中序遍历思路\n\n参考 [这里](https://leetcode.wang/leetcode-109-Convert-Sorted-List-to-Binary-Search-Tree.html)。\n\n我们知道升序数组其实就是二叉搜索树的中序遍历。那么，我们可以按照这个顺序去为每个节点赋值。\n\n如何实现呢？套用中序遍历的递归过程，将 start 和 end 作为递归参数，当 start ==  end 时，返回 null。\n\n我们先看一下中序遍历的递归算法：\n\n```java\npublic List<Integer> inorderTraversal(TreeNode root){\n    List<Integer> res = new ArrayList<>();\n    helper(root, res);\n    return res;\n}\n\nprivate void helper(TreeNode node, List<Integer> res){\n    if (node == null){return;}\n\n    helper(node.left, res);\n    res.add(node.val);\n    helper(node.right, res);\n}\n```\n\n中序遍历中是将 node.val 进行保存，本题我们是给当前节点进行赋值，为了依次赋值，我们需要一个 cur 指针指向所给定的数列，每赋一个值就后移一位：\n\n```java\nListNode cur = null;\n\npublic TreeNode sortedListToBST2(ListNode head) {\n    cur = head;\n    int end = 0;\n    while (head != null) {\n        end++;\n        head = head.next;\n    }\n    return helper2(0, end);\n}\n\nprivate TreeNode helper2(int start, int end) {\n    if(start == end){\n        return null;\n    }\n    int mid = start + (end - start) / 2;\n    // 遍历左子树并且将根节点返回\n    TreeNode left = helper2(start, mid);\n    // 遍历当前节点\n    TreeNode root = new TreeNode(cur.val);\n    root.left = left;\n    // 指针后移，进行下一次赋值\n    cur = cur.next;\n    // 遍历右子树并将根节点返回\n    TreeNode right = helper2(mid + 1, end);\n    root.right = right;\n    return root;\n}\n```\n\n时复：O(n)\n\n空复：O(log(n))，递归压栈消耗。\n\n## 17. 平衡二叉树 [110]\n\n题目来源：[110. 平衡二叉树](https://leetcode-cn.com/problems/balanced-binary-tree/)\n\n### 17.1. 题目描述\n\n![image-20200901093602332](/pictures/image-20200901093602332.png)\n\n### 17.2. 方法一：递归\n\n参考 [这里](https://leetcode.wang/leetcode-110-Balanced-Binary-Tree.html).\n\n参考平衡二叉树的定义：\n\n> 它是一颗空树或它的左右子树的高度差绝对值不超过1，并且左右子树均为平衡二叉树。\n\n直接按照定义来递归求解。\n\n```java\npublic boolean isBalanced(TreeNode root) {\n    if(root == null){return true;}\n    int left = getHeight(root.left);\n    int right = getHeight(root.right);\n    if(Math.abs(left - right) > 1){\n        return false;\n    }\n    return isBalanced(root.left) && isBalanced(root.right);\n}\n\nprivate int getHeight(TreeNode root){\n    if(root == null){\n        return 0;\n    }\n    return Math.max(getHeight(root.left), getHeight(root.right)) + 1;\n}\n```\n\n时复：O(n^2)，n 为二叉树节点个数。isBalanced 需要遍历二叉树中的所有节点，时复为 O(n)，求高度 getHeight，一般情况下为 O(log n)，对于最坏情况，二叉树形成链式结构，需要 O(n)，此时时间复杂度为 O(n^2)。\n\n空复：O(n)，空间复杂度主要取决于递归调用的层数，递归调用不会超过 n。\n\n### 17.3. 方法二：递归的优化\n\n参考 [这里](https://leetcode.wang/leetcode-110-Balanced-Binary-Tree.html) 的解法二。\n\n在方法一中，可以发现，子树的高度重复算了很多次。在求左子树高度时，使用递归求解它的左右子树高度；在判断左子树是否为平衡二叉树时，又使用递归求解了它的左右子树高度。\n\n方法一的另一个问题是：在 getHeight 方法中，求得左右子树高度时，就可以判断当前是否是平衡二叉树了。\n\n综上，只需要求一次高度，并且在求左右子树高度时，就可以判断当前是否是平衡二叉树。\n\n考虑到 `getTreeDepth` 函数返回的是`int`值，同时高度不可能为负数，那么如果求高度过程中我们发现了当前不是平衡二叉树，就返回`-1`。\n\n```java\npublic boolean isBalanced(TreeNode root) {\n    return getHeight2(root) != -1;\n}\n\nprivate int getHeight2(TreeNode root){\n    if(root == null){\n        return 0;\n    }\n    int left = getHeight2(root.left);\n    if(left == -1){\n        return -1;\n    }\n    int right = getHeight2(root.right);\n    if(right == -1){\n        return -1;\n    }\n    if(Math.abs(left - right) > 1){\n        return -1;\n    }\n    return Math.max(left, right) + 1;\n}\n```\n\n时复：O(n)，其中 n 是二叉树中的节点个数。使用自底向上的递归，每个节点的计算高度和判断是否平衡都只需要处理一次，最坏情况下需要遍历二叉树中的所有节点，因此时间复杂度是 O(n) 。\n\n空间复杂度：O(n)，其中 n*n* 是二叉树中的节点个数。空间复杂度主要取决于递归调用的层数，递归调用的层数不会超过 n。\n\n## 18. 从中序与后序遍历序列构造二叉树 [106]\n\n题目来源：[106. 从中序与后序遍历序列构造二叉树](https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/)\n\n### 18.1. 题目描述\n\n![image-20200902104235073](/pictures/image-20200902104235073.png)\n\n### 18.2. 代码\n\n递归，注意使用 map 优化。\n\n```java\npublic TreeNode buildTree(int[] inorder, int[] postorder) {\n    int len = inorder.length;\n    if(len == 0){return null;}\n    Map<Integer, Integer> map = new HashMap<>();\n    for(int i = 0; i < len; i++){\n        map.put(inorder[i], i);\n    }\n    return helper(inorder, 0, len, postorder, 0, len, map);\n}\n\nprivate TreeNode helper(int[] inorder, int iStart, int iEnd, int[] postorder, int pStart, int pEnd, Map<Integer, Integer> map) {\n    if(iStart == iEnd){return null;}\n    TreeNode root = new TreeNode(postorder[pEnd - 1]);\n\n    int rootIndex = map.get(postorder[pEnd - 1]);\n\n    int leftLen = rootIndex - iStart;\n    root.left = helper(inorder, iStart, rootIndex , postorder, pStart, pStart + leftLen, map);\n    root.right = helper(inorder, rootIndex + 1, iEnd, postorder, pStart + leftLen, pEnd - 1, map);\n    return root;\n}\n```\n\n## 19. 二叉树展开为链表 [114]\n\n题目来源：[114. 二叉树展开为链表](https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/)\n\n### 19.1. 题目描述\n\n![image-20200903095901434](/pictures/image-20200903095901434.png)\n\n### 19.2. 代码\n\n参考 [这里](https://leetcode.wang/leetcode-114-Flatten-Binary-Tree-to-Linked-List.html) 的解法一。\n\n这道题难点在于：解法一的思路想不到...\n\n```java\npublic void flatten(TreeNode root) {\n    while (root != null){\n        if(root.left == null){\n            root = root.right;\n        }else{\n            // 找左子树最右边节点\n            TreeNode pre = root.left;\n            while (pre.right != null){\n                pre = pre.right;\n            }\n            // 将原来的右子树接到左子树的最右边\n            pre.right = root.right;\n            // 将左子树茶润到右子树的地方\n            root.right = root.left;\n            root.left = null;\n            // 考虑下一个节点\n            root = root.right;\n        }\n    }\n}\n```\n\n## 20. 填充每个节点的下一个右侧节点指针 [116]\n\n题目来源：[116. 填充每个节点的下一个右侧节点指针](https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/)\n\n### 20.1. 题目描述\n\n![image-20200907095746263](/pictures/image-20200907095746263.png)\n\n![image-20200907095838051](/pictures/image-20200907095838051.png)\n\n### 20.2. 解法一：层次遍历\n\n参考 [这里](https://leetcode.wang/leetcode-116-Populating-Next-Right-Pointers-in-Each-Node.html).\n\n但是这种解法不符合空间复杂度的要求，层次遍历需要 O(n) 空复。\n\n```java\npublic Node connect(Node root) {\n    if (root == null) {\n        return root;\n    }\n\n    Queue<Node> queue = new LinkedList<>();\n    // 在尾部添加元素\n    queue.add(root);\n\n    while (!queue.isEmpty()) {\n        int size = queue.size();\n        Node pre = null;\n        for (int i = 0; i < size; i++) {\n            // 移除队列第一个元素\n            Node cur = queue.poll();\n            if (i > 0) {\n                pre.next = cur;\n            }\n            pre = cur;\n            if (cur.left != null) {\n                queue.add(cur.left);\n            }\n            if (cur.right != null) {\n                queue.add(cur.right);\n            }\n        }\n    }\n    return root;\n}\n```\n\n### 20.3. 解法二：迭代\n\n参考 [这里](https://leetcode.wang/leetcode-116-Populating-Next-Right-Pointers-in-Each-Node.html).\n\n基本思路：因为只能使用常数级别的空复，所以在遍历当前层时，就把下一层的 next 指针指好。定义三个节点，cur 当前访问节点，pre 当前节点的左侧节点，start 当前层的开始节点。\n\n```java\npublic Node connect(Node root) {\n    if (root == null) {\n        return root;\n    }\n    Node pre = root;\n    Node cur = null;\n    Node start = pre;\n    while (pre.left != null) {\n        // 遍历到了最右边节点，要将 pre 和 cur 更新到下一层，并且记录 start\n        if (cur == null) {\n            // 只需要把 pre 的左孩子的 next 指向右孩子（即更新下一层第一个节点的next）\n            pre.left.next = pre.right;\n\n            pre = start.left;\n            cur = start.right;\n            start = pre;\n            // 将下一层的 next 连起来，同时 pre next 后移\n        } else {\n            // 把 pre 的左孩子的 next 指向右孩子\n            pre.left.next = pre.right;\n            // 把 pre 的右孩子的 next 指向 cur 的左孩子\n            pre.right.next = cur.left;\n\n            pre = pre.next;\n            cur = cur.next;\n        }\n    }\n    return root;\n}\n```\n\n### 20.4. 解法三：（推荐）\n\n参考 [这里](https://leetcode.wang/leetcode-117-Populating-Next-Right-Pointers-in-Each-NodeII.html) ，这是 [117] 题的解法，同样适用于本题，而且好理解。\n\n基本思路：利用层次遍历的思路，同时使用上一层已经存好的 next 指针，在依次访问当前层元素时，把下一层的 next 指针指好。每一层的开始节点利用 dummy 节点，即 dummy 节点的 next 指针指向每一层的开始节点。\n\n```java\npublic Node connect(Node root) {\n    Node cur = root;\n    while (cur != null){\n        Node dummy = new Node();\n        Node tail = dummy;\n        // 遍历当前层\n        while (cur != null){\n            if(cur.left != null){\n                tail.next = cur.left;\n                tail = tail.next;\n            }\n            if(cur.right != null){\n                tail.next = cur.right;\n                tail = tail.next;\n            }\n            cur = cur.next;\n        }\n        // 更新到下一层\n        cur = dummy.next;\n    }\n    return root;\n}\n```\n\n## 21. 填充每个节点的下一个右侧节点指针 II [117]\n\n题目来源：[117. 填充每个节点的下一个右侧节点指针 II](https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node-ii/)\n\n### 21.1. 题目描述\n\n![image-20200908091720713](../pictures/image-20200908091720713.png)\n\n### 21.2. 方法一：层次遍历\n\n同上一题的层次遍历。依旧是空复不符合要求。\n\n```java\npublic Node connect(Node root) {\n    if (root == null) {\n        return root;\n    }\n\n    Queue<Node> queue = new LinkedList<>();\n    // 在尾部添加元素\n    queue.add(root);\n\n    while (!queue.isEmpty()) {\n        int size = queue.size();\n        Node pre = null;\n        for (int i = 0; i < size; i++) {\n            // 移除队列第一个元素\n            Node cur = queue.poll();\n            if (i > 0) {\n                pre.next = cur;\n            }\n            pre = cur;\n            if (cur.left != null) {\n                queue.add(cur.left);\n            }\n            if (cur.right != null) {\n                queue.add(cur.right);\n            }\n        }\n    }\n    return root;\n}\n```\n\n### 21.3. 方法二\n\n参考 [这里](https://leetcode.wang/leetcode-117-Populating-Next-Right-Pointers-in-Each-NodeII.html) 的解法三。\n\n利用层次遍历的思路，同时使用上一层已经存好的 next 指针，在依次访问当前层元素时，把下一层的 next 指针指好。\n\n每一层的开始节点使用 dummy 节点，dummy 节点的 next 指针指向每一层的开始节点。\n\n这种解法同样适用于上一题 [116]。\n\n```java\npublic Node connect2(Node root) {\n    Node cur = root;\n    while (cur != null){\n        Node dummy = new Node();\n        Node tail = dummy;\n        // 遍历当前层\n        while (cur != null){\n            if(cur.left != null){\n                tail.next = cur.left;\n                tail = tail.next;\n            }\n            if(cur.right != null){\n                tail.next = cur.right;\n                tail = tail.next;\n            }\n            cur = cur.next;\n        }\n        // 更新到下一层\n        cur = dummy.next;\n    }\n    return root;\n}\n```\n\n## 22. 二叉树中的最大路径和 [124]\n\n题目来源：[124. 二叉树中的最大路径和](https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/)\n\n### 22.1. 题目描述\n\n![image-20200915154342061](../pictures/image-20200915154342061.png)\n\n### 22.2. 代码\n\n参考 [这里](https://leetcode.wang/leetcode-124-Binary-Tree-Maximum-Path-Sum.html) ，难点在于根本想不到..\n\n```java\nint max = Integer.MIN_VALUE;\n\npublic int maxPathSum(TreeNode root) {\n    helper(root);\n    return max;\n}\n\nprivate int helper(TreeNode root) {\n    if(root == null){return 0;}\n    int left = Math.max(helper(root.left), 0);\n    int right = Math.max(helper(root.right), 0);\n\n    // 求的过程中考虑包含当前根节点的最大路径\n    max = Math.max(max, root.val + left + right);\n\n    // 只返回包含当前根节点和左子树或者右子树的路径\n    return root.val + Math.max(left, right);\n}\n```\n\n## 23. 参考引用\n\n1. [Wikipedia](https://zh.wikipedia.org/wiki/二叉树)\n2. https://leetcode.wang/leetCode-94-Binary-Tree-Inorder-Traversal.html\n3. https://leetcode.wang/leetcode-102-Binary-Tree-Level-Order-Traversal.html\n4. https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/qian-xu-bian-li-python-dai-ma-java-dai-ma-by-liwei/\n5. https://leetcode.wang/leetcode-99-Recover-Binary-Search-Tree.html\n6. https://leetcode.wang/leetcode-117-Populating-Next-Right-Pointers-in-Each-NodeII.html","slug":"二叉树总结","published":1,"updated":"2020-12-26T12:26:49.154Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5mkx7001rnyl13w204g41","content":"<p>本文介绍了什么是二叉树，同时解决了部分LeetCode上二叉树相关的题目，这部分会持续更新。</p>\n<h2 id=\"1-什么是二叉树？\"><a href=\"#1-什么是二叉树？\" class=\"headerlink\" title=\"1. 什么是二叉树？\"></a>1. 什么是二叉树？</h2><p><a href=\"https://zh.wikipedia.org/wiki/二叉树\" target=\"_blank\" rel=\"noopener\">维基定义</a>：在计算机科学中，二叉树（英语：Binary tree）是每个节点最多只有两个分支（即不存在分支度大于2的节点）的树结构。通常分支被称作“左子树”或“右子树”。二叉树的分支具有左右次序，不能随意颠倒。</p>\n<p>二叉树的第 <code>i</code> 层至多拥有 2<sup>i-1</sup> 个节点；深度为 k 的二叉树至多总共有 2<sup>k</sup>-1 个节点（定义根节点所在深度 k<sub>0</sub>=0}），而总计拥有节点数符合的，称为 <strong>满二叉树</strong>；深度为 k 有 n 个节点的二叉树，当且仅当其中的每一节点，都可以和同样深度 k 的满二叉树，序号为1到 n 的节点一对一对应时，称为 <strong>完全二叉树</strong>。对任何一棵非空的二叉树T，如果其叶片（终端节点）数为 n<sub>0</sub>，分支度为2的节点数为 n<sub>2</sub>，则 n<sub>0</sub> = n<sub>2</sub> + 1。</p>\n<p>与普通树不同，普通树的节点个数至少为1，而二叉树的节点个数可以为0；普通树节点的最大分支度没有限制，而二叉树节点的最大分支度为2；普通树的节点无左、右次序之分，而二叉树的节点有左、右次序之分。</p>\n<p>二叉树通常作为数据结构应用，典型用法是对节点定义一个标记函数，将一些值与每个节点相关系。这样标记的二叉树就可以实现二叉搜索树和二叉堆，并应用于高效率的搜索和排序。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"2-二叉树相关的题目列表\"><a href=\"#2-二叉树相关的题目列表\" class=\"headerlink\" title=\"2. 二叉树相关的题目列表\"></a>2. 二叉树相关的题目列表</h2><table>\n<thead>\n<tr>\n<th align=\"center\">#</th>\n<th align=\"center\">Title</th>\n<th align=\"center\">Remark</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">94</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/binary-tree-inorder-traversal/\" target=\"_blank\" rel=\"noopener\">二叉树的中序遍历</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">144</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/binary-tree-preorder-traversal/\" target=\"_blank\" rel=\"noopener\">二叉树的前序遍历</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">145</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/binary-tree-postorder-traversal/\" target=\"_blank\" rel=\"noopener\">二叉树的后序遍历</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">102</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/\" target=\"_blank\" rel=\"noopener\">二叉树的层序遍历</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">107</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/\" target=\"_blank\" rel=\"noopener\">二叉树的层次遍历 II</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">104</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/\" target=\"_blank\" rel=\"noopener\">二叉树的最大深度</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">100</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/same-tree/\" target=\"_blank\" rel=\"noopener\">相同的树</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">101</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/symmetric-tree/\" target=\"_blank\" rel=\"noopener\">对称二叉树</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">103</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/\" target=\"_blank\" rel=\"noopener\">二叉树的锯齿形层次遍历</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">105</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/\" target=\"_blank\" rel=\"noopener\">从前序与中序遍历序列构造二叉树</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">106</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/\" target=\"_blank\" rel=\"noopener\">从中序与后序遍历序列构造二叉树</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">98</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/validate-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">验证二叉搜索树</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">99</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/recover-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">恢复二叉搜索树</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">108</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">将有序数组转换为二叉搜索树</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">109</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">有序链表转换二叉搜索树</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">110</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/balanced-binary-tree/\" target=\"_blank\" rel=\"noopener\">平衡二叉树</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">114</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/\" target=\"_blank\" rel=\"noopener\">二叉树展开为链表</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">116</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/\" target=\"_blank\" rel=\"noopener\"> 填充每个节点的下一个右侧节点指针</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">117</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node-ii/\" target=\"_blank\" rel=\"noopener\">填充每个节点的下一个右侧节点指针 II</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">124</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/\" target=\"_blank\" rel=\"noopener\">二叉树中的最大路径和</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-1-队列操作总结（LinkedList）\"><a href=\"#2-1-队列操作总结（LinkedList）\" class=\"headerlink\" title=\"2.1. 队列操作总结（LinkedList）\"></a>2.1. 队列操作总结（LinkedList）</h3><p>参考 <a href=\"https://blog.csdn.net/NRlovestudy/article/details/98666030\" target=\"_blank\" rel=\"noopener\">这里</a>，具体操作如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Deque&lt;String&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">// 入队</span></span><br><span class=\"line\"><span class=\"comment\">// 尾部添加元素</span></span><br><span class=\"line\">queue.add(<span class=\"string\">\"A\"</span>);</span><br><span class=\"line\">queue.add(<span class=\"string\">\"B\"</span>);</span><br><span class=\"line\">queue.add(<span class=\"string\">\"C\"</span>);</span><br><span class=\"line\">System.out.println(queue); <span class=\"comment\">// [A, B, C]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取但不删除第一个元素</span></span><br><span class=\"line\">String peek = queue.peek();</span><br><span class=\"line\">System.out.println(peek + <span class=\"string\">\" ## \"</span> + queue); <span class=\"comment\">// A ## [A, B, C]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取并删除第一个元素，没有元素时会发生异常</span></span><br><span class=\"line\">String pop = queue.pop();</span><br><span class=\"line\">System.out.println(pop + <span class=\"string\">\" ## \"</span> + queue); <span class=\"comment\">// A ## [B, C]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出队</span></span><br><span class=\"line\"><span class=\"comment\">// 获取并删除第一个元素，没有元素时返回null</span></span><br><span class=\"line\">String poll = queue.poll();</span><br><span class=\"line\">System.out.println(poll + <span class=\"string\">\" ## \"</span> + poll); <span class=\"comment\">// B ## B</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判空</span></span><br><span class=\"line\">System.out.println(queue.isEmpty());    <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<p>总结：pop 与 poll 都是取出 LinkedList 的第一个元素，并将该元素删除，等效于 removeFirst；不同点：两者的实现所用数据结构不同：</p>\n<ul>\n<li>poll 是基于队列结构实现的方法，当队列中没有元素时，调用该方法返回 null</li>\n<li>pop 是基于栈结构实现的方法，当栈中没有元素时，调用该方法会发生异常</li>\n</ul>\n<h3 id=\"2-2-栈操作总结（ArrayDeque）\"><a href=\"#2-2-栈操作总结（ArrayDeque）\" class=\"headerlink\" title=\"2.2. 栈操作总结（ArrayDeque）\"></a>2.2. 栈操作总结（ArrayDeque）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Deque&lt;String&gt; stack = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">// 入栈，即在首部添加元素</span></span><br><span class=\"line\">stack.push(<span class=\"string\">\"A\"</span>);</span><br><span class=\"line\">stack.push(<span class=\"string\">\"B\"</span>);</span><br><span class=\"line\">stack.push(<span class=\"string\">\"C\"</span>);</span><br><span class=\"line\">System.out.println(stack);      <span class=\"comment\">// [C, B, A]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取栈顶元素，即第一个元素</span></span><br><span class=\"line\">System.out.println(stack.peek() + <span class=\"string\">\" ## \"</span> + stack); <span class=\"comment\">// C ## [C, B, A]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出栈，即获取并删除第一个元素</span></span><br><span class=\"line\">System.out.println(stack.pop() + <span class=\"string\">\" ## \"</span> + stack);    <span class=\"comment\">// C ## [B, A]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判空</span></span><br><span class=\"line\">System.out.println(stack.isEmpty());    <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-二叉树的中序遍历-94\"><a href=\"#3-二叉树的中序遍历-94\" class=\"headerlink\" title=\"3. 二叉树的中序遍历 [94]\"></a>3. 二叉树的中序遍历 [94]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/binary-tree-inorder-traversal/\" target=\"_blank\" rel=\"noopener\">94. 二叉树的中序遍历</a></p>\n<h3 id=\"3-1-题目描述\"><a href=\"#3-1-题目描述\" class=\"headerlink\" title=\"3.1. 题目描述\"></a>3.1. 题目描述</h3><p>给定一个二叉树，返回它的中序 遍历。</p>\n<p>示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,null,2,3]</span><br><span class=\"line\">   1</span><br><span class=\"line\">    \\</span><br><span class=\"line\">     2</span><br><span class=\"line\">    /</span><br><span class=\"line\">   3</span><br><span class=\"line\"></span><br><span class=\"line\">输出: [1,3,2]</span><br></pre></td></tr></table></figure>\n\n\n<p>进阶: 递归算法很简单，你可以通过迭代算法完成吗？</p>\n<h3 id=\"3-2-题目分析\"><a href=\"#3-2-题目分析\" class=\"headerlink\" title=\"3.2. 题目分析\"></a>3.2. 题目分析</h3><p>分析参考 <a href=\"https://leetcode.wang/leetCode-94-Binary-Tree-Inorder-Traversal.html\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<p>中序遍历使用两种方法：递归和迭代。</p>\n<h3 id=\"3-3-方法一：递归\"><a href=\"#3-3-方法一：递归\" class=\"headerlink\" title=\"3.3. 方法一：递归\"></a>3.3. 方法一：递归</h3><p>时间：O(n)，遍历每个节点；空间：O(h)，压栈消耗，h 是二叉树的高度。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">inorderTraversal</span><span class=\"params\">(TreeNode root)</span></span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    helper(root, res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(TreeNode node, List&lt;Integer&gt; res)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    helper(node.left, res);</span><br><span class=\"line\">    res.add(node.val);</span><br><span class=\"line\">    helper(node.right, res);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-方法二：栈\"><a href=\"#3-4-方法二：栈\" class=\"headerlink\" title=\"3.4. 方法二：栈\"></a>3.4. 方法二：栈</h3><p>时间：O(n)，遍历每个节点；空间：O(h)，压栈消耗，h 是二叉树的高度。</p>\n<p>利用栈模拟递归。递归压栈过程，就是保存现场，保存当前的变量。在方法一中，当前有用的变量就是 node，所以我们用栈把每一次的 node 保存起来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">inorderTraversal</span><span class=\"params\">(TreeNode root)</span></span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 程序中尽量避免使用Stack类，太古老，性能差，使用ArrayDeque代替</span></span><br><span class=\"line\">    Deque&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br><span class=\"line\">    TreeNode curr = root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span> || !stack.isEmpty())&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 节点不为空就一直压栈</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            stack.push(curr);</span><br><span class=\"line\">            <span class=\"comment\">// 考虑左子树</span></span><br><span class=\"line\">            curr = curr.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 节点为空，就出栈</span></span><br><span class=\"line\">        curr = stack.pop();</span><br><span class=\"line\">        res.add(curr.val);</span><br><span class=\"line\">        <span class=\"comment\">// 考虑右子树</span></span><br><span class=\"line\">        curr = curr.right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-二叉树的前序遍历-144\"><a href=\"#4-二叉树的前序遍历-144\" class=\"headerlink\" title=\"4. 二叉树的前序遍历 [144]\"></a>4. 二叉树的前序遍历 [144]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/binary-tree-preorder-traversal/\" target=\"_blank\" rel=\"noopener\">144. 二叉树的前序遍历</a></p>\n<h3 id=\"4-1-题目描述\"><a href=\"#4-1-题目描述\" class=\"headerlink\" title=\"4.1. 题目描述\"></a>4.1. 题目描述</h3><p>给定一个二叉树，返回它的 前序 遍历。</p>\n<p>示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,null,2,3]  </span><br><span class=\"line\">   1</span><br><span class=\"line\">    \\</span><br><span class=\"line\">     2</span><br><span class=\"line\">    /</span><br><span class=\"line\">   3 </span><br><span class=\"line\"></span><br><span class=\"line\">输出: [1,2,3]</span><br></pre></td></tr></table></figure>\n\n\n<p>进阶: 递归算法很简单，你可以通过迭代算法完成吗？</p>\n<h3 id=\"4-2-题目分析\"><a href=\"#4-2-题目分析\" class=\"headerlink\" title=\"4.2. 题目分析\"></a>4.2. 题目分析</h3><p>中序遍历的迭代法也使用栈实现。</p>\n<h3 id=\"4-3-方法一：递归\"><a href=\"#4-3-方法一：递归\" class=\"headerlink\" title=\"4.3. 方法一：递归\"></a>4.3. 方法一：递归</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">preorderTraversal</span><span class=\"params\">(TreeNode root)</span></span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    helper(root, res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(TreeNode node, List&lt;Integer&gt; res)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    res.add(node.val);</span><br><span class=\"line\">    helper(node.left, res);</span><br><span class=\"line\">    helper(node.right, res);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-4-方法二：栈\"><a href=\"#4-4-方法二：栈\" class=\"headerlink\" title=\"4.4. 方法二：栈\"></a>4.4. 方法二：栈</h3><p>与中序遍历的迭代方法相比，前序遍历只需要将访问的位置改到根节点处即可，其他代码不变。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">preorderTraversal</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    Deque&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br><span class=\"line\">    TreeNode curr = root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span> || !stack.isEmpty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在此处访问节点</span></span><br><span class=\"line\">            res.add(curr.val);</span><br><span class=\"line\">            stack.push(curr);</span><br><span class=\"line\">            curr = curr.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        curr = stack.poll();</span><br><span class=\"line\">        curr = curr.right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-二叉树的后序遍历-145\"><a href=\"#5-二叉树的后序遍历-145\" class=\"headerlink\" title=\"5. 二叉树的后序遍历 [145]\"></a>5. 二叉树的后序遍历 [145]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/binary-tree-postorder-traversal/\" target=\"_blank\" rel=\"noopener\">145. 二叉树的后序遍历</a></p>\n<h3 id=\"5-1-题目描述\"><a href=\"#5-1-题目描述\" class=\"headerlink\" title=\"5.1. 题目描述\"></a>5.1. 题目描述</h3><p>给定一个二叉树，返回它的 后序 遍历。</p>\n<p>示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,null,2,3]  </span><br><span class=\"line\">   1</span><br><span class=\"line\">    \\</span><br><span class=\"line\">     2</span><br><span class=\"line\">    /</span><br><span class=\"line\">   3 </span><br><span class=\"line\"></span><br><span class=\"line\">输出: [3,2,1]</span><br></pre></td></tr></table></figure>\n\n\n<p>进阶: 递归算法很简单，你可以通过迭代算法完成吗？</p>\n<h3 id=\"5-2-方法一：递归\"><a href=\"#5-2-方法一：递归\" class=\"headerlink\" title=\"5.2. 方法一：递归\"></a>5.2. 方法一：递归</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">postorderTraversal</span><span class=\"params\">(TreeNode root)</span></span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    helper(root, res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(TreeNode node, List&lt;Integer&gt; res)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    helper(node.left, res);</span><br><span class=\"line\">    helper(node.right, res);</span><br><span class=\"line\">    res.add(node.val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-3-方法二：栈\"><a href=\"#5-3-方法二：栈\" class=\"headerlink\" title=\"5.3. 方法二：栈\"></a>5.3. 方法二：栈</h3><p>相比于前序、中序的栈解法，后序遍历的栈解法会难一些。</p>\n<p>原因在于，当遍历完某个根节点的左子树，回到根节点时，中序、先序可以把当前根节点从栈中弹出，然后转到右子树。举例如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    1</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  2   3</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">4   5</span><br></pre></td></tr></table></figure>\n\n<p>当遍历完 2,4,5 时，回到 1 之后就可以把 1 弹出，然后通过 1 到达右子树继续遍历。</p>\n<p>而对于后序遍历，当我们到达 1 时，并不能立即把 1 弹出，因为遍历完右子树，还需要将根节点加入到 res 中。</p>\n<p>因此，我们就需要判断是从左子树到的根节点，还是从右子树到的根节点。</p>\n<p>如果是从左子树到的根节点，此时应该转到右子树。如果从右子树到的根节点，那么就可以弹出当前节点，并存储到 res 中。</p>\n<p>当然，如果从左子树到的根节点，此时右子树为 null, 也需要把根节点弹出，并加入到 res 中。</p>\n<p>基于上述分析，我们可以写出代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">postorderTraversal</span><span class=\"params\">(TreeNode root)</span></span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    Deque&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br><span class=\"line\">    TreeNode curr = root;</span><br><span class=\"line\">    <span class=\"comment\">// 记录上一个遍历的节点</span></span><br><span class=\"line\">    TreeNode pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span> || !stack.isEmpty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            stack.push(curr);</span><br><span class=\"line\">            curr = curr.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 获取当前根节点</span></span><br><span class=\"line\">        TreeNode temp = stack.peek();</span><br><span class=\"line\">        <span class=\"comment\">// 是否变到右子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp.right != <span class=\"keyword\">null</span> &amp;&amp; temp.right != pre)&#123;</span><br><span class=\"line\">            curr = temp.right;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            res.add(temp.val);</span><br><span class=\"line\">            <span class=\"comment\">// 记录上一个遍历的节点</span></span><br><span class=\"line\">            pre = temp;</span><br><span class=\"line\">            stack.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-二叉树的层序遍历-102\"><a href=\"#6-二叉树的层序遍历-102\" class=\"headerlink\" title=\"6. 二叉树的层序遍历 [102]\"></a>6. 二叉树的层序遍历 [102]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/\" target=\"_blank\" rel=\"noopener\">102. 二叉树的层序遍历</a></p>\n<h3 id=\"6-1-题目描述\"><a href=\"#6-1-题目描述\" class=\"headerlink\" title=\"6.1. 题目描述\"></a>6.1. 题目描述</h3><p>给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p>\n<p>示例：<br>二叉树：[3,9,20,null,null,15,7],</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">  / \\</span><br><span class=\"line\"> 9  20</span><br><span class=\"line\">   /  \\</span><br><span class=\"line\">  15   7</span><br></pre></td></tr></table></figure>\n\n<p>返回其层次遍历结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [3],</span><br><span class=\"line\">  [9,20],</span><br><span class=\"line\">  [15,7]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-2-方法一：递归（DFS）\"><a href=\"#6-2-方法一：递归（DFS）\" class=\"headerlink\" title=\"6.2. 方法一：递归（DFS）\"></a>6.2. 方法一：递归（DFS）</h3><p>由于本题对于层序遍历的结果要求为 <code>List&lt;List&lt;Integer&gt;&gt;</code>, 要把每一层的元素放在一个单独的列表中，因此在递归时需要传入当前层数，如果是新的一层，创建一个新的 <code>List</code> , 存储这一层的元素。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> res;&#125;</span><br><span class=\"line\">    helper(root, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(TreeNode node, Integer level)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(res.size() == level)&#123;</span><br><span class=\"line\">        res.add(<span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.get(level).add(node.val);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.left != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        helper(node.left, level + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.right != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        helper(node.right, level + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-3-方法二：队列（BFS）\"><a href=\"#6-3-方法二：队列（BFS）\" class=\"headerlink\" title=\"6.3. 方法二：队列（BFS）\"></a>6.3. 方法二：队列（BFS）</h3><p>依旧是本题对于返回结果的要求，每一层需要单独处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Queue&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    queue.add(root);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!queue.isEmpty())&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当前层列表</span></span><br><span class=\"line\">        List&lt;Integer&gt; level = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 当前队列中的元素个数，即就是当前层的节点数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> levelNum = queue.size();</span><br><span class=\"line\">        <span class=\"comment\">// levelNum 必须在外面定义，因为 queue 的大小在不停的变化</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; levelNum; i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 移除队列第一个元素</span></span><br><span class=\"line\">            TreeNode node = queue.remove();</span><br><span class=\"line\">            level.add(node.val);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.left != <span class=\"keyword\">null</span>)&#123;queue.add(node.left);&#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.right != <span class=\"keyword\">null</span>)&#123;queue.add(node.right);&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res.add(level);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-二叉树的层次遍历-II-107\"><a href=\"#7-二叉树的层次遍历-II-107\" class=\"headerlink\" title=\"7. 二叉树的层次遍历 II [107]\"></a>7. 二叉树的层次遍历 II [107]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/\" target=\"_blank\" rel=\"noopener\">107. 二叉树的层次遍历 II</a></p>\n<h3 id=\"7-1-题目描述\"><a href=\"#7-1-题目描述\" class=\"headerlink\" title=\"7.1. 题目描述\"></a>7.1. 题目描述</h3><p>给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p>\n<p>例如：<br>给定二叉树 [3,9,20,null,null,15,7],</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">  / \\</span><br><span class=\"line\"> 9  20</span><br><span class=\"line\">   /  \\</span><br><span class=\"line\">  15   7</span><br></pre></td></tr></table></figure>\n\n<p>返回其自底向上的层次遍历为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [15,7],</span><br><span class=\"line\">  [9,20],</span><br><span class=\"line\">  [3]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-2-方法一：递归\"><a href=\"#7-2-方法一：递归\" class=\"headerlink\" title=\"7.2. 方法一：递归\"></a>7.2. 方法一：递归</h3><p>本题的结果是上一题结果的反序，只需要在上一题添加列表时，在表头插入，以此得到反序序列即可。如下代码，改变三处：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用链表存储，在表头插入效率更高</span></span><br><span class=\"line\">LinkedList&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> res;&#125;</span><br><span class=\"line\">    helper(root, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(TreeNode node, Integer level)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(res.size() == level)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在链表表头插入，得到反序序列</span></span><br><span class=\"line\">        res.addFirst(<span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 插入当前值，注意下标</span></span><br><span class=\"line\">    res.get(res.size() - level - <span class=\"number\">1</span>).add(node.val);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.left != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        helper(node.left, level + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.right != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        helper(node.right, level + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-3-方法二：队列\"><a href=\"#7-3-方法二：队列\" class=\"headerlink\" title=\"7.3. 方法二：队列\"></a>7.3. 方法二：队列</h3><p>与上一题区别：使用链表存储，插入时从表头插入，得到反序序列。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用链表，在表头插入效率更高</span></span><br><span class=\"line\">    LinkedList&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Queue&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    queue.add(root);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!queue.isEmpty())&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; level = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> levelNum = queue.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; levelNum; i++)&#123;</span><br><span class=\"line\">            TreeNode node = queue.remove();</span><br><span class=\"line\">            level.add(node.val);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.left != <span class=\"keyword\">null</span>)&#123;queue.add(node.left);&#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.right != <span class=\"keyword\">null</span>)&#123;queue.add(node.right);&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 在表头插入，得到反序结果</span></span><br><span class=\"line\">        res.addFirst(level);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-二叉树的最大深度-104\"><a href=\"#8-二叉树的最大深度-104\" class=\"headerlink\" title=\"8. 二叉树的最大深度 [104]\"></a>8. 二叉树的最大深度 [104]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/\" target=\"_blank\" rel=\"noopener\">104. 二叉树的最大深度</a></p>\n<h3 id=\"8-1-题目描述\"><a href=\"#8-1-题目描述\" class=\"headerlink\" title=\"8.1.. 题目描述\"></a>8.1.. 题目描述</h3><p>给定一个二叉树，找出其最大深度。</p>\n<p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p>\n<p>说明: 叶子节点是指没有子节点的节点。</p>\n<p>示例：<br>给定二叉树 [3,9,20,null,null,15,7]，</p>\n<pre><code>  3\n / \\\n9  20\n  /  \\\n 15   7</code></pre><p>返回它的最大深度 3 。</p>\n<h3 id=\"8-2-方法一：递归（DFS）\"><a href=\"#8-2-方法一：递归（DFS）\" class=\"headerlink\" title=\"8.2. 方法一：递归（DFS）\"></a>8.2. 方法一：递归（DFS）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.max(maxDepth(root.left), maxDepth(root.right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-3-方法二：层次遍历（BFS）\"><a href=\"#8-3-方法二：层次遍历（BFS）\" class=\"headerlink\" title=\"8.3. 方法二：层次遍历（BFS）\"></a>8.3. 方法二：层次遍历（BFS）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    LinkedList&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    queue.add(root);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> level = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty())&#123;</span><br><span class=\"line\">        level++;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = queue.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)&#123;</span><br><span class=\"line\">            TreeNode node = queue.remove();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.left != <span class=\"keyword\">null</span>)&#123;queue.add(node.left);&#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.right != <span class=\"keyword\">null</span>)&#123; queue.add(node.right);&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> level;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-相同的树-100\"><a href=\"#9-相同的树-100\" class=\"headerlink\" title=\"9. 相同的树 [100]\"></a>9. 相同的树 [100]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/same-tree/\" target=\"_blank\" rel=\"noopener\">100. 相同的树</a></p>\n<h3 id=\"9-1-题目描述\"><a href=\"#9-1-题目描述\" class=\"headerlink\" title=\"9.1. 题目描述\"></a>9.1. 题目描述</h3><p>给定两个二叉树，编写一个函数来检验它们是否相同。</p>\n<p>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</p>\n<p>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:       1         1</span><br><span class=\"line\">          / \\       / \\</span><br><span class=\"line\">         2   3     2   3</span><br><span class=\"line\"></span><br><span class=\"line\">        [1,2,3],   [1,2,3]</span><br><span class=\"line\"></span><br><span class=\"line\">输出: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>示例 2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:      1          1</span><br><span class=\"line\">          /           \\</span><br><span class=\"line\">         2             2</span><br><span class=\"line\"></span><br><span class=\"line\">        [1,2],     [1,null,2]</span><br><span class=\"line\"></span><br><span class=\"line\">输出: <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n\n<p>示例 3:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:       1         1</span><br><span class=\"line\">          / \\       / \\</span><br><span class=\"line\">         2   1     1   2</span><br><span class=\"line\"></span><br><span class=\"line\">        [1,2,1],   [1,1,2]</span><br><span class=\"line\"></span><br><span class=\"line\">输出: <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-2-代码\"><a href=\"#9-2-代码\" class=\"headerlink\" title=\"9.2. 代码\"></a>9.2. 代码</h3><p>思路：对两颗树同时进行遍历比较，这里使用的是中序遍历。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSameTree</span><span class=\"params\">(TreeNode p, TreeNode q)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p == <span class=\"keyword\">null</span> &amp;&amp; q == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p != <span class=\"keyword\">null</span> &amp;&amp; q != <span class=\"keyword\">null</span> &amp;&amp; p.val == q.val)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-对称二叉树-101\"><a href=\"#10-对称二叉树-101\" class=\"headerlink\" title=\"10. 对称二叉树 [101]\"></a>10. 对称二叉树 [101]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/symmetric-tree/\" target=\"_blank\" rel=\"noopener\">101. 对称二叉树</a></p>\n<h3 id=\"10-1-题目描述\"><a href=\"#10-1-题目描述\" class=\"headerlink\" title=\"10.1. 题目描述\"></a>10.1. 题目描述</h3><p>给定一个二叉树，检查它是否是镜像对称的。</p>\n<p>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。</p>\n<pre><code>    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3</code></pre><p>但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:</p>\n<pre><code>  1\n / \\\n2   2\n \\   \\\n 3    3</code></pre><p>进阶：</p>\n<p>你可以运用递归和迭代两种方法解决这个问题吗？</p>\n<h3 id=\"10-2-方法一：递归\"><a href=\"#10-2-方法一：递归\" class=\"headerlink\" title=\"10.2. 方法一：递归\"></a>10.2. 方法一：递归</h3><p>不是简单的比较左右就行，注意这道题是镜像对称的。这里的递归是基于先序遍历的，先看根节点，再判断左右节点，再判断左右节点的子节点是否为镜像对称。</p>\n<p>其实就是类似于 DFS 的先序遍历。不同之处是对于 left 子树是正常的先序遍历 根节点 -&gt; 左子树 -&gt; 右子树 的顺序，对于 right 子树的话是 根节点 -&gt; 右子树 -&gt; 左子树 的顺序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSymmetric</span><span class=\"params\">(TreeNode root)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isMirror(root.left, root.right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMirror</span><span class=\"params\">(TreeNode p, TreeNode q)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p == <span class=\"keyword\">null</span> &amp;&amp; q == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p == <span class=\"keyword\">null</span> || q == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p.val == q.val)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isMirror(p.left, q.right) &amp;&amp; isMirror(p.right, q.left);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-3-方法二：迭代（栈）\"><a href=\"#10-3-方法二：迭代（栈）\" class=\"headerlink\" title=\"10.3. 方法二：迭代（栈）\"></a>10.3. 方法二：迭代（栈）</h3><p>参考：<a href=\"https://leetcode.wang/leetcode-101-Symmetric-Tree.html#解法二-dfs-栈\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<p>把方法一的先序遍历，使用栈将递归改为迭代。使用两个栈分别存储左右字数的序列，出栈时比较。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSymmetric</span><span class=\"params\">(TreeNode root)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;&#125;</span><br><span class=\"line\">    Deque&lt;TreeNode&gt; leftStack = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br><span class=\"line\">    Deque&lt;TreeNode&gt; rightStack = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br><span class=\"line\">    TreeNode leftCur = root.left;</span><br><span class=\"line\">    TreeNode rightCur = root.right;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (leftCur != <span class=\"keyword\">null</span> || rightCur != <span class=\"keyword\">null</span> || !leftStack.isEmpty() || !rightStack.isEmpty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (leftCur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            leftStack.push(leftCur);</span><br><span class=\"line\">            <span class=\"comment\">// 考虑左子树</span></span><br><span class=\"line\">            leftCur = leftCur.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (rightCur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            rightStack.push(rightCur);</span><br><span class=\"line\">            <span class=\"comment\">// 考虑右子树</span></span><br><span class=\"line\">            rightCur = rightCur.right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 长度不同，就返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(leftStack.size() != rightStack.size())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 出栈</span></span><br><span class=\"line\">        leftCur = leftStack.poll();</span><br><span class=\"line\">        rightCur = rightStack.poll();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(leftCur.val != rightCur.val)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 考虑右子树</span></span><br><span class=\"line\">        leftCur = leftCur.right;</span><br><span class=\"line\">        <span class=\"comment\">// 考虑左子树</span></span><br><span class=\"line\">        rightCur = rightCur.left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11-二叉树的锯齿形层次遍历-103\"><a href=\"#11-二叉树的锯齿形层次遍历-103\" class=\"headerlink\" title=\"11. 二叉树的锯齿形层次遍历 [103]\"></a>11. 二叉树的锯齿形层次遍历 [103]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/\" target=\"_blank\" rel=\"noopener\">103. 二叉树的锯齿形层次遍历</a></p>\n<h3 id=\"11-1-题目描述\"><a href=\"#11-1-题目描述\" class=\"headerlink\" title=\"11.1. 题目描述\"></a>11.1. 题目描述</h3><p><img src=\"/pictures/image-20200819111819257.png\" alt=\"image-20200819111819257\"></p>\n<h3 id=\"11-2-代码\"><a href=\"#11-2-代码\" class=\"headerlink\" title=\"11.2. 代码\"></a>11.2. 代码</h3><p>在 [102] 题的基础上，改变在当前层中加入元素的顺序即可完成。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; zigzagLevelOrder(TreeNode root) &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Deque&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    queue.add(root);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> depth = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!queue.isEmpty())&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当前层列表</span></span><br><span class=\"line\">        List&lt;Integer&gt; level = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> levelNum = queue.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; levelNum; i++)&#123;</span><br><span class=\"line\">            TreeNode node = queue.remove();</span><br><span class=\"line\">            <span class=\"comment\">// 在当前层列表中加入元素（只需要改变这里）</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(depth % <span class=\"number\">2</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                level.add(node.val);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                level.add(<span class=\"number\">0</span>, node.val);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.left != <span class=\"keyword\">null</span>)&#123;queue.add(node.left);&#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.right != <span class=\"keyword\">null</span>)&#123;queue.add(node.right);&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res.add(level);</span><br><span class=\"line\">        depth++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过本题加深了对层次遍历迭代解法的理解，代码中通过队列进行层次遍历，即整个遍历的顺序都是在队列的帮助下实现的，其中的 res、level 等都是为了输出结果的形式而定义的。本题依旧是层次遍历，只是在添加结果时，不同的层添加结果的顺序不同。</p>\n<h2 id=\"12-从前序与中序遍历序列构造二叉树-105\"><a href=\"#12-从前序与中序遍历序列构造二叉树-105\" class=\"headerlink\" title=\"12. 从前序与中序遍历序列构造二叉树 [105]\"></a>12. 从前序与中序遍历序列构造二叉树 [105]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/\" target=\"_blank\" rel=\"noopener\">105. 从前序与中序遍历序列构造二叉树</a></p>\n<h3 id=\"12-1-题目描述\"><a href=\"#12-1-题目描述\" class=\"headerlink\" title=\"12.1. 题目描述\"></a>12.1. 题目描述</h3><p><img src=\"/pictures/image-20200821111825878.png\" alt=\"image-20200821111825878\"></p>\n<h3 id=\"12-2-方法一：递归\"><a href=\"#12-2-方法一：递归\" class=\"headerlink\" title=\"12.2. 方法一：递归\"></a>12.2. 方法一：递归</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">buildTree</span><span class=\"params\">(<span class=\"keyword\">int</span>[] preorder, <span class=\"keyword\">int</span>[] inorder)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper(preorder, <span class=\"number\">0</span>, preorder.length - <span class=\"number\">1</span>, inorder, <span class=\"number\">0</span>, inorder.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] preorder, <span class=\"keyword\">int</span> pStart, <span class=\"keyword\">int</span> pEnd, <span class=\"keyword\">int</span>[] inorder, <span class=\"keyword\">int</span> iStart, <span class=\"keyword\">int</span> iEnd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// pStart 表示先序的第一位索引</span></span><br><span class=\"line\">    <span class=\"comment\">// pEnd 表示先序的最后一位索引</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果输入的前序序列为空，返回 null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pEnd &lt; pStart)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> root = preorder[pStart];</span><br><span class=\"line\">    TreeNode node = <span class=\"keyword\">new</span> TreeNode(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在中序遍历中找root，即分隔点</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> point = iStart;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; point &lt;= iEnd; point++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(inorder[point] == root)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 左子树长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> leftLen = point - iStart;</span><br><span class=\"line\"></span><br><span class=\"line\">    node.left = helper(preorder, pStart + <span class=\"number\">1</span>, pStart + leftLen, inorder, iStart, point - <span class=\"number\">1</span>);</span><br><span class=\"line\">    node.right = helper(preorder, pStart + leftLen + <span class=\"number\">1</span>, pEnd, inorder, point + <span class=\"number\">1</span>, iEnd);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>复杂度分析：</p>\n<ul>\n<li>时间复杂度：O(N^2)，这里 N 是二叉树的结点个数，每调用一次递归方法创建一个结点，一共创建 N 个结点，在中序遍历中找到根结点在中序遍历中的位置，是与 N 相关的，这里不计算递归方法占用的时间。</li>\n<li>空间复杂度：O(1)，这里不计算递归方法占用的空间。</li>\n</ul>\n<h3 id=\"12-3-方法二：使用-HashMap-对递归进行优化\"><a href=\"#12-3-方法二：使用-HashMap-对递归进行优化\" class=\"headerlink\" title=\"12.3. 方法二：使用 HashMap 对递归进行优化\"></a>12.3. 方法二：使用 HashMap 对递归进行优化</h3><p>参考 <a href=\"https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/qian-xu-bian-li-python-dai-ma-java-dai-ma-by-liwei/\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<p>上一方法中每执行一次 helper 都要在中序中寻找根节点，这里使用 HashMap 存储中序序列的索引与节点值，找根节点只需要 O(1)。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">buildTree</span><span class=\"params\">(<span class=\"keyword\">int</span>[] preorder, <span class=\"keyword\">int</span>[] inorder)</span> </span>&#123;</span><br><span class=\"line\">    HashMap&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; inorder.length; i++)&#123;</span><br><span class=\"line\">        map.put(inorder[i], i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper2(preorder, <span class=\"number\">0</span>, preorder.length - <span class=\"number\">1</span>, inorder, <span class=\"number\">0</span>, inorder.length - <span class=\"number\">1</span>, map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">helper2</span><span class=\"params\">(<span class=\"keyword\">int</span>[] preorder, <span class=\"keyword\">int</span> pStart, <span class=\"keyword\">int</span> pEnd, <span class=\"keyword\">int</span>[] inorder, <span class=\"keyword\">int</span> iStart, <span class=\"keyword\">int</span> iEnd, HashMap&lt;Integer, Integer&gt; map)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pEnd &lt; pStart)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> root = preorder[pStart];</span><br><span class=\"line\">    TreeNode node = <span class=\"keyword\">new</span> TreeNode(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用map找分隔点</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> point = map.get(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> leftLen = point - iStart;</span><br><span class=\"line\"></span><br><span class=\"line\">    node.left = helper2(preorder, pStart + <span class=\"number\">1</span>, pStart + leftLen, inorder, iStart, point - <span class=\"number\">1</span>, map);</span><br><span class=\"line\">    node.right = helper2(preorder, pStart + leftLen + <span class=\"number\">1</span>, pEnd, inorder, point + <span class=\"number\">1</span>, iEnd, map);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>时间复杂度：O(N)，这里 N 是二叉树的结点个数，每调用一次递归方法创建一个结点，一共创建 N 个结点，这里不计算递归方法占用的时间。</li>\n<li>空间复杂度：O(N)，这里忽略递归方法占用的空间，因为是对数级别的，比 N 小。</li>\n</ul>\n<h2 id=\"13-验证二叉搜索树-98\"><a href=\"#13-验证二叉搜索树-98\" class=\"headerlink\" title=\"13. 验证二叉搜索树 [98]\"></a>13. 验证二叉搜索树 [98]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/validate-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">98. 验证二叉搜索树</a></p>\n<h3 id=\"13-1-题目描述\"><a href=\"#13-1-题目描述\" class=\"headerlink\" title=\"13.1. 题目描述\"></a>13.1. 题目描述</h3><p><img src=\"/pictures/image-20200831101224071.png\" alt=\"image-20200831101224071\"></p>\n<h3 id=\"13-1-方法一：递归\"><a href=\"#13-1-方法一：递归\" class=\"headerlink\" title=\"13.1. 方法一：递归\"></a>13.1. 方法一：递归</h3><p>可以很简单的用递归写出来。想法是，左子树是合法二分查找树，右子树是合法二分查找树，并且根节点大于左孩子，小于右孩子，那么当前树就是合法二分查找树。</p>\n<p>注意：判断是否是二叉搜索树，不能只是简单的判断根节点和左右节点的大小关系。而是需要判断左子树和右子树上的所有节点都满足大小关系，并且左子树和右子树也都是二分查找树。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidBST</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 递归终止条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || (root.right == <span class=\"keyword\">null</span> &amp;&amp; root.left == <span class=\"keyword\">null</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断左子树 和 左子树与根节点的关系</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isValidBST(root.left)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取左子树的最大值</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> maxLeft = getMaxOfBST(root.left);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root.val &lt;= maxLeft) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断右子树 和 右子树与根节点的关系</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isValidBST(root.right)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取右子树最小值</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> minRight = getMinOfBST(root.right);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root.val &gt;= minRight) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取搜索二叉树的最大值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> root</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getMaxOfBST</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = root.val;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (root.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        max = root.right.val;</span><br><span class=\"line\">        root = root.right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取搜索二叉树最小值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> root</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getMinOfBST</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> min = root.val;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (root.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        min = root.left.val;</span><br><span class=\"line\">        root = root.left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-3-方法二：另一种递归（推荐）\"><a href=\"#13-3-方法二：另一种递归（推荐）\" class=\"headerlink\" title=\"13.3. 方法二：另一种递归（推荐）\"></a>13.3. 方法二：另一种递归（推荐）</h3><p>参考 <a href=\"https://leetcode.wang/leetCode-98-Validate-Binary-Search-Tree.html\" target=\"_blank\" rel=\"noopener\">这里</a> 的解法二，把代码写的简洁了一些。这种递归代码更为简洁，推荐。</p>\n<p>解法一中，我们是判断根节点是否合法，找到了左子树中最大的数，右子树中最小的数。 由左子树和右子树决定当前根节点是否合法。</p>\n<p>但如果正常的来讲，明明先有的根节点，按理说根节点是任何数都行，而不是由左子树和右子树限定。相反，根节点反而决定了左孩子和右孩子的合法取值范围。</p>\n<p>所以，我们可以从根节点进行 DFS，然后计算每个节点应该的取值范围，如果当前节点不符合就返回 false。</p>\n<p>也就是说，本题使用先序遍历，判断根节点是否在范围之内，这个范围根据上一层根节点来限制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidBST</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 节点值均为 Int 型，故最大值设为 long</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> max = (<span class=\"keyword\">long</span>) Integer.MAX_VALUE + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> min = (<span class=\"keyword\">long</span>) Integer.MIN_VALUE - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getAns(root, max, min);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">getAns</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">long</span> max, <span class=\"keyword\">long</span> min)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 判断根节点是否在限定范围内</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root.val &lt;= min || root.val &gt;= max)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 判断左右子树，同时更新左右子树的限定范围</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> getAns(root.left, min, root.val) &amp;&amp; getAns(root.right, root.val, max);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-4-方法三：迭代（中序遍历的栈解法）\"><a href=\"#13-4-方法三：迭代（中序遍历的栈解法）\" class=\"headerlink\" title=\"13.4. 方法三：迭代（中序遍历的栈解法）\"></a>13.4. 方法三：迭代（中序遍历的栈解法）</h3><p>这种解法基于：二叉搜索树中序遍历后，会得到有序序列。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidBTS</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    TreeNode curr = root;</span><br><span class=\"line\">    TreeNode pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span> || !stack.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            stack.push(curr);</span><br><span class=\"line\">            curr = curr.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 出栈（这里出栈的值会添加到中序序列后）</span></span><br><span class=\"line\">        curr = stack.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pre != <span class=\"keyword\">null</span> &amp;&amp; pre.val &gt;= curr.val) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre = curr;</span><br><span class=\"line\">        curr = curr.right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"14-恢复二叉搜索树-99\"><a href=\"#14-恢复二叉搜索树-99\" class=\"headerlink\" title=\"14. 恢复二叉搜索树 [99]\"></a>14. 恢复二叉搜索树 [99]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/recover-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">99. 恢复二叉搜索树</a></p>\n<h3 id=\"14-1-题目描述\"><a href=\"#14-1-题目描述\" class=\"headerlink\" title=\"14.1. 题目描述\"></a>14.1. 题目描述</h3><p><img src=\"/pictures/image-20200831105056785.png\" alt=\"image-20200831105056785\"></p>\n<h3 id=\"14-2-方法一：迭代（栈的中序遍历）\"><a href=\"#14-2-方法一：迭代（栈的中序遍历）\" class=\"headerlink\" title=\"14.2. 方法一：迭代（栈的中序遍历）\"></a>14.2. 方法一：迭代（栈的中序遍历）</h3><p>参考 <a href=\"https://leetcode.wang/leetcode-99-Recover-Binary-Search-Tree.html\" target=\"_blank\" rel=\"noopener\">这里</a> 的解法二，代码稍微做了一些简化。</p>\n<p>对上一题 [98] 的第三种解法进行修改实现本题。</p>\n<p>我们判断是否是一个合法的二分查找树是使用到了中序遍历。原因就是二分查找树的一个性质，左孩子小于根节点，根节点小于右孩子。所以做一次中序遍历，产生的序列就是从小到大排列的有序序列。</p>\n<p>回到这道题，题目交换了两个数字，其实就是在有序序列中交换了两个数字。而我们只需要把它还原。</p>\n<p>交换的位置的话就是两种情况。</p>\n<ul>\n<li><p>相邻的两个数字交换</p>\n<p>[ 1 2 3 4 5 ] 中 2 和 3 进行交换，[ 1 3 2 4 5 ]，这样的话只产生 <strong>一组</strong> 逆序的数字（正常情况是从小到大排序，交换后产生了从大到小），3 2。</p>\n<p>我们只需要遍历数组，找到后，把这一组的两个数字进行交换即可。</p>\n</li>\n<li><p>不相邻的两个数字交换</p>\n<p>[ 1 2 3 4 5 ] 中 2 和 5 进行交换，[ 1 5 3 4 2 ]，这样的话其实就是产生了 <strong>两组</strong> 逆序的数字对。5 3 和 4 2。</p>\n<p>所以我们只需要遍历数组，然后找到这两组逆序对，然后把第一组前一个数字和第二组后一个数字进行交换即完成了还原。</p>\n</li>\n</ul>\n<p>所以在中序遍历中，只需要利用一个 pre 节点和当前节点比较，如果 pre 节点的值大于当前节点的值，那么就是我们要找的逆序的数字。分别用两个指针 first 和 second 保存即可。如果找到第二组逆序的数字，我们就把 second 更新为当前节点。最后把 first 和 second 两个的 <strong>数字</strong> 交换即可。</p>\n<p>注意：本题逆序出现的两种情况和节点的交换。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">recoverTree</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    TreeNode cur = root;</span><br><span class=\"line\">    TreeNode pre = <span class=\"keyword\">null</span>, first = <span class=\"keyword\">null</span>, second = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Deque&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span> || !stack.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            stack.push(cur);</span><br><span class=\"line\">            cur = cur.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cur = stack.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pre != <span class=\"keyword\">null</span> &amp;&amp; pre.val &gt;= cur.val) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 第一次遇到逆序对</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (first == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果相邻的数字交换，只会出现一次逆序，因此这里 second 也要赋值</span></span><br><span class=\"line\">                first = pre;</span><br><span class=\"line\">                second = cur;</span><br><span class=\"line\">                <span class=\"comment\">// 第二次遇到逆序对</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                second = cur;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre = cur;</span><br><span class=\"line\">        cur = cur.right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 交换</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp = first.val;</span><br><span class=\"line\">    first.val = second.val;</span><br><span class=\"line\">    second.val = tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"15-将有序数组转换为二叉搜索树-108\"><a href=\"#15-将有序数组转换为二叉搜索树-108\" class=\"headerlink\" title=\"15. 将有序数组转换为二叉搜索树 [108]\"></a>15. 将有序数组转换为二叉搜索树 [108]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">108. 将有序数组转换为二叉搜索树</a></p>\n<h3 id=\"15-1-题目描述\"><a href=\"#15-1-题目描述\" class=\"headerlink\" title=\"15.1. 题目描述\"></a>15.1. 题目描述</h3><p><img src=\"/pictures/image-20200901091510832.png\" alt=\"image-20200901091510832\"></p>\n<h3 id=\"15-2-递归\"><a href=\"#15-2-递归\" class=\"headerlink\" title=\"15.2. 递归\"></a>15.2. 递归</h3><p>题目要求平衡二叉树，那么根节点就是数组的中点。找到了数组的中点，作为根节点，进入递归即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">sortedArrayToBST</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper(nums, <span class=\"number\">0</span>, nums.length - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(start &gt; end)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = end - start + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = start + len / <span class=\"number\">2</span>;</span><br><span class=\"line\">    TreeNode root = <span class=\"keyword\">new</span> TreeNode(nums[mid]);</span><br><span class=\"line\">    root.left = helper(nums, start , mid - <span class=\"number\">1</span>);</span><br><span class=\"line\">    root.right = helper(nums, mid + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"16-有序链表转换二叉搜索树-109\"><a href=\"#16-有序链表转换二叉搜索树-109\" class=\"headerlink\" title=\"16.  有序链表转换二叉搜索树 [109]\"></a>16.  有序链表转换二叉搜索树 [109]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">109. 有序链表转换二叉搜索树</a></p>\n<h3 id=\"16-1-题目描述\"><a href=\"#16-1-题目描述\" class=\"headerlink\" title=\"16.1. 题目描述\"></a>16.1. 题目描述</h3><p><img src=\"/pictures/image-20200902100344960.png\" alt=\"image-20200902100344960\"></p>\n<h3 id=\"16-2-方法一：将链表转为-ArrayList\"><a href=\"#16-2-方法一：将链表转为-ArrayList\" class=\"headerlink\" title=\"16.2. 方法一：将链表转为 ArrayList\"></a>16.2. 方法一：将链表转为 ArrayList</h3><p>本题就是把上一题 [108] 的数组换成了链表，如果使用上一题的思路，链表不支持随机访问，找中点时时间复杂度很高。所以，我们可以把链表先转为 ArrayList，再使用上一题的思路。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">sortedListToBST</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (head != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        list.add(head.val);</span><br><span class=\"line\">        head = head.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper(list, <span class=\"number\">0</span>, list.size());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">helper</span><span class=\"params\">(List&lt;Integer&gt; list, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start == end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = start + (end - start) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    TreeNode root = <span class=\"keyword\">new</span> TreeNode(list.get(mid));</span><br><span class=\"line\">    root.left = helper(list, start, mid);</span><br><span class=\"line\">    root.right = helper(list, mid + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>时复：O(n)</p>\n<p>空复：O(n)</p>\n<h3 id=\"16-3-方法二：中序遍历思路\"><a href=\"#16-3-方法二：中序遍历思路\" class=\"headerlink\" title=\"16.3. 方法二：中序遍历思路\"></a>16.3. 方法二：中序遍历思路</h3><p>参考 <a href=\"https://leetcode.wang/leetcode-109-Convert-Sorted-List-to-Binary-Search-Tree.html\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>我们知道升序数组其实就是二叉搜索树的中序遍历。那么，我们可以按照这个顺序去为每个节点赋值。</p>\n<p>如何实现呢？套用中序遍历的递归过程，将 start 和 end 作为递归参数，当 start ==  end 时，返回 null。</p>\n<p>我们先看一下中序遍历的递归算法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">inorderTraversal</span><span class=\"params\">(TreeNode root)</span></span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    helper(root, res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(TreeNode node, List&lt;Integer&gt; res)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    helper(node.left, res);</span><br><span class=\"line\">    res.add(node.val);</span><br><span class=\"line\">    helper(node.right, res);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>中序遍历中是将 node.val 进行保存，本题我们是给当前节点进行赋值，为了依次赋值，我们需要一个 cur 指针指向所给定的数列，每赋一个值就后移一位：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ListNode cur = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">sortedListToBST2</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (head != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        end++;</span><br><span class=\"line\">        head = head.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper2(<span class=\"number\">0</span>, end);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">helper2</span><span class=\"params\">(<span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(start == end)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = start + (end - start) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历左子树并且将根节点返回</span></span><br><span class=\"line\">    TreeNode left = helper2(start, mid);</span><br><span class=\"line\">    <span class=\"comment\">// 遍历当前节点</span></span><br><span class=\"line\">    TreeNode root = <span class=\"keyword\">new</span> TreeNode(cur.val);</span><br><span class=\"line\">    root.left = left;</span><br><span class=\"line\">    <span class=\"comment\">// 指针后移，进行下一次赋值</span></span><br><span class=\"line\">    cur = cur.next;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历右子树并将根节点返回</span></span><br><span class=\"line\">    TreeNode right = helper2(mid + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">    root.right = right;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>时复：O(n)</p>\n<p>空复：O(log(n))，递归压栈消耗。</p>\n<h2 id=\"17-平衡二叉树-110\"><a href=\"#17-平衡二叉树-110\" class=\"headerlink\" title=\"17. 平衡二叉树 [110]\"></a>17. 平衡二叉树 [110]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/balanced-binary-tree/\" target=\"_blank\" rel=\"noopener\">110. 平衡二叉树</a></p>\n<h3 id=\"17-1-题目描述\"><a href=\"#17-1-题目描述\" class=\"headerlink\" title=\"17.1. 题目描述\"></a>17.1. 题目描述</h3><p><img src=\"/pictures/image-20200901093602332.png\" alt=\"image-20200901093602332\"></p>\n<h3 id=\"17-2-方法一：递归\"><a href=\"#17-2-方法一：递归\" class=\"headerlink\" title=\"17.2. 方法一：递归\"></a>17.2. 方法一：递归</h3><p>参考 <a href=\"https://leetcode.wang/leetcode-110-Balanced-Binary-Tree.html\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<p>参考平衡二叉树的定义：</p>\n<blockquote>\n<p>它是一颗空树或它的左右子树的高度差绝对值不超过1，并且左右子树均为平衡二叉树。</p>\n</blockquote>\n<p>直接按照定义来递归求解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBalanced</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = getHeight(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = getHeight(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Math.abs(left - right) &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isBalanced(root.left) &amp;&amp; isBalanced(root.right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getHeight</span><span class=\"params\">(TreeNode root)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.max(getHeight(root.left), getHeight(root.right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>时复：O(n^2)，n 为二叉树节点个数。isBalanced 需要遍历二叉树中的所有节点，时复为 O(n)，求高度 getHeight，一般情况下为 O(log n)，对于最坏情况，二叉树形成链式结构，需要 O(n)，此时时间复杂度为 O(n^2)。</p>\n<p>空复：O(n)，空间复杂度主要取决于递归调用的层数，递归调用不会超过 n。</p>\n<h3 id=\"17-3-方法二：递归的优化\"><a href=\"#17-3-方法二：递归的优化\" class=\"headerlink\" title=\"17.3. 方法二：递归的优化\"></a>17.3. 方法二：递归的优化</h3><p>参考 <a href=\"https://leetcode.wang/leetcode-110-Balanced-Binary-Tree.html\" target=\"_blank\" rel=\"noopener\">这里</a> 的解法二。</p>\n<p>在方法一中，可以发现，子树的高度重复算了很多次。在求左子树高度时，使用递归求解它的左右子树高度；在判断左子树是否为平衡二叉树时，又使用递归求解了它的左右子树高度。</p>\n<p>方法一的另一个问题是：在 getHeight 方法中，求得左右子树高度时，就可以判断当前是否是平衡二叉树了。</p>\n<p>综上，只需要求一次高度，并且在求左右子树高度时，就可以判断当前是否是平衡二叉树。</p>\n<p>考虑到 <code>getTreeDepth</code> 函数返回的是<code>int</code>值，同时高度不可能为负数，那么如果求高度过程中我们发现了当前不是平衡二叉树，就返回<code>-1</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBalanced</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getHeight2(root) != -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getHeight2</span><span class=\"params\">(TreeNode root)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = getHeight2(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left == -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = getHeight2(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(right == -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Math.abs(left - right) &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.max(left, right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>时复：O(n)，其中 n 是二叉树中的节点个数。使用自底向上的递归，每个节点的计算高度和判断是否平衡都只需要处理一次，最坏情况下需要遍历二叉树中的所有节点，因此时间复杂度是 O(n) 。</p>\n<p>空间复杂度：O(n)，其中 n<em>n</em> 是二叉树中的节点个数。空间复杂度主要取决于递归调用的层数，递归调用的层数不会超过 n。</p>\n<h2 id=\"18-从中序与后序遍历序列构造二叉树-106\"><a href=\"#18-从中序与后序遍历序列构造二叉树-106\" class=\"headerlink\" title=\"18. 从中序与后序遍历序列构造二叉树 [106]\"></a>18. 从中序与后序遍历序列构造二叉树 [106]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/\" target=\"_blank\" rel=\"noopener\">106. 从中序与后序遍历序列构造二叉树</a></p>\n<h3 id=\"18-1-题目描述\"><a href=\"#18-1-题目描述\" class=\"headerlink\" title=\"18.1. 题目描述\"></a>18.1. 题目描述</h3><p><img src=\"/pictures/image-20200902104235073.png\" alt=\"image-20200902104235073\"></p>\n<h3 id=\"18-2-代码\"><a href=\"#18-2-代码\" class=\"headerlink\" title=\"18.2. 代码\"></a>18.2. 代码</h3><p>递归，注意使用 map 优化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">buildTree</span><span class=\"params\">(<span class=\"keyword\">int</span>[] inorder, <span class=\"keyword\">int</span>[] postorder)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = inorder.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;&#125;</span><br><span class=\"line\">    Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        map.put(inorder[i], i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper(inorder, <span class=\"number\">0</span>, len, postorder, <span class=\"number\">0</span>, len, map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] inorder, <span class=\"keyword\">int</span> iStart, <span class=\"keyword\">int</span> iEnd, <span class=\"keyword\">int</span>[] postorder, <span class=\"keyword\">int</span> pStart, <span class=\"keyword\">int</span> pEnd, Map&lt;Integer, Integer&gt; map)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(iStart == iEnd)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;&#125;</span><br><span class=\"line\">    TreeNode root = <span class=\"keyword\">new</span> TreeNode(postorder[pEnd - <span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> rootIndex = map.get(postorder[pEnd - <span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> leftLen = rootIndex - iStart;</span><br><span class=\"line\">    root.left = helper(inorder, iStart, rootIndex , postorder, pStart, pStart + leftLen, map);</span><br><span class=\"line\">    root.right = helper(inorder, rootIndex + <span class=\"number\">1</span>, iEnd, postorder, pStart + leftLen, pEnd - <span class=\"number\">1</span>, map);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"19-二叉树展开为链表-114\"><a href=\"#19-二叉树展开为链表-114\" class=\"headerlink\" title=\"19. 二叉树展开为链表 [114]\"></a>19. 二叉树展开为链表 [114]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/\" target=\"_blank\" rel=\"noopener\">114. 二叉树展开为链表</a></p>\n<h3 id=\"19-1-题目描述\"><a href=\"#19-1-题目描述\" class=\"headerlink\" title=\"19.1. 题目描述\"></a>19.1. 题目描述</h3><p><img src=\"/pictures/image-20200903095901434.png\" alt=\"image-20200903095901434\"></p>\n<h3 id=\"19-2-代码\"><a href=\"#19-2-代码\" class=\"headerlink\" title=\"19.2. 代码\"></a>19.2. 代码</h3><p>参考 <a href=\"https://leetcode.wang/leetcode-114-Flatten-Binary-Tree-to-Linked-List.html\" target=\"_blank\" rel=\"noopener\">这里</a> 的解法一。</p>\n<p>这道题难点在于：解法一的思路想不到…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">flatten</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (root != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root.left == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            root = root.right;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 找左子树最右边节点</span></span><br><span class=\"line\">            TreeNode pre = root.left;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (pre.right != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                pre = pre.right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 将原来的右子树接到左子树的最右边</span></span><br><span class=\"line\">            pre.right = root.right;</span><br><span class=\"line\">            <span class=\"comment\">// 将左子树茶润到右子树的地方</span></span><br><span class=\"line\">            root.right = root.left;</span><br><span class=\"line\">            root.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 考虑下一个节点</span></span><br><span class=\"line\">            root = root.right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"20-填充每个节点的下一个右侧节点指针-116\"><a href=\"#20-填充每个节点的下一个右侧节点指针-116\" class=\"headerlink\" title=\"20. 填充每个节点的下一个右侧节点指针 [116]\"></a>20. 填充每个节点的下一个右侧节点指针 [116]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/\" target=\"_blank\" rel=\"noopener\">116. 填充每个节点的下一个右侧节点指针</a></p>\n<h3 id=\"20-1-题目描述\"><a href=\"#20-1-题目描述\" class=\"headerlink\" title=\"20.1. 题目描述\"></a>20.1. 题目描述</h3><p><img src=\"/pictures/image-20200907095746263.png\" alt=\"image-20200907095746263\"></p>\n<p><img src=\"/pictures/image-20200907095838051.png\" alt=\"image-20200907095838051\"></p>\n<h3 id=\"20-2-解法一：层次遍历\"><a href=\"#20-2-解法一：层次遍历\" class=\"headerlink\" title=\"20.2. 解法一：层次遍历\"></a>20.2. 解法一：层次遍历</h3><p>参考 <a href=\"https://leetcode.wang/leetcode-116-Populating-Next-Right-Pointers-in-Each-Node.html\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<p>但是这种解法不符合空间复杂度的要求，层次遍历需要 O(n) 空复。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">connect</span><span class=\"params\">(Node root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Queue&lt;Node&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 在尾部添加元素</span></span><br><span class=\"line\">    queue.add(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = queue.size();</span><br><span class=\"line\">        Node pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 移除队列第一个元素</span></span><br><span class=\"line\">            Node cur = queue.poll();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                pre.next = cur;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pre = cur;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                queue.add(cur.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                queue.add(cur.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-3-解法二：迭代\"><a href=\"#20-3-解法二：迭代\" class=\"headerlink\" title=\"20.3. 解法二：迭代\"></a>20.3. 解法二：迭代</h3><p>参考 <a href=\"https://leetcode.wang/leetcode-116-Populating-Next-Right-Pointers-in-Each-Node.html\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<p>基本思路：因为只能使用常数级别的空复，所以在遍历当前层时，就把下一层的 next 指针指好。定义三个节点，cur 当前访问节点，pre 当前节点的左侧节点，start 当前层的开始节点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">connect</span><span class=\"params\">(Node root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node pre = root;</span><br><span class=\"line\">    Node cur = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Node start = pre;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pre.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历到了最右边节点，要将 pre 和 cur 更新到下一层，并且记录 start</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cur == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 只需要把 pre 的左孩子的 next 指向右孩子（即更新下一层第一个节点的next）</span></span><br><span class=\"line\">            pre.left.next = pre.right;</span><br><span class=\"line\"></span><br><span class=\"line\">            pre = start.left;</span><br><span class=\"line\">            cur = start.right;</span><br><span class=\"line\">            start = pre;</span><br><span class=\"line\">            <span class=\"comment\">// 将下一层的 next 连起来，同时 pre next 后移</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 把 pre 的左孩子的 next 指向右孩子</span></span><br><span class=\"line\">            pre.left.next = pre.right;</span><br><span class=\"line\">            <span class=\"comment\">// 把 pre 的右孩子的 next 指向 cur 的左孩子</span></span><br><span class=\"line\">            pre.right.next = cur.left;</span><br><span class=\"line\"></span><br><span class=\"line\">            pre = pre.next;</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-4-解法三：（推荐）\"><a href=\"#20-4-解法三：（推荐）\" class=\"headerlink\" title=\"20.4. 解法三：（推荐）\"></a>20.4. 解法三：（推荐）</h3><p>参考 <a href=\"https://leetcode.wang/leetcode-117-Populating-Next-Right-Pointers-in-Each-NodeII.html\" target=\"_blank\" rel=\"noopener\">这里</a> ，这是 [117] 题的解法，同样适用于本题，而且好理解。</p>\n<p>基本思路：利用层次遍历的思路，同时使用上一层已经存好的 next 指针，在依次访问当前层元素时，把下一层的 next 指针指好。每一层的开始节点利用 dummy 节点，即 dummy 节点的 next 指针指向每一层的开始节点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">connect</span><span class=\"params\">(Node root)</span> </span>&#123;</span><br><span class=\"line\">    Node cur = root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        Node dummy = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">        Node tail = dummy;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历当前层</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cur.left != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                tail.next = cur.left;</span><br><span class=\"line\">                tail = tail.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cur.right != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                tail.next = cur.right;</span><br><span class=\"line\">                tail = tail.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 更新到下一层</span></span><br><span class=\"line\">        cur = dummy.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"21-填充每个节点的下一个右侧节点指针-II-117\"><a href=\"#21-填充每个节点的下一个右侧节点指针-II-117\" class=\"headerlink\" title=\"21. 填充每个节点的下一个右侧节点指针 II [117]\"></a>21. 填充每个节点的下一个右侧节点指针 II [117]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node-ii/\" target=\"_blank\" rel=\"noopener\">117. 填充每个节点的下一个右侧节点指针 II</a></p>\n<h3 id=\"21-1-题目描述\"><a href=\"#21-1-题目描述\" class=\"headerlink\" title=\"21.1. 题目描述\"></a>21.1. 题目描述</h3><p><img src=\"../pictures/image-20200908091720713.png\" alt=\"image-20200908091720713\"></p>\n<h3 id=\"21-2-方法一：层次遍历\"><a href=\"#21-2-方法一：层次遍历\" class=\"headerlink\" title=\"21.2. 方法一：层次遍历\"></a>21.2. 方法一：层次遍历</h3><p>同上一题的层次遍历。依旧是空复不符合要求。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">connect</span><span class=\"params\">(Node root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Queue&lt;Node&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 在尾部添加元素</span></span><br><span class=\"line\">    queue.add(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = queue.size();</span><br><span class=\"line\">        Node pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 移除队列第一个元素</span></span><br><span class=\"line\">            Node cur = queue.poll();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                pre.next = cur;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pre = cur;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                queue.add(cur.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                queue.add(cur.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"21-3-方法二\"><a href=\"#21-3-方法二\" class=\"headerlink\" title=\"21.3. 方法二\"></a>21.3. 方法二</h3><p>参考 <a href=\"https://leetcode.wang/leetcode-117-Populating-Next-Right-Pointers-in-Each-NodeII.html\" target=\"_blank\" rel=\"noopener\">这里</a> 的解法三。</p>\n<p>利用层次遍历的思路，同时使用上一层已经存好的 next 指针，在依次访问当前层元素时，把下一层的 next 指针指好。</p>\n<p>每一层的开始节点使用 dummy 节点，dummy 节点的 next 指针指向每一层的开始节点。</p>\n<p>这种解法同样适用于上一题 [116]。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">connect2</span><span class=\"params\">(Node root)</span> </span>&#123;</span><br><span class=\"line\">    Node cur = root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        Node dummy = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">        Node tail = dummy;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历当前层</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cur.left != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                tail.next = cur.left;</span><br><span class=\"line\">                tail = tail.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cur.right != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                tail.next = cur.right;</span><br><span class=\"line\">                tail = tail.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 更新到下一层</span></span><br><span class=\"line\">        cur = dummy.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"22-二叉树中的最大路径和-124\"><a href=\"#22-二叉树中的最大路径和-124\" class=\"headerlink\" title=\"22. 二叉树中的最大路径和 [124]\"></a>22. 二叉树中的最大路径和 [124]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/\" target=\"_blank\" rel=\"noopener\">124. 二叉树中的最大路径和</a></p>\n<h3 id=\"22-1-题目描述\"><a href=\"#22-1-题目描述\" class=\"headerlink\" title=\"22.1. 题目描述\"></a>22.1. 题目描述</h3><p><img src=\"../pictures/image-20200915154342061.png\" alt=\"image-20200915154342061\"></p>\n<h3 id=\"22-2-代码\"><a href=\"#22-2-代码\" class=\"headerlink\" title=\"22.2. 代码\"></a>22.2. 代码</h3><p>参考 <a href=\"https://leetcode.wang/leetcode-124-Binary-Tree-Maximum-Path-Sum.html\" target=\"_blank\" rel=\"noopener\">这里</a> ，难点在于根本想不到..</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> max = Integer.MIN_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxPathSum</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    helper(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">helper</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = Math.max(helper(root.left), <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = Math.max(helper(root.right), <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 求的过程中考虑包含当前根节点的最大路径</span></span><br><span class=\"line\">    max = Math.max(max, root.val + left + right);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 只返回包含当前根节点和左子树或者右子树的路径</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root.val + Math.max(left, right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"23-参考引用\"><a href=\"#23-参考引用\" class=\"headerlink\" title=\"23. 参考引用\"></a>23. 参考引用</h2><ol>\n<li><a href=\"https://zh.wikipedia.org/wiki/二叉树\" target=\"_blank\" rel=\"noopener\">Wikipedia</a></li>\n<li><a href=\"https://leetcode.wang/leetCode-94-Binary-Tree-Inorder-Traversal.html\" target=\"_blank\" rel=\"noopener\">https://leetcode.wang/leetCode-94-Binary-Tree-Inorder-Traversal.html</a></li>\n<li><a href=\"https://leetcode.wang/leetcode-102-Binary-Tree-Level-Order-Traversal.html\" target=\"_blank\" rel=\"noopener\">https://leetcode.wang/leetcode-102-Binary-Tree-Level-Order-Traversal.html</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/qian-xu-bian-li-python-dai-ma-java-dai-ma-by-liwei/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/qian-xu-bian-li-python-dai-ma-java-dai-ma-by-liwei/</a></li>\n<li><a href=\"https://leetcode.wang/leetcode-99-Recover-Binary-Search-Tree.html\" target=\"_blank\" rel=\"noopener\">https://leetcode.wang/leetcode-99-Recover-Binary-Search-Tree.html</a></li>\n<li><a href=\"https://leetcode.wang/leetcode-117-Populating-Next-Right-Pointers-in-Each-NodeII.html\" target=\"_blank\" rel=\"noopener\">https://leetcode.wang/leetcode-117-Populating-Next-Right-Pointers-in-Each-NodeII.html</a></li>\n</ol>\n","site":{"data":{}},"length":26364,"excerpt":"<p>本文介绍了什么是二叉树，同时解决了部分LeetCode上二叉树相关的题目，这部分会持续更新。</p>\n<h2 id=\"1-什么是二叉树？\"><a href=\"#1-什么是二叉树？\" class=\"headerlink\" title=\"1. 什么是二叉树？\"></a>1. 什么是二叉树？</h2><p><a href=\"https://zh.wikipedia.org/wiki/二叉树\" target=\"_blank\" rel=\"noopener\">维基定义</a>：在计算机科学中，二叉树（英语：Binary tree）是每个节点最多只有两个分支（即不存在分支度大于2的节点）的树结构。通常分支被称作“左子树”或“右子树”。二叉树的分支具有左右次序，不能随意颠倒。</p>\n<p>二叉树的第 <code>i</code> 层至多拥有 2<sup>i-1</sup> 个节点；深度为 k 的二叉树至多总共有 2<sup>k</sup>-1 个节点（定义根节点所在深度 k<sub>0</sub>=0}），而总计拥有节点数符合的，称为 <strong>满二叉树</strong>；深度为 k 有 n 个节点的二叉树，当且仅当其中的每一节点，都可以和同样深度 k 的满二叉树，序号为1到 n 的节点一对一对应时，称为 <strong>完全二叉树</strong>。对任何一棵非空的二叉树T，如果其叶片（终端节点）数为 n<sub>0</sub>，分支度为2的节点数为 n<sub>2</sub>，则 n<sub>0</sub> = n<sub>2</sub> + 1。</p>\n<p>与普通树不同，普通树的节点个数至少为1，而二叉树的节点个数可以为0；普通树节点的最大分支度没有限制，而二叉树节点的最大分支度为2；普通树的节点无左、右次序之分，而二叉树的节点有左、右次序之分。</p>\n<p>二叉树通常作为数据结构应用，典型用法是对节点定义一个标记函数，将一些值与每个节点相关系。这样标记的二叉树就可以实现二叉搜索树和二叉堆，并应用于高效率的搜索和排序。</p>","more":"<h2 id=\"2-二叉树相关的题目列表\"><a href=\"#2-二叉树相关的题目列表\" class=\"headerlink\" title=\"2. 二叉树相关的题目列表\"></a>2. 二叉树相关的题目列表</h2><table>\n<thead>\n<tr>\n<th align=\"center\">#</th>\n<th align=\"center\">Title</th>\n<th align=\"center\">Remark</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">94</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/binary-tree-inorder-traversal/\" target=\"_blank\" rel=\"noopener\">二叉树的中序遍历</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">144</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/binary-tree-preorder-traversal/\" target=\"_blank\" rel=\"noopener\">二叉树的前序遍历</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">145</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/binary-tree-postorder-traversal/\" target=\"_blank\" rel=\"noopener\">二叉树的后序遍历</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">102</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/\" target=\"_blank\" rel=\"noopener\">二叉树的层序遍历</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">107</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/\" target=\"_blank\" rel=\"noopener\">二叉树的层次遍历 II</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">104</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/\" target=\"_blank\" rel=\"noopener\">二叉树的最大深度</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">100</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/same-tree/\" target=\"_blank\" rel=\"noopener\">相同的树</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">101</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/symmetric-tree/\" target=\"_blank\" rel=\"noopener\">对称二叉树</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">103</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/\" target=\"_blank\" rel=\"noopener\">二叉树的锯齿形层次遍历</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">105</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/\" target=\"_blank\" rel=\"noopener\">从前序与中序遍历序列构造二叉树</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">106</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/\" target=\"_blank\" rel=\"noopener\">从中序与后序遍历序列构造二叉树</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">98</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/validate-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">验证二叉搜索树</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">99</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/recover-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">恢复二叉搜索树</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">108</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">将有序数组转换为二叉搜索树</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">109</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">有序链表转换二叉搜索树</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">110</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/balanced-binary-tree/\" target=\"_blank\" rel=\"noopener\">平衡二叉树</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">114</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/\" target=\"_blank\" rel=\"noopener\">二叉树展开为链表</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">116</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/\" target=\"_blank\" rel=\"noopener\"> 填充每个节点的下一个右侧节点指针</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">117</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node-ii/\" target=\"_blank\" rel=\"noopener\">填充每个节点的下一个右侧节点指针 II</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">124</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/\" target=\"_blank\" rel=\"noopener\">二叉树中的最大路径和</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-1-队列操作总结（LinkedList）\"><a href=\"#2-1-队列操作总结（LinkedList）\" class=\"headerlink\" title=\"2.1. 队列操作总结（LinkedList）\"></a>2.1. 队列操作总结（LinkedList）</h3><p>参考 <a href=\"https://blog.csdn.net/NRlovestudy/article/details/98666030\" target=\"_blank\" rel=\"noopener\">这里</a>，具体操作如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Deque&lt;String&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">// 入队</span></span><br><span class=\"line\"><span class=\"comment\">// 尾部添加元素</span></span><br><span class=\"line\">queue.add(<span class=\"string\">\"A\"</span>);</span><br><span class=\"line\">queue.add(<span class=\"string\">\"B\"</span>);</span><br><span class=\"line\">queue.add(<span class=\"string\">\"C\"</span>);</span><br><span class=\"line\">System.out.println(queue); <span class=\"comment\">// [A, B, C]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取但不删除第一个元素</span></span><br><span class=\"line\">String peek = queue.peek();</span><br><span class=\"line\">System.out.println(peek + <span class=\"string\">\" ## \"</span> + queue); <span class=\"comment\">// A ## [A, B, C]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取并删除第一个元素，没有元素时会发生异常</span></span><br><span class=\"line\">String pop = queue.pop();</span><br><span class=\"line\">System.out.println(pop + <span class=\"string\">\" ## \"</span> + queue); <span class=\"comment\">// A ## [B, C]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出队</span></span><br><span class=\"line\"><span class=\"comment\">// 获取并删除第一个元素，没有元素时返回null</span></span><br><span class=\"line\">String poll = queue.poll();</span><br><span class=\"line\">System.out.println(poll + <span class=\"string\">\" ## \"</span> + poll); <span class=\"comment\">// B ## B</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判空</span></span><br><span class=\"line\">System.out.println(queue.isEmpty());    <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<p>总结：pop 与 poll 都是取出 LinkedList 的第一个元素，并将该元素删除，等效于 removeFirst；不同点：两者的实现所用数据结构不同：</p>\n<ul>\n<li>poll 是基于队列结构实现的方法，当队列中没有元素时，调用该方法返回 null</li>\n<li>pop 是基于栈结构实现的方法，当栈中没有元素时，调用该方法会发生异常</li>\n</ul>\n<h3 id=\"2-2-栈操作总结（ArrayDeque）\"><a href=\"#2-2-栈操作总结（ArrayDeque）\" class=\"headerlink\" title=\"2.2. 栈操作总结（ArrayDeque）\"></a>2.2. 栈操作总结（ArrayDeque）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Deque&lt;String&gt; stack = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">// 入栈，即在首部添加元素</span></span><br><span class=\"line\">stack.push(<span class=\"string\">\"A\"</span>);</span><br><span class=\"line\">stack.push(<span class=\"string\">\"B\"</span>);</span><br><span class=\"line\">stack.push(<span class=\"string\">\"C\"</span>);</span><br><span class=\"line\">System.out.println(stack);      <span class=\"comment\">// [C, B, A]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取栈顶元素，即第一个元素</span></span><br><span class=\"line\">System.out.println(stack.peek() + <span class=\"string\">\" ## \"</span> + stack); <span class=\"comment\">// C ## [C, B, A]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出栈，即获取并删除第一个元素</span></span><br><span class=\"line\">System.out.println(stack.pop() + <span class=\"string\">\" ## \"</span> + stack);    <span class=\"comment\">// C ## [B, A]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判空</span></span><br><span class=\"line\">System.out.println(stack.isEmpty());    <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-二叉树的中序遍历-94\"><a href=\"#3-二叉树的中序遍历-94\" class=\"headerlink\" title=\"3. 二叉树的中序遍历 [94]\"></a>3. 二叉树的中序遍历 [94]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/binary-tree-inorder-traversal/\" target=\"_blank\" rel=\"noopener\">94. 二叉树的中序遍历</a></p>\n<h3 id=\"3-1-题目描述\"><a href=\"#3-1-题目描述\" class=\"headerlink\" title=\"3.1. 题目描述\"></a>3.1. 题目描述</h3><p>给定一个二叉树，返回它的中序 遍历。</p>\n<p>示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,null,2,3]</span><br><span class=\"line\">   1</span><br><span class=\"line\">    \\</span><br><span class=\"line\">     2</span><br><span class=\"line\">    /</span><br><span class=\"line\">   3</span><br><span class=\"line\"></span><br><span class=\"line\">输出: [1,3,2]</span><br></pre></td></tr></table></figure>\n\n\n<p>进阶: 递归算法很简单，你可以通过迭代算法完成吗？</p>\n<h3 id=\"3-2-题目分析\"><a href=\"#3-2-题目分析\" class=\"headerlink\" title=\"3.2. 题目分析\"></a>3.2. 题目分析</h3><p>分析参考 <a href=\"https://leetcode.wang/leetCode-94-Binary-Tree-Inorder-Traversal.html\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<p>中序遍历使用两种方法：递归和迭代。</p>\n<h3 id=\"3-3-方法一：递归\"><a href=\"#3-3-方法一：递归\" class=\"headerlink\" title=\"3.3. 方法一：递归\"></a>3.3. 方法一：递归</h3><p>时间：O(n)，遍历每个节点；空间：O(h)，压栈消耗，h 是二叉树的高度。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">inorderTraversal</span><span class=\"params\">(TreeNode root)</span></span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    helper(root, res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(TreeNode node, List&lt;Integer&gt; res)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    helper(node.left, res);</span><br><span class=\"line\">    res.add(node.val);</span><br><span class=\"line\">    helper(node.right, res);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-方法二：栈\"><a href=\"#3-4-方法二：栈\" class=\"headerlink\" title=\"3.4. 方法二：栈\"></a>3.4. 方法二：栈</h3><p>时间：O(n)，遍历每个节点；空间：O(h)，压栈消耗，h 是二叉树的高度。</p>\n<p>利用栈模拟递归。递归压栈过程，就是保存现场，保存当前的变量。在方法一中，当前有用的变量就是 node，所以我们用栈把每一次的 node 保存起来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">inorderTraversal</span><span class=\"params\">(TreeNode root)</span></span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 程序中尽量避免使用Stack类，太古老，性能差，使用ArrayDeque代替</span></span><br><span class=\"line\">    Deque&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br><span class=\"line\">    TreeNode curr = root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span> || !stack.isEmpty())&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 节点不为空就一直压栈</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            stack.push(curr);</span><br><span class=\"line\">            <span class=\"comment\">// 考虑左子树</span></span><br><span class=\"line\">            curr = curr.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 节点为空，就出栈</span></span><br><span class=\"line\">        curr = stack.pop();</span><br><span class=\"line\">        res.add(curr.val);</span><br><span class=\"line\">        <span class=\"comment\">// 考虑右子树</span></span><br><span class=\"line\">        curr = curr.right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-二叉树的前序遍历-144\"><a href=\"#4-二叉树的前序遍历-144\" class=\"headerlink\" title=\"4. 二叉树的前序遍历 [144]\"></a>4. 二叉树的前序遍历 [144]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/binary-tree-preorder-traversal/\" target=\"_blank\" rel=\"noopener\">144. 二叉树的前序遍历</a></p>\n<h3 id=\"4-1-题目描述\"><a href=\"#4-1-题目描述\" class=\"headerlink\" title=\"4.1. 题目描述\"></a>4.1. 题目描述</h3><p>给定一个二叉树，返回它的 前序 遍历。</p>\n<p>示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,null,2,3]  </span><br><span class=\"line\">   1</span><br><span class=\"line\">    \\</span><br><span class=\"line\">     2</span><br><span class=\"line\">    /</span><br><span class=\"line\">   3 </span><br><span class=\"line\"></span><br><span class=\"line\">输出: [1,2,3]</span><br></pre></td></tr></table></figure>\n\n\n<p>进阶: 递归算法很简单，你可以通过迭代算法完成吗？</p>\n<h3 id=\"4-2-题目分析\"><a href=\"#4-2-题目分析\" class=\"headerlink\" title=\"4.2. 题目分析\"></a>4.2. 题目分析</h3><p>中序遍历的迭代法也使用栈实现。</p>\n<h3 id=\"4-3-方法一：递归\"><a href=\"#4-3-方法一：递归\" class=\"headerlink\" title=\"4.3. 方法一：递归\"></a>4.3. 方法一：递归</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">preorderTraversal</span><span class=\"params\">(TreeNode root)</span></span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    helper(root, res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(TreeNode node, List&lt;Integer&gt; res)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    res.add(node.val);</span><br><span class=\"line\">    helper(node.left, res);</span><br><span class=\"line\">    helper(node.right, res);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-4-方法二：栈\"><a href=\"#4-4-方法二：栈\" class=\"headerlink\" title=\"4.4. 方法二：栈\"></a>4.4. 方法二：栈</h3><p>与中序遍历的迭代方法相比，前序遍历只需要将访问的位置改到根节点处即可，其他代码不变。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">preorderTraversal</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    Deque&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br><span class=\"line\">    TreeNode curr = root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span> || !stack.isEmpty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在此处访问节点</span></span><br><span class=\"line\">            res.add(curr.val);</span><br><span class=\"line\">            stack.push(curr);</span><br><span class=\"line\">            curr = curr.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        curr = stack.poll();</span><br><span class=\"line\">        curr = curr.right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-二叉树的后序遍历-145\"><a href=\"#5-二叉树的后序遍历-145\" class=\"headerlink\" title=\"5. 二叉树的后序遍历 [145]\"></a>5. 二叉树的后序遍历 [145]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/binary-tree-postorder-traversal/\" target=\"_blank\" rel=\"noopener\">145. 二叉树的后序遍历</a></p>\n<h3 id=\"5-1-题目描述\"><a href=\"#5-1-题目描述\" class=\"headerlink\" title=\"5.1. 题目描述\"></a>5.1. 题目描述</h3><p>给定一个二叉树，返回它的 后序 遍历。</p>\n<p>示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,null,2,3]  </span><br><span class=\"line\">   1</span><br><span class=\"line\">    \\</span><br><span class=\"line\">     2</span><br><span class=\"line\">    /</span><br><span class=\"line\">   3 </span><br><span class=\"line\"></span><br><span class=\"line\">输出: [3,2,1]</span><br></pre></td></tr></table></figure>\n\n\n<p>进阶: 递归算法很简单，你可以通过迭代算法完成吗？</p>\n<h3 id=\"5-2-方法一：递归\"><a href=\"#5-2-方法一：递归\" class=\"headerlink\" title=\"5.2. 方法一：递归\"></a>5.2. 方法一：递归</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">postorderTraversal</span><span class=\"params\">(TreeNode root)</span></span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    helper(root, res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(TreeNode node, List&lt;Integer&gt; res)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    helper(node.left, res);</span><br><span class=\"line\">    helper(node.right, res);</span><br><span class=\"line\">    res.add(node.val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-3-方法二：栈\"><a href=\"#5-3-方法二：栈\" class=\"headerlink\" title=\"5.3. 方法二：栈\"></a>5.3. 方法二：栈</h3><p>相比于前序、中序的栈解法，后序遍历的栈解法会难一些。</p>\n<p>原因在于，当遍历完某个根节点的左子树，回到根节点时，中序、先序可以把当前根节点从栈中弹出，然后转到右子树。举例如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    1</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  2   3</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">4   5</span><br></pre></td></tr></table></figure>\n\n<p>当遍历完 2,4,5 时，回到 1 之后就可以把 1 弹出，然后通过 1 到达右子树继续遍历。</p>\n<p>而对于后序遍历，当我们到达 1 时，并不能立即把 1 弹出，因为遍历完右子树，还需要将根节点加入到 res 中。</p>\n<p>因此，我们就需要判断是从左子树到的根节点，还是从右子树到的根节点。</p>\n<p>如果是从左子树到的根节点，此时应该转到右子树。如果从右子树到的根节点，那么就可以弹出当前节点，并存储到 res 中。</p>\n<p>当然，如果从左子树到的根节点，此时右子树为 null, 也需要把根节点弹出，并加入到 res 中。</p>\n<p>基于上述分析，我们可以写出代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">postorderTraversal</span><span class=\"params\">(TreeNode root)</span></span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    Deque&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br><span class=\"line\">    TreeNode curr = root;</span><br><span class=\"line\">    <span class=\"comment\">// 记录上一个遍历的节点</span></span><br><span class=\"line\">    TreeNode pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span> || !stack.isEmpty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            stack.push(curr);</span><br><span class=\"line\">            curr = curr.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 获取当前根节点</span></span><br><span class=\"line\">        TreeNode temp = stack.peek();</span><br><span class=\"line\">        <span class=\"comment\">// 是否变到右子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp.right != <span class=\"keyword\">null</span> &amp;&amp; temp.right != pre)&#123;</span><br><span class=\"line\">            curr = temp.right;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            res.add(temp.val);</span><br><span class=\"line\">            <span class=\"comment\">// 记录上一个遍历的节点</span></span><br><span class=\"line\">            pre = temp;</span><br><span class=\"line\">            stack.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-二叉树的层序遍历-102\"><a href=\"#6-二叉树的层序遍历-102\" class=\"headerlink\" title=\"6. 二叉树的层序遍历 [102]\"></a>6. 二叉树的层序遍历 [102]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/\" target=\"_blank\" rel=\"noopener\">102. 二叉树的层序遍历</a></p>\n<h3 id=\"6-1-题目描述\"><a href=\"#6-1-题目描述\" class=\"headerlink\" title=\"6.1. 题目描述\"></a>6.1. 题目描述</h3><p>给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p>\n<p>示例：<br>二叉树：[3,9,20,null,null,15,7],</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">  / \\</span><br><span class=\"line\"> 9  20</span><br><span class=\"line\">   /  \\</span><br><span class=\"line\">  15   7</span><br></pre></td></tr></table></figure>\n\n<p>返回其层次遍历结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [3],</span><br><span class=\"line\">  [9,20],</span><br><span class=\"line\">  [15,7]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-2-方法一：递归（DFS）\"><a href=\"#6-2-方法一：递归（DFS）\" class=\"headerlink\" title=\"6.2. 方法一：递归（DFS）\"></a>6.2. 方法一：递归（DFS）</h3><p>由于本题对于层序遍历的结果要求为 <code>List&lt;List&lt;Integer&gt;&gt;</code>, 要把每一层的元素放在一个单独的列表中，因此在递归时需要传入当前层数，如果是新的一层，创建一个新的 <code>List</code> , 存储这一层的元素。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> res;&#125;</span><br><span class=\"line\">    helper(root, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(TreeNode node, Integer level)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(res.size() == level)&#123;</span><br><span class=\"line\">        res.add(<span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.get(level).add(node.val);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.left != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        helper(node.left, level + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.right != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        helper(node.right, level + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-3-方法二：队列（BFS）\"><a href=\"#6-3-方法二：队列（BFS）\" class=\"headerlink\" title=\"6.3. 方法二：队列（BFS）\"></a>6.3. 方法二：队列（BFS）</h3><p>依旧是本题对于返回结果的要求，每一层需要单独处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Queue&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    queue.add(root);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!queue.isEmpty())&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当前层列表</span></span><br><span class=\"line\">        List&lt;Integer&gt; level = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 当前队列中的元素个数，即就是当前层的节点数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> levelNum = queue.size();</span><br><span class=\"line\">        <span class=\"comment\">// levelNum 必须在外面定义，因为 queue 的大小在不停的变化</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; levelNum; i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 移除队列第一个元素</span></span><br><span class=\"line\">            TreeNode node = queue.remove();</span><br><span class=\"line\">            level.add(node.val);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.left != <span class=\"keyword\">null</span>)&#123;queue.add(node.left);&#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.right != <span class=\"keyword\">null</span>)&#123;queue.add(node.right);&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res.add(level);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-二叉树的层次遍历-II-107\"><a href=\"#7-二叉树的层次遍历-II-107\" class=\"headerlink\" title=\"7. 二叉树的层次遍历 II [107]\"></a>7. 二叉树的层次遍历 II [107]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/\" target=\"_blank\" rel=\"noopener\">107. 二叉树的层次遍历 II</a></p>\n<h3 id=\"7-1-题目描述\"><a href=\"#7-1-题目描述\" class=\"headerlink\" title=\"7.1. 题目描述\"></a>7.1. 题目描述</h3><p>给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p>\n<p>例如：<br>给定二叉树 [3,9,20,null,null,15,7],</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">  / \\</span><br><span class=\"line\"> 9  20</span><br><span class=\"line\">   /  \\</span><br><span class=\"line\">  15   7</span><br></pre></td></tr></table></figure>\n\n<p>返回其自底向上的层次遍历为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [15,7],</span><br><span class=\"line\">  [9,20],</span><br><span class=\"line\">  [3]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-2-方法一：递归\"><a href=\"#7-2-方法一：递归\" class=\"headerlink\" title=\"7.2. 方法一：递归\"></a>7.2. 方法一：递归</h3><p>本题的结果是上一题结果的反序，只需要在上一题添加列表时，在表头插入，以此得到反序序列即可。如下代码，改变三处：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用链表存储，在表头插入效率更高</span></span><br><span class=\"line\">LinkedList&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> res;&#125;</span><br><span class=\"line\">    helper(root, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(TreeNode node, Integer level)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(res.size() == level)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在链表表头插入，得到反序序列</span></span><br><span class=\"line\">        res.addFirst(<span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 插入当前值，注意下标</span></span><br><span class=\"line\">    res.get(res.size() - level - <span class=\"number\">1</span>).add(node.val);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.left != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        helper(node.left, level + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.right != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        helper(node.right, level + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-3-方法二：队列\"><a href=\"#7-3-方法二：队列\" class=\"headerlink\" title=\"7.3. 方法二：队列\"></a>7.3. 方法二：队列</h3><p>与上一题区别：使用链表存储，插入时从表头插入，得到反序序列。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用链表，在表头插入效率更高</span></span><br><span class=\"line\">    LinkedList&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Queue&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    queue.add(root);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!queue.isEmpty())&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; level = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> levelNum = queue.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; levelNum; i++)&#123;</span><br><span class=\"line\">            TreeNode node = queue.remove();</span><br><span class=\"line\">            level.add(node.val);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.left != <span class=\"keyword\">null</span>)&#123;queue.add(node.left);&#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.right != <span class=\"keyword\">null</span>)&#123;queue.add(node.right);&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 在表头插入，得到反序结果</span></span><br><span class=\"line\">        res.addFirst(level);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-二叉树的最大深度-104\"><a href=\"#8-二叉树的最大深度-104\" class=\"headerlink\" title=\"8. 二叉树的最大深度 [104]\"></a>8. 二叉树的最大深度 [104]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/\" target=\"_blank\" rel=\"noopener\">104. 二叉树的最大深度</a></p>\n<h3 id=\"8-1-题目描述\"><a href=\"#8-1-题目描述\" class=\"headerlink\" title=\"8.1.. 题目描述\"></a>8.1.. 题目描述</h3><p>给定一个二叉树，找出其最大深度。</p>\n<p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p>\n<p>说明: 叶子节点是指没有子节点的节点。</p>\n<p>示例：<br>给定二叉树 [3,9,20,null,null,15,7]，</p>\n<pre><code>  3\n / \\\n9  20\n  /  \\\n 15   7</code></pre><p>返回它的最大深度 3 。</p>\n<h3 id=\"8-2-方法一：递归（DFS）\"><a href=\"#8-2-方法一：递归（DFS）\" class=\"headerlink\" title=\"8.2. 方法一：递归（DFS）\"></a>8.2. 方法一：递归（DFS）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.max(maxDepth(root.left), maxDepth(root.right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-3-方法二：层次遍历（BFS）\"><a href=\"#8-3-方法二：层次遍历（BFS）\" class=\"headerlink\" title=\"8.3. 方法二：层次遍历（BFS）\"></a>8.3. 方法二：层次遍历（BFS）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    LinkedList&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    queue.add(root);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> level = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty())&#123;</span><br><span class=\"line\">        level++;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = queue.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)&#123;</span><br><span class=\"line\">            TreeNode node = queue.remove();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.left != <span class=\"keyword\">null</span>)&#123;queue.add(node.left);&#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.right != <span class=\"keyword\">null</span>)&#123; queue.add(node.right);&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> level;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-相同的树-100\"><a href=\"#9-相同的树-100\" class=\"headerlink\" title=\"9. 相同的树 [100]\"></a>9. 相同的树 [100]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/same-tree/\" target=\"_blank\" rel=\"noopener\">100. 相同的树</a></p>\n<h3 id=\"9-1-题目描述\"><a href=\"#9-1-题目描述\" class=\"headerlink\" title=\"9.1. 题目描述\"></a>9.1. 题目描述</h3><p>给定两个二叉树，编写一个函数来检验它们是否相同。</p>\n<p>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</p>\n<p>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:       1         1</span><br><span class=\"line\">          / \\       / \\</span><br><span class=\"line\">         2   3     2   3</span><br><span class=\"line\"></span><br><span class=\"line\">        [1,2,3],   [1,2,3]</span><br><span class=\"line\"></span><br><span class=\"line\">输出: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>示例 2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:      1          1</span><br><span class=\"line\">          /           \\</span><br><span class=\"line\">         2             2</span><br><span class=\"line\"></span><br><span class=\"line\">        [1,2],     [1,null,2]</span><br><span class=\"line\"></span><br><span class=\"line\">输出: <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n\n<p>示例 3:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:       1         1</span><br><span class=\"line\">          / \\       / \\</span><br><span class=\"line\">         2   1     1   2</span><br><span class=\"line\"></span><br><span class=\"line\">        [1,2,1],   [1,1,2]</span><br><span class=\"line\"></span><br><span class=\"line\">输出: <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-2-代码\"><a href=\"#9-2-代码\" class=\"headerlink\" title=\"9.2. 代码\"></a>9.2. 代码</h3><p>思路：对两颗树同时进行遍历比较，这里使用的是中序遍历。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSameTree</span><span class=\"params\">(TreeNode p, TreeNode q)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p == <span class=\"keyword\">null</span> &amp;&amp; q == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p != <span class=\"keyword\">null</span> &amp;&amp; q != <span class=\"keyword\">null</span> &amp;&amp; p.val == q.val)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-对称二叉树-101\"><a href=\"#10-对称二叉树-101\" class=\"headerlink\" title=\"10. 对称二叉树 [101]\"></a>10. 对称二叉树 [101]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/symmetric-tree/\" target=\"_blank\" rel=\"noopener\">101. 对称二叉树</a></p>\n<h3 id=\"10-1-题目描述\"><a href=\"#10-1-题目描述\" class=\"headerlink\" title=\"10.1. 题目描述\"></a>10.1. 题目描述</h3><p>给定一个二叉树，检查它是否是镜像对称的。</p>\n<p>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。</p>\n<pre><code>    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3</code></pre><p>但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:</p>\n<pre><code>  1\n / \\\n2   2\n \\   \\\n 3    3</code></pre><p>进阶：</p>\n<p>你可以运用递归和迭代两种方法解决这个问题吗？</p>\n<h3 id=\"10-2-方法一：递归\"><a href=\"#10-2-方法一：递归\" class=\"headerlink\" title=\"10.2. 方法一：递归\"></a>10.2. 方法一：递归</h3><p>不是简单的比较左右就行，注意这道题是镜像对称的。这里的递归是基于先序遍历的，先看根节点，再判断左右节点，再判断左右节点的子节点是否为镜像对称。</p>\n<p>其实就是类似于 DFS 的先序遍历。不同之处是对于 left 子树是正常的先序遍历 根节点 -&gt; 左子树 -&gt; 右子树 的顺序，对于 right 子树的话是 根节点 -&gt; 右子树 -&gt; 左子树 的顺序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSymmetric</span><span class=\"params\">(TreeNode root)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isMirror(root.left, root.right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMirror</span><span class=\"params\">(TreeNode p, TreeNode q)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p == <span class=\"keyword\">null</span> &amp;&amp; q == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p == <span class=\"keyword\">null</span> || q == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p.val == q.val)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isMirror(p.left, q.right) &amp;&amp; isMirror(p.right, q.left);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-3-方法二：迭代（栈）\"><a href=\"#10-3-方法二：迭代（栈）\" class=\"headerlink\" title=\"10.3. 方法二：迭代（栈）\"></a>10.3. 方法二：迭代（栈）</h3><p>参考：<a href=\"https://leetcode.wang/leetcode-101-Symmetric-Tree.html#解法二-dfs-栈\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<p>把方法一的先序遍历，使用栈将递归改为迭代。使用两个栈分别存储左右字数的序列，出栈时比较。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSymmetric</span><span class=\"params\">(TreeNode root)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;&#125;</span><br><span class=\"line\">    Deque&lt;TreeNode&gt; leftStack = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br><span class=\"line\">    Deque&lt;TreeNode&gt; rightStack = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br><span class=\"line\">    TreeNode leftCur = root.left;</span><br><span class=\"line\">    TreeNode rightCur = root.right;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (leftCur != <span class=\"keyword\">null</span> || rightCur != <span class=\"keyword\">null</span> || !leftStack.isEmpty() || !rightStack.isEmpty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (leftCur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            leftStack.push(leftCur);</span><br><span class=\"line\">            <span class=\"comment\">// 考虑左子树</span></span><br><span class=\"line\">            leftCur = leftCur.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (rightCur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            rightStack.push(rightCur);</span><br><span class=\"line\">            <span class=\"comment\">// 考虑右子树</span></span><br><span class=\"line\">            rightCur = rightCur.right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 长度不同，就返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(leftStack.size() != rightStack.size())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 出栈</span></span><br><span class=\"line\">        leftCur = leftStack.poll();</span><br><span class=\"line\">        rightCur = rightStack.poll();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(leftCur.val != rightCur.val)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 考虑右子树</span></span><br><span class=\"line\">        leftCur = leftCur.right;</span><br><span class=\"line\">        <span class=\"comment\">// 考虑左子树</span></span><br><span class=\"line\">        rightCur = rightCur.left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11-二叉树的锯齿形层次遍历-103\"><a href=\"#11-二叉树的锯齿形层次遍历-103\" class=\"headerlink\" title=\"11. 二叉树的锯齿形层次遍历 [103]\"></a>11. 二叉树的锯齿形层次遍历 [103]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/\" target=\"_blank\" rel=\"noopener\">103. 二叉树的锯齿形层次遍历</a></p>\n<h3 id=\"11-1-题目描述\"><a href=\"#11-1-题目描述\" class=\"headerlink\" title=\"11.1. 题目描述\"></a>11.1. 题目描述</h3><p><img src=\"/pictures/image-20200819111819257.png\" alt=\"image-20200819111819257\"></p>\n<h3 id=\"11-2-代码\"><a href=\"#11-2-代码\" class=\"headerlink\" title=\"11.2. 代码\"></a>11.2. 代码</h3><p>在 [102] 题的基础上，改变在当前层中加入元素的顺序即可完成。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; zigzagLevelOrder(TreeNode root) &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Deque&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    queue.add(root);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> depth = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!queue.isEmpty())&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当前层列表</span></span><br><span class=\"line\">        List&lt;Integer&gt; level = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> levelNum = queue.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; levelNum; i++)&#123;</span><br><span class=\"line\">            TreeNode node = queue.remove();</span><br><span class=\"line\">            <span class=\"comment\">// 在当前层列表中加入元素（只需要改变这里）</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(depth % <span class=\"number\">2</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                level.add(node.val);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                level.add(<span class=\"number\">0</span>, node.val);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.left != <span class=\"keyword\">null</span>)&#123;queue.add(node.left);&#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.right != <span class=\"keyword\">null</span>)&#123;queue.add(node.right);&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res.add(level);</span><br><span class=\"line\">        depth++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过本题加深了对层次遍历迭代解法的理解，代码中通过队列进行层次遍历，即整个遍历的顺序都是在队列的帮助下实现的，其中的 res、level 等都是为了输出结果的形式而定义的。本题依旧是层次遍历，只是在添加结果时，不同的层添加结果的顺序不同。</p>\n<h2 id=\"12-从前序与中序遍历序列构造二叉树-105\"><a href=\"#12-从前序与中序遍历序列构造二叉树-105\" class=\"headerlink\" title=\"12. 从前序与中序遍历序列构造二叉树 [105]\"></a>12. 从前序与中序遍历序列构造二叉树 [105]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/\" target=\"_blank\" rel=\"noopener\">105. 从前序与中序遍历序列构造二叉树</a></p>\n<h3 id=\"12-1-题目描述\"><a href=\"#12-1-题目描述\" class=\"headerlink\" title=\"12.1. 题目描述\"></a>12.1. 题目描述</h3><p><img src=\"/pictures/image-20200821111825878.png\" alt=\"image-20200821111825878\"></p>\n<h3 id=\"12-2-方法一：递归\"><a href=\"#12-2-方法一：递归\" class=\"headerlink\" title=\"12.2. 方法一：递归\"></a>12.2. 方法一：递归</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">buildTree</span><span class=\"params\">(<span class=\"keyword\">int</span>[] preorder, <span class=\"keyword\">int</span>[] inorder)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper(preorder, <span class=\"number\">0</span>, preorder.length - <span class=\"number\">1</span>, inorder, <span class=\"number\">0</span>, inorder.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] preorder, <span class=\"keyword\">int</span> pStart, <span class=\"keyword\">int</span> pEnd, <span class=\"keyword\">int</span>[] inorder, <span class=\"keyword\">int</span> iStart, <span class=\"keyword\">int</span> iEnd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// pStart 表示先序的第一位索引</span></span><br><span class=\"line\">    <span class=\"comment\">// pEnd 表示先序的最后一位索引</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果输入的前序序列为空，返回 null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pEnd &lt; pStart)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> root = preorder[pStart];</span><br><span class=\"line\">    TreeNode node = <span class=\"keyword\">new</span> TreeNode(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在中序遍历中找root，即分隔点</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> point = iStart;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; point &lt;= iEnd; point++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(inorder[point] == root)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 左子树长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> leftLen = point - iStart;</span><br><span class=\"line\"></span><br><span class=\"line\">    node.left = helper(preorder, pStart + <span class=\"number\">1</span>, pStart + leftLen, inorder, iStart, point - <span class=\"number\">1</span>);</span><br><span class=\"line\">    node.right = helper(preorder, pStart + leftLen + <span class=\"number\">1</span>, pEnd, inorder, point + <span class=\"number\">1</span>, iEnd);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>复杂度分析：</p>\n<ul>\n<li>时间复杂度：O(N^2)，这里 N 是二叉树的结点个数，每调用一次递归方法创建一个结点，一共创建 N 个结点，在中序遍历中找到根结点在中序遍历中的位置，是与 N 相关的，这里不计算递归方法占用的时间。</li>\n<li>空间复杂度：O(1)，这里不计算递归方法占用的空间。</li>\n</ul>\n<h3 id=\"12-3-方法二：使用-HashMap-对递归进行优化\"><a href=\"#12-3-方法二：使用-HashMap-对递归进行优化\" class=\"headerlink\" title=\"12.3. 方法二：使用 HashMap 对递归进行优化\"></a>12.3. 方法二：使用 HashMap 对递归进行优化</h3><p>参考 <a href=\"https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/qian-xu-bian-li-python-dai-ma-java-dai-ma-by-liwei/\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<p>上一方法中每执行一次 helper 都要在中序中寻找根节点，这里使用 HashMap 存储中序序列的索引与节点值，找根节点只需要 O(1)。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">buildTree</span><span class=\"params\">(<span class=\"keyword\">int</span>[] preorder, <span class=\"keyword\">int</span>[] inorder)</span> </span>&#123;</span><br><span class=\"line\">    HashMap&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; inorder.length; i++)&#123;</span><br><span class=\"line\">        map.put(inorder[i], i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper2(preorder, <span class=\"number\">0</span>, preorder.length - <span class=\"number\">1</span>, inorder, <span class=\"number\">0</span>, inorder.length - <span class=\"number\">1</span>, map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">helper2</span><span class=\"params\">(<span class=\"keyword\">int</span>[] preorder, <span class=\"keyword\">int</span> pStart, <span class=\"keyword\">int</span> pEnd, <span class=\"keyword\">int</span>[] inorder, <span class=\"keyword\">int</span> iStart, <span class=\"keyword\">int</span> iEnd, HashMap&lt;Integer, Integer&gt; map)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pEnd &lt; pStart)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> root = preorder[pStart];</span><br><span class=\"line\">    TreeNode node = <span class=\"keyword\">new</span> TreeNode(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用map找分隔点</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> point = map.get(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> leftLen = point - iStart;</span><br><span class=\"line\"></span><br><span class=\"line\">    node.left = helper2(preorder, pStart + <span class=\"number\">1</span>, pStart + leftLen, inorder, iStart, point - <span class=\"number\">1</span>, map);</span><br><span class=\"line\">    node.right = helper2(preorder, pStart + leftLen + <span class=\"number\">1</span>, pEnd, inorder, point + <span class=\"number\">1</span>, iEnd, map);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>时间复杂度：O(N)，这里 N 是二叉树的结点个数，每调用一次递归方法创建一个结点，一共创建 N 个结点，这里不计算递归方法占用的时间。</li>\n<li>空间复杂度：O(N)，这里忽略递归方法占用的空间，因为是对数级别的，比 N 小。</li>\n</ul>\n<h2 id=\"13-验证二叉搜索树-98\"><a href=\"#13-验证二叉搜索树-98\" class=\"headerlink\" title=\"13. 验证二叉搜索树 [98]\"></a>13. 验证二叉搜索树 [98]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/validate-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">98. 验证二叉搜索树</a></p>\n<h3 id=\"13-1-题目描述\"><a href=\"#13-1-题目描述\" class=\"headerlink\" title=\"13.1. 题目描述\"></a>13.1. 题目描述</h3><p><img src=\"/pictures/image-20200831101224071.png\" alt=\"image-20200831101224071\"></p>\n<h3 id=\"13-1-方法一：递归\"><a href=\"#13-1-方法一：递归\" class=\"headerlink\" title=\"13.1. 方法一：递归\"></a>13.1. 方法一：递归</h3><p>可以很简单的用递归写出来。想法是，左子树是合法二分查找树，右子树是合法二分查找树，并且根节点大于左孩子，小于右孩子，那么当前树就是合法二分查找树。</p>\n<p>注意：判断是否是二叉搜索树，不能只是简单的判断根节点和左右节点的大小关系。而是需要判断左子树和右子树上的所有节点都满足大小关系，并且左子树和右子树也都是二分查找树。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidBST</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 递归终止条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span> || (root.right == <span class=\"keyword\">null</span> &amp;&amp; root.left == <span class=\"keyword\">null</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断左子树 和 左子树与根节点的关系</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isValidBST(root.left)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取左子树的最大值</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> maxLeft = getMaxOfBST(root.left);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root.val &lt;= maxLeft) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断右子树 和 右子树与根节点的关系</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isValidBST(root.right)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取右子树最小值</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> minRight = getMinOfBST(root.right);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root.val &gt;= minRight) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取搜索二叉树的最大值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> root</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getMaxOfBST</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = root.val;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (root.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        max = root.right.val;</span><br><span class=\"line\">        root = root.right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取搜索二叉树最小值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> root</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getMinOfBST</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> min = root.val;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (root.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        min = root.left.val;</span><br><span class=\"line\">        root = root.left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-3-方法二：另一种递归（推荐）\"><a href=\"#13-3-方法二：另一种递归（推荐）\" class=\"headerlink\" title=\"13.3. 方法二：另一种递归（推荐）\"></a>13.3. 方法二：另一种递归（推荐）</h3><p>参考 <a href=\"https://leetcode.wang/leetCode-98-Validate-Binary-Search-Tree.html\" target=\"_blank\" rel=\"noopener\">这里</a> 的解法二，把代码写的简洁了一些。这种递归代码更为简洁，推荐。</p>\n<p>解法一中，我们是判断根节点是否合法，找到了左子树中最大的数，右子树中最小的数。 由左子树和右子树决定当前根节点是否合法。</p>\n<p>但如果正常的来讲，明明先有的根节点，按理说根节点是任何数都行，而不是由左子树和右子树限定。相反，根节点反而决定了左孩子和右孩子的合法取值范围。</p>\n<p>所以，我们可以从根节点进行 DFS，然后计算每个节点应该的取值范围，如果当前节点不符合就返回 false。</p>\n<p>也就是说，本题使用先序遍历，判断根节点是否在范围之内，这个范围根据上一层根节点来限制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidBST</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 节点值均为 Int 型，故最大值设为 long</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> max = (<span class=\"keyword\">long</span>) Integer.MAX_VALUE + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> min = (<span class=\"keyword\">long</span>) Integer.MIN_VALUE - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getAns(root, max, min);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">getAns</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">long</span> max, <span class=\"keyword\">long</span> min)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 判断根节点是否在限定范围内</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root.val &lt;= min || root.val &gt;= max)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 判断左右子树，同时更新左右子树的限定范围</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> getAns(root.left, min, root.val) &amp;&amp; getAns(root.right, root.val, max);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-4-方法三：迭代（中序遍历的栈解法）\"><a href=\"#13-4-方法三：迭代（中序遍历的栈解法）\" class=\"headerlink\" title=\"13.4. 方法三：迭代（中序遍历的栈解法）\"></a>13.4. 方法三：迭代（中序遍历的栈解法）</h3><p>这种解法基于：二叉搜索树中序遍历后，会得到有序序列。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidBTS</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    TreeNode curr = root;</span><br><span class=\"line\">    TreeNode pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span> || !stack.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            stack.push(curr);</span><br><span class=\"line\">            curr = curr.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 出栈（这里出栈的值会添加到中序序列后）</span></span><br><span class=\"line\">        curr = stack.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pre != <span class=\"keyword\">null</span> &amp;&amp; pre.val &gt;= curr.val) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre = curr;</span><br><span class=\"line\">        curr = curr.right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"14-恢复二叉搜索树-99\"><a href=\"#14-恢复二叉搜索树-99\" class=\"headerlink\" title=\"14. 恢复二叉搜索树 [99]\"></a>14. 恢复二叉搜索树 [99]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/recover-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">99. 恢复二叉搜索树</a></p>\n<h3 id=\"14-1-题目描述\"><a href=\"#14-1-题目描述\" class=\"headerlink\" title=\"14.1. 题目描述\"></a>14.1. 题目描述</h3><p><img src=\"/pictures/image-20200831105056785.png\" alt=\"image-20200831105056785\"></p>\n<h3 id=\"14-2-方法一：迭代（栈的中序遍历）\"><a href=\"#14-2-方法一：迭代（栈的中序遍历）\" class=\"headerlink\" title=\"14.2. 方法一：迭代（栈的中序遍历）\"></a>14.2. 方法一：迭代（栈的中序遍历）</h3><p>参考 <a href=\"https://leetcode.wang/leetcode-99-Recover-Binary-Search-Tree.html\" target=\"_blank\" rel=\"noopener\">这里</a> 的解法二，代码稍微做了一些简化。</p>\n<p>对上一题 [98] 的第三种解法进行修改实现本题。</p>\n<p>我们判断是否是一个合法的二分查找树是使用到了中序遍历。原因就是二分查找树的一个性质，左孩子小于根节点，根节点小于右孩子。所以做一次中序遍历，产生的序列就是从小到大排列的有序序列。</p>\n<p>回到这道题，题目交换了两个数字，其实就是在有序序列中交换了两个数字。而我们只需要把它还原。</p>\n<p>交换的位置的话就是两种情况。</p>\n<ul>\n<li><p>相邻的两个数字交换</p>\n<p>[ 1 2 3 4 5 ] 中 2 和 3 进行交换，[ 1 3 2 4 5 ]，这样的话只产生 <strong>一组</strong> 逆序的数字（正常情况是从小到大排序，交换后产生了从大到小），3 2。</p>\n<p>我们只需要遍历数组，找到后，把这一组的两个数字进行交换即可。</p>\n</li>\n<li><p>不相邻的两个数字交换</p>\n<p>[ 1 2 3 4 5 ] 中 2 和 5 进行交换，[ 1 5 3 4 2 ]，这样的话其实就是产生了 <strong>两组</strong> 逆序的数字对。5 3 和 4 2。</p>\n<p>所以我们只需要遍历数组，然后找到这两组逆序对，然后把第一组前一个数字和第二组后一个数字进行交换即完成了还原。</p>\n</li>\n</ul>\n<p>所以在中序遍历中，只需要利用一个 pre 节点和当前节点比较，如果 pre 节点的值大于当前节点的值，那么就是我们要找的逆序的数字。分别用两个指针 first 和 second 保存即可。如果找到第二组逆序的数字，我们就把 second 更新为当前节点。最后把 first 和 second 两个的 <strong>数字</strong> 交换即可。</p>\n<p>注意：本题逆序出现的两种情况和节点的交换。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">recoverTree</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    TreeNode cur = root;</span><br><span class=\"line\">    TreeNode pre = <span class=\"keyword\">null</span>, first = <span class=\"keyword\">null</span>, second = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Deque&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span> || !stack.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            stack.push(cur);</span><br><span class=\"line\">            cur = cur.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cur = stack.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pre != <span class=\"keyword\">null</span> &amp;&amp; pre.val &gt;= cur.val) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 第一次遇到逆序对</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (first == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果相邻的数字交换，只会出现一次逆序，因此这里 second 也要赋值</span></span><br><span class=\"line\">                first = pre;</span><br><span class=\"line\">                second = cur;</span><br><span class=\"line\">                <span class=\"comment\">// 第二次遇到逆序对</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                second = cur;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre = cur;</span><br><span class=\"line\">        cur = cur.right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 交换</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp = first.val;</span><br><span class=\"line\">    first.val = second.val;</span><br><span class=\"line\">    second.val = tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"15-将有序数组转换为二叉搜索树-108\"><a href=\"#15-将有序数组转换为二叉搜索树-108\" class=\"headerlink\" title=\"15. 将有序数组转换为二叉搜索树 [108]\"></a>15. 将有序数组转换为二叉搜索树 [108]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">108. 将有序数组转换为二叉搜索树</a></p>\n<h3 id=\"15-1-题目描述\"><a href=\"#15-1-题目描述\" class=\"headerlink\" title=\"15.1. 题目描述\"></a>15.1. 题目描述</h3><p><img src=\"/pictures/image-20200901091510832.png\" alt=\"image-20200901091510832\"></p>\n<h3 id=\"15-2-递归\"><a href=\"#15-2-递归\" class=\"headerlink\" title=\"15.2. 递归\"></a>15.2. 递归</h3><p>题目要求平衡二叉树，那么根节点就是数组的中点。找到了数组的中点，作为根节点，进入递归即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">sortedArrayToBST</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper(nums, <span class=\"number\">0</span>, nums.length - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(start &gt; end)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = end - start + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = start + len / <span class=\"number\">2</span>;</span><br><span class=\"line\">    TreeNode root = <span class=\"keyword\">new</span> TreeNode(nums[mid]);</span><br><span class=\"line\">    root.left = helper(nums, start , mid - <span class=\"number\">1</span>);</span><br><span class=\"line\">    root.right = helper(nums, mid + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"16-有序链表转换二叉搜索树-109\"><a href=\"#16-有序链表转换二叉搜索树-109\" class=\"headerlink\" title=\"16.  有序链表转换二叉搜索树 [109]\"></a>16.  有序链表转换二叉搜索树 [109]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">109. 有序链表转换二叉搜索树</a></p>\n<h3 id=\"16-1-题目描述\"><a href=\"#16-1-题目描述\" class=\"headerlink\" title=\"16.1. 题目描述\"></a>16.1. 题目描述</h3><p><img src=\"/pictures/image-20200902100344960.png\" alt=\"image-20200902100344960\"></p>\n<h3 id=\"16-2-方法一：将链表转为-ArrayList\"><a href=\"#16-2-方法一：将链表转为-ArrayList\" class=\"headerlink\" title=\"16.2. 方法一：将链表转为 ArrayList\"></a>16.2. 方法一：将链表转为 ArrayList</h3><p>本题就是把上一题 [108] 的数组换成了链表，如果使用上一题的思路，链表不支持随机访问，找中点时时间复杂度很高。所以，我们可以把链表先转为 ArrayList，再使用上一题的思路。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">sortedListToBST</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (head != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        list.add(head.val);</span><br><span class=\"line\">        head = head.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper(list, <span class=\"number\">0</span>, list.size());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">helper</span><span class=\"params\">(List&lt;Integer&gt; list, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start == end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = start + (end - start) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    TreeNode root = <span class=\"keyword\">new</span> TreeNode(list.get(mid));</span><br><span class=\"line\">    root.left = helper(list, start, mid);</span><br><span class=\"line\">    root.right = helper(list, mid + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>时复：O(n)</p>\n<p>空复：O(n)</p>\n<h3 id=\"16-3-方法二：中序遍历思路\"><a href=\"#16-3-方法二：中序遍历思路\" class=\"headerlink\" title=\"16.3. 方法二：中序遍历思路\"></a>16.3. 方法二：中序遍历思路</h3><p>参考 <a href=\"https://leetcode.wang/leetcode-109-Convert-Sorted-List-to-Binary-Search-Tree.html\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>我们知道升序数组其实就是二叉搜索树的中序遍历。那么，我们可以按照这个顺序去为每个节点赋值。</p>\n<p>如何实现呢？套用中序遍历的递归过程，将 start 和 end 作为递归参数，当 start ==  end 时，返回 null。</p>\n<p>我们先看一下中序遍历的递归算法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">inorderTraversal</span><span class=\"params\">(TreeNode root)</span></span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    helper(root, res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">helper</span><span class=\"params\">(TreeNode node, List&lt;Integer&gt; res)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    helper(node.left, res);</span><br><span class=\"line\">    res.add(node.val);</span><br><span class=\"line\">    helper(node.right, res);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>中序遍历中是将 node.val 进行保存，本题我们是给当前节点进行赋值，为了依次赋值，我们需要一个 cur 指针指向所给定的数列，每赋一个值就后移一位：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ListNode cur = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">sortedListToBST2</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (head != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        end++;</span><br><span class=\"line\">        head = head.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper2(<span class=\"number\">0</span>, end);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">helper2</span><span class=\"params\">(<span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(start == end)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = start + (end - start) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历左子树并且将根节点返回</span></span><br><span class=\"line\">    TreeNode left = helper2(start, mid);</span><br><span class=\"line\">    <span class=\"comment\">// 遍历当前节点</span></span><br><span class=\"line\">    TreeNode root = <span class=\"keyword\">new</span> TreeNode(cur.val);</span><br><span class=\"line\">    root.left = left;</span><br><span class=\"line\">    <span class=\"comment\">// 指针后移，进行下一次赋值</span></span><br><span class=\"line\">    cur = cur.next;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历右子树并将根节点返回</span></span><br><span class=\"line\">    TreeNode right = helper2(mid + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">    root.right = right;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>时复：O(n)</p>\n<p>空复：O(log(n))，递归压栈消耗。</p>\n<h2 id=\"17-平衡二叉树-110\"><a href=\"#17-平衡二叉树-110\" class=\"headerlink\" title=\"17. 平衡二叉树 [110]\"></a>17. 平衡二叉树 [110]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/balanced-binary-tree/\" target=\"_blank\" rel=\"noopener\">110. 平衡二叉树</a></p>\n<h3 id=\"17-1-题目描述\"><a href=\"#17-1-题目描述\" class=\"headerlink\" title=\"17.1. 题目描述\"></a>17.1. 题目描述</h3><p><img src=\"/pictures/image-20200901093602332.png\" alt=\"image-20200901093602332\"></p>\n<h3 id=\"17-2-方法一：递归\"><a href=\"#17-2-方法一：递归\" class=\"headerlink\" title=\"17.2. 方法一：递归\"></a>17.2. 方法一：递归</h3><p>参考 <a href=\"https://leetcode.wang/leetcode-110-Balanced-Binary-Tree.html\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<p>参考平衡二叉树的定义：</p>\n<blockquote>\n<p>它是一颗空树或它的左右子树的高度差绝对值不超过1，并且左右子树均为平衡二叉树。</p>\n</blockquote>\n<p>直接按照定义来递归求解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBalanced</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = getHeight(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = getHeight(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Math.abs(left - right) &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isBalanced(root.left) &amp;&amp; isBalanced(root.right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getHeight</span><span class=\"params\">(TreeNode root)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.max(getHeight(root.left), getHeight(root.right)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>时复：O(n^2)，n 为二叉树节点个数。isBalanced 需要遍历二叉树中的所有节点，时复为 O(n)，求高度 getHeight，一般情况下为 O(log n)，对于最坏情况，二叉树形成链式结构，需要 O(n)，此时时间复杂度为 O(n^2)。</p>\n<p>空复：O(n)，空间复杂度主要取决于递归调用的层数，递归调用不会超过 n。</p>\n<h3 id=\"17-3-方法二：递归的优化\"><a href=\"#17-3-方法二：递归的优化\" class=\"headerlink\" title=\"17.3. 方法二：递归的优化\"></a>17.3. 方法二：递归的优化</h3><p>参考 <a href=\"https://leetcode.wang/leetcode-110-Balanced-Binary-Tree.html\" target=\"_blank\" rel=\"noopener\">这里</a> 的解法二。</p>\n<p>在方法一中，可以发现，子树的高度重复算了很多次。在求左子树高度时，使用递归求解它的左右子树高度；在判断左子树是否为平衡二叉树时，又使用递归求解了它的左右子树高度。</p>\n<p>方法一的另一个问题是：在 getHeight 方法中，求得左右子树高度时，就可以判断当前是否是平衡二叉树了。</p>\n<p>综上，只需要求一次高度，并且在求左右子树高度时，就可以判断当前是否是平衡二叉树。</p>\n<p>考虑到 <code>getTreeDepth</code> 函数返回的是<code>int</code>值，同时高度不可能为负数，那么如果求高度过程中我们发现了当前不是平衡二叉树，就返回<code>-1</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBalanced</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getHeight2(root) != -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getHeight2</span><span class=\"params\">(TreeNode root)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = getHeight2(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left == -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = getHeight2(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(right == -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Math.abs(left - right) &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.max(left, right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>时复：O(n)，其中 n 是二叉树中的节点个数。使用自底向上的递归，每个节点的计算高度和判断是否平衡都只需要处理一次，最坏情况下需要遍历二叉树中的所有节点，因此时间复杂度是 O(n) 。</p>\n<p>空间复杂度：O(n)，其中 n<em>n</em> 是二叉树中的节点个数。空间复杂度主要取决于递归调用的层数，递归调用的层数不会超过 n。</p>\n<h2 id=\"18-从中序与后序遍历序列构造二叉树-106\"><a href=\"#18-从中序与后序遍历序列构造二叉树-106\" class=\"headerlink\" title=\"18. 从中序与后序遍历序列构造二叉树 [106]\"></a>18. 从中序与后序遍历序列构造二叉树 [106]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/\" target=\"_blank\" rel=\"noopener\">106. 从中序与后序遍历序列构造二叉树</a></p>\n<h3 id=\"18-1-题目描述\"><a href=\"#18-1-题目描述\" class=\"headerlink\" title=\"18.1. 题目描述\"></a>18.1. 题目描述</h3><p><img src=\"/pictures/image-20200902104235073.png\" alt=\"image-20200902104235073\"></p>\n<h3 id=\"18-2-代码\"><a href=\"#18-2-代码\" class=\"headerlink\" title=\"18.2. 代码\"></a>18.2. 代码</h3><p>递归，注意使用 map 优化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">buildTree</span><span class=\"params\">(<span class=\"keyword\">int</span>[] inorder, <span class=\"keyword\">int</span>[] postorder)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = inorder.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;&#125;</span><br><span class=\"line\">    Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        map.put(inorder[i], i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper(inorder, <span class=\"number\">0</span>, len, postorder, <span class=\"number\">0</span>, len, map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] inorder, <span class=\"keyword\">int</span> iStart, <span class=\"keyword\">int</span> iEnd, <span class=\"keyword\">int</span>[] postorder, <span class=\"keyword\">int</span> pStart, <span class=\"keyword\">int</span> pEnd, Map&lt;Integer, Integer&gt; map)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(iStart == iEnd)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;&#125;</span><br><span class=\"line\">    TreeNode root = <span class=\"keyword\">new</span> TreeNode(postorder[pEnd - <span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> rootIndex = map.get(postorder[pEnd - <span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> leftLen = rootIndex - iStart;</span><br><span class=\"line\">    root.left = helper(inorder, iStart, rootIndex , postorder, pStart, pStart + leftLen, map);</span><br><span class=\"line\">    root.right = helper(inorder, rootIndex + <span class=\"number\">1</span>, iEnd, postorder, pStart + leftLen, pEnd - <span class=\"number\">1</span>, map);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"19-二叉树展开为链表-114\"><a href=\"#19-二叉树展开为链表-114\" class=\"headerlink\" title=\"19. 二叉树展开为链表 [114]\"></a>19. 二叉树展开为链表 [114]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/\" target=\"_blank\" rel=\"noopener\">114. 二叉树展开为链表</a></p>\n<h3 id=\"19-1-题目描述\"><a href=\"#19-1-题目描述\" class=\"headerlink\" title=\"19.1. 题目描述\"></a>19.1. 题目描述</h3><p><img src=\"/pictures/image-20200903095901434.png\" alt=\"image-20200903095901434\"></p>\n<h3 id=\"19-2-代码\"><a href=\"#19-2-代码\" class=\"headerlink\" title=\"19.2. 代码\"></a>19.2. 代码</h3><p>参考 <a href=\"https://leetcode.wang/leetcode-114-Flatten-Binary-Tree-to-Linked-List.html\" target=\"_blank\" rel=\"noopener\">这里</a> 的解法一。</p>\n<p>这道题难点在于：解法一的思路想不到…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">flatten</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (root != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root.left == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            root = root.right;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 找左子树最右边节点</span></span><br><span class=\"line\">            TreeNode pre = root.left;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (pre.right != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                pre = pre.right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 将原来的右子树接到左子树的最右边</span></span><br><span class=\"line\">            pre.right = root.right;</span><br><span class=\"line\">            <span class=\"comment\">// 将左子树茶润到右子树的地方</span></span><br><span class=\"line\">            root.right = root.left;</span><br><span class=\"line\">            root.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 考虑下一个节点</span></span><br><span class=\"line\">            root = root.right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"20-填充每个节点的下一个右侧节点指针-116\"><a href=\"#20-填充每个节点的下一个右侧节点指针-116\" class=\"headerlink\" title=\"20. 填充每个节点的下一个右侧节点指针 [116]\"></a>20. 填充每个节点的下一个右侧节点指针 [116]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/\" target=\"_blank\" rel=\"noopener\">116. 填充每个节点的下一个右侧节点指针</a></p>\n<h3 id=\"20-1-题目描述\"><a href=\"#20-1-题目描述\" class=\"headerlink\" title=\"20.1. 题目描述\"></a>20.1. 题目描述</h3><p><img src=\"/pictures/image-20200907095746263.png\" alt=\"image-20200907095746263\"></p>\n<p><img src=\"/pictures/image-20200907095838051.png\" alt=\"image-20200907095838051\"></p>\n<h3 id=\"20-2-解法一：层次遍历\"><a href=\"#20-2-解法一：层次遍历\" class=\"headerlink\" title=\"20.2. 解法一：层次遍历\"></a>20.2. 解法一：层次遍历</h3><p>参考 <a href=\"https://leetcode.wang/leetcode-116-Populating-Next-Right-Pointers-in-Each-Node.html\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<p>但是这种解法不符合空间复杂度的要求，层次遍历需要 O(n) 空复。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">connect</span><span class=\"params\">(Node root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Queue&lt;Node&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 在尾部添加元素</span></span><br><span class=\"line\">    queue.add(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = queue.size();</span><br><span class=\"line\">        Node pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 移除队列第一个元素</span></span><br><span class=\"line\">            Node cur = queue.poll();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                pre.next = cur;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pre = cur;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                queue.add(cur.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                queue.add(cur.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-3-解法二：迭代\"><a href=\"#20-3-解法二：迭代\" class=\"headerlink\" title=\"20.3. 解法二：迭代\"></a>20.3. 解法二：迭代</h3><p>参考 <a href=\"https://leetcode.wang/leetcode-116-Populating-Next-Right-Pointers-in-Each-Node.html\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<p>基本思路：因为只能使用常数级别的空复，所以在遍历当前层时，就把下一层的 next 指针指好。定义三个节点，cur 当前访问节点，pre 当前节点的左侧节点，start 当前层的开始节点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">connect</span><span class=\"params\">(Node root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node pre = root;</span><br><span class=\"line\">    Node cur = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Node start = pre;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pre.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历到了最右边节点，要将 pre 和 cur 更新到下一层，并且记录 start</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cur == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 只需要把 pre 的左孩子的 next 指向右孩子（即更新下一层第一个节点的next）</span></span><br><span class=\"line\">            pre.left.next = pre.right;</span><br><span class=\"line\"></span><br><span class=\"line\">            pre = start.left;</span><br><span class=\"line\">            cur = start.right;</span><br><span class=\"line\">            start = pre;</span><br><span class=\"line\">            <span class=\"comment\">// 将下一层的 next 连起来，同时 pre next 后移</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 把 pre 的左孩子的 next 指向右孩子</span></span><br><span class=\"line\">            pre.left.next = pre.right;</span><br><span class=\"line\">            <span class=\"comment\">// 把 pre 的右孩子的 next 指向 cur 的左孩子</span></span><br><span class=\"line\">            pre.right.next = cur.left;</span><br><span class=\"line\"></span><br><span class=\"line\">            pre = pre.next;</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-4-解法三：（推荐）\"><a href=\"#20-4-解法三：（推荐）\" class=\"headerlink\" title=\"20.4. 解法三：（推荐）\"></a>20.4. 解法三：（推荐）</h3><p>参考 <a href=\"https://leetcode.wang/leetcode-117-Populating-Next-Right-Pointers-in-Each-NodeII.html\" target=\"_blank\" rel=\"noopener\">这里</a> ，这是 [117] 题的解法，同样适用于本题，而且好理解。</p>\n<p>基本思路：利用层次遍历的思路，同时使用上一层已经存好的 next 指针，在依次访问当前层元素时，把下一层的 next 指针指好。每一层的开始节点利用 dummy 节点，即 dummy 节点的 next 指针指向每一层的开始节点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">connect</span><span class=\"params\">(Node root)</span> </span>&#123;</span><br><span class=\"line\">    Node cur = root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        Node dummy = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">        Node tail = dummy;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历当前层</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cur.left != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                tail.next = cur.left;</span><br><span class=\"line\">                tail = tail.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cur.right != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                tail.next = cur.right;</span><br><span class=\"line\">                tail = tail.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 更新到下一层</span></span><br><span class=\"line\">        cur = dummy.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"21-填充每个节点的下一个右侧节点指针-II-117\"><a href=\"#21-填充每个节点的下一个右侧节点指针-II-117\" class=\"headerlink\" title=\"21. 填充每个节点的下一个右侧节点指针 II [117]\"></a>21. 填充每个节点的下一个右侧节点指针 II [117]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node-ii/\" target=\"_blank\" rel=\"noopener\">117. 填充每个节点的下一个右侧节点指针 II</a></p>\n<h3 id=\"21-1-题目描述\"><a href=\"#21-1-题目描述\" class=\"headerlink\" title=\"21.1. 题目描述\"></a>21.1. 题目描述</h3><p><img src=\"../pictures/image-20200908091720713.png\" alt=\"image-20200908091720713\"></p>\n<h3 id=\"21-2-方法一：层次遍历\"><a href=\"#21-2-方法一：层次遍历\" class=\"headerlink\" title=\"21.2. 方法一：层次遍历\"></a>21.2. 方法一：层次遍历</h3><p>同上一题的层次遍历。依旧是空复不符合要求。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">connect</span><span class=\"params\">(Node root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Queue&lt;Node&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 在尾部添加元素</span></span><br><span class=\"line\">    queue.add(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = queue.size();</span><br><span class=\"line\">        Node pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 移除队列第一个元素</span></span><br><span class=\"line\">            Node cur = queue.poll();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                pre.next = cur;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pre = cur;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                queue.add(cur.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                queue.add(cur.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"21-3-方法二\"><a href=\"#21-3-方法二\" class=\"headerlink\" title=\"21.3. 方法二\"></a>21.3. 方法二</h3><p>参考 <a href=\"https://leetcode.wang/leetcode-117-Populating-Next-Right-Pointers-in-Each-NodeII.html\" target=\"_blank\" rel=\"noopener\">这里</a> 的解法三。</p>\n<p>利用层次遍历的思路，同时使用上一层已经存好的 next 指针，在依次访问当前层元素时，把下一层的 next 指针指好。</p>\n<p>每一层的开始节点使用 dummy 节点，dummy 节点的 next 指针指向每一层的开始节点。</p>\n<p>这种解法同样适用于上一题 [116]。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">connect2</span><span class=\"params\">(Node root)</span> </span>&#123;</span><br><span class=\"line\">    Node cur = root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        Node dummy = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\">        Node tail = dummy;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历当前层</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cur.left != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                tail.next = cur.left;</span><br><span class=\"line\">                tail = tail.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cur.right != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                tail.next = cur.right;</span><br><span class=\"line\">                tail = tail.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 更新到下一层</span></span><br><span class=\"line\">        cur = dummy.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"22-二叉树中的最大路径和-124\"><a href=\"#22-二叉树中的最大路径和-124\" class=\"headerlink\" title=\"22. 二叉树中的最大路径和 [124]\"></a>22. 二叉树中的最大路径和 [124]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/\" target=\"_blank\" rel=\"noopener\">124. 二叉树中的最大路径和</a></p>\n<h3 id=\"22-1-题目描述\"><a href=\"#22-1-题目描述\" class=\"headerlink\" title=\"22.1. 题目描述\"></a>22.1. 题目描述</h3><p><img src=\"../pictures/image-20200915154342061.png\" alt=\"image-20200915154342061\"></p>\n<h3 id=\"22-2-代码\"><a href=\"#22-2-代码\" class=\"headerlink\" title=\"22.2. 代码\"></a>22.2. 代码</h3><p>参考 <a href=\"https://leetcode.wang/leetcode-124-Binary-Tree-Maximum-Path-Sum.html\" target=\"_blank\" rel=\"noopener\">这里</a> ，难点在于根本想不到..</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> max = Integer.MIN_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxPathSum</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    helper(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">helper</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = Math.max(helper(root.left), <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = Math.max(helper(root.right), <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 求的过程中考虑包含当前根节点的最大路径</span></span><br><span class=\"line\">    max = Math.max(max, root.val + left + right);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 只返回包含当前根节点和左子树或者右子树的路径</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root.val + Math.max(left, right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"23-参考引用\"><a href=\"#23-参考引用\" class=\"headerlink\" title=\"23. 参考引用\"></a>23. 参考引用</h2><ol>\n<li><a href=\"https://zh.wikipedia.org/wiki/二叉树\" target=\"_blank\" rel=\"noopener\">Wikipedia</a></li>\n<li><a href=\"https://leetcode.wang/leetCode-94-Binary-Tree-Inorder-Traversal.html\" target=\"_blank\" rel=\"noopener\">https://leetcode.wang/leetCode-94-Binary-Tree-Inorder-Traversal.html</a></li>\n<li><a href=\"https://leetcode.wang/leetcode-102-Binary-Tree-Level-Order-Traversal.html\" target=\"_blank\" rel=\"noopener\">https://leetcode.wang/leetcode-102-Binary-Tree-Level-Order-Traversal.html</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/qian-xu-bian-li-python-dai-ma-java-dai-ma-by-liwei/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/qian-xu-bian-li-python-dai-ma-java-dai-ma-by-liwei/</a></li>\n<li><a href=\"https://leetcode.wang/leetcode-99-Recover-Binary-Search-Tree.html\" target=\"_blank\" rel=\"noopener\">https://leetcode.wang/leetcode-99-Recover-Binary-Search-Tree.html</a></li>\n<li><a href=\"https://leetcode.wang/leetcode-117-Populating-Next-Right-Pointers-in-Each-NodeII.html\" target=\"_blank\" rel=\"noopener\">https://leetcode.wang/leetcode-117-Populating-Next-Right-Pointers-in-Each-NodeII.html</a></li>\n</ol>"},{"title":"动态规划总结","date":"2020-09-11T01:25:10.000Z","typora-copy-images-to":"..\\pictures","_content":"\n本文主要介绍了动态规划的概念、解题框架，并以斐波那契数列、零钱兑换为例，进一步说明动态规划如何运用和理解。另外，本文还解决了LeetCode中部分使用动态规划思想的题目，这部分会持续更新。\n\n## 1. 什么是动态规划？\n\n[维基定义](https://zh.wikipedia.org/wiki/动态规划)：（英语：Dynamic programming，简称DP）是一种在数学、管理科学、计算机科学、经济学和生物信息学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。\n\n动态规划常常适用于有重叠子问题和最优子结构性质的问题，动态规划方法所耗时间往往远少于朴素解法。\n\n动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。\n\n通常许多子问题非常相似，为此动态规划法试图仅仅解决每个子问题一次，从而减少计算量：一旦某个给定子问题的解已经算出，则将其记忆化存储，以便下次需要同一个子问题解之时直接查表。这种做法在重复子问题的数目关于输入的规模呈指数增长时特别有用。\n\n<!--more-->\n\n### 1.1 适用情况\n\n1. 最优子结构性质。如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质（即满足最优化原理）。最优子结构性质为动态规划算法解决问题提供了重要线索。\n2. 无后效性。即子问题的解一旦确定，就不再改变，不受在这之后、包含它的更大的问题的求解决策影响。\n3. 子问题重叠性质。子问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。动态规划算法正是利用了这种子问题的重叠性质，对每一个子问题只计算一次，然后将其计算结果保存在一个表格中，当再次需要计算已经计算过的子问题时，只是在表格中简单地查看一下结果，从而获得较高的效率，降低了时间复杂度。\n\n## 2. 动态规划解题框架\n\n这一节参考 [这里](https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/dong-tai-gui-hua-xiang-jie-jin-jie) 给出一些对于动态规划的理解和解体框架。\n\n**首先，动态规划问题的一般形式就是求最值**。动态规划其实是运筹学的一种最优化方法，只不过在计算机问题上应用比较多，比如求**最长**递增子序列呀，**最小**编辑距离等。\n\n既然是要求最值，核心问题是什么呢？**求解动态规划的核心问题是穷举**。因为要求最值，肯定要把所有可行的答案穷举出来，然后在其中找最值。\n\n动态规划这么简单，就是穷举就完事了？我看到的动态规划问题都很难啊！\n\n首先，动态规划的穷举有点特别，因为这类问题**存在「重叠子问题」**，如果暴力穷举的话效率会极其低下，所以需要「备忘录」或者「DP table」来优化穷举过程，避免不必要的计算。\n\n而且，动态规划问题一定会**具备「最优子结构」**，才能通过子问题的最值得到原问题的最值。\n\n另外，虽然动态规划的核心思想就是穷举求最值，但是问题可以千变万化，穷举所有可行解其实并不是一件容易的事，只有列出**正确的「状态转移方程」**才能正确地穷举。\n\n以上提到的重叠子问题、最优子结构、状态转移方程就是动态规划三要素。具体什么意思等会会举例详解，但是在实际的算法问题中，**写出状态转移方程是最困难的**，这也就是为什么很多朋友觉得动态规划问题困难的原因，我来提供我研究出来的一个思维框架，辅助你思考状态转移方程：\n\n**明确 base case -> 明确「状态」-> 明确「选择」 -> 定义 dp 数组/函数的含义**。\n\n按上面的套路走，最后的结果就可以套这个框架：\n\n```python\n# 初始化 base case\ndp[0][0][...] = base\n# 进行状态转移\nfor 状态1 in 状态1的所有取值：\n    for 状态2 in 状态2的所有取值：\n        for ...\n            dp[状态1][状态2][...] = 求最值(选择1，选择2...)\n```\n\n下文中的斐波那契数列可以帮助理解动态规划问题，零钱兑换问题使用总结的框架进行流程化求解。\n\n## 3. 以斐波那契数列 [509] 为例\n\n题目来源：[509. 斐波那契数](https://leetcode-cn.com/problems/fibonacci-number/)\n\n### 3.1 题目描述\n\n斐波那契数，通常用 F(n) 表示，形成的序列称为斐波那契数列。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：\n\nF(0) = 0,   F(1) = 1\nF(N) = F(N - 1) + F(N - 2), 其中 N > 1.\n给定 N，计算 F(N)。\n\n示例 1：\n\n```bash\n输入：2\n输出：1\n解释：F(2) = F(1) + F(0) = 1 + 0 = 1.\n```\n\n\n示例 2：\n\n```bash\n输入：3\n输出：2\n解释：F(3) = F(2) + F(1) = 1 + 1 = 2.\n```\n\n\n提示：\n\n0 ≤ N ≤ 30\n\n### 3.2 方法一：暴力递归\n\n斐波那契数列的数学形式就是递归的，写成代码就是这样：\n\n```java\npublic int fib(int N) {\n    if(N == 0){\n        return 0;\n    }\n    if(N == 1){\n        return 1;\n    }\n    return fib(N - 1) + fib(N - 2);\n}\n```\n\n这个不用多说了，学校老师讲递归的时候似乎都是拿这个举例。我们也知道这样写代码虽然简洁易懂，但是十分低效，低效在哪里？假设 n = 20，画出的递归树如下：\n\n<img src=\"/pictures/1-1595902107828.jpg\" alt=\"img\" style=\"zoom:33%;\" />\n\n这个递归树怎么理解？就是说想要计算原问题 `f(20)`，我就得先计算出子问题 `f(19)` 和 `f(18)`，然后要计算 `f(19)`，我就要先算出子问题 `f(18)` 和 `f(17)`，以此类推。最后遇到 `f(1)` 或者 `f(2)` 的时候，结果已知，就能直接返回结果，递归树不再向下生长了。\n\n**递归算法的时间复杂度怎么计算？就是用子问题个数乘以解决一个子问题需要的时间。**\n\n首先计算子问题个数，即递归树中节点的总数。显然二叉树节点总数为指数级别，所以子问题个数为 O(2^n)。\n\n然后计算解决一个子问题的时间，在本算法中，没有循环，只有 `f(n - 1) + f(n - 2)` 一个加法操作，时间为 O(1)。\n\n所以，这个算法的时间复杂度为二者相乘，即 O(2^n)，指数级别，爆炸。\n\n观察递归树，很明显发现了算法低效的原因：存在大量重复计算，比如 `f(18)` 被计算了两次，而且你可以看到，以 `f(18)` 为根的这个递归树体量巨大，多算一遍，会耗费巨大的时间。更何况，还不止 `f(18)` 这一个节点被重复计算，所以这个算法及其低效。\n\n这就是动态规划问题的第一个性质：**重叠子问题**。下面，我们想办法解决这个问题。\n\n### 3.3 方法二：带备忘录的递归解法\n\n明确了问题，其实就已经把问题解决了一半。即然耗时的原因是重复计算，那么我们可以造一个「备忘录」，每次算出某个子问题的答案后别急着返回，先记到「备忘录」里再返回；每次遇到一个子问题先去「备忘录」里查一查，如果发现之前已经解决过这个问题了，直接把答案拿出来用，不要再耗时去计算了。\n\n一般使用一个数组充当这个「备忘录」，当然你也可以使用哈希表（字典），思想都是一样的。\n\n```java\npublic int fib(int N) {\n    int[] memo = new int[N + 1];\n    if(N == 0){\n        return 0;\n    }\n    // base case\n    memo[1] = 1;\n    return helper(memo, N);\n}\n\nprivate int helper(int[] memo, int n){\n    // 递归结束条件\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n        return 1;\n    }\n    // 如果已经计算过\n    if(memo[n] != 0){\n        return memo[n];\n    }\n    memo[n] = helper(memo, n - 1) + helper(memo, n - 2);\n    return memo[n];\n}\n```\n\n由于本算法不存在冗余计算，子问题就是 `f(1)`, `f(2)`, `f(3)` ... `f(20)`，数量和输入规模 n = 20 成正比，所以子问题个数为 O(n)。\n\n解决一个子问题的时间，同上，没有什么循环，时间为 O(1)。\n\n所以，本算法的时间复杂度是 O(n)。比起暴力算法，是降维打击。\n\n至此，带备忘录的递归解法的效率已经和迭代的动态规划解法一样了。实际上，这种解法和迭代的动态规划已经差不多了，只不过这种方法叫做「自顶向下」，动态规划叫做「自底向上」。\n\n啥叫「自顶向下」？注意我们刚才画的递归树（或者说图），是从上向下延伸，都是从一个规模较大的原问题比如说 `f(20)`，向下逐渐分解规模，直到 `f(1)` 和 `f(2)` 这两个 base case，然后逐层返回答案，这就叫「自顶向下」。\n\n啥叫「自底向上」？反过来，我们直接从最底下，最简单，问题规模最小的 `f(1)` 和 `f(2)` 开始往上推，直到推到我们想要的答案 `f(20)`，这就是动态规划的思路，这也是为什么动态规划一般都脱离了递归，而是由循环迭代完成计算。\n\n### 3.4 方法三：动态规划\n\n有了上一步「备忘录」的启发，我们可以把这个「备忘录」独立出来成为一张表，就叫做 DP table 吧，在这张表上完成「自底向上」的推算。\n\n```java\npublic int fib(int N) {\n    int[] dp = new int[N + 1];\n    if(N == 0){\n        return 0;\n    }\n    if(N == 1){\n        return 1;\n    }\n    // base case\n    dp[1] = 1;\n    for(int i = 2; i <= N; i++){\n        // 状态转移方程\n        dp[i] = dp[i - 1] + dp[i - 2];\n    }\n    return dp[N];\n}\n```\n\n实际上，带备忘录的递归解法中的「备忘录」，最终完成后就是这个 DP table，所以说这两种解法其实是差不多的，大部分情况下，效率也基本相同。\n\n这里，引出「状态转移方程」这个名词，实际上就是描述问题结构的数学形式：\n\n<img src=\"/pictures/fib.png\" alt=\"img\" style=\"zoom: 67%;\" />\n\n为啥叫「状态转移方程」？其实就是为了听起来高端。你把 `f(n)` 想做一个状态 `n`，这个状态 `n` 是由状态 `n - 1` 和状态 `n - 2` 相加转移而来，这就叫状态转移，仅此而已。\n\n**千万不要看不起暴力解，动态规划问题最困难的就是写出这个暴力解，即状态转移方程**。只要写出暴力解，优化方法无非是用备忘录或者 DP table，再无奥妙可言。\n\n这个例子的最后，讲一个细节优化。细心的读者会发现，根据斐波那契数列的状态转移方程，当前状态只和之前的两个状态有关，其实并不需要那么长的一个 DP table 来存储所有的状态，只要想办法存储之前的两个状态就行了。所以，可以进一步优化，把空间复杂度降为 O(1)：\n\n```java\npublic int fib3(int N) {\n    if(N == 0){\n        return 0;\n    }\n    if(N == 1){\n        return 1;\n    }\n    int pre = 0, curr = 1;\n    for(int i = 2; i <= N; i++){\n        int sum = pre + curr;\n        pre = curr;\n        curr = sum;\n    }\n    return curr;\n}\n```\n\n这个技巧就是所谓的「**状态压缩**」，如果我们发现每次状态转移只需要 DP table 中的一部分，那么可以尝试用状态压缩来缩小 DP table 的大小，只记录必要的数据，上述例子就相当于把DP table 的大小从 `n` 缩小到 2。后续的动态规划章节中我们还会看到这样的例子，一般来说是把一个二维的 DP table 压缩成一维，即把空间复杂度从 O(n^2) 压缩到 O(n)。\n\n有人会问，动态规划的另一个重要特性「最优子结构」，怎么没有涉及？下面会涉及。斐波那契数列的例子严格来说不算动态规划，因为没有涉及求最值，以上旨在说明重叠子问题的消除方法，演示得到最优解法逐步求精的过程。下面，看第二个例子，凑零钱问题。\n\n## 4. 框架求解零钱兑换 [322]\n\n题目来源：[322. 零钱兑换](https://leetcode-cn.com/problems/coin-change/)\n\n### 4.1 题目描述\n\n给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。\n\n示例 1:\n\n```bash\n输入: coins = [1, 2, 5], amount = 11\n输出: 3 \n解释: 11 = 5 + 5 + 1\n```\n\n示例 2：\n\n```bash\n输入: coins = [2], amount = 3\n输出: -1\n```\n\n\n说明:\n你可以认为每种硬币的数量是无限的。\n\n### 4.2 题目分析与代码\n\n分析参考 [这里](https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/dong-tai-gui-hua-xiang-jie-jin-jie#er-cou-ling-qian-wen-ti) , 使用上文中总结的动态规划框架。\n\n首先，这是一个动态规划问题。满足三个条件：\n\n1. 最优子结构。即问题的最优解所包含的子问题的解也是最优的，且子问题间必须相互独立。什么叫做相互独立？我用一个直观的例子来讲解。\n\n   比如说，假设你考试，每门科目的成绩都是互相独立的。你的原问题是考出最高的总成绩，那么你的子问题就是要把语文考到最高，数学考到最高…… 为了每门课考到最高，你要把每门课相应的选择题分数拿到最高，填空题分数拿到最高…… 当然，最终就是你每门课都是满分，这就是最高的总成绩。\n\n   得到了正确的结果：最高的总成绩就是总分。因为这个过程符合最优子结构，“每门科目考到最高”这些子问题是互相独立，互不干扰的。\n\n   但是，如果加一个条件：你的语文成绩和数学成绩会互相制约，数学分数高，语文分数就会降低，反之亦然。这样的话，显然你能考到的最高总成绩就达不到总分了，按刚才那个思路就会得到错误的结果。因为子问题并不独立，语文数学成绩无法同时最优，所以最优子结构被破坏。\n\n   回到凑零钱问题，为什么说它符合最优子结构呢？比如你想求 `amount = 11` 时的最少硬币数（原问题），如果你知道凑出 `amount = 10` 的最少硬币数（子问题），你只需要把子问题的答案加一（再选一枚面值为 1 的硬币）就是原问题的答案。因为硬币的数量是没有限制的，所以子问题之间没有相互制约，是互相独立的。\n\n2. 无后效性。即子问题的解一旦确定，就不再改变，不受在这之后、包含它的更大的问题的求解决策影响。\n\n3. 子问题重叠性质。子问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。\n\n那么，既然知道了这是个动态规划问题，就要思考**如何列出正确的状态转移方程**？\n\n1、**确定 base case**，这个很简单，显然目标金额 `amount` 为 0 时算法返回 0，因为不需要任何硬币就已经凑出目标金额了。\n\n2、**确定「状态」，也就是原问题和子问题中会变化的变量**。由于硬币数量无限，硬币的面额也是题目给定的，只有目标金额会不断地向 base case 靠近，所以唯一的「状态」就是目标金额 `amount`。\n\n3、**确定「选择」，也就是导致「状态」产生变化的行为**。*目标金额为什么变化呢，因为你在选择硬币，你每选择一枚硬币，就相当于减少了目标金额。* 所以说 **所有硬币的面值** ，就是你的「选择」。\n\n4、**明确** **`dp`** **函数/数组的定义**。我们这里讲的是自顶向下的解法，所以会有一个递归的 `dp` 函数，一般来说函数的参数就是状态转移中会变化的量，也就是上面说到的「状态」；函数的返回值就是题目要求我们计算的量。就本题来说，状态只有一个，即「目标金额」，题目要求我们计算凑出目标金额所需的最少硬币数量。所以我们可以这样定义 `dp` 函数：\n\n`dp(n)` 的定义：输入一个目标金额 `n`，返回凑出目标金额 `n` 的最少硬币数量。\n\n#### 4.2.1 先使用暴力递归\n\n搞清楚上面这几个关键点，解法的伪码就可以写出来了：\n\n```python\n# 伪码框架\ndef coinChange(coins: List[int], amount: int):\n\n    # 定义：要凑出金额 n，至少要 dp(n) 个硬币\n    def dp(n):\n        # 做选择，选择需要硬币最少的那个结果\n        for coin in coins:\n            res = min(res, 1 + dp(n - coin))\n        return res\n\n    # 题目要求的最终结果是 dp(amount)\n    return dp(amount)\n```\n\n根据伪码，我们加上 base case 即可得到最终的答案。显然目标金额为 0 时，所需硬币数量为 0；当目标金额小于 0 时，无解，返回 -1：\n\n```python\ndef coinChange(coins: List[int], amount: int):\n\n    def dp(n):\n        # base case\n        if n == 0: return 0\n        if n < 0: return -1\n        # 求最小值，所以初始化为正无穷\n        res = float('INF')\n        for coin in coins:\n            subproblem = dp(n - coin)\n            # 子问题无解，跳过\n            if subproblem == -1: continue\n            res = min(res, 1 + subproblem)\n\n        return res if res != float('INF') else -1\n\n    return dp(amount)\n```\n\n据此，我们可以得出状态转移方程如下图，以上解法属于暴力递归解法。\n\n<img src=\"/pictures/coin.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n**递归算法的时间复杂度分析：子问题总数 x 每个子问题的时间**。\n\n子问题总数为递归树节点个数，这个比较难看出来，是 O(n^k)，总之是指数级别的。每个子问题中含有一个 for 循环，复杂度为 O(k)。所以总时间复杂度为 O(k * n^k)，指数级别。\n\n#### 4.2.2 带备忘录的递归解法，消除重叠子问题\n\n显然，上述解法中存在重叠子问题，比如`amount = 11, coins = {1,2,5}` 时画出递归树看看：\n\n<img src=\"/pictures/5-1595987693352.jpg\" alt=\"img\" style=\"zoom: 33%;\" />\n\n代码如下：\n\n```python\ndef coinChange(coins: List[int], amount: int):\n    # 备忘录\n    memo = dict()\n    def dp(n):\n        # 查备忘录，避免重复计算\n        if n in memo: return memo[n]\n        # base case\n        if n == 0: return 0\n        if n < 0: return -1\n        res = float('INF')\n        for coin in coins:\n            subproblem = dp(n - coin)\n            if subproblem == -1: continue\n            res = min(res, 1 + subproblem)\n\n        # 记入备忘录\n        memo[n] = res if res != float('INF') else -1\n        return memo[n]\n\n    return dp(amount)\n```\n\n很显然「备忘录」大大减小了子问题数目，完全消除了子问题的冗余，所以子问题总数不会超过金额数 `n`，即子问题数目为 O(n)。处理一个子问题的时间不变，仍是 O(k)，所以总的时间复杂度是 O(kn)。\n\n#### 4.2.3 动态规划，自底向上\n\n当然，我们也可以自底向上使用 dp table 来消除重叠子问题，关于「状态」「选择」和 base case 与之前没有区别，`dp` 数组的定义和刚才 `dp` 函数类似，也是把「状态」，也就是目标金额作为变量。不过 `dp` 函数体现在函数参数，而 `dp` 数组体现在数组索引：\n\n**`dp`** **数组的定义：当目标金额为** **`i`** **时，至少需要** **`dp[i]`** **枚硬币凑出**。\n\n根据我们文章开头给出的动态规划代码框架可以写出如下解法：\n\n```java\npublic int coinChange(int[] coins, int amount){\n    // dp[i] = n 表示：当目标金额为 i 时，至少需要 n 枚硬币\n    int[] dp = new int[amount+1];\n    // 初始化dp数组，初始值为 amount+1, 因为dp 数组最大值取到 amount\n    Arrays.fill(dp, amount+1);\n\n    //base case\n    dp[0] = 0;\n\n    for(int j = 1; j <= amount; j++){\n        // 内层for求所有子问题的最小值\n        for (int coin : coins) {\n            // 子问题无解，跳过\n            if (j - coin < 0) {\n                continue;\n            }\n            dp[j] = dp[j] < dp[j - coin] + 1 ? dp[j] : dp[j - coin] + 1;\n        }\n    }\n    return dp[amount] == amount+1 ? -1 : dp[amount];\n}\n```\n\nPS：为啥 `dp` 数组初始化为 `amount + 1` 呢，因为凑成 `amount` 金额的硬币数最多只可能等于 `amount`（全用 1 元面值的硬币），所以初始化为 `amount + 1` 就相当于初始化为正无穷，便于后续取最小值。\n\n## 5. 动态规划总结\n\n第一个斐波那契数列的问题，解释了如何通过「备忘录」或者「dp table」的方法来优化递归树，并且明确了这两种方法本质上是一样的，只是自顶向下和自底向上的不同而已。\n\n第二个凑零钱的问题，展示了如何流程化确定「状态转移方程」，只要通过状态转移方程写出暴力递归解，剩下的也就是优化递归树，消除重叠子问题而已。\n\n**计算机解决问题其实没有任何奇技淫巧，它唯一的解决办法就是穷举**，穷举所有可能性。算法设计无非就是先思考“如何穷举”，然后再追求“如何聪明地穷举”。\n\n列出动态转移方程，就是在解决“如何穷举”的问题。之所以说它难，一是因为很多穷举需要递归实现，二是因为有的问题本身的解空间复杂，不那么容易穷举完整。\n\n备忘录、DP table 就是在追求“如何聪明地穷举”。用空间换时间的思路，是降低时间复杂度的不二法门，除此之外，试问，还能玩出啥花活？\n\n之后我们会有一章专门讲解动态规划问题，如果有任何问题都可以随时回来重读本文，希望读者在阅读每个题目和解法时，多往「状态」和「选择」上靠，才能对这套框架产生自己的理解，运用自如。\n\n## 6. 使用动态规划的题目列表\n\n本文中使用动态规划解决的 LeetCode 题目列表如下，持续更新中~\n\n|  #   |                            Title                             |  Remark   |\n| :--: | :----------------------------------------------------------: | :-------: |\n| 509  | [斐波那契数](https://leetcode-cn.com/problems/fibonacci-number/) |           |\n| 322  |  [零钱兑换](https://leetcode-cn.com/problems/coin-change/)   |           |\n| 300  | [最长上升子序列](https://leetcode-cn.com/problems/longest-increasing-subsequence/) |           |\n| 1143 | [最长公共子序列](https://leetcode-cn.com/problems/longest-common-subsequence/) |           |\n|  53  | [最大子序和](https://leetcode-cn.com/problems/maximum-subarray/) |           |\n|  72  | [编辑距离](https://leetcode-cn.com/problems/edit-distance/)  |           |\n|  10  | [正则表达式匹配](https://leetcode-cn.com/problems/regular-expression-matching/) |   Hard    |\n|  44  | [通配符匹配](https://leetcode-cn.com/problems/wildcard-matching/) |   Hard    |\n|  62  |  [不同路径](https://leetcode-cn.com/problems/unique-paths/)  |           |\n|  63  | [不同路径 II](https://leetcode-cn.com/problems/unique-paths-ii/) |           |\n|  28  | [实现 strStr()](https://leetcode-cn.com/problems/implement-strstr/) |           |\n|  42  | [接雨水](https://leetcode-cn.com/problems/trapping-rain-water/) |   Hard    |\n|  32  | [最长有效括号](https://leetcode-cn.com/problems/longest-valid-parentheses/) |   Hard    |\n|  53  | [最大子序和](https://leetcode-cn.com/problems/maximum-subarray/) |           |\n|  64  | [最小路径和](https://leetcode-cn.com/problems/minimum-path-sum/) |           |\n|  85  | [最大矩形](https://leetcode-cn.com/problems/maximal-rectangle/) |   Hard    |\n|  87  | [扰乱字符串](https://leetcode-cn.com/problems/scramble-string/) |   Hard    |\n|  89  |   [格雷编码](https://leetcode-cn.com/problems/gray-code/)    |   Hard    |\n|  91  |  [解码方法](https://leetcode-cn.com/problems/decode-ways/)   |   Hard    |\n|  97  | [交错字符串](https://leetcode-cn.com/problems/interleaving-string/) |   Hard    |\n| 115  | [不同的子序列](https://leetcode-cn.com/problems/distinct-subsequences/) |   Hard    |\n| 120  | [三角形最小路径和](https://leetcode-cn.com/problems/triangle/) |   Hard    |\n| 123  | [买卖股票的最佳时机 III](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/) | Very Hard |\n\n## 7. 例题：最长上升子序列 [300]\n\n题目来源：[300. 最长上升子序列](https://leetcode-cn.com/problems/longest-increasing-subsequence/)\n\n### 7.1 题目描述\n\n给定一个无序的整数数组，找到其中最长上升子序列的长度。\n\n示例:\n\n```bash\n输入: [10,9,2,5,3,7,101,18]\n输出: 4 \n解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。\n```\n\n\n说明:\n\n可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。\n你算法的时间复杂度应该为 O(n2) 。\n进阶: 你能将算法的时间复杂度降低到 O(n log n) 吗?\n\n注意「子序列」和「子串」这两个名词的区别，子串一定是连续的，而子序列不一定是连续的。\n\n### 7.2 题目分析\n\n本题分析参考 [这里](https://mp.weixin.qq.com/s/7QFapCuvi-2nkh6gREcR9g) .\n\n最长递增子序列（Longest Increasing Subsequence，简写 LIS）是非常经典的一个算法问题，比较容易想到的是动态规划解法，时间复杂度 O(N^2)，我们借这个问题来由浅入深讲解如何找状态转移方程，如何写出动态规划解法。比较难想到的是利用二分查找，时间复杂度是 O(NlogN)，我们通过一种简单的纸牌游戏来辅助理解这种巧妙的解法。\n\n### 7.3 方法一：动态规划（如何找到状态转移关系）\n\n动态规划的难点本来就在于寻找正确的状态转移方程，本文就借助经典的「最长递增子序列问题」来讲一讲设计动态规划的通用技巧：**数学归纳思想**。\n\n相信大家对数学归纳法都不陌生，高中就学过，而且思路很简单。比如我们想证明一个数学结论，那么**我们先假设这个结论在 k 时成立，然后根据这个假设，想办法推导证明出 ``k=n`` 的时候此结论也成立**。如果能够证明出来，那么就说明这个结论对于 `k` 等于任何数都成立。\n\n类似的，我们设计动态规划算法，不是需要一个 dp 数组吗？我们可以假设 `dp[0...i-1]` 都已经被算出来了，然后问自己：怎么通过这些结果算出 `dp[i]`？\n\n直接拿最长递增子序列这个问题举例你就明白了。不过，首先要定义清楚 dp 数组的含义，即 `dp[i]` 的值到底代表着什么？\n\n**我们的定义是这样的：`dp[i]` 表示以 `nums[i]` 这个数结尾的最长递增子序列的长度。**\n\nPS：**为什么这样定义呢？** 这是解决子序列问题的一个套路，后文动态规划之子序列问题解题模板 总结了几种常见套路。你读完本章所有的动态规划问题，就会发现 `dp` 数组的定义方法也就那几种。\n\n反过来想，如果 ``dp[i]`` 表示 ``nums[0...i]`` 这个数组中的最长递增子序列的长度，当求得 ``dp[i]`` 时，想要求出 ``dp[i+1]`` 是不行的，因为递增子序列是从数组中选出的，知道 ``dp[i]`` 并不能确定当前选择的是哪几个数字，当然也不知道选出的递增子序列最后一位，这样是没法推出 ``dp[i+1]`` 的。但如果我们定义 ``dp[i]`` 表示以``nums[i]`` 结尾的最长递增子序列的长度，就可以明确知道选出的递增子序列的最后一位，从而推出 ``dp[i]`` . 只有这样定义才能将 `dp[i+1]` 和 `dp[i]` 建立起联系，利用数学归纳法写出状态转移方程。\n\n根据这个定义，我们就可以推出 base case：`dp[i]` 初始值为 1，因为以 `nums[i]` 结尾的最长递增子序列起码要包含它自己。\n\n根据这个定义，我们的最终结果（子序列的最大长度）应该是 dp 数组中的最大值。\n\n那么我们应该怎么设计算法逻辑来正确计算每个 `dp[i]` 呢？\n\n这就是动态规划的重头戏了，要思考如何设计算法逻辑进行状态转移，才能正确运行呢？这里就可以使用数学归纳的思想：\n\n**假设我们已经知道了 `dp[0..4]` 的所有结果，我们如何通过这些已知结果推出 `dp[5]` 呢**？\n\n根据刚才我们对 `dp` 数组的定义，现在想求 `dp[5]` 的值，也就是想求以 `nums[5]` 为结尾的最长递增子序列。\n\n**`nums[5] = 3`，既然是递增子序列，我们只要找到前面那些结尾比 3 小的子序列，然后把 3 接到最后，就可以形成一个新的递增子序列，而且这个新的子序列长度加一**。\n\n显然，可能形成很多种新的子序列，但是我们只选择最长的那一个，把最长子序列的长度作为 `dp[5]` 的值即可。\n\n最终代码如下：\n\n```java\npublic int lengthOfLIS(int[] nums){\n    // dp[i] = n 表示：以 nums[i] 这个数字结尾的最长上升子序列的长度（想不到）\n    int[] dp = new int[nums.length];\n    // 初始化，最长上升子序列最少为数字本身，故初始化为1\n    Arrays.fill(dp, 1);\n\n    for(int i = 0; i < nums.length; i++){\n        for(int j = 0; j < i; j++){\n            if(nums[j] < nums[i]){\n                dp[i] = Math.max(dp[i], dp[j]+1);\n            }\n        }\n    }\n\n    int res = 0;\n    for(int i = 0; i < nums.length; i++){\n        res = Math.max(res, dp[i]);\n    }\n\n    return res;\n}\n```\n\n至此，这道题就解决了，时间复杂度 O(N^2)。总结一下如何找到动态规划的状态转移关系：\n\n**1、**明确 `dp` 数组所存数据的含义。这一步对于任何动态规划问题都很重要，如果不得当或者不够清晰，会阻碍之后的步骤。\n\n**2、**根据 `dp` 数组的定义，运用数学归纳法的思想，假设 `dp[0...i-1]` 都已知，想办法求出 `dp[i]`，一旦这一步完成，整个题目基本就解决了。\n\n但如果无法完成这一步，很可能就是 `dp` 数组的定义不够恰当，需要重新定义 `dp` 数组的含义；或者可能是 `dp` 数组存储的信息还不够，不足以推出下一步的答案，需要把 `dp` 数组扩大成二维数组甚至三维数组。\n\n### 7.4 方法二：二分查找\n\n详解请看：https://mp.weixin.qq.com/s/7QFapCuvi-2nkh6gREcR9g##\n\n这个解法的时间复杂度为 O(NlogN)，但是说实话，正常人基本想不到这种解法（也许玩过某些纸牌游戏的人可以想出来）。所以大家了解一下就好，正常情况下能够给出动态规划解法就已经很不错了。\n\n```java\npublic int lengthOfLIS(int[] nums){\n    int[] top = new int[nums.length];\n    // 牌初始堆数定义为0\n    int piles = 0;\n    for(int i = 0; i < nums.length; i++){\n        // 要处理的扑克牌\n        int poker = nums[i];\n\n        //*********** 二分查找：搜索左侧边界 ***************/\n        // piles 表示堆数，即就是数组的长度；如果写成 right = piles + 1, 当 nums=[0] 时返回 0， 正确结果是 1\n        int left = 0, right = piles;\n        while (left < right){\n            int mid = left + (right - left) / 2;\n            if(top[mid] == poker){\n                right = mid;\n            }else if(top[mid] > poker){\n                right = mid;\n            }else if(top[mid] < poker){\n                left = mid + 1;\n            }\n        }\n\n        // 牌比每一个都大，则新建一个堆\n        if(left == piles){\n            piles++;\n        }\n        // 牌比每一个都小、或者找到合适位置，放入 top 数组即可\n        top[left] = poker;\n    }\n    return piles;\n}\n```\n\n## 8. 例题：最长公共子序列 [1143]\n\n题目来源：[1143. 最长公共子序列](https://leetcode-cn.com/problems/longest-common-subsequence/)\n\n### 8.1 题目描述\n\n给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列的长度。\n\n若这两个字符串没有公共子序列，则返回 0。 \n\n示例 1:\n\n```bash\n输入：text1 = \"abcde\", text2 = \"ace\" \n输出：3  \n解释：最长公共子序列是 \"ace\"，它的长度为 3。\n```\n\n\n示例 2:\n\n```bash\n输入：text1 = \"abc\", text2 = \"def\"\n输出：0\n解释：两个字符串没有公共子序列，返回 0。\n```\n\n\n提示:\n\n1 <= text1.length <= 1000\n1 <= text2.length <= 1000\n输入的字符串只含有小写英文字符。\n\n### 8.2 题目分析\n\n最长公共子序列（Longest Common Subsequence，简称 LCS）是一道非常经典的面试题目，因为它的解法是典型的二维动态规划，大部分比较困难的字符串问题都和这个问题一个套路，比如说编辑距离。而且，这个算法稍加改造就可以用于解决其他问题，所以说 LCS 算法是值得掌握的。\n\n详细分析参考：https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zui-chang-gong-gong-zi-xu-lie\n\n### 8.3 代码\n\n```java\npublic int longestCommonSubsequence(String text1, String text2){\n    int len1 = text1.length();\n    int len2 = text2.length();\n    // 让 text1,text2 的索引从 1 开始\n    // dp[i][j] = n 表示：对于 text1[1...i] 和 text2[1...j] 的最长公共子序列为 n\n    //base case 是：dp[0][..] 和 dp[..][0] 初始化为0\n    int[][] dp = new int[len1+1][len2+1];\n\n    for(int i = 1; i <= len1; i++){\n        for(int j = 1; j <= len2; j++){\n            //状态转移\n            if(text1.charAt(i-1) == text2.charAt(j-1)){\n                dp[i][j] = dp[i-1][j-1] + 1;\n            }else{\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);\n            }\n        }\n    }\n    return dp[len1][len2];\n}\n```\n\n## 9. 例题：最大子序列和 [53]\n\n题目来源：[53. 最大子序和](https://leetcode-cn.com/problems/maximum-subarray/)\n\n### 9.1 题目描述\n\n给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n\n示例：\n\n```bash\n输入: [-2,1,-3,4,-1,2,1,-5,4]\n输出: 6\n解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。\n```\n\n\n进阶:\n\n如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。\n\n### 9.2 题目分析\n\n参考：https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zui-da-zi-shu-zu\n\n解决这个问题需要动态规划技巧，但是 `dp` 数组的定义比较特殊。按照我们常规的动态规划思路，一般是这样定义 `dp` 数组：\n\n**`nums[0..i]`** **中的「最大的子数组和」为** **`dp[i]`**。\n\n如果这样定义的话，整个 `nums` 数组的「最大子数组和」就是 `dp[n-1]`。如何找状态转移方程呢？按照数学归纳法，假设我们知道了 `dp[i-1]`，如何推导出 `dp[i]` 呢？利用数学归纳法，你能用 `dp[i]` 推出 `dp[i+1]` 吗？\n\n**实际上是不行的，因为子数组一定是连续的，按照我们当前** **`dp`** **数组定义，并不能保证** **`nums[0..i]`** **中的最大子数组与** **`nums[i+1]`** **是相邻的**，也就没办法从 `dp[i]` 推导出 `dp[i+1]`。\n\n所以说我们这样定义 `dp` 数组是不正确的，无法得到合适的状态转移方程。对于这类子数组问题，我们就要重新定义 `dp` 数组的含义：\n\n**以** **`nums[i]`** **为结尾的「最大子数组和」为** **`dp[i]`**。\n\n这种定义之下，想得到整个 `nums` 数组的「最大子数组和」，不能直接返回 `dp[n-1]`，而需要遍历整个 `dp` 数组。\n\n虽然说动态规划推状态转移方程确实比较玄学，但大部分还是有些规律可循的。\n\n这道「最大子数组和」就和「最长递增子序列」非常类似，`dp` 数组的定义是「以 `nums[i]` 为结尾的最大子数组和/最长递增子序列为 `dp[i]`」。因为只有这样定义才能将 `dp[i+1]` 和 `dp[i]` 建立起联系，利用数学归纳法写出状态转移方程。\n\n### 9.3 代码\n\n```java\npublic int maxSubArray(int[] nums) {\n    int len = nums.length;\n    // dp[i] = x 表示以 nums[i] 结尾的最大子序列和为x\n    int[] dp = new int[len];\n    // base case\n    dp[0] = nums[0];\n\n    int max = nums[0];\n    for(int i = 1; i < len; i++){\n        // 状态转移\n        dp[i] = Math.max(nums[i], nums[i] + dp[i - 1]);\n        max = Math.max(max, dp[i]);\n    }\n    return max;\n}\n```\n\n## 10. 例题：编辑距离 [72]\n\n题目来源：[72. 编辑距离](https://leetcode-cn.com/problems/edit-distance/)\n\n### 10.1 题目描述\n\n给你两个单词 word1 和 word2，请你计算出将 word1 转换成 word2 所使用的最少操作数 。\n\n你可以对一个单词进行如下三种操作：\n\n1. 插入一个字符\n2. 删除一个字符\n3. 替换一个字符\n\n示例 1：\n\n```bash\n输入：word1 = \"horse\", word2 = \"ros\"\n输出：3\n解释：\nhorse -> rorse (将 'h' 替换为 'r')\nrorse -> rose (删除 'r')\nrose -> ros (删除 'e')\n```\n\n\n示例 2：\n\n```bash\n输入：word1 = \"intention\", word2 = \"execution\"\n输出：5\n解释：\nintention -> inention (删除 't')\ninention -> enention (将 'i' 替换为 'e')\nenention -> exention (将 'n' 替换为 'x')\nexention -> exection (将 'n' 替换为 'c')\nexection -> execution (插入 'u')\n```\n\n### 10.2 题目分析\n\ndp 问题自底向上求解，定义 dp 数组：``dp[i][j] = n`` 表示：``word1[1..i]`` 和 ``word2[1..j]`` 的最小编辑距离为 n，注意 word1 和 word2 的下标从1开始。\n\nbase case：当 i=0 或者 j=0 时，属于base case。\n\n状态：距离。\n\n选择：有三种选择，即删除、替换、插入，选出距离最小的。做出每一种选择后，使用前面求出 dp 数组的值。比如如果选择删除，则 ``dp[i][j] = dp[i-1][j] + 1`` ；如果选择替换，则 ``dp[i][j] = dp[i-1][j-1] + 1``；如果选择插入，则``dp[i][j] = dp[i][j-1] + 1``入，当插入时应该注意，不能在 ``word1[i]`` 之前插入，因为在前面插入后，没法使用已经求出的 dp 数组的值，而是在 ``word1[i]`` 的后面插入。\n\n状态转移方程：如果字符相等，跳过；否则在删除、替换、插入中选择一种。\n\n### 10.3 代码\n\n```java\npublic int minDistance(String word1, String word2){\n    int len1 = word1.length();\n    int len2 = word2.length();\n    //word1 和 word2 的下标从 1 开始\n    //dp[i][j] = n 表示：word1[1..i] 和 word2[1..j] 的最小编辑距离为 n\n    int[][] dp = new int[len1+1][len2+2];\n\n    //base case\n    for(int i = 0; i <= len1; i++){\n        dp[i][0] = i;\n    }\n    for(int j = 0; j <= len2; j++){\n        dp[0][j] = j;\n    }\n\n    for(int i = 1; i <= len1; i++){\n        for(int j = 1; j <= len2; j++){\n            if(word1.charAt(i-1) == word2.charAt(j-1)){\n                dp[i][j] = dp[i-1][j-1];\n            }else{\n                //三种情况：插入、删除、替换\n                dp[i][j] = min(dp[i][j-1] + 1, dp[i-1][j] + 1, dp[i-1][j-1] + 1);\n            }\n        }\n    }\n    return dp[len1][len2];\n}\n\nprivate int min(int a, int b, int c){\n    return Math.min(Math.min(a,b),c);\n}\n```\n\n## 11. 例题：正则表达式匹配 [10]\n\n题目来源：[10. 正则表达式匹配](https://leetcode-cn.com/problems/regular-expression-matching/)\n\n### 11.1 题目描述\n\n给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。\n\n```bash\n'.' 匹配任意单个字符\n'*' 匹配零个或多个前面的那一个元素\n```\n\n\n所谓匹配，是要涵盖整个字符串s的，而不是部分字符串。\n\n说明:\n\ns 可能为空，且只包含从 a-z 的小写字母。\np 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。\n示例 1:\n\n```bash\n输入:\ns = \"aa\"\np = \"a\"\n输出: false\n解释: \"a\" 无法匹配 \"aa\" 整个字符串。\n```\n\n示例 2:\n\n```bash\n输入:\ns = \"aa\"\np = \"a*\"\n输出: true\n解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 \"aa\" 可被视为 'a' 重复了一次。\n```\n\n示例 3:\n\n```bash\n输入:\ns = \"ab\"\np = \".*\"\n输出: true\n解释: \".*\" 表示可匹配零个或多个（'*'）任意字符（'.'）。\n```\n\n### 11.2 题目分析\n\n两个字符串比较的动态规划问题。``dp[i][j]`` 表示 ``s[i-1]`` 和 ``p[i-1]`` 是否可以匹配。\n\nbase case：``dp[0][0] = true``， 但这还不够，字符串 \"\" 和 \"a*\" 也是匹配的。\n\n状态：是否可以匹配。\n\n选择：字符串 s 和 p 各前进一位。\n\n状态转换：见代码。\n\n### 11.3 代码\n\n```java\npublic boolean isMatch(String s, String p){\n    if(s == null || p == null){return false;}\n    int len1 = s.length();\n    int len2 = p.length();\n\n    //dp 数组中 字符串下标从 1 开始，索引 0 存储空字符\n    //dp[i][j] = true 表示：s[0..(i-1)] p[0..(j-1)] 可以匹配\n    //base case：dp[..][0] 初始化为 0, 不存在可以匹配的可能\n    boolean[][] dp = new boolean[len1+1][len2+1];\n    dp[0][0] = true;\n    //base case: dp[0][..] 初始化，如果出现 * 则可以消去上一个字符，且 上上一个字符对应 dp 值为 true，则当前 dp 值为true\n    for(int j = 1; j < len2; j++){\n        //j-1\n        if(p.charAt(j) == '*' && dp[0][j-1]){\n            //j+1\n            dp[0][j+1] = true;\n        }\n    }\n\n    for(int i = 0; i < len1; i++){\n        for(int j = 0; j < len2; j++){\n            //如果元素匹配或者为任意元素\n            if(p.charAt(j) == '.' || s.charAt(i) == p.charAt(j)){\n                dp[i + 1][j + 1] = dp[i][j];\n            }\n\n            if(p.charAt(j) == '*'){\n                //如果前一个元素不匹配，则消去这两个元素\n                if(p.charAt(j-1) != s.charAt(i) && p.charAt(j-1) != '.'){\n                    dp[i + 1][j + 1] = dp[i + 1][j - 1];\n                }else{\n                    /*\n                        * 如果前一个元素匹配，存在三种情况：\n                        * 重复前一个字符多次（abbbb ab*）dp[i + 1][j + 1] = dp[i][j + 1]\n                        * 重复前一个字符一次（ab ab*）dp[i + 1][j + 1] = dp[i + 1][j]\n                        * 重复前一个字符零次（a ab*）dp[i + 1][j + 1] = dp[i + 1][j - 1]\n                         */\n                    dp[i + 1][j + 1] = (dp[i][j + 1] || dp[i + 1][j] || dp[i + 1][j - 1]);\n                }\n            }\n        }\n    }\n    return dp[len1][len2];\n```\n\n## 12. 例题：通配符匹配 [44]\n\n题目来源：[44. 通配符匹配](https://leetcode-cn.com/problems/wildcard-matching/)\n\n### 12.1 题目描述\n\n给定一个字符串 (s) 和一个字符模式 (p) ，实现一个支持 '?' 和 '*' 的通配符匹配。\n\n```bash\n'?' 可以匹配任何单个字符。\n'*' 可以匹配任意字符串（包括空字符串）。\n两个字符串完全匹配才算匹配成功。\n```\n\n说明:\n\ns 可能为空，且只包含从 a-z 的小写字母。\np 可能为空，且只包含从 a-z 的小写字母，以及字符 ? 和 *。\n示例 1:\n\n```bash\n输入:\ns = \"aa\"\np = \"a\"\n输出: false\n解释: \"a\" 无法匹配 \"aa\" 整个字符串。\n```\n\n\n示例 2:\n\n输入:\n\n```bash\ns = \"aa\"\np = \"*\"\n输出: true\n解释: '*' 可以匹配任意字符串。\n```\n\n示例 3:\n\n```bash\n输入:\ns = \"cb\"\np = \"?a\"\n输出: false\n解释: '?' 可以匹配 'c', 但第二个 'a' 无法匹配 'b'。\n```\n\n示例 4:\n\n```bash\n输入:\ns = \"adceb\"\np = \"*a*b\"\n输出: true\n解释: 第一个 '*' 可以匹配空字符串, 第二个 '*' 可以匹配字符串 \"dce\".\n```\n\n示例 5:\n\n```bash\n输入:\ns = \"acdcb\"\np = \"a*c?b\"\n输出: false\n```\n\nPS：? 不可以匹配空字符串。\n\n### 12.2 题目分析\n\n两个字符串比较的动态规划问题。\n\n本体类似于上一题，但我在考虑问题时始终不能跳出问题本身，使用动态规划的思想，而是一再考虑可能出现的不同情况，特别是出现 * 时。例如字符串 \"abc\" 和 \"a*\" , 当 p 中出现了 * 时，有两种处理方式：\n\n1. 把 * 当做一个空字符串，那么 ``dp[i + 1][j + 1] = dp[i + 1][j]``\n2. ``*`` 匹配任意字符串，那么 ``dp[i + 1][j + 1] = dp[i][j + 1]``\n\n要注意理解，dp 问题注重的是当前状态的转化，即只考虑当前这一位，并把这个问题转化为更小问题的答案。\n\n### 12.3 代码\n\n```java\npublic boolean isMatch(String s, String p) {\n    if(s == null || p == null){return false;}\n    int len1 = s.length();\n    int len2 = p.length();\n\n    //dp 数组中 字符串下标从 1 开始，索引 0 存储空字符\n    //dp[i][j] = true 表示：s[0..(i-1)] p[0..(j-1)] 可以匹配\n    //base case：dp[..][0] 初始化为 0, 不存在可以匹配的可能\n    boolean[][] dp = new boolean[len1+1][len2+1];\n    dp[0][0] = true;\n    //base case: dp[0][..] 初始化，如果出现 * 则可以视为空字符串\n    for(int j = 0; j < len2; j++){\n        if(p.charAt(j) == '*'){\n            dp[0][j + 1] = dp[0][j];\n        }\n    }\n\n    for(int i = 0; i < len1; i++){\n        for(int j = 0; j < len2; j++){\n            if(p.charAt(j) == '?' || s.charAt(i) == p.charAt(j)){\n                dp[i + 1][j + 1] = dp[i][j];\n            }\n            if(p.charAt(j) == '*'){\n                //情况一：s = \"a\", p = \"a*\", 此时 * 被当做空字符串 dp[i + 1][j + 1] = dp[i + 1][j]\n                //情况二：s = \"abc\", p = \"a*\", 此时 * 被当做任意字符串 dp[i + 1][j + 1] = dp[i][j + 1]\n                dp[i + 1][j + 1] = (dp[i + 1][j] || dp[i][j + 1]);\n            }\n        }\n    }\n    return dp[len1][len2];\n}\n```\n\n## 13. 例题：不同路径 [62]\n\n题目来源：[62. 不同路径](https://leetcode-cn.com/problems/unique-paths/)\n\n### 13.1 题目描述\n\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。\n\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。\n\n问总共有多少条不同的路径？\n\n示例 1:\n\n```bash\n输入: m = 3, n = 2\n输出: 3\n解释:\n从左上角开始，总共有 3 条路径可以到达右下角。\n1. 向右 -> 向右 -> 向下\n2. 向右 -> 向下 -> 向右\n3. 向下 -> 向右 -> 向右\n```\n\n示例 2:\n\n```bash\n输入: m = 7, n = 3\n输出: 28\n```\n\n\n提示：\n\n1 <= m, n <= 100\n题目数据保证答案小于等于 2 * 10 ^ 9\n\n### 13.2 题目分析\n\n简单题。\n\n``dp[i-1][j-1] ``表示：i * j 的网格上机器人的移动步数\n\n状态转移：``dp[i][j] = dp[i - 1][j] + dp[i][j - 1]``\n\n###  13.3 代码\n\n```java\npublic int uniquePaths(int m, int n) {\n    //dp[i-1][j-1] 表示：i * j 的网格上机器人的移动步数\n    int[][] dp = new int[m][n];\n    for(int i = 0; i < m; i++){\n        dp[i][0] = 1;\n    }\n    for(int i = 1; i < n; i++){\n        dp[0][i] = 1;\n    }\n    for(int i = 1; i < m; i++){\n        for(int j = 1; j < n; j++){\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n        }\n    }\n    return dp[m - 1][n - 1];\n}\n```\n\n## 14. 例题：不同路径II [63]\n\n题目来源：[63. 不同路径 II](https://leetcode-cn.com/problems/unique-paths-ii/)\n\n### 14.1 题目描述\n\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。\n\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。\n\n现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？\n\n网格中的障碍物和空位置分别用 `1` 和 `0` 来表示。\n\n说明：m 和 n 的值均不超过 100。\n\n示例 1:\n\n```bash\n输入:\n[\n  [0,0,0],\n  [0,1,0],\n  [0,0,0]\n]\n输出: 2\n解释:\n3x3 网格的正中间有一个障碍物。\n从左上角到右下角一共有 2 条不同的路径：\n1. 向右 -> 向右 -> 向下 -> 向下\n2. 向下 -> 向下 -> 向右 -> 向右\n```\n\n### 14.2 题目分析\n\n注意与上一题的区别。\n\n### 14.3 代码\n\n```java\npublic int uniquePathsWithObstacles(int[][] obstacleGrid) {\n    int m = obstacleGrid.length;\n    int n = obstacleGrid[0].length;\n    //dp[i-1][j-1] 表示：i * j 的网格上机器人的移动步数\n    int[][] dp = new int[m][n];\n    // 注意\n    if(obstacleGrid[0][0] == 1){return 0;}\n    // base case，与上一题不同\n    for(int i = 0; i < m; i++){\n        if(obstacleGrid[i][0] == 1){\n            break;\n        }\n        dp[i][0] = 1;\n    }\n    for(int i = 1; i < n; i++){\n        if(obstacleGrid[0][i] == 1){\n            break;\n        }\n        dp[0][i] = 1;\n    }\n    for(int i = 1; i < m; i++){\n        for(int j = 1; j < n; j++){\n            if(obstacleGrid[i][j] == 1){\n                dp[i][j] = 0;\n            }else{\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n            }\n        }\n    }\n    return dp[m - 1][n - 1];\n}\n```\n\n## 15. 例题：实现strStr() [15]\n\n题目来源：[28. 实现 strStr()](https://leetcode-cn.com/problems/implement-strstr/)\n\n### 15.1 题目描述\n\n实现 strStr() 函数。\n\n给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。\n\n示例 1:\n\n```bash\n输入: haystack = \"hello\", needle = \"ll\"\n输出: 2\n```\n\n\n示例 2:\n\n```bash\n输入: haystack = \"aaaaa\", needle = \"bba\"\n输出: -1\n```\n\n\n说明:\n\n当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。\n\n对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。\n\n### 15.2 题目分析\n\n详细分析参考：[这里](https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/dong-tai-gui-hua-zhi-kmp-zi-fu-pi-pei-suan-fa) . 太难了....\n\n标准的KMP方法在我的另一篇博客：[这里](https://juliajiang7.github.io/2020/07/17/KMP算法/#more) .\n\n我们可以认为 `pat` 的匹配就是状态的转移。比如当 pat = \"ABABC\"：\n\n<img src=\"/pictures/state.jpg\" alt=\"img\" style=\"zoom:33%;\" />\n\n如上图，圆圈内的数字就是状态，状态 0 是起始状态，状态 5（`pat.length`）是终止状态。开始匹配时 `pat` 处于起始状态，一旦转移到终止状态，就说明在 `txt` 中找到了 `pat`。比如说当前处于状态 2，就说明字符 \"AB\" 被匹配：\n\n<img src=\"/pictures/state2.jpg\" alt=\"img\" style=\"zoom:33%;\" />\n\n`dp[j][c] = next` 表示，当前是状态 `j`，遇到了字符 `c`，应该转移到状态 `next`。\n\nbase case：``dp[0][pat.charAt(0)] = 1;``, 只有遇到 pat[0] 这个字符才能使状态从 0 转移到 1，遇到其它字符的话还是停留在状态 0（Java 默认初始化数组全为 0）.\n\n如何构建这个 `dp` 数组，需要一个辅助状态 `X`，它永远比当前状态 `j` 落后一个状态，拥有和 `j` 最长的相同前缀，我们给它起了个名字叫「影子状态」。\n\n在构建当前状态 `j` 的转移方向时，只有字符 `pat[j]` 才能使状态推进（`dp[j][pat[j]] = j+1`）；而对于其他字符只能进行状态回退，应该去请教影子状态 `X` 应该回退到哪里（`dp[j][other] = dp[X][other]`，其中 `other` 是除了 `pat[j]` 之外所有字符）。\n\n对于影子状态 `X`，我们把它初始化为 0，并且随着 `j` 的前进进行更新，更新的方式和 search 过程更新 `j` 的过程非常相似（`X = dp[X][pat[j]]`）。\n\n### 15.3 代码\n\n```java\npublic int strStr(String haystack, String needle){\n    String txt = haystack;\n    String pat = needle;\n    int M = pat.length();\n    int N = txt.length();\n    if(M == 0){return 0;}\n\n    //dp[j][c] = i 表示： 当前状态为 j，且遇到的下一个字符是 c 时, 下一个状态位 i\n    int[][] dp = new int[M][256];\n    KMP(pat, dp);\n\n    //pat 的初始状态为 0\n    int j = 0;\n    for(int i = 0; i < N; i++){\n        //计算 pat 的下一个状态\n        j = dp[j][txt.charAt(i)];\n        //到达终止状态，匹配成功\n        if(j == M){return i - M + 1;}\n    }\n    //没到达终止状态，匹配失败\n    return -1;\n}\n\n/**\n     * 计算 dp, 即就是 next\n     * @param pat\n     * @param dp\n     */\npublic void KMP(String pat, int[][] dp){\n    int M = pat.length();\n\n    //base case\n    dp[0][pat.charAt(0)] = 1;\n    //影子状态，初始化为 0\n    int X = 0;\n    //构建状态转移图\n    for(int j = 1; j < M; j++){\n        for(int c = 0; c < 256; c++){\n            if(pat.charAt(j) == c){\n                dp[j][c] = j + 1;\n            }else{\n                dp[j][c] = dp[X][c];\n            }\n        }\n        //更新影子状态\n        X = dp[X][pat.charAt(j)];\n    }\n}\n```\n\n## 16. 接雨水 [42]\n\n题目来源：[42. 接雨水](https://leetcode-cn.com/problems/trapping-rain-water/)\n\n### 16.1. 题目描述\n\n给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。\n\n![image-20200810100323970](/pictures/image-20200810100323970.png)\n\n上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 感谢 Marcos 贡献此图。\n\n示例:\n\n```bash\n输入: [0,1,0,2,1,0,1,3,2,1,2,1]\n输出: 6\n```\n\n### 16.2. 题目分析\n\n本题分析参考：[这里](https://leetcode.wang/leetCode-42-Trapping-Rain-Water.html).\n\n### 16.3. 方法一：暴力解法（按列求）\n\n参考 [这里](https://leetcode.wang/leetCode-42-Trapping-Rain-Water.html) 的解法二按列求。\n\n```java\npublic int trap(int[] height){\n    int sum = 0;\n\n    //最两端的不用考虑，因为一定不会有雨水\n    for(int i = 1; i < height.length - 1; i++){\n        int max_left = 0;\n        //找出 height[i] 左边最高（包括height[i]），要把最左端考虑在内\n        for(int j = i; j >= 0; j--){\n            max_left = Math.max(height[j], max_left);\n        }\n\n        int max_right = 0;\n        //找出 height[i] 右边最高（包括height[i]），要把最右端考虑在内\n        for(int j = i; j < height.length;j++){\n            max_right = Math.max(height[j], max_right);\n        }\n\n        //如果自己就是最高的话 max_left = max_right = height[i]\n        sum += Math.min(max_left, max_right) - height[i];\n    }\n    return sum;\n}\n```\n\n时间复杂度：O（n²），遍历每一列需要 n，找出左边最高和右边最高的墙加起来刚好又是一个 n，所以是 n²。\n\n空间复杂度：O（1）。\n\n### 16.4. 方法二：动态规划\n\n参考 [这里](https://leetcode.wang/leetCode-42-Trapping-Rain-Water.html) 的解法三动态规划。dp 数组定义不同，本文采用的方法和暴力解法同步。\n\n我们注意到，解法一中，对于每一列，我们求它左边最高的墙和右边最高的墙，都是重新遍历一遍所有高度，这里我们可以优化一下。\n\n首先用两个数组，max_left [ i ] 代表到第 i 列左边最高的墙的高度（包括第 i 列），max_right [ i ] 代表到第 i 列右边最高的墙的高度（包括第 i 列）。\n\n这样，我们利用解法一的思路，不用在 for 循环中再重新遍历求 max_left 和 max_right 了。\n\n```java\npublic int trap(int[] height) {\n    int sum = 0;\n    int len = height.length;\n    if(len == 0){return 0;}\n\n    // max_left[i] = x 表示：height[0..i] 中最大值为x\n    int max_left[] = new int[len];\n    // max_right[i] = x 表示：height[i..(len-1)] 中最大值为x\n    int max_right[] = new int[len];\n\n    // base case\n    max_left[0] = height[0];\n    max_right[len - 1] = height[len - 1];\n\n    for(int i = 1; i < len; i++){\n        max_left[i] = Math.max(height[i], max_left[i - 1]);\n    }\n    for(int j = len - 2; j > 0; j--){\n        max_right[j] = Math.max(height[j], max_right[j + 1]);\n    }\n\n    for(int i = 1; i < len - 1; i++){\n        sum += Math.min(max_left[i], max_right[i]) - height[i];\n    }\n    return sum;\n}\n```\n\n时间复杂度：O（n）。\n\n空间复杂度：O（n），用来保存每一列左边最高的墙和右边最高的墙。\n\n## 17. 最长有效括号 [32]\n\n题目来源：[32. 最长有效括号](https://leetcode-cn.com/problems/longest-valid-parentheses/)\n\n### 17.1. 题目描述\n\n给定一个只包含 '(' 和 ')' 的字符串，找出最长的包含有效括号的子串的长度。\n\n示例 1:\n\n```bash\n输入: \"(()\"\n输出: 2\n解释: 最长有效括号子串为 \"()\"\n```\n\n\n示例 2:\n\n```bash\n输入: \")()())\"\n输出: 4\n解释: 最长有效括号子串为 \"()()\"\n```\n\n注意：题目要求找 **子串**， 即字符串中连续的一段。\n\n### 17.2 题目分析\n\n本题分析参考：[这里](https://leetcode.wang/leetCode-32-Longest-Valid-Parentheses.html).\n\n做题先从暴力解法入手，慢慢想如何进行优化。直接考虑高效率解法考虑会不周全，而且找不到思路啊，千万别心急。\n\n### 17.3. 方法一：暴力解法\n\n暴力解法就是：对每一个子串判断是否有效，返回最长的长度。\n\n```java\npublic int longestValidParentheses(String s) {\n    int len = s.length();\n    if(len == 0){return 0;}\n    int max = 0;\n    for(int i = 0; i < len; i++){\n        // 注意：substring 是左闭右开，所以这里j的取值小于等于len\n        for(int j = i + 2; j <= len; j += 2){\n            if(isValid(s.substring(i, j))){\n                max = Math.max(max, j - i);\n            }\n        }\n    }\n    return max;\n}\nprivate boolean isValid(String s){\n    Deque<Character> stack = new ArrayDeque<>();\n    for(int i = 0; i < s.length(); i++){\n        if(s.charAt(i) == '('){\n            stack.push('(');\n        }else{\n            if(!stack.isEmpty() && stack.peek() == '('){\n                stack.pop();\n            }else{\n                return false;\n            }\n        }\n    }\n    return stack.isEmpty();\n}\n```\n\n时间复杂度: 列举字符串是 O（n²），判断是否是合法序列是 O（n），所以总共是 O（n³）。\n\n空间复杂度：O（n），每次判断的时候，栈的大小。\n\n这个算法，leetCode 会报时间超时。\n\n### 17.4. 方法二：暴力解法优化\n\n在解法一中，我们会做很多重复的判断，比如 ``()()()`` ，从下标 0 开始，我们先判断长度为 2 的是否是合法序列，再判断长度为 4 时的字符串是否合法，但依旧从下标 0 开始。判断长度为 6 时，依旧从下标 0 开始，但其实之前已经确认前 4 个是合法序列了，所以我们从 4 开始判断即可。\n\n基于此，我们可以换一个思路，我们判断从每个位置开始的最长合法子串是多长即可。在判断是否是合法子串时，我们不使用栈，而是用一个变量记录当前的括号情况，遇到左括号加1，遇到右括号减1，如果变成0，更新最长合法子串长度。\n\n```java\npublic int longestValidParentheses(String s) {\n    int count = 0;\n    int max = 0;\n    for(int i = 0; i < s.length(); i++){\n        count = 0;\n        for(int j = i; j < s.length(); j++){\n            if(s.charAt(j) == '('){\n                count++;\n            }else{\n                count--;\n            }\n\n            if(count < 0){\n                break;\n            }\n\n            if(count == 0){\n                max = Math.max(max, j - i + 1);\n            }\n        }\n    }\n    return max;\n}\n```\n\n时间复杂度：O（n²）。\n\n空间复杂度：O（1）。\n\n### 17.5. 方法三：动态规划\n\n分析参考：[这里](https://leetcode.wang/leetCode-32-Longest-Valid-Parentheses.html#解法三-动态规划).\n\n```java\npublic int longestValidParentheses(String s) {\n    int len = s.length();\n    int max = 0;\n    // dp[i]=x 表示：以s[i]结尾的子串最长有效长度为x\n    int[] dp = new int[len];\n    for(int i = 1; i < len; i++){\n        // 如果遇到左括号，dp[i]=0，就是初始值\n        // 遇到右括号时，才会更新dp数组\n        if(s.charAt(i) == ')'){\n            // 右括号的前一位是左括号\n            if(s.charAt(i - 1) == '('){\n                dp[i] = (i > 2 ? dp[i - 2] : 0) + 2;\n\n                // 右括号前一位是右括号\n                // 并且除去前边的合法序列的前一位是左括号\n            }else if(i - dp[i - 1] > 0 && s.charAt(i - dp[i - 1] - 1) == '('){\n                dp[i] = dp[i - 1] + ((i - dp[i - 1]) > 2 ? dp[i - dp[i - 1] - 2] : 0) + 2;\n            }\n            max = Math.max(max, dp[i]);\n        }\n    }\n    return max;\n}\n```\n\n时间复杂度：遍历了一次，O（n）。\n\n空间复杂度：O（n）。\n\n## 18. 最大矩形 [85]\n\n题目来源：[85. 最大矩形](https://leetcode-cn.com/problems/maximal-rectangle/)\n\n### 18.1. 题目描述\n\n![image-20200820100311020](/pictures/image-20200820100311020.png)\n\n### 18.2. 方法一：暴力解法\n\n最原始地，我们可以列举每个可能的矩形。这可以通过遍历所有的(x1, y1) (x2, y2) 坐标，并以它们为对角顶点来完成。该方法过慢，不足以通过所有测试用例。\n\n时间复杂度：O(N<sup>3</sup>M<sup>3</sup>)，空间复杂度：O(1).\n\n### 18.3. 方法二：动态规划 - 使用柱状图的优化暴力解法\n\n参考 [这里](https://leetcode-cn.com/problems/maximal-rectangle/solution/zui-da-ju-xing-by-leetcode/)，这道题的难点是根本想不到...\n\n代码如下：\n\n```java\npublic int maximalRectangle(char[][] matrix) {\n    if(matrix.length == 0){return 0;}\n    int row = matrix.length;\n    int col = matrix[0].length;\n    int maxArea = 0;\n    // dp[i][j] = x 表示：以 matrix[i][j] 结尾的最大可能宽度\n    int[][] dp = new int[row][col];\n\n    for(int i = 0; i < row; i++){\n        for(int j = 0; j < col; j++){\n            if(matrix[i][j] == '1'){\n                // 更新最大最大宽度\n                dp[i][j] = (j == 0) ? 1 : dp[i][j - 1] + 1;\n\n                int width = dp[i][j];\n                // 计算以 matrix[i][j] 为右下角的矩形最大面积\n                for(int k = i; k >= 0; k--){\n                    width = Math.min(width, dp[k][j]);\n                    maxArea = Math.max(maxArea, width * (i - k + 1));\n                }\n            }\n        }\n    }\n    return maxArea;\n}\n```\n\n### 18.4. 方法三：动态规划 - 每个点的最大高度\n\n参考 [这里](https://leetcode-cn.com/problems/maximal-rectangle/solution/zui-da-ju-xing-by-leetcode/) 的方法四。太强了....更想不到... 而且不好理解。\n\n```java\npublic int maximalRectangle(char[][] matrix) {\n    if(matrix.length == 0){return 0;}\n    int row = matrix.length;\n    int col = matrix[0].length;\n\n    int[] left = new int[col];\n    int[] right = new int[col];\n    int[] height = new int[col];\n    Arrays.fill(right, col);\n\n    int maxArea = 0;\n    // 遍历每一行\n    for(int i = 0; i < row; i++){\n        int cur_left = 0;\n        int cur_right = col - 1;\n\n        // 高度\n        // 遍历这一行的每一个元素\n        for(int j = 0; j < col; j++){\n            if(matrix[i][j] == '1'){\n                // 在上一行的高度上加1\n                height[j]++;\n            }else{\n                height[j] = 0;\n            }\n        }\n\n        // 左边\n        for(int j = 0; j < col; j++){\n            if(matrix[i][j] == '1'){\n                left[j] = Math.max(left[j], cur_left);\n            }else{\n                left[j] = 0;\n                cur_left = j + 1;\n            }\n        }\n\n        // 右边\n        for(int j = col - 1; j >= 0; j--){\n            if(matrix[i][j] == '1'){\n                right[j] = Math.min(right[j], cur_right);\n            }else{\n                right[j] = col - 1;\n                cur_right = j - 1;\n            }\n        }\n\n        // 面积\n        for(int j = 0; j < col; j++){\n            maxArea = Math.max(maxArea, (right[j] - left[j] + 1) * height[j]);\n        }\n    }\n    return maxArea;\n}\n```\n\n## 19. 扰乱字符串 [87]\n\n题目来源：[87. 扰乱字符串](https://leetcode-cn.com/problems/scramble-string/)\n\n### 19.1. 题目描述\n\n![image-20200821104157163](/pictures/image-20200821104157163.png)\n\n![image-20200821104215491](/pictures/image-20200821104215491.png)\n\n### 19.2. 代码\n\n本题的难点在于没有思路... 也很难构造出 dp 的定义和状态。\n\n具体分析参考：[这里](https://leetcode-cn.com/problems/scramble-string/solution/miao-dong-de-qu-jian-xing-dpsi-lu-by-sha-yu-la-jia/).\n\n```java\npublic boolean isScramble(String s1, String s2) {\n    char[] chs1 = s1.toCharArray();\n    char[] chs2 = s2.toCharArray();\n    int n = s1.length();\n\n    // dp[i][j][len]dp[i][j][len] 表示从字符串 S 中 i 开始（包括 i）长度为 len 的字符串是否能变换为\n    // 从字符串 T 中 j （包括 j）开始长度为 len 的字符串\n    boolean[][][] dp = new boolean[n][n][n + 1];\n\n    // base case\n    // 初始化单个字符的情况\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            dp[i][j][1] = (chs1[i] == chs2[j]);\n        }\n    }\n\n    // 枚举长度区间 len\n    for(int len = 2; len <= n; len++){\n        // 枚举 S 的起点\n        for(int i = 0; i <= n - len; i++){\n            // 枚举 T 的起点\n            for(int j = 0; j <= n - len; j++){\n                // 枚举划分位置\n                for(int k = 1; k <= len - 1; k++){\n                    // 第一种情况：不交换\n                    if(dp[i][j][k] && dp[i + k][j + k][len - k]){\n                        dp[i][j][len] = true;\n                        break;\n                    }\n                    // 第二种情况：交换\n                    if(dp[i][j + len - k][k] && dp[i + k][j][len - k]){\n                        dp[i][j][len] = true;\n                        break;\n                    }\n                }\n\n            }\n        }\n    }\n\n    return dp[0][0][n];\n}\n```\n\n## 20. 格雷编码 [89]\n\n题目来源：[89. 格雷编码](https://leetcode-cn.com/problems/gray-code/)\n\n### 20.1. 题目描述\n\n![image-20200822094721670](/pictures/image-20200822094721670.png)\n\n### 20.2. 代码\n\n感觉应该用 dp，但是没找到怎么 dp，所以 dp 问题首先应该找到小问题，然后考虑怎么根据小问题解决大问题。\n\n详细参考：[这里](https://leetcode.wang/leetCode-89-Gray-Code.html)\n\n```java\npublic List<Integer> grayCode(int n) {\n    // dp 列表存储最终结果\n    List<Integer> dp = new ArrayList<>();\n    // base case，n = 0 时\n    dp.add(0);\n\n    // 遍历要加的数的次数，从 0 开始，到 n-1 结束\n    for(int i = 0; i < n; i++){\n        // 要加的数，即 2^i\n        int add = 1 << i;\n        // 倒序遍历，加上 add 添加到结果集中\n        for(int j = dp.size() - 1; j >= 0; j--){\n            dp.add(dp.get(j) + add);\n        }\n    }\n    return dp;\n}\n```\n\n## 21. 解码方法 [91]\n\n题目来源：[91. 解码方法](https://leetcode-cn.com/problems/decode-ways/)\n\n### 21.1. 题目描述\n\n![image-20200825143910613](/pictures/image-20200825143910613.png)\n\n### 21.2. 代码\n\n分析参考：[这里](https://leetcode-cn.com/problems/decode-ways/solution/dong-tai-gui-hua-java-python-by-liweiwei1419/) ，再结合自己的思路，写了一个更好理解的代码。\n\n```java\npublic int numDecodings(String s) {\n    int len = s.length();\n    // dp[i] = x 表示：s[0...i] 有 x 中解码方法\n    int[] dp = new int[len];\n\n    char[] charArray = s.toCharArray();\n    if (charArray[0] == '0') {\n        return 0;\n    }\n    // base case\n    dp[0] = 1;\n\n    for (int i = 1; i < len; i++) {\n        int num = 10 * (charArray[i - 1] - '0') + (charArray[i] - '0');\n        // 如果是 0\n        if(charArray[i] == '0'){\n            // 只有和前一位组成的数字在 10 到 26 之内，dp 才会有值，否则是初始值 0\n            if(10 <= num && num <= 26){\n                if(i == 1){\n                    dp[i] = 1;\n                }else{\n                    dp[i] = dp[i - 2];\n                }\n            }\n        // 如果不是 0\n        }else{\n            // 和前一位组成的数字在 10 到 26 之内，dp 值增大\n            if(10 <= num && num <= 26){\n                if(i == 1){\n                    dp[i] = dp[i - 1] + 1;\n                }else{\n                    dp[i] = dp[i - 1] + dp[i - 2];\n                }\n                // 不在 10 到 26 之内，dp 和 前一位相同\n            }else{\n                dp[i] = dp[i - 1];\n            }\n        }\n    }\n    return dp[len - 1];\n}\n```\n\n本题的难点在于：出现 0 的处理，边界条件太多了...可能的情况太多了...是真的费时间。\n\n## 22. 最大子序和 [53]\n\n题目描述：[53. 最大子序和](https://leetcode-cn.com/problems/maximum-subarray/)\n\n### 22.1. 题目描述\n\n![image-20200826102906095](/pictures/image-20200826102906095.png)\n\n### 22.2. 代码\n\n典型的动态规划问题。\n\n```java\npublic int maxSubArray(int[] nums) {\n    int len = nums.length;\n    // dp[i] = x 表示以 nums[i] 结尾的最大子序列和为x\n    int[] dp = new int[len];\n    // base case\n    dp[0] = nums[0];\n\n    int max = nums[0];\n    for(int i = 1; i < len; i++){\n        // 状态转移\n        dp[i] = Math.max(nums[i], nums[i] + dp[i - 1]);\n        max = Math.max(max, dp[i]);\n    }\n    return max;\n}\n```\n\n## 23. 交错字符串 [97]\n\n题目来源：[97. 交错字符串](https://leetcode-cn.com/problems/interleaving-string/)\n\n### 23.1. 题目描述\n\n![image-20200828110613718](/pictures/image-20200828110613718.png)\n\n### 23.2. 方法一：动态规划\n\n参考：[这里](https://leetcode.wang/leetCode-97-Interleaving-String.html)\n\ndp 数组定义：定义一个 boolean 二维数组 dp [ i ] [ j ] 来表示 s1[ 0, i ) 和 s2 [ 0, j ） 组合后能否构成 s3 [ 0, i + j )，注意不包括右边界，主要是为了考虑开始的时候如果只取 s1，那么 s2 就是空串，这样的话 dp [ i ] [ 0 ] 就能表示 s2 取空串。\n\n注意，``dp[0][0]`` 表示 s1 和 s2 都取空串，组成一个空串，则值为 true。\n\n```java\npublic boolean isInterleave(String s1, String s2, String s3) {\n    if (s1.length() + s2.length() != s3.length()) {\n        return false;\n    }\n    if (s1.length() == 0 && s2.length() == 0 && s3.length() == 0) {\n        return true;\n    }\n    int len1 = s1.length();\n    int len2 = s2.length();\n    // dp[i][j] = true 表示：s1[0..i) 和 s2[0..j) 组合后能构成 s3[0..i+j)\n    boolean[][] dp = new boolean[len1 + 1][len2 + 1];\n    // base case\n    dp[0][0] = true;\n    for (int i = 1; i <= len1; i++) {\n        dp[i][0] = dp[i - 1][0] && s1.charAt(i - 1) == s3.charAt(i - 1);\n    }\n    for (int j = 1; j <= len2; j++) {\n        dp[0][j] = dp[0][j - 1] && s2.charAt(j - 1) == s3.charAt(j - 1);\n    }\n\n    for (int i = 1; i <= len1; i++) {\n        for (int j = 1; j <= len2; j++) {\n            dp[i][j] = (dp[i - 1][j] && s1.charAt(i - 1) == s3.charAt(i + j - 1))\n                || (dp[i][j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));\n        }\n    }\n    return dp[len1][len2];\n}\n```\n\n### 23.3. 方法二：回溯\n\n可前往我的博客 [回溯算法总结](http://juliajiang.top/2020/07/25/回溯算法总结/) 的 15. 交错字符串 [97] 查看。\n\n## 24. 最小路径和 [64]\n\n题目来源：[64. 最小路径和](https://leetcode-cn.com/problems/minimum-path-sum/)\n\n### 24.1. 题目描述\n\n![image-20200901100037412](/pictures/image-20200901100037412.png)\n\n### 24.2. 代码\n\n典型的动态规划问题：\n\n```java\npublic int minPathSum(int[][] grid) {\n    int row = grid.length;\n    int col = grid[0].length;\n    \n\t// dp[i][j] = x 表示：到grid[i][j]的最小路径和为 x\n    int[][] dp = new int[row][col];\n    dp[0][0] = grid[0][0];\n    for(int j = 1; j < col; j++){\n        dp[0][j] = dp[0][j - 1] + grid[0][j];\n    }\n    for(int i = 1; i < row; i++){\n        dp[i][0] = dp[i - 1][0] + grid[i][0];\n    }\n\n    for(int i = 1; i < row; i++){\n        for(int j = 1; j < col; j++){\n            dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n        }\n    }\n\n    return dp[row - 1][col - 1];\n}\n```\n\n## 25. 不同的子序列 [115]\n\n题目来源：[115. 不同的子序列](https://leetcode-cn.com/problems/distinct-subsequences/)\n\n### 25.1. 题目描述\n\n![image-20200904105932893](/pictures/image-20200904105932893.png)\n\n### 25.2. 代码\n\n参考：[这里](https://leetcode.wang/leetcode-115-Distinct-Subsequences.html) 的解法三，将 dp 从逆序改为正序。\n\n这道题一开始用的回溯，发现超时，需要用 map 存之前的递归结果，不太好存，也不好理解，参考 [这里](https://leetcode.wang/leetcode-115-Distinct-Subsequences.html) 的解法二。\n\n还是用 dp 吧...\n\n两个字符串的 dp 问题，依旧是用 ``dp[0][0]`` 表示两个字符串均为空串的情况。\n\n```java\npublic int numDistinct(String s, String t) {\n    int sLen = s.length();\n    int tLen = t.length();\n    // dp[i + 1][j + 1] = x 表示：s[0..i] 中的子序列 t[0..j] 的个数为 x\n    int[][] dp = new int[sLen + 1][tLen + 1];\n    // base case\n    for(int i = 0; i <= sLen; i++){\n        dp[i][0] = 1;\n    }\n\n    for(int j = 1; j <= tLen; j++){\n        for(int i = 1; i <= sLen; i++){\n            // 如果相等\n            if(t.charAt(j - 1) == s.charAt(i - 1)){\n                // 有两种选择：不选择当前字母 dp[i - 1][j] 和选择当前字母 dp[i - 1][j - 1]\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1];\n                // 如果不相等\n            }else {\n                // 只有一种选择：不选当前字母\n                dp[i][j] = dp[i - 1][j];\n            }\n        }\n    }\n    return dp[sLen][tLen];\n}\n```\n\n## 26. 三角形最小路径和 [120]\n\n题目来源：[120. 三角形最小路径和](https://leetcode-cn.com/problems/triangle/)\n\n### 26.1 题目描述\n\n![image-20200910185227369](/pictures/image-20200910185227369.png)\n\n### 26.2 方法一：动态规划\n\n参考 [这里](https://leetcode.wang/leetcode-120-Triangle.html) 做了一些改动。但是这种 dp 空复为 O(n^2)。\n\n为什么..最近做题老是想不到动态规划.. 老想回溯...\n\n```java\npublic int minimumTotal(List<List<Integer>> triangle) {\n    int size = triangle.size();\n    int[][] dp = new int[size][size];\n    // dp[i][j] = x 表示：triangle[i][j] 的最小路径和为 x\n    dp[0][0] = triangle.get(0).get(0);\n\n    // 遍历每一行\n    for(int i = 1; i < size; i++){\n        // 遍历这一行的每一个数\n        for(int j = 0; j <= i; j++){\n            // 这一行的最后一个数\n            if(j == i){\n                dp[i][j] = dp[i - 1][j - 1] + triangle.get(i).get(j);\n            }else if(j == 0){\n                dp[i][j] = dp[i - 1][j] + triangle.get(i).get(j);\n            }else{\n                dp[i][j] = Math.min(dp[i - 1][j], dp[i - 1][j - 1]) + triangle.get(i).get(j);\n            }\n        }\n\n    }\n\n    int min = Integer.MAX_VALUE;\n    for(int i = 0; i < size; i++){\n        min = Math.min(min, dp[size-1][i]);\n    }\n    return min;\n}\n```\n\n### 26.3. 方法一的优化\n\n上面的动态规划 dp 数组是二维数组，但是每一次只用到上一层的数据。所以使用一维的 dp 数组即可。此时，空复是 O(n)。\n\n如果正着更新的话，会把后面要用的值覆盖掉。因此，倒着更新。\n\n```java\npublic int minimumTotal(List<List<Integer>> triangle) {\n    int size = triangle.size();\n    int[] dp = new int[size];\n    dp[0]=triangle.get(0).get(0);\n\n    for(int i = 1; i < size; i++){\n        for(int j = i; j >= 0; j--){\n            if(j == i){\n                dp[j] = dp[j - 1] + triangle.get(i).get(j);\n            }else if(j == 0){\n                dp[j] = dp[j] + triangle.get(i).get(j);\n            }else{\n                dp[j] = Math.min(dp[j - 1], dp[j]) + triangle.get(i).get(j);\n            }\n        }\n    }\n\n    int min = Integer.MAX_VALUE;\n    for(int i = 0; i < size; i++){\n        min = Math.min(min, dp[i]);\n    }\n\n    return min;\n}\n```\n\n## 27. 买卖股票的最佳时机 III [123]\n\n题目来源：[123. 买卖股票的最佳时机 III](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/)\n\n### 27.1. 题目描述\n\n![image-20200914160900975](/pictures/image-20200914160900975.png)\n\n### 27.2. 方法一：DP\n\n参考 [这里](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/solution/mai-mai-gu-piao-zui-jia-shi-ji-iiidong-tai-gui-hua/) 的方法二。\n\n使用二维数组，第二位存储 5 种状态，想不到...\n\n```java\npublic int maxProfit(int[] prices) {\n    if (prices.length < 2) {\n        return 0;\n    }\n    int len = prices.length;\n    // 5 种状态：0 未交易；1 买入一次；2 卖出一次；3 买入2次；卖出2次\n    // dp[i][j] = x 表示：用户处于 j 状态下的钱为 x\n    int[][] dp = new int[len][5];\n    // base case\n    dp[0][0] = 0;\n    dp[0][1] = -prices[0];\n    dp[0][2] = 0;\n    dp[0][3] = -prices[0];\n    dp[0][4] = 0;\n\n    for (int i = 1; i < len; ++i) {\n        dp[i][0] = 0;\n        dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i]);\n        dp[i][2] = Math.max(dp[i - 1][2], dp[i - 1][1] + prices[i]);\n        dp[i][3] = Math.max(dp[i - 1][3], dp[i - 1][2] - prices[i]);\n        dp[i][4] = Math.max(dp[i - 1][4], dp[i - 1][3] + prices[i]);\n    }\n\n    return Math.max(dp[len - 1][2], dp[len - 1][4]);\n}\n```\n\n### 27.3. 方法二：方法一的优化\n\n上面解法中，每一次 dp 数组的更新只会依赖于上一层 dp 数组，因此没必要使用二维数组，使用一维数组，存储上一层数据即可。\n\n```java\npublic int maxProfit(int[] prices) {\n    if (prices.length < 2) {\n        return 0;\n    }\n    int len = prices.length;\n    int[] dp = new int[5];\n    dp[0] = 0;\n    dp[1] = -prices[0];\n    dp[2] = Integer.MIN_VALUE;\n    dp[3] = Integer.MIN_VALUE;\n    dp[4] = Integer.MIN_VALUE;\n\n    for (int i = 1; i < len; ++i) {\n        dp[0] = 0;\n        dp[1] = Math.max(dp[1], dp[0] - prices[i]);\n        dp[2] = Math.max(dp[2], dp[1] + prices[i]);\n        dp[3] = Math.max(dp[3], dp[2] - prices[i]);\n        dp[4] = Math.max(dp[4], dp[3] + prices[i]);\n    }\n    return Math.max(dp[2], dp[4]);\n}\n```\n\n## 28. 参考引用\n\n1. [Wikipedia]([https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92](https://zh.wikipedia.org/wiki/动态规划))\n2. https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/dong-tai-gui-hua-xiang-jie-jin-jie\n3. https://mp.weixin.qq.com/s/7QFapCuvi-2nkh6gREcR9g\n4. https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zui-chang-gong-gong-zi-xu-lie\n5. https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zui-da-zi-shu-zu\n6. https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/dong-tai-gui-hua-zhi-kmp-zi-fu-pi-pei-suan-fa\n7. https://leetcode.wang/leetCode-42-Trapping-Rain-Water.html\n8. https://leetcode.wang/leetCode-32-Longest-Valid-Parentheses.html\n9. https://leetcode.wang/leetCode-89-Gray-Code.html\n\n","source":"_posts/动态规划总结.md","raw":"---\ntitle: 动态规划总结\ndate: 2020-09-11 09:25:10\ntags:\n  - Algorithm\n  - Java\n  - DP\ncategories: Algorithm\n\ntypora-copy-images-to: ..\\pictures\n---\n\n本文主要介绍了动态规划的概念、解题框架，并以斐波那契数列、零钱兑换为例，进一步说明动态规划如何运用和理解。另外，本文还解决了LeetCode中部分使用动态规划思想的题目，这部分会持续更新。\n\n## 1. 什么是动态规划？\n\n[维基定义](https://zh.wikipedia.org/wiki/动态规划)：（英语：Dynamic programming，简称DP）是一种在数学、管理科学、计算机科学、经济学和生物信息学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。\n\n动态规划常常适用于有重叠子问题和最优子结构性质的问题，动态规划方法所耗时间往往远少于朴素解法。\n\n动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。\n\n通常许多子问题非常相似，为此动态规划法试图仅仅解决每个子问题一次，从而减少计算量：一旦某个给定子问题的解已经算出，则将其记忆化存储，以便下次需要同一个子问题解之时直接查表。这种做法在重复子问题的数目关于输入的规模呈指数增长时特别有用。\n\n<!--more-->\n\n### 1.1 适用情况\n\n1. 最优子结构性质。如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质（即满足最优化原理）。最优子结构性质为动态规划算法解决问题提供了重要线索。\n2. 无后效性。即子问题的解一旦确定，就不再改变，不受在这之后、包含它的更大的问题的求解决策影响。\n3. 子问题重叠性质。子问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。动态规划算法正是利用了这种子问题的重叠性质，对每一个子问题只计算一次，然后将其计算结果保存在一个表格中，当再次需要计算已经计算过的子问题时，只是在表格中简单地查看一下结果，从而获得较高的效率，降低了时间复杂度。\n\n## 2. 动态规划解题框架\n\n这一节参考 [这里](https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/dong-tai-gui-hua-xiang-jie-jin-jie) 给出一些对于动态规划的理解和解体框架。\n\n**首先，动态规划问题的一般形式就是求最值**。动态规划其实是运筹学的一种最优化方法，只不过在计算机问题上应用比较多，比如求**最长**递增子序列呀，**最小**编辑距离等。\n\n既然是要求最值，核心问题是什么呢？**求解动态规划的核心问题是穷举**。因为要求最值，肯定要把所有可行的答案穷举出来，然后在其中找最值。\n\n动态规划这么简单，就是穷举就完事了？我看到的动态规划问题都很难啊！\n\n首先，动态规划的穷举有点特别，因为这类问题**存在「重叠子问题」**，如果暴力穷举的话效率会极其低下，所以需要「备忘录」或者「DP table」来优化穷举过程，避免不必要的计算。\n\n而且，动态规划问题一定会**具备「最优子结构」**，才能通过子问题的最值得到原问题的最值。\n\n另外，虽然动态规划的核心思想就是穷举求最值，但是问题可以千变万化，穷举所有可行解其实并不是一件容易的事，只有列出**正确的「状态转移方程」**才能正确地穷举。\n\n以上提到的重叠子问题、最优子结构、状态转移方程就是动态规划三要素。具体什么意思等会会举例详解，但是在实际的算法问题中，**写出状态转移方程是最困难的**，这也就是为什么很多朋友觉得动态规划问题困难的原因，我来提供我研究出来的一个思维框架，辅助你思考状态转移方程：\n\n**明确 base case -> 明确「状态」-> 明确「选择」 -> 定义 dp 数组/函数的含义**。\n\n按上面的套路走，最后的结果就可以套这个框架：\n\n```python\n# 初始化 base case\ndp[0][0][...] = base\n# 进行状态转移\nfor 状态1 in 状态1的所有取值：\n    for 状态2 in 状态2的所有取值：\n        for ...\n            dp[状态1][状态2][...] = 求最值(选择1，选择2...)\n```\n\n下文中的斐波那契数列可以帮助理解动态规划问题，零钱兑换问题使用总结的框架进行流程化求解。\n\n## 3. 以斐波那契数列 [509] 为例\n\n题目来源：[509. 斐波那契数](https://leetcode-cn.com/problems/fibonacci-number/)\n\n### 3.1 题目描述\n\n斐波那契数，通常用 F(n) 表示，形成的序列称为斐波那契数列。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：\n\nF(0) = 0,   F(1) = 1\nF(N) = F(N - 1) + F(N - 2), 其中 N > 1.\n给定 N，计算 F(N)。\n\n示例 1：\n\n```bash\n输入：2\n输出：1\n解释：F(2) = F(1) + F(0) = 1 + 0 = 1.\n```\n\n\n示例 2：\n\n```bash\n输入：3\n输出：2\n解释：F(3) = F(2) + F(1) = 1 + 1 = 2.\n```\n\n\n提示：\n\n0 ≤ N ≤ 30\n\n### 3.2 方法一：暴力递归\n\n斐波那契数列的数学形式就是递归的，写成代码就是这样：\n\n```java\npublic int fib(int N) {\n    if(N == 0){\n        return 0;\n    }\n    if(N == 1){\n        return 1;\n    }\n    return fib(N - 1) + fib(N - 2);\n}\n```\n\n这个不用多说了，学校老师讲递归的时候似乎都是拿这个举例。我们也知道这样写代码虽然简洁易懂，但是十分低效，低效在哪里？假设 n = 20，画出的递归树如下：\n\n<img src=\"/pictures/1-1595902107828.jpg\" alt=\"img\" style=\"zoom:33%;\" />\n\n这个递归树怎么理解？就是说想要计算原问题 `f(20)`，我就得先计算出子问题 `f(19)` 和 `f(18)`，然后要计算 `f(19)`，我就要先算出子问题 `f(18)` 和 `f(17)`，以此类推。最后遇到 `f(1)` 或者 `f(2)` 的时候，结果已知，就能直接返回结果，递归树不再向下生长了。\n\n**递归算法的时间复杂度怎么计算？就是用子问题个数乘以解决一个子问题需要的时间。**\n\n首先计算子问题个数，即递归树中节点的总数。显然二叉树节点总数为指数级别，所以子问题个数为 O(2^n)。\n\n然后计算解决一个子问题的时间，在本算法中，没有循环，只有 `f(n - 1) + f(n - 2)` 一个加法操作，时间为 O(1)。\n\n所以，这个算法的时间复杂度为二者相乘，即 O(2^n)，指数级别，爆炸。\n\n观察递归树，很明显发现了算法低效的原因：存在大量重复计算，比如 `f(18)` 被计算了两次，而且你可以看到，以 `f(18)` 为根的这个递归树体量巨大，多算一遍，会耗费巨大的时间。更何况，还不止 `f(18)` 这一个节点被重复计算，所以这个算法及其低效。\n\n这就是动态规划问题的第一个性质：**重叠子问题**。下面，我们想办法解决这个问题。\n\n### 3.3 方法二：带备忘录的递归解法\n\n明确了问题，其实就已经把问题解决了一半。即然耗时的原因是重复计算，那么我们可以造一个「备忘录」，每次算出某个子问题的答案后别急着返回，先记到「备忘录」里再返回；每次遇到一个子问题先去「备忘录」里查一查，如果发现之前已经解决过这个问题了，直接把答案拿出来用，不要再耗时去计算了。\n\n一般使用一个数组充当这个「备忘录」，当然你也可以使用哈希表（字典），思想都是一样的。\n\n```java\npublic int fib(int N) {\n    int[] memo = new int[N + 1];\n    if(N == 0){\n        return 0;\n    }\n    // base case\n    memo[1] = 1;\n    return helper(memo, N);\n}\n\nprivate int helper(int[] memo, int n){\n    // 递归结束条件\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n        return 1;\n    }\n    // 如果已经计算过\n    if(memo[n] != 0){\n        return memo[n];\n    }\n    memo[n] = helper(memo, n - 1) + helper(memo, n - 2);\n    return memo[n];\n}\n```\n\n由于本算法不存在冗余计算，子问题就是 `f(1)`, `f(2)`, `f(3)` ... `f(20)`，数量和输入规模 n = 20 成正比，所以子问题个数为 O(n)。\n\n解决一个子问题的时间，同上，没有什么循环，时间为 O(1)。\n\n所以，本算法的时间复杂度是 O(n)。比起暴力算法，是降维打击。\n\n至此，带备忘录的递归解法的效率已经和迭代的动态规划解法一样了。实际上，这种解法和迭代的动态规划已经差不多了，只不过这种方法叫做「自顶向下」，动态规划叫做「自底向上」。\n\n啥叫「自顶向下」？注意我们刚才画的递归树（或者说图），是从上向下延伸，都是从一个规模较大的原问题比如说 `f(20)`，向下逐渐分解规模，直到 `f(1)` 和 `f(2)` 这两个 base case，然后逐层返回答案，这就叫「自顶向下」。\n\n啥叫「自底向上」？反过来，我们直接从最底下，最简单，问题规模最小的 `f(1)` 和 `f(2)` 开始往上推，直到推到我们想要的答案 `f(20)`，这就是动态规划的思路，这也是为什么动态规划一般都脱离了递归，而是由循环迭代完成计算。\n\n### 3.4 方法三：动态规划\n\n有了上一步「备忘录」的启发，我们可以把这个「备忘录」独立出来成为一张表，就叫做 DP table 吧，在这张表上完成「自底向上」的推算。\n\n```java\npublic int fib(int N) {\n    int[] dp = new int[N + 1];\n    if(N == 0){\n        return 0;\n    }\n    if(N == 1){\n        return 1;\n    }\n    // base case\n    dp[1] = 1;\n    for(int i = 2; i <= N; i++){\n        // 状态转移方程\n        dp[i] = dp[i - 1] + dp[i - 2];\n    }\n    return dp[N];\n}\n```\n\n实际上，带备忘录的递归解法中的「备忘录」，最终完成后就是这个 DP table，所以说这两种解法其实是差不多的，大部分情况下，效率也基本相同。\n\n这里，引出「状态转移方程」这个名词，实际上就是描述问题结构的数学形式：\n\n<img src=\"/pictures/fib.png\" alt=\"img\" style=\"zoom: 67%;\" />\n\n为啥叫「状态转移方程」？其实就是为了听起来高端。你把 `f(n)` 想做一个状态 `n`，这个状态 `n` 是由状态 `n - 1` 和状态 `n - 2` 相加转移而来，这就叫状态转移，仅此而已。\n\n**千万不要看不起暴力解，动态规划问题最困难的就是写出这个暴力解，即状态转移方程**。只要写出暴力解，优化方法无非是用备忘录或者 DP table，再无奥妙可言。\n\n这个例子的最后，讲一个细节优化。细心的读者会发现，根据斐波那契数列的状态转移方程，当前状态只和之前的两个状态有关，其实并不需要那么长的一个 DP table 来存储所有的状态，只要想办法存储之前的两个状态就行了。所以，可以进一步优化，把空间复杂度降为 O(1)：\n\n```java\npublic int fib3(int N) {\n    if(N == 0){\n        return 0;\n    }\n    if(N == 1){\n        return 1;\n    }\n    int pre = 0, curr = 1;\n    for(int i = 2; i <= N; i++){\n        int sum = pre + curr;\n        pre = curr;\n        curr = sum;\n    }\n    return curr;\n}\n```\n\n这个技巧就是所谓的「**状态压缩**」，如果我们发现每次状态转移只需要 DP table 中的一部分，那么可以尝试用状态压缩来缩小 DP table 的大小，只记录必要的数据，上述例子就相当于把DP table 的大小从 `n` 缩小到 2。后续的动态规划章节中我们还会看到这样的例子，一般来说是把一个二维的 DP table 压缩成一维，即把空间复杂度从 O(n^2) 压缩到 O(n)。\n\n有人会问，动态规划的另一个重要特性「最优子结构」，怎么没有涉及？下面会涉及。斐波那契数列的例子严格来说不算动态规划，因为没有涉及求最值，以上旨在说明重叠子问题的消除方法，演示得到最优解法逐步求精的过程。下面，看第二个例子，凑零钱问题。\n\n## 4. 框架求解零钱兑换 [322]\n\n题目来源：[322. 零钱兑换](https://leetcode-cn.com/problems/coin-change/)\n\n### 4.1 题目描述\n\n给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。\n\n示例 1:\n\n```bash\n输入: coins = [1, 2, 5], amount = 11\n输出: 3 \n解释: 11 = 5 + 5 + 1\n```\n\n示例 2：\n\n```bash\n输入: coins = [2], amount = 3\n输出: -1\n```\n\n\n说明:\n你可以认为每种硬币的数量是无限的。\n\n### 4.2 题目分析与代码\n\n分析参考 [这里](https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/dong-tai-gui-hua-xiang-jie-jin-jie#er-cou-ling-qian-wen-ti) , 使用上文中总结的动态规划框架。\n\n首先，这是一个动态规划问题。满足三个条件：\n\n1. 最优子结构。即问题的最优解所包含的子问题的解也是最优的，且子问题间必须相互独立。什么叫做相互独立？我用一个直观的例子来讲解。\n\n   比如说，假设你考试，每门科目的成绩都是互相独立的。你的原问题是考出最高的总成绩，那么你的子问题就是要把语文考到最高，数学考到最高…… 为了每门课考到最高，你要把每门课相应的选择题分数拿到最高，填空题分数拿到最高…… 当然，最终就是你每门课都是满分，这就是最高的总成绩。\n\n   得到了正确的结果：最高的总成绩就是总分。因为这个过程符合最优子结构，“每门科目考到最高”这些子问题是互相独立，互不干扰的。\n\n   但是，如果加一个条件：你的语文成绩和数学成绩会互相制约，数学分数高，语文分数就会降低，反之亦然。这样的话，显然你能考到的最高总成绩就达不到总分了，按刚才那个思路就会得到错误的结果。因为子问题并不独立，语文数学成绩无法同时最优，所以最优子结构被破坏。\n\n   回到凑零钱问题，为什么说它符合最优子结构呢？比如你想求 `amount = 11` 时的最少硬币数（原问题），如果你知道凑出 `amount = 10` 的最少硬币数（子问题），你只需要把子问题的答案加一（再选一枚面值为 1 的硬币）就是原问题的答案。因为硬币的数量是没有限制的，所以子问题之间没有相互制约，是互相独立的。\n\n2. 无后效性。即子问题的解一旦确定，就不再改变，不受在这之后、包含它的更大的问题的求解决策影响。\n\n3. 子问题重叠性质。子问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。\n\n那么，既然知道了这是个动态规划问题，就要思考**如何列出正确的状态转移方程**？\n\n1、**确定 base case**，这个很简单，显然目标金额 `amount` 为 0 时算法返回 0，因为不需要任何硬币就已经凑出目标金额了。\n\n2、**确定「状态」，也就是原问题和子问题中会变化的变量**。由于硬币数量无限，硬币的面额也是题目给定的，只有目标金额会不断地向 base case 靠近，所以唯一的「状态」就是目标金额 `amount`。\n\n3、**确定「选择」，也就是导致「状态」产生变化的行为**。*目标金额为什么变化呢，因为你在选择硬币，你每选择一枚硬币，就相当于减少了目标金额。* 所以说 **所有硬币的面值** ，就是你的「选择」。\n\n4、**明确** **`dp`** **函数/数组的定义**。我们这里讲的是自顶向下的解法，所以会有一个递归的 `dp` 函数，一般来说函数的参数就是状态转移中会变化的量，也就是上面说到的「状态」；函数的返回值就是题目要求我们计算的量。就本题来说，状态只有一个，即「目标金额」，题目要求我们计算凑出目标金额所需的最少硬币数量。所以我们可以这样定义 `dp` 函数：\n\n`dp(n)` 的定义：输入一个目标金额 `n`，返回凑出目标金额 `n` 的最少硬币数量。\n\n#### 4.2.1 先使用暴力递归\n\n搞清楚上面这几个关键点，解法的伪码就可以写出来了：\n\n```python\n# 伪码框架\ndef coinChange(coins: List[int], amount: int):\n\n    # 定义：要凑出金额 n，至少要 dp(n) 个硬币\n    def dp(n):\n        # 做选择，选择需要硬币最少的那个结果\n        for coin in coins:\n            res = min(res, 1 + dp(n - coin))\n        return res\n\n    # 题目要求的最终结果是 dp(amount)\n    return dp(amount)\n```\n\n根据伪码，我们加上 base case 即可得到最终的答案。显然目标金额为 0 时，所需硬币数量为 0；当目标金额小于 0 时，无解，返回 -1：\n\n```python\ndef coinChange(coins: List[int], amount: int):\n\n    def dp(n):\n        # base case\n        if n == 0: return 0\n        if n < 0: return -1\n        # 求最小值，所以初始化为正无穷\n        res = float('INF')\n        for coin in coins:\n            subproblem = dp(n - coin)\n            # 子问题无解，跳过\n            if subproblem == -1: continue\n            res = min(res, 1 + subproblem)\n\n        return res if res != float('INF') else -1\n\n    return dp(amount)\n```\n\n据此，我们可以得出状态转移方程如下图，以上解法属于暴力递归解法。\n\n<img src=\"/pictures/coin.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n**递归算法的时间复杂度分析：子问题总数 x 每个子问题的时间**。\n\n子问题总数为递归树节点个数，这个比较难看出来，是 O(n^k)，总之是指数级别的。每个子问题中含有一个 for 循环，复杂度为 O(k)。所以总时间复杂度为 O(k * n^k)，指数级别。\n\n#### 4.2.2 带备忘录的递归解法，消除重叠子问题\n\n显然，上述解法中存在重叠子问题，比如`amount = 11, coins = {1,2,5}` 时画出递归树看看：\n\n<img src=\"/pictures/5-1595987693352.jpg\" alt=\"img\" style=\"zoom: 33%;\" />\n\n代码如下：\n\n```python\ndef coinChange(coins: List[int], amount: int):\n    # 备忘录\n    memo = dict()\n    def dp(n):\n        # 查备忘录，避免重复计算\n        if n in memo: return memo[n]\n        # base case\n        if n == 0: return 0\n        if n < 0: return -1\n        res = float('INF')\n        for coin in coins:\n            subproblem = dp(n - coin)\n            if subproblem == -1: continue\n            res = min(res, 1 + subproblem)\n\n        # 记入备忘录\n        memo[n] = res if res != float('INF') else -1\n        return memo[n]\n\n    return dp(amount)\n```\n\n很显然「备忘录」大大减小了子问题数目，完全消除了子问题的冗余，所以子问题总数不会超过金额数 `n`，即子问题数目为 O(n)。处理一个子问题的时间不变，仍是 O(k)，所以总的时间复杂度是 O(kn)。\n\n#### 4.2.3 动态规划，自底向上\n\n当然，我们也可以自底向上使用 dp table 来消除重叠子问题，关于「状态」「选择」和 base case 与之前没有区别，`dp` 数组的定义和刚才 `dp` 函数类似，也是把「状态」，也就是目标金额作为变量。不过 `dp` 函数体现在函数参数，而 `dp` 数组体现在数组索引：\n\n**`dp`** **数组的定义：当目标金额为** **`i`** **时，至少需要** **`dp[i]`** **枚硬币凑出**。\n\n根据我们文章开头给出的动态规划代码框架可以写出如下解法：\n\n```java\npublic int coinChange(int[] coins, int amount){\n    // dp[i] = n 表示：当目标金额为 i 时，至少需要 n 枚硬币\n    int[] dp = new int[amount+1];\n    // 初始化dp数组，初始值为 amount+1, 因为dp 数组最大值取到 amount\n    Arrays.fill(dp, amount+1);\n\n    //base case\n    dp[0] = 0;\n\n    for(int j = 1; j <= amount; j++){\n        // 内层for求所有子问题的最小值\n        for (int coin : coins) {\n            // 子问题无解，跳过\n            if (j - coin < 0) {\n                continue;\n            }\n            dp[j] = dp[j] < dp[j - coin] + 1 ? dp[j] : dp[j - coin] + 1;\n        }\n    }\n    return dp[amount] == amount+1 ? -1 : dp[amount];\n}\n```\n\nPS：为啥 `dp` 数组初始化为 `amount + 1` 呢，因为凑成 `amount` 金额的硬币数最多只可能等于 `amount`（全用 1 元面值的硬币），所以初始化为 `amount + 1` 就相当于初始化为正无穷，便于后续取最小值。\n\n## 5. 动态规划总结\n\n第一个斐波那契数列的问题，解释了如何通过「备忘录」或者「dp table」的方法来优化递归树，并且明确了这两种方法本质上是一样的，只是自顶向下和自底向上的不同而已。\n\n第二个凑零钱的问题，展示了如何流程化确定「状态转移方程」，只要通过状态转移方程写出暴力递归解，剩下的也就是优化递归树，消除重叠子问题而已。\n\n**计算机解决问题其实没有任何奇技淫巧，它唯一的解决办法就是穷举**，穷举所有可能性。算法设计无非就是先思考“如何穷举”，然后再追求“如何聪明地穷举”。\n\n列出动态转移方程，就是在解决“如何穷举”的问题。之所以说它难，一是因为很多穷举需要递归实现，二是因为有的问题本身的解空间复杂，不那么容易穷举完整。\n\n备忘录、DP table 就是在追求“如何聪明地穷举”。用空间换时间的思路，是降低时间复杂度的不二法门，除此之外，试问，还能玩出啥花活？\n\n之后我们会有一章专门讲解动态规划问题，如果有任何问题都可以随时回来重读本文，希望读者在阅读每个题目和解法时，多往「状态」和「选择」上靠，才能对这套框架产生自己的理解，运用自如。\n\n## 6. 使用动态规划的题目列表\n\n本文中使用动态规划解决的 LeetCode 题目列表如下，持续更新中~\n\n|  #   |                            Title                             |  Remark   |\n| :--: | :----------------------------------------------------------: | :-------: |\n| 509  | [斐波那契数](https://leetcode-cn.com/problems/fibonacci-number/) |           |\n| 322  |  [零钱兑换](https://leetcode-cn.com/problems/coin-change/)   |           |\n| 300  | [最长上升子序列](https://leetcode-cn.com/problems/longest-increasing-subsequence/) |           |\n| 1143 | [最长公共子序列](https://leetcode-cn.com/problems/longest-common-subsequence/) |           |\n|  53  | [最大子序和](https://leetcode-cn.com/problems/maximum-subarray/) |           |\n|  72  | [编辑距离](https://leetcode-cn.com/problems/edit-distance/)  |           |\n|  10  | [正则表达式匹配](https://leetcode-cn.com/problems/regular-expression-matching/) |   Hard    |\n|  44  | [通配符匹配](https://leetcode-cn.com/problems/wildcard-matching/) |   Hard    |\n|  62  |  [不同路径](https://leetcode-cn.com/problems/unique-paths/)  |           |\n|  63  | [不同路径 II](https://leetcode-cn.com/problems/unique-paths-ii/) |           |\n|  28  | [实现 strStr()](https://leetcode-cn.com/problems/implement-strstr/) |           |\n|  42  | [接雨水](https://leetcode-cn.com/problems/trapping-rain-water/) |   Hard    |\n|  32  | [最长有效括号](https://leetcode-cn.com/problems/longest-valid-parentheses/) |   Hard    |\n|  53  | [最大子序和](https://leetcode-cn.com/problems/maximum-subarray/) |           |\n|  64  | [最小路径和](https://leetcode-cn.com/problems/minimum-path-sum/) |           |\n|  85  | [最大矩形](https://leetcode-cn.com/problems/maximal-rectangle/) |   Hard    |\n|  87  | [扰乱字符串](https://leetcode-cn.com/problems/scramble-string/) |   Hard    |\n|  89  |   [格雷编码](https://leetcode-cn.com/problems/gray-code/)    |   Hard    |\n|  91  |  [解码方法](https://leetcode-cn.com/problems/decode-ways/)   |   Hard    |\n|  97  | [交错字符串](https://leetcode-cn.com/problems/interleaving-string/) |   Hard    |\n| 115  | [不同的子序列](https://leetcode-cn.com/problems/distinct-subsequences/) |   Hard    |\n| 120  | [三角形最小路径和](https://leetcode-cn.com/problems/triangle/) |   Hard    |\n| 123  | [买卖股票的最佳时机 III](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/) | Very Hard |\n\n## 7. 例题：最长上升子序列 [300]\n\n题目来源：[300. 最长上升子序列](https://leetcode-cn.com/problems/longest-increasing-subsequence/)\n\n### 7.1 题目描述\n\n给定一个无序的整数数组，找到其中最长上升子序列的长度。\n\n示例:\n\n```bash\n输入: [10,9,2,5,3,7,101,18]\n输出: 4 \n解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。\n```\n\n\n说明:\n\n可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。\n你算法的时间复杂度应该为 O(n2) 。\n进阶: 你能将算法的时间复杂度降低到 O(n log n) 吗?\n\n注意「子序列」和「子串」这两个名词的区别，子串一定是连续的，而子序列不一定是连续的。\n\n### 7.2 题目分析\n\n本题分析参考 [这里](https://mp.weixin.qq.com/s/7QFapCuvi-2nkh6gREcR9g) .\n\n最长递增子序列（Longest Increasing Subsequence，简写 LIS）是非常经典的一个算法问题，比较容易想到的是动态规划解法，时间复杂度 O(N^2)，我们借这个问题来由浅入深讲解如何找状态转移方程，如何写出动态规划解法。比较难想到的是利用二分查找，时间复杂度是 O(NlogN)，我们通过一种简单的纸牌游戏来辅助理解这种巧妙的解法。\n\n### 7.3 方法一：动态规划（如何找到状态转移关系）\n\n动态规划的难点本来就在于寻找正确的状态转移方程，本文就借助经典的「最长递增子序列问题」来讲一讲设计动态规划的通用技巧：**数学归纳思想**。\n\n相信大家对数学归纳法都不陌生，高中就学过，而且思路很简单。比如我们想证明一个数学结论，那么**我们先假设这个结论在 k 时成立，然后根据这个假设，想办法推导证明出 ``k=n`` 的时候此结论也成立**。如果能够证明出来，那么就说明这个结论对于 `k` 等于任何数都成立。\n\n类似的，我们设计动态规划算法，不是需要一个 dp 数组吗？我们可以假设 `dp[0...i-1]` 都已经被算出来了，然后问自己：怎么通过这些结果算出 `dp[i]`？\n\n直接拿最长递增子序列这个问题举例你就明白了。不过，首先要定义清楚 dp 数组的含义，即 `dp[i]` 的值到底代表着什么？\n\n**我们的定义是这样的：`dp[i]` 表示以 `nums[i]` 这个数结尾的最长递增子序列的长度。**\n\nPS：**为什么这样定义呢？** 这是解决子序列问题的一个套路，后文动态规划之子序列问题解题模板 总结了几种常见套路。你读完本章所有的动态规划问题，就会发现 `dp` 数组的定义方法也就那几种。\n\n反过来想，如果 ``dp[i]`` 表示 ``nums[0...i]`` 这个数组中的最长递增子序列的长度，当求得 ``dp[i]`` 时，想要求出 ``dp[i+1]`` 是不行的，因为递增子序列是从数组中选出的，知道 ``dp[i]`` 并不能确定当前选择的是哪几个数字，当然也不知道选出的递增子序列最后一位，这样是没法推出 ``dp[i+1]`` 的。但如果我们定义 ``dp[i]`` 表示以``nums[i]`` 结尾的最长递增子序列的长度，就可以明确知道选出的递增子序列的最后一位，从而推出 ``dp[i]`` . 只有这样定义才能将 `dp[i+1]` 和 `dp[i]` 建立起联系，利用数学归纳法写出状态转移方程。\n\n根据这个定义，我们就可以推出 base case：`dp[i]` 初始值为 1，因为以 `nums[i]` 结尾的最长递增子序列起码要包含它自己。\n\n根据这个定义，我们的最终结果（子序列的最大长度）应该是 dp 数组中的最大值。\n\n那么我们应该怎么设计算法逻辑来正确计算每个 `dp[i]` 呢？\n\n这就是动态规划的重头戏了，要思考如何设计算法逻辑进行状态转移，才能正确运行呢？这里就可以使用数学归纳的思想：\n\n**假设我们已经知道了 `dp[0..4]` 的所有结果，我们如何通过这些已知结果推出 `dp[5]` 呢**？\n\n根据刚才我们对 `dp` 数组的定义，现在想求 `dp[5]` 的值，也就是想求以 `nums[5]` 为结尾的最长递增子序列。\n\n**`nums[5] = 3`，既然是递增子序列，我们只要找到前面那些结尾比 3 小的子序列，然后把 3 接到最后，就可以形成一个新的递增子序列，而且这个新的子序列长度加一**。\n\n显然，可能形成很多种新的子序列，但是我们只选择最长的那一个，把最长子序列的长度作为 `dp[5]` 的值即可。\n\n最终代码如下：\n\n```java\npublic int lengthOfLIS(int[] nums){\n    // dp[i] = n 表示：以 nums[i] 这个数字结尾的最长上升子序列的长度（想不到）\n    int[] dp = new int[nums.length];\n    // 初始化，最长上升子序列最少为数字本身，故初始化为1\n    Arrays.fill(dp, 1);\n\n    for(int i = 0; i < nums.length; i++){\n        for(int j = 0; j < i; j++){\n            if(nums[j] < nums[i]){\n                dp[i] = Math.max(dp[i], dp[j]+1);\n            }\n        }\n    }\n\n    int res = 0;\n    for(int i = 0; i < nums.length; i++){\n        res = Math.max(res, dp[i]);\n    }\n\n    return res;\n}\n```\n\n至此，这道题就解决了，时间复杂度 O(N^2)。总结一下如何找到动态规划的状态转移关系：\n\n**1、**明确 `dp` 数组所存数据的含义。这一步对于任何动态规划问题都很重要，如果不得当或者不够清晰，会阻碍之后的步骤。\n\n**2、**根据 `dp` 数组的定义，运用数学归纳法的思想，假设 `dp[0...i-1]` 都已知，想办法求出 `dp[i]`，一旦这一步完成，整个题目基本就解决了。\n\n但如果无法完成这一步，很可能就是 `dp` 数组的定义不够恰当，需要重新定义 `dp` 数组的含义；或者可能是 `dp` 数组存储的信息还不够，不足以推出下一步的答案，需要把 `dp` 数组扩大成二维数组甚至三维数组。\n\n### 7.4 方法二：二分查找\n\n详解请看：https://mp.weixin.qq.com/s/7QFapCuvi-2nkh6gREcR9g##\n\n这个解法的时间复杂度为 O(NlogN)，但是说实话，正常人基本想不到这种解法（也许玩过某些纸牌游戏的人可以想出来）。所以大家了解一下就好，正常情况下能够给出动态规划解法就已经很不错了。\n\n```java\npublic int lengthOfLIS(int[] nums){\n    int[] top = new int[nums.length];\n    // 牌初始堆数定义为0\n    int piles = 0;\n    for(int i = 0; i < nums.length; i++){\n        // 要处理的扑克牌\n        int poker = nums[i];\n\n        //*********** 二分查找：搜索左侧边界 ***************/\n        // piles 表示堆数，即就是数组的长度；如果写成 right = piles + 1, 当 nums=[0] 时返回 0， 正确结果是 1\n        int left = 0, right = piles;\n        while (left < right){\n            int mid = left + (right - left) / 2;\n            if(top[mid] == poker){\n                right = mid;\n            }else if(top[mid] > poker){\n                right = mid;\n            }else if(top[mid] < poker){\n                left = mid + 1;\n            }\n        }\n\n        // 牌比每一个都大，则新建一个堆\n        if(left == piles){\n            piles++;\n        }\n        // 牌比每一个都小、或者找到合适位置，放入 top 数组即可\n        top[left] = poker;\n    }\n    return piles;\n}\n```\n\n## 8. 例题：最长公共子序列 [1143]\n\n题目来源：[1143. 最长公共子序列](https://leetcode-cn.com/problems/longest-common-subsequence/)\n\n### 8.1 题目描述\n\n给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列的长度。\n\n若这两个字符串没有公共子序列，则返回 0。 \n\n示例 1:\n\n```bash\n输入：text1 = \"abcde\", text2 = \"ace\" \n输出：3  \n解释：最长公共子序列是 \"ace\"，它的长度为 3。\n```\n\n\n示例 2:\n\n```bash\n输入：text1 = \"abc\", text2 = \"def\"\n输出：0\n解释：两个字符串没有公共子序列，返回 0。\n```\n\n\n提示:\n\n1 <= text1.length <= 1000\n1 <= text2.length <= 1000\n输入的字符串只含有小写英文字符。\n\n### 8.2 题目分析\n\n最长公共子序列（Longest Common Subsequence，简称 LCS）是一道非常经典的面试题目，因为它的解法是典型的二维动态规划，大部分比较困难的字符串问题都和这个问题一个套路，比如说编辑距离。而且，这个算法稍加改造就可以用于解决其他问题，所以说 LCS 算法是值得掌握的。\n\n详细分析参考：https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zui-chang-gong-gong-zi-xu-lie\n\n### 8.3 代码\n\n```java\npublic int longestCommonSubsequence(String text1, String text2){\n    int len1 = text1.length();\n    int len2 = text2.length();\n    // 让 text1,text2 的索引从 1 开始\n    // dp[i][j] = n 表示：对于 text1[1...i] 和 text2[1...j] 的最长公共子序列为 n\n    //base case 是：dp[0][..] 和 dp[..][0] 初始化为0\n    int[][] dp = new int[len1+1][len2+1];\n\n    for(int i = 1; i <= len1; i++){\n        for(int j = 1; j <= len2; j++){\n            //状态转移\n            if(text1.charAt(i-1) == text2.charAt(j-1)){\n                dp[i][j] = dp[i-1][j-1] + 1;\n            }else{\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);\n            }\n        }\n    }\n    return dp[len1][len2];\n}\n```\n\n## 9. 例题：最大子序列和 [53]\n\n题目来源：[53. 最大子序和](https://leetcode-cn.com/problems/maximum-subarray/)\n\n### 9.1 题目描述\n\n给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n\n示例：\n\n```bash\n输入: [-2,1,-3,4,-1,2,1,-5,4]\n输出: 6\n解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。\n```\n\n\n进阶:\n\n如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。\n\n### 9.2 题目分析\n\n参考：https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zui-da-zi-shu-zu\n\n解决这个问题需要动态规划技巧，但是 `dp` 数组的定义比较特殊。按照我们常规的动态规划思路，一般是这样定义 `dp` 数组：\n\n**`nums[0..i]`** **中的「最大的子数组和」为** **`dp[i]`**。\n\n如果这样定义的话，整个 `nums` 数组的「最大子数组和」就是 `dp[n-1]`。如何找状态转移方程呢？按照数学归纳法，假设我们知道了 `dp[i-1]`，如何推导出 `dp[i]` 呢？利用数学归纳法，你能用 `dp[i]` 推出 `dp[i+1]` 吗？\n\n**实际上是不行的，因为子数组一定是连续的，按照我们当前** **`dp`** **数组定义，并不能保证** **`nums[0..i]`** **中的最大子数组与** **`nums[i+1]`** **是相邻的**，也就没办法从 `dp[i]` 推导出 `dp[i+1]`。\n\n所以说我们这样定义 `dp` 数组是不正确的，无法得到合适的状态转移方程。对于这类子数组问题，我们就要重新定义 `dp` 数组的含义：\n\n**以** **`nums[i]`** **为结尾的「最大子数组和」为** **`dp[i]`**。\n\n这种定义之下，想得到整个 `nums` 数组的「最大子数组和」，不能直接返回 `dp[n-1]`，而需要遍历整个 `dp` 数组。\n\n虽然说动态规划推状态转移方程确实比较玄学，但大部分还是有些规律可循的。\n\n这道「最大子数组和」就和「最长递增子序列」非常类似，`dp` 数组的定义是「以 `nums[i]` 为结尾的最大子数组和/最长递增子序列为 `dp[i]`」。因为只有这样定义才能将 `dp[i+1]` 和 `dp[i]` 建立起联系，利用数学归纳法写出状态转移方程。\n\n### 9.3 代码\n\n```java\npublic int maxSubArray(int[] nums) {\n    int len = nums.length;\n    // dp[i] = x 表示以 nums[i] 结尾的最大子序列和为x\n    int[] dp = new int[len];\n    // base case\n    dp[0] = nums[0];\n\n    int max = nums[0];\n    for(int i = 1; i < len; i++){\n        // 状态转移\n        dp[i] = Math.max(nums[i], nums[i] + dp[i - 1]);\n        max = Math.max(max, dp[i]);\n    }\n    return max;\n}\n```\n\n## 10. 例题：编辑距离 [72]\n\n题目来源：[72. 编辑距离](https://leetcode-cn.com/problems/edit-distance/)\n\n### 10.1 题目描述\n\n给你两个单词 word1 和 word2，请你计算出将 word1 转换成 word2 所使用的最少操作数 。\n\n你可以对一个单词进行如下三种操作：\n\n1. 插入一个字符\n2. 删除一个字符\n3. 替换一个字符\n\n示例 1：\n\n```bash\n输入：word1 = \"horse\", word2 = \"ros\"\n输出：3\n解释：\nhorse -> rorse (将 'h' 替换为 'r')\nrorse -> rose (删除 'r')\nrose -> ros (删除 'e')\n```\n\n\n示例 2：\n\n```bash\n输入：word1 = \"intention\", word2 = \"execution\"\n输出：5\n解释：\nintention -> inention (删除 't')\ninention -> enention (将 'i' 替换为 'e')\nenention -> exention (将 'n' 替换为 'x')\nexention -> exection (将 'n' 替换为 'c')\nexection -> execution (插入 'u')\n```\n\n### 10.2 题目分析\n\ndp 问题自底向上求解，定义 dp 数组：``dp[i][j] = n`` 表示：``word1[1..i]`` 和 ``word2[1..j]`` 的最小编辑距离为 n，注意 word1 和 word2 的下标从1开始。\n\nbase case：当 i=0 或者 j=0 时，属于base case。\n\n状态：距离。\n\n选择：有三种选择，即删除、替换、插入，选出距离最小的。做出每一种选择后，使用前面求出 dp 数组的值。比如如果选择删除，则 ``dp[i][j] = dp[i-1][j] + 1`` ；如果选择替换，则 ``dp[i][j] = dp[i-1][j-1] + 1``；如果选择插入，则``dp[i][j] = dp[i][j-1] + 1``入，当插入时应该注意，不能在 ``word1[i]`` 之前插入，因为在前面插入后，没法使用已经求出的 dp 数组的值，而是在 ``word1[i]`` 的后面插入。\n\n状态转移方程：如果字符相等，跳过；否则在删除、替换、插入中选择一种。\n\n### 10.3 代码\n\n```java\npublic int minDistance(String word1, String word2){\n    int len1 = word1.length();\n    int len2 = word2.length();\n    //word1 和 word2 的下标从 1 开始\n    //dp[i][j] = n 表示：word1[1..i] 和 word2[1..j] 的最小编辑距离为 n\n    int[][] dp = new int[len1+1][len2+2];\n\n    //base case\n    for(int i = 0; i <= len1; i++){\n        dp[i][0] = i;\n    }\n    for(int j = 0; j <= len2; j++){\n        dp[0][j] = j;\n    }\n\n    for(int i = 1; i <= len1; i++){\n        for(int j = 1; j <= len2; j++){\n            if(word1.charAt(i-1) == word2.charAt(j-1)){\n                dp[i][j] = dp[i-1][j-1];\n            }else{\n                //三种情况：插入、删除、替换\n                dp[i][j] = min(dp[i][j-1] + 1, dp[i-1][j] + 1, dp[i-1][j-1] + 1);\n            }\n        }\n    }\n    return dp[len1][len2];\n}\n\nprivate int min(int a, int b, int c){\n    return Math.min(Math.min(a,b),c);\n}\n```\n\n## 11. 例题：正则表达式匹配 [10]\n\n题目来源：[10. 正则表达式匹配](https://leetcode-cn.com/problems/regular-expression-matching/)\n\n### 11.1 题目描述\n\n给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。\n\n```bash\n'.' 匹配任意单个字符\n'*' 匹配零个或多个前面的那一个元素\n```\n\n\n所谓匹配，是要涵盖整个字符串s的，而不是部分字符串。\n\n说明:\n\ns 可能为空，且只包含从 a-z 的小写字母。\np 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。\n示例 1:\n\n```bash\n输入:\ns = \"aa\"\np = \"a\"\n输出: false\n解释: \"a\" 无法匹配 \"aa\" 整个字符串。\n```\n\n示例 2:\n\n```bash\n输入:\ns = \"aa\"\np = \"a*\"\n输出: true\n解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 \"aa\" 可被视为 'a' 重复了一次。\n```\n\n示例 3:\n\n```bash\n输入:\ns = \"ab\"\np = \".*\"\n输出: true\n解释: \".*\" 表示可匹配零个或多个（'*'）任意字符（'.'）。\n```\n\n### 11.2 题目分析\n\n两个字符串比较的动态规划问题。``dp[i][j]`` 表示 ``s[i-1]`` 和 ``p[i-1]`` 是否可以匹配。\n\nbase case：``dp[0][0] = true``， 但这还不够，字符串 \"\" 和 \"a*\" 也是匹配的。\n\n状态：是否可以匹配。\n\n选择：字符串 s 和 p 各前进一位。\n\n状态转换：见代码。\n\n### 11.3 代码\n\n```java\npublic boolean isMatch(String s, String p){\n    if(s == null || p == null){return false;}\n    int len1 = s.length();\n    int len2 = p.length();\n\n    //dp 数组中 字符串下标从 1 开始，索引 0 存储空字符\n    //dp[i][j] = true 表示：s[0..(i-1)] p[0..(j-1)] 可以匹配\n    //base case：dp[..][0] 初始化为 0, 不存在可以匹配的可能\n    boolean[][] dp = new boolean[len1+1][len2+1];\n    dp[0][0] = true;\n    //base case: dp[0][..] 初始化，如果出现 * 则可以消去上一个字符，且 上上一个字符对应 dp 值为 true，则当前 dp 值为true\n    for(int j = 1; j < len2; j++){\n        //j-1\n        if(p.charAt(j) == '*' && dp[0][j-1]){\n            //j+1\n            dp[0][j+1] = true;\n        }\n    }\n\n    for(int i = 0; i < len1; i++){\n        for(int j = 0; j < len2; j++){\n            //如果元素匹配或者为任意元素\n            if(p.charAt(j) == '.' || s.charAt(i) == p.charAt(j)){\n                dp[i + 1][j + 1] = dp[i][j];\n            }\n\n            if(p.charAt(j) == '*'){\n                //如果前一个元素不匹配，则消去这两个元素\n                if(p.charAt(j-1) != s.charAt(i) && p.charAt(j-1) != '.'){\n                    dp[i + 1][j + 1] = dp[i + 1][j - 1];\n                }else{\n                    /*\n                        * 如果前一个元素匹配，存在三种情况：\n                        * 重复前一个字符多次（abbbb ab*）dp[i + 1][j + 1] = dp[i][j + 1]\n                        * 重复前一个字符一次（ab ab*）dp[i + 1][j + 1] = dp[i + 1][j]\n                        * 重复前一个字符零次（a ab*）dp[i + 1][j + 1] = dp[i + 1][j - 1]\n                         */\n                    dp[i + 1][j + 1] = (dp[i][j + 1] || dp[i + 1][j] || dp[i + 1][j - 1]);\n                }\n            }\n        }\n    }\n    return dp[len1][len2];\n```\n\n## 12. 例题：通配符匹配 [44]\n\n题目来源：[44. 通配符匹配](https://leetcode-cn.com/problems/wildcard-matching/)\n\n### 12.1 题目描述\n\n给定一个字符串 (s) 和一个字符模式 (p) ，实现一个支持 '?' 和 '*' 的通配符匹配。\n\n```bash\n'?' 可以匹配任何单个字符。\n'*' 可以匹配任意字符串（包括空字符串）。\n两个字符串完全匹配才算匹配成功。\n```\n\n说明:\n\ns 可能为空，且只包含从 a-z 的小写字母。\np 可能为空，且只包含从 a-z 的小写字母，以及字符 ? 和 *。\n示例 1:\n\n```bash\n输入:\ns = \"aa\"\np = \"a\"\n输出: false\n解释: \"a\" 无法匹配 \"aa\" 整个字符串。\n```\n\n\n示例 2:\n\n输入:\n\n```bash\ns = \"aa\"\np = \"*\"\n输出: true\n解释: '*' 可以匹配任意字符串。\n```\n\n示例 3:\n\n```bash\n输入:\ns = \"cb\"\np = \"?a\"\n输出: false\n解释: '?' 可以匹配 'c', 但第二个 'a' 无法匹配 'b'。\n```\n\n示例 4:\n\n```bash\n输入:\ns = \"adceb\"\np = \"*a*b\"\n输出: true\n解释: 第一个 '*' 可以匹配空字符串, 第二个 '*' 可以匹配字符串 \"dce\".\n```\n\n示例 5:\n\n```bash\n输入:\ns = \"acdcb\"\np = \"a*c?b\"\n输出: false\n```\n\nPS：? 不可以匹配空字符串。\n\n### 12.2 题目分析\n\n两个字符串比较的动态规划问题。\n\n本体类似于上一题，但我在考虑问题时始终不能跳出问题本身，使用动态规划的思想，而是一再考虑可能出现的不同情况，特别是出现 * 时。例如字符串 \"abc\" 和 \"a*\" , 当 p 中出现了 * 时，有两种处理方式：\n\n1. 把 * 当做一个空字符串，那么 ``dp[i + 1][j + 1] = dp[i + 1][j]``\n2. ``*`` 匹配任意字符串，那么 ``dp[i + 1][j + 1] = dp[i][j + 1]``\n\n要注意理解，dp 问题注重的是当前状态的转化，即只考虑当前这一位，并把这个问题转化为更小问题的答案。\n\n### 12.3 代码\n\n```java\npublic boolean isMatch(String s, String p) {\n    if(s == null || p == null){return false;}\n    int len1 = s.length();\n    int len2 = p.length();\n\n    //dp 数组中 字符串下标从 1 开始，索引 0 存储空字符\n    //dp[i][j] = true 表示：s[0..(i-1)] p[0..(j-1)] 可以匹配\n    //base case：dp[..][0] 初始化为 0, 不存在可以匹配的可能\n    boolean[][] dp = new boolean[len1+1][len2+1];\n    dp[0][0] = true;\n    //base case: dp[0][..] 初始化，如果出现 * 则可以视为空字符串\n    for(int j = 0; j < len2; j++){\n        if(p.charAt(j) == '*'){\n            dp[0][j + 1] = dp[0][j];\n        }\n    }\n\n    for(int i = 0; i < len1; i++){\n        for(int j = 0; j < len2; j++){\n            if(p.charAt(j) == '?' || s.charAt(i) == p.charAt(j)){\n                dp[i + 1][j + 1] = dp[i][j];\n            }\n            if(p.charAt(j) == '*'){\n                //情况一：s = \"a\", p = \"a*\", 此时 * 被当做空字符串 dp[i + 1][j + 1] = dp[i + 1][j]\n                //情况二：s = \"abc\", p = \"a*\", 此时 * 被当做任意字符串 dp[i + 1][j + 1] = dp[i][j + 1]\n                dp[i + 1][j + 1] = (dp[i + 1][j] || dp[i][j + 1]);\n            }\n        }\n    }\n    return dp[len1][len2];\n}\n```\n\n## 13. 例题：不同路径 [62]\n\n题目来源：[62. 不同路径](https://leetcode-cn.com/problems/unique-paths/)\n\n### 13.1 题目描述\n\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。\n\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。\n\n问总共有多少条不同的路径？\n\n示例 1:\n\n```bash\n输入: m = 3, n = 2\n输出: 3\n解释:\n从左上角开始，总共有 3 条路径可以到达右下角。\n1. 向右 -> 向右 -> 向下\n2. 向右 -> 向下 -> 向右\n3. 向下 -> 向右 -> 向右\n```\n\n示例 2:\n\n```bash\n输入: m = 7, n = 3\n输出: 28\n```\n\n\n提示：\n\n1 <= m, n <= 100\n题目数据保证答案小于等于 2 * 10 ^ 9\n\n### 13.2 题目分析\n\n简单题。\n\n``dp[i-1][j-1] ``表示：i * j 的网格上机器人的移动步数\n\n状态转移：``dp[i][j] = dp[i - 1][j] + dp[i][j - 1]``\n\n###  13.3 代码\n\n```java\npublic int uniquePaths(int m, int n) {\n    //dp[i-1][j-1] 表示：i * j 的网格上机器人的移动步数\n    int[][] dp = new int[m][n];\n    for(int i = 0; i < m; i++){\n        dp[i][0] = 1;\n    }\n    for(int i = 1; i < n; i++){\n        dp[0][i] = 1;\n    }\n    for(int i = 1; i < m; i++){\n        for(int j = 1; j < n; j++){\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n        }\n    }\n    return dp[m - 1][n - 1];\n}\n```\n\n## 14. 例题：不同路径II [63]\n\n题目来源：[63. 不同路径 II](https://leetcode-cn.com/problems/unique-paths-ii/)\n\n### 14.1 题目描述\n\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。\n\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。\n\n现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？\n\n网格中的障碍物和空位置分别用 `1` 和 `0` 来表示。\n\n说明：m 和 n 的值均不超过 100。\n\n示例 1:\n\n```bash\n输入:\n[\n  [0,0,0],\n  [0,1,0],\n  [0,0,0]\n]\n输出: 2\n解释:\n3x3 网格的正中间有一个障碍物。\n从左上角到右下角一共有 2 条不同的路径：\n1. 向右 -> 向右 -> 向下 -> 向下\n2. 向下 -> 向下 -> 向右 -> 向右\n```\n\n### 14.2 题目分析\n\n注意与上一题的区别。\n\n### 14.3 代码\n\n```java\npublic int uniquePathsWithObstacles(int[][] obstacleGrid) {\n    int m = obstacleGrid.length;\n    int n = obstacleGrid[0].length;\n    //dp[i-1][j-1] 表示：i * j 的网格上机器人的移动步数\n    int[][] dp = new int[m][n];\n    // 注意\n    if(obstacleGrid[0][0] == 1){return 0;}\n    // base case，与上一题不同\n    for(int i = 0; i < m; i++){\n        if(obstacleGrid[i][0] == 1){\n            break;\n        }\n        dp[i][0] = 1;\n    }\n    for(int i = 1; i < n; i++){\n        if(obstacleGrid[0][i] == 1){\n            break;\n        }\n        dp[0][i] = 1;\n    }\n    for(int i = 1; i < m; i++){\n        for(int j = 1; j < n; j++){\n            if(obstacleGrid[i][j] == 1){\n                dp[i][j] = 0;\n            }else{\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n            }\n        }\n    }\n    return dp[m - 1][n - 1];\n}\n```\n\n## 15. 例题：实现strStr() [15]\n\n题目来源：[28. 实现 strStr()](https://leetcode-cn.com/problems/implement-strstr/)\n\n### 15.1 题目描述\n\n实现 strStr() 函数。\n\n给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。\n\n示例 1:\n\n```bash\n输入: haystack = \"hello\", needle = \"ll\"\n输出: 2\n```\n\n\n示例 2:\n\n```bash\n输入: haystack = \"aaaaa\", needle = \"bba\"\n输出: -1\n```\n\n\n说明:\n\n当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。\n\n对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。\n\n### 15.2 题目分析\n\n详细分析参考：[这里](https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/dong-tai-gui-hua-zhi-kmp-zi-fu-pi-pei-suan-fa) . 太难了....\n\n标准的KMP方法在我的另一篇博客：[这里](https://juliajiang7.github.io/2020/07/17/KMP算法/#more) .\n\n我们可以认为 `pat` 的匹配就是状态的转移。比如当 pat = \"ABABC\"：\n\n<img src=\"/pictures/state.jpg\" alt=\"img\" style=\"zoom:33%;\" />\n\n如上图，圆圈内的数字就是状态，状态 0 是起始状态，状态 5（`pat.length`）是终止状态。开始匹配时 `pat` 处于起始状态，一旦转移到终止状态，就说明在 `txt` 中找到了 `pat`。比如说当前处于状态 2，就说明字符 \"AB\" 被匹配：\n\n<img src=\"/pictures/state2.jpg\" alt=\"img\" style=\"zoom:33%;\" />\n\n`dp[j][c] = next` 表示，当前是状态 `j`，遇到了字符 `c`，应该转移到状态 `next`。\n\nbase case：``dp[0][pat.charAt(0)] = 1;``, 只有遇到 pat[0] 这个字符才能使状态从 0 转移到 1，遇到其它字符的话还是停留在状态 0（Java 默认初始化数组全为 0）.\n\n如何构建这个 `dp` 数组，需要一个辅助状态 `X`，它永远比当前状态 `j` 落后一个状态，拥有和 `j` 最长的相同前缀，我们给它起了个名字叫「影子状态」。\n\n在构建当前状态 `j` 的转移方向时，只有字符 `pat[j]` 才能使状态推进（`dp[j][pat[j]] = j+1`）；而对于其他字符只能进行状态回退，应该去请教影子状态 `X` 应该回退到哪里（`dp[j][other] = dp[X][other]`，其中 `other` 是除了 `pat[j]` 之外所有字符）。\n\n对于影子状态 `X`，我们把它初始化为 0，并且随着 `j` 的前进进行更新，更新的方式和 search 过程更新 `j` 的过程非常相似（`X = dp[X][pat[j]]`）。\n\n### 15.3 代码\n\n```java\npublic int strStr(String haystack, String needle){\n    String txt = haystack;\n    String pat = needle;\n    int M = pat.length();\n    int N = txt.length();\n    if(M == 0){return 0;}\n\n    //dp[j][c] = i 表示： 当前状态为 j，且遇到的下一个字符是 c 时, 下一个状态位 i\n    int[][] dp = new int[M][256];\n    KMP(pat, dp);\n\n    //pat 的初始状态为 0\n    int j = 0;\n    for(int i = 0; i < N; i++){\n        //计算 pat 的下一个状态\n        j = dp[j][txt.charAt(i)];\n        //到达终止状态，匹配成功\n        if(j == M){return i - M + 1;}\n    }\n    //没到达终止状态，匹配失败\n    return -1;\n}\n\n/**\n     * 计算 dp, 即就是 next\n     * @param pat\n     * @param dp\n     */\npublic void KMP(String pat, int[][] dp){\n    int M = pat.length();\n\n    //base case\n    dp[0][pat.charAt(0)] = 1;\n    //影子状态，初始化为 0\n    int X = 0;\n    //构建状态转移图\n    for(int j = 1; j < M; j++){\n        for(int c = 0; c < 256; c++){\n            if(pat.charAt(j) == c){\n                dp[j][c] = j + 1;\n            }else{\n                dp[j][c] = dp[X][c];\n            }\n        }\n        //更新影子状态\n        X = dp[X][pat.charAt(j)];\n    }\n}\n```\n\n## 16. 接雨水 [42]\n\n题目来源：[42. 接雨水](https://leetcode-cn.com/problems/trapping-rain-water/)\n\n### 16.1. 题目描述\n\n给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。\n\n![image-20200810100323970](/pictures/image-20200810100323970.png)\n\n上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 感谢 Marcos 贡献此图。\n\n示例:\n\n```bash\n输入: [0,1,0,2,1,0,1,3,2,1,2,1]\n输出: 6\n```\n\n### 16.2. 题目分析\n\n本题分析参考：[这里](https://leetcode.wang/leetCode-42-Trapping-Rain-Water.html).\n\n### 16.3. 方法一：暴力解法（按列求）\n\n参考 [这里](https://leetcode.wang/leetCode-42-Trapping-Rain-Water.html) 的解法二按列求。\n\n```java\npublic int trap(int[] height){\n    int sum = 0;\n\n    //最两端的不用考虑，因为一定不会有雨水\n    for(int i = 1; i < height.length - 1; i++){\n        int max_left = 0;\n        //找出 height[i] 左边最高（包括height[i]），要把最左端考虑在内\n        for(int j = i; j >= 0; j--){\n            max_left = Math.max(height[j], max_left);\n        }\n\n        int max_right = 0;\n        //找出 height[i] 右边最高（包括height[i]），要把最右端考虑在内\n        for(int j = i; j < height.length;j++){\n            max_right = Math.max(height[j], max_right);\n        }\n\n        //如果自己就是最高的话 max_left = max_right = height[i]\n        sum += Math.min(max_left, max_right) - height[i];\n    }\n    return sum;\n}\n```\n\n时间复杂度：O（n²），遍历每一列需要 n，找出左边最高和右边最高的墙加起来刚好又是一个 n，所以是 n²。\n\n空间复杂度：O（1）。\n\n### 16.4. 方法二：动态规划\n\n参考 [这里](https://leetcode.wang/leetCode-42-Trapping-Rain-Water.html) 的解法三动态规划。dp 数组定义不同，本文采用的方法和暴力解法同步。\n\n我们注意到，解法一中，对于每一列，我们求它左边最高的墙和右边最高的墙，都是重新遍历一遍所有高度，这里我们可以优化一下。\n\n首先用两个数组，max_left [ i ] 代表到第 i 列左边最高的墙的高度（包括第 i 列），max_right [ i ] 代表到第 i 列右边最高的墙的高度（包括第 i 列）。\n\n这样，我们利用解法一的思路，不用在 for 循环中再重新遍历求 max_left 和 max_right 了。\n\n```java\npublic int trap(int[] height) {\n    int sum = 0;\n    int len = height.length;\n    if(len == 0){return 0;}\n\n    // max_left[i] = x 表示：height[0..i] 中最大值为x\n    int max_left[] = new int[len];\n    // max_right[i] = x 表示：height[i..(len-1)] 中最大值为x\n    int max_right[] = new int[len];\n\n    // base case\n    max_left[0] = height[0];\n    max_right[len - 1] = height[len - 1];\n\n    for(int i = 1; i < len; i++){\n        max_left[i] = Math.max(height[i], max_left[i - 1]);\n    }\n    for(int j = len - 2; j > 0; j--){\n        max_right[j] = Math.max(height[j], max_right[j + 1]);\n    }\n\n    for(int i = 1; i < len - 1; i++){\n        sum += Math.min(max_left[i], max_right[i]) - height[i];\n    }\n    return sum;\n}\n```\n\n时间复杂度：O（n）。\n\n空间复杂度：O（n），用来保存每一列左边最高的墙和右边最高的墙。\n\n## 17. 最长有效括号 [32]\n\n题目来源：[32. 最长有效括号](https://leetcode-cn.com/problems/longest-valid-parentheses/)\n\n### 17.1. 题目描述\n\n给定一个只包含 '(' 和 ')' 的字符串，找出最长的包含有效括号的子串的长度。\n\n示例 1:\n\n```bash\n输入: \"(()\"\n输出: 2\n解释: 最长有效括号子串为 \"()\"\n```\n\n\n示例 2:\n\n```bash\n输入: \")()())\"\n输出: 4\n解释: 最长有效括号子串为 \"()()\"\n```\n\n注意：题目要求找 **子串**， 即字符串中连续的一段。\n\n### 17.2 题目分析\n\n本题分析参考：[这里](https://leetcode.wang/leetCode-32-Longest-Valid-Parentheses.html).\n\n做题先从暴力解法入手，慢慢想如何进行优化。直接考虑高效率解法考虑会不周全，而且找不到思路啊，千万别心急。\n\n### 17.3. 方法一：暴力解法\n\n暴力解法就是：对每一个子串判断是否有效，返回最长的长度。\n\n```java\npublic int longestValidParentheses(String s) {\n    int len = s.length();\n    if(len == 0){return 0;}\n    int max = 0;\n    for(int i = 0; i < len; i++){\n        // 注意：substring 是左闭右开，所以这里j的取值小于等于len\n        for(int j = i + 2; j <= len; j += 2){\n            if(isValid(s.substring(i, j))){\n                max = Math.max(max, j - i);\n            }\n        }\n    }\n    return max;\n}\nprivate boolean isValid(String s){\n    Deque<Character> stack = new ArrayDeque<>();\n    for(int i = 0; i < s.length(); i++){\n        if(s.charAt(i) == '('){\n            stack.push('(');\n        }else{\n            if(!stack.isEmpty() && stack.peek() == '('){\n                stack.pop();\n            }else{\n                return false;\n            }\n        }\n    }\n    return stack.isEmpty();\n}\n```\n\n时间复杂度: 列举字符串是 O（n²），判断是否是合法序列是 O（n），所以总共是 O（n³）。\n\n空间复杂度：O（n），每次判断的时候，栈的大小。\n\n这个算法，leetCode 会报时间超时。\n\n### 17.4. 方法二：暴力解法优化\n\n在解法一中，我们会做很多重复的判断，比如 ``()()()`` ，从下标 0 开始，我们先判断长度为 2 的是否是合法序列，再判断长度为 4 时的字符串是否合法，但依旧从下标 0 开始。判断长度为 6 时，依旧从下标 0 开始，但其实之前已经确认前 4 个是合法序列了，所以我们从 4 开始判断即可。\n\n基于此，我们可以换一个思路，我们判断从每个位置开始的最长合法子串是多长即可。在判断是否是合法子串时，我们不使用栈，而是用一个变量记录当前的括号情况，遇到左括号加1，遇到右括号减1，如果变成0，更新最长合法子串长度。\n\n```java\npublic int longestValidParentheses(String s) {\n    int count = 0;\n    int max = 0;\n    for(int i = 0; i < s.length(); i++){\n        count = 0;\n        for(int j = i; j < s.length(); j++){\n            if(s.charAt(j) == '('){\n                count++;\n            }else{\n                count--;\n            }\n\n            if(count < 0){\n                break;\n            }\n\n            if(count == 0){\n                max = Math.max(max, j - i + 1);\n            }\n        }\n    }\n    return max;\n}\n```\n\n时间复杂度：O（n²）。\n\n空间复杂度：O（1）。\n\n### 17.5. 方法三：动态规划\n\n分析参考：[这里](https://leetcode.wang/leetCode-32-Longest-Valid-Parentheses.html#解法三-动态规划).\n\n```java\npublic int longestValidParentheses(String s) {\n    int len = s.length();\n    int max = 0;\n    // dp[i]=x 表示：以s[i]结尾的子串最长有效长度为x\n    int[] dp = new int[len];\n    for(int i = 1; i < len; i++){\n        // 如果遇到左括号，dp[i]=0，就是初始值\n        // 遇到右括号时，才会更新dp数组\n        if(s.charAt(i) == ')'){\n            // 右括号的前一位是左括号\n            if(s.charAt(i - 1) == '('){\n                dp[i] = (i > 2 ? dp[i - 2] : 0) + 2;\n\n                // 右括号前一位是右括号\n                // 并且除去前边的合法序列的前一位是左括号\n            }else if(i - dp[i - 1] > 0 && s.charAt(i - dp[i - 1] - 1) == '('){\n                dp[i] = dp[i - 1] + ((i - dp[i - 1]) > 2 ? dp[i - dp[i - 1] - 2] : 0) + 2;\n            }\n            max = Math.max(max, dp[i]);\n        }\n    }\n    return max;\n}\n```\n\n时间复杂度：遍历了一次，O（n）。\n\n空间复杂度：O（n）。\n\n## 18. 最大矩形 [85]\n\n题目来源：[85. 最大矩形](https://leetcode-cn.com/problems/maximal-rectangle/)\n\n### 18.1. 题目描述\n\n![image-20200820100311020](/pictures/image-20200820100311020.png)\n\n### 18.2. 方法一：暴力解法\n\n最原始地，我们可以列举每个可能的矩形。这可以通过遍历所有的(x1, y1) (x2, y2) 坐标，并以它们为对角顶点来完成。该方法过慢，不足以通过所有测试用例。\n\n时间复杂度：O(N<sup>3</sup>M<sup>3</sup>)，空间复杂度：O(1).\n\n### 18.3. 方法二：动态规划 - 使用柱状图的优化暴力解法\n\n参考 [这里](https://leetcode-cn.com/problems/maximal-rectangle/solution/zui-da-ju-xing-by-leetcode/)，这道题的难点是根本想不到...\n\n代码如下：\n\n```java\npublic int maximalRectangle(char[][] matrix) {\n    if(matrix.length == 0){return 0;}\n    int row = matrix.length;\n    int col = matrix[0].length;\n    int maxArea = 0;\n    // dp[i][j] = x 表示：以 matrix[i][j] 结尾的最大可能宽度\n    int[][] dp = new int[row][col];\n\n    for(int i = 0; i < row; i++){\n        for(int j = 0; j < col; j++){\n            if(matrix[i][j] == '1'){\n                // 更新最大最大宽度\n                dp[i][j] = (j == 0) ? 1 : dp[i][j - 1] + 1;\n\n                int width = dp[i][j];\n                // 计算以 matrix[i][j] 为右下角的矩形最大面积\n                for(int k = i; k >= 0; k--){\n                    width = Math.min(width, dp[k][j]);\n                    maxArea = Math.max(maxArea, width * (i - k + 1));\n                }\n            }\n        }\n    }\n    return maxArea;\n}\n```\n\n### 18.4. 方法三：动态规划 - 每个点的最大高度\n\n参考 [这里](https://leetcode-cn.com/problems/maximal-rectangle/solution/zui-da-ju-xing-by-leetcode/) 的方法四。太强了....更想不到... 而且不好理解。\n\n```java\npublic int maximalRectangle(char[][] matrix) {\n    if(matrix.length == 0){return 0;}\n    int row = matrix.length;\n    int col = matrix[0].length;\n\n    int[] left = new int[col];\n    int[] right = new int[col];\n    int[] height = new int[col];\n    Arrays.fill(right, col);\n\n    int maxArea = 0;\n    // 遍历每一行\n    for(int i = 0; i < row; i++){\n        int cur_left = 0;\n        int cur_right = col - 1;\n\n        // 高度\n        // 遍历这一行的每一个元素\n        for(int j = 0; j < col; j++){\n            if(matrix[i][j] == '1'){\n                // 在上一行的高度上加1\n                height[j]++;\n            }else{\n                height[j] = 0;\n            }\n        }\n\n        // 左边\n        for(int j = 0; j < col; j++){\n            if(matrix[i][j] == '1'){\n                left[j] = Math.max(left[j], cur_left);\n            }else{\n                left[j] = 0;\n                cur_left = j + 1;\n            }\n        }\n\n        // 右边\n        for(int j = col - 1; j >= 0; j--){\n            if(matrix[i][j] == '1'){\n                right[j] = Math.min(right[j], cur_right);\n            }else{\n                right[j] = col - 1;\n                cur_right = j - 1;\n            }\n        }\n\n        // 面积\n        for(int j = 0; j < col; j++){\n            maxArea = Math.max(maxArea, (right[j] - left[j] + 1) * height[j]);\n        }\n    }\n    return maxArea;\n}\n```\n\n## 19. 扰乱字符串 [87]\n\n题目来源：[87. 扰乱字符串](https://leetcode-cn.com/problems/scramble-string/)\n\n### 19.1. 题目描述\n\n![image-20200821104157163](/pictures/image-20200821104157163.png)\n\n![image-20200821104215491](/pictures/image-20200821104215491.png)\n\n### 19.2. 代码\n\n本题的难点在于没有思路... 也很难构造出 dp 的定义和状态。\n\n具体分析参考：[这里](https://leetcode-cn.com/problems/scramble-string/solution/miao-dong-de-qu-jian-xing-dpsi-lu-by-sha-yu-la-jia/).\n\n```java\npublic boolean isScramble(String s1, String s2) {\n    char[] chs1 = s1.toCharArray();\n    char[] chs2 = s2.toCharArray();\n    int n = s1.length();\n\n    // dp[i][j][len]dp[i][j][len] 表示从字符串 S 中 i 开始（包括 i）长度为 len 的字符串是否能变换为\n    // 从字符串 T 中 j （包括 j）开始长度为 len 的字符串\n    boolean[][][] dp = new boolean[n][n][n + 1];\n\n    // base case\n    // 初始化单个字符的情况\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            dp[i][j][1] = (chs1[i] == chs2[j]);\n        }\n    }\n\n    // 枚举长度区间 len\n    for(int len = 2; len <= n; len++){\n        // 枚举 S 的起点\n        for(int i = 0; i <= n - len; i++){\n            // 枚举 T 的起点\n            for(int j = 0; j <= n - len; j++){\n                // 枚举划分位置\n                for(int k = 1; k <= len - 1; k++){\n                    // 第一种情况：不交换\n                    if(dp[i][j][k] && dp[i + k][j + k][len - k]){\n                        dp[i][j][len] = true;\n                        break;\n                    }\n                    // 第二种情况：交换\n                    if(dp[i][j + len - k][k] && dp[i + k][j][len - k]){\n                        dp[i][j][len] = true;\n                        break;\n                    }\n                }\n\n            }\n        }\n    }\n\n    return dp[0][0][n];\n}\n```\n\n## 20. 格雷编码 [89]\n\n题目来源：[89. 格雷编码](https://leetcode-cn.com/problems/gray-code/)\n\n### 20.1. 题目描述\n\n![image-20200822094721670](/pictures/image-20200822094721670.png)\n\n### 20.2. 代码\n\n感觉应该用 dp，但是没找到怎么 dp，所以 dp 问题首先应该找到小问题，然后考虑怎么根据小问题解决大问题。\n\n详细参考：[这里](https://leetcode.wang/leetCode-89-Gray-Code.html)\n\n```java\npublic List<Integer> grayCode(int n) {\n    // dp 列表存储最终结果\n    List<Integer> dp = new ArrayList<>();\n    // base case，n = 0 时\n    dp.add(0);\n\n    // 遍历要加的数的次数，从 0 开始，到 n-1 结束\n    for(int i = 0; i < n; i++){\n        // 要加的数，即 2^i\n        int add = 1 << i;\n        // 倒序遍历，加上 add 添加到结果集中\n        for(int j = dp.size() - 1; j >= 0; j--){\n            dp.add(dp.get(j) + add);\n        }\n    }\n    return dp;\n}\n```\n\n## 21. 解码方法 [91]\n\n题目来源：[91. 解码方法](https://leetcode-cn.com/problems/decode-ways/)\n\n### 21.1. 题目描述\n\n![image-20200825143910613](/pictures/image-20200825143910613.png)\n\n### 21.2. 代码\n\n分析参考：[这里](https://leetcode-cn.com/problems/decode-ways/solution/dong-tai-gui-hua-java-python-by-liweiwei1419/) ，再结合自己的思路，写了一个更好理解的代码。\n\n```java\npublic int numDecodings(String s) {\n    int len = s.length();\n    // dp[i] = x 表示：s[0...i] 有 x 中解码方法\n    int[] dp = new int[len];\n\n    char[] charArray = s.toCharArray();\n    if (charArray[0] == '0') {\n        return 0;\n    }\n    // base case\n    dp[0] = 1;\n\n    for (int i = 1; i < len; i++) {\n        int num = 10 * (charArray[i - 1] - '0') + (charArray[i] - '0');\n        // 如果是 0\n        if(charArray[i] == '0'){\n            // 只有和前一位组成的数字在 10 到 26 之内，dp 才会有值，否则是初始值 0\n            if(10 <= num && num <= 26){\n                if(i == 1){\n                    dp[i] = 1;\n                }else{\n                    dp[i] = dp[i - 2];\n                }\n            }\n        // 如果不是 0\n        }else{\n            // 和前一位组成的数字在 10 到 26 之内，dp 值增大\n            if(10 <= num && num <= 26){\n                if(i == 1){\n                    dp[i] = dp[i - 1] + 1;\n                }else{\n                    dp[i] = dp[i - 1] + dp[i - 2];\n                }\n                // 不在 10 到 26 之内，dp 和 前一位相同\n            }else{\n                dp[i] = dp[i - 1];\n            }\n        }\n    }\n    return dp[len - 1];\n}\n```\n\n本题的难点在于：出现 0 的处理，边界条件太多了...可能的情况太多了...是真的费时间。\n\n## 22. 最大子序和 [53]\n\n题目描述：[53. 最大子序和](https://leetcode-cn.com/problems/maximum-subarray/)\n\n### 22.1. 题目描述\n\n![image-20200826102906095](/pictures/image-20200826102906095.png)\n\n### 22.2. 代码\n\n典型的动态规划问题。\n\n```java\npublic int maxSubArray(int[] nums) {\n    int len = nums.length;\n    // dp[i] = x 表示以 nums[i] 结尾的最大子序列和为x\n    int[] dp = new int[len];\n    // base case\n    dp[0] = nums[0];\n\n    int max = nums[0];\n    for(int i = 1; i < len; i++){\n        // 状态转移\n        dp[i] = Math.max(nums[i], nums[i] + dp[i - 1]);\n        max = Math.max(max, dp[i]);\n    }\n    return max;\n}\n```\n\n## 23. 交错字符串 [97]\n\n题目来源：[97. 交错字符串](https://leetcode-cn.com/problems/interleaving-string/)\n\n### 23.1. 题目描述\n\n![image-20200828110613718](/pictures/image-20200828110613718.png)\n\n### 23.2. 方法一：动态规划\n\n参考：[这里](https://leetcode.wang/leetCode-97-Interleaving-String.html)\n\ndp 数组定义：定义一个 boolean 二维数组 dp [ i ] [ j ] 来表示 s1[ 0, i ) 和 s2 [ 0, j ） 组合后能否构成 s3 [ 0, i + j )，注意不包括右边界，主要是为了考虑开始的时候如果只取 s1，那么 s2 就是空串，这样的话 dp [ i ] [ 0 ] 就能表示 s2 取空串。\n\n注意，``dp[0][0]`` 表示 s1 和 s2 都取空串，组成一个空串，则值为 true。\n\n```java\npublic boolean isInterleave(String s1, String s2, String s3) {\n    if (s1.length() + s2.length() != s3.length()) {\n        return false;\n    }\n    if (s1.length() == 0 && s2.length() == 0 && s3.length() == 0) {\n        return true;\n    }\n    int len1 = s1.length();\n    int len2 = s2.length();\n    // dp[i][j] = true 表示：s1[0..i) 和 s2[0..j) 组合后能构成 s3[0..i+j)\n    boolean[][] dp = new boolean[len1 + 1][len2 + 1];\n    // base case\n    dp[0][0] = true;\n    for (int i = 1; i <= len1; i++) {\n        dp[i][0] = dp[i - 1][0] && s1.charAt(i - 1) == s3.charAt(i - 1);\n    }\n    for (int j = 1; j <= len2; j++) {\n        dp[0][j] = dp[0][j - 1] && s2.charAt(j - 1) == s3.charAt(j - 1);\n    }\n\n    for (int i = 1; i <= len1; i++) {\n        for (int j = 1; j <= len2; j++) {\n            dp[i][j] = (dp[i - 1][j] && s1.charAt(i - 1) == s3.charAt(i + j - 1))\n                || (dp[i][j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));\n        }\n    }\n    return dp[len1][len2];\n}\n```\n\n### 23.3. 方法二：回溯\n\n可前往我的博客 [回溯算法总结](http://juliajiang.top/2020/07/25/回溯算法总结/) 的 15. 交错字符串 [97] 查看。\n\n## 24. 最小路径和 [64]\n\n题目来源：[64. 最小路径和](https://leetcode-cn.com/problems/minimum-path-sum/)\n\n### 24.1. 题目描述\n\n![image-20200901100037412](/pictures/image-20200901100037412.png)\n\n### 24.2. 代码\n\n典型的动态规划问题：\n\n```java\npublic int minPathSum(int[][] grid) {\n    int row = grid.length;\n    int col = grid[0].length;\n    \n\t// dp[i][j] = x 表示：到grid[i][j]的最小路径和为 x\n    int[][] dp = new int[row][col];\n    dp[0][0] = grid[0][0];\n    for(int j = 1; j < col; j++){\n        dp[0][j] = dp[0][j - 1] + grid[0][j];\n    }\n    for(int i = 1; i < row; i++){\n        dp[i][0] = dp[i - 1][0] + grid[i][0];\n    }\n\n    for(int i = 1; i < row; i++){\n        for(int j = 1; j < col; j++){\n            dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n        }\n    }\n\n    return dp[row - 1][col - 1];\n}\n```\n\n## 25. 不同的子序列 [115]\n\n题目来源：[115. 不同的子序列](https://leetcode-cn.com/problems/distinct-subsequences/)\n\n### 25.1. 题目描述\n\n![image-20200904105932893](/pictures/image-20200904105932893.png)\n\n### 25.2. 代码\n\n参考：[这里](https://leetcode.wang/leetcode-115-Distinct-Subsequences.html) 的解法三，将 dp 从逆序改为正序。\n\n这道题一开始用的回溯，发现超时，需要用 map 存之前的递归结果，不太好存，也不好理解，参考 [这里](https://leetcode.wang/leetcode-115-Distinct-Subsequences.html) 的解法二。\n\n还是用 dp 吧...\n\n两个字符串的 dp 问题，依旧是用 ``dp[0][0]`` 表示两个字符串均为空串的情况。\n\n```java\npublic int numDistinct(String s, String t) {\n    int sLen = s.length();\n    int tLen = t.length();\n    // dp[i + 1][j + 1] = x 表示：s[0..i] 中的子序列 t[0..j] 的个数为 x\n    int[][] dp = new int[sLen + 1][tLen + 1];\n    // base case\n    for(int i = 0; i <= sLen; i++){\n        dp[i][0] = 1;\n    }\n\n    for(int j = 1; j <= tLen; j++){\n        for(int i = 1; i <= sLen; i++){\n            // 如果相等\n            if(t.charAt(j - 1) == s.charAt(i - 1)){\n                // 有两种选择：不选择当前字母 dp[i - 1][j] 和选择当前字母 dp[i - 1][j - 1]\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1];\n                // 如果不相等\n            }else {\n                // 只有一种选择：不选当前字母\n                dp[i][j] = dp[i - 1][j];\n            }\n        }\n    }\n    return dp[sLen][tLen];\n}\n```\n\n## 26. 三角形最小路径和 [120]\n\n题目来源：[120. 三角形最小路径和](https://leetcode-cn.com/problems/triangle/)\n\n### 26.1 题目描述\n\n![image-20200910185227369](/pictures/image-20200910185227369.png)\n\n### 26.2 方法一：动态规划\n\n参考 [这里](https://leetcode.wang/leetcode-120-Triangle.html) 做了一些改动。但是这种 dp 空复为 O(n^2)。\n\n为什么..最近做题老是想不到动态规划.. 老想回溯...\n\n```java\npublic int minimumTotal(List<List<Integer>> triangle) {\n    int size = triangle.size();\n    int[][] dp = new int[size][size];\n    // dp[i][j] = x 表示：triangle[i][j] 的最小路径和为 x\n    dp[0][0] = triangle.get(0).get(0);\n\n    // 遍历每一行\n    for(int i = 1; i < size; i++){\n        // 遍历这一行的每一个数\n        for(int j = 0; j <= i; j++){\n            // 这一行的最后一个数\n            if(j == i){\n                dp[i][j] = dp[i - 1][j - 1] + triangle.get(i).get(j);\n            }else if(j == 0){\n                dp[i][j] = dp[i - 1][j] + triangle.get(i).get(j);\n            }else{\n                dp[i][j] = Math.min(dp[i - 1][j], dp[i - 1][j - 1]) + triangle.get(i).get(j);\n            }\n        }\n\n    }\n\n    int min = Integer.MAX_VALUE;\n    for(int i = 0; i < size; i++){\n        min = Math.min(min, dp[size-1][i]);\n    }\n    return min;\n}\n```\n\n### 26.3. 方法一的优化\n\n上面的动态规划 dp 数组是二维数组，但是每一次只用到上一层的数据。所以使用一维的 dp 数组即可。此时，空复是 O(n)。\n\n如果正着更新的话，会把后面要用的值覆盖掉。因此，倒着更新。\n\n```java\npublic int minimumTotal(List<List<Integer>> triangle) {\n    int size = triangle.size();\n    int[] dp = new int[size];\n    dp[0]=triangle.get(0).get(0);\n\n    for(int i = 1; i < size; i++){\n        for(int j = i; j >= 0; j--){\n            if(j == i){\n                dp[j] = dp[j - 1] + triangle.get(i).get(j);\n            }else if(j == 0){\n                dp[j] = dp[j] + triangle.get(i).get(j);\n            }else{\n                dp[j] = Math.min(dp[j - 1], dp[j]) + triangle.get(i).get(j);\n            }\n        }\n    }\n\n    int min = Integer.MAX_VALUE;\n    for(int i = 0; i < size; i++){\n        min = Math.min(min, dp[i]);\n    }\n\n    return min;\n}\n```\n\n## 27. 买卖股票的最佳时机 III [123]\n\n题目来源：[123. 买卖股票的最佳时机 III](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/)\n\n### 27.1. 题目描述\n\n![image-20200914160900975](/pictures/image-20200914160900975.png)\n\n### 27.2. 方法一：DP\n\n参考 [这里](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/solution/mai-mai-gu-piao-zui-jia-shi-ji-iiidong-tai-gui-hua/) 的方法二。\n\n使用二维数组，第二位存储 5 种状态，想不到...\n\n```java\npublic int maxProfit(int[] prices) {\n    if (prices.length < 2) {\n        return 0;\n    }\n    int len = prices.length;\n    // 5 种状态：0 未交易；1 买入一次；2 卖出一次；3 买入2次；卖出2次\n    // dp[i][j] = x 表示：用户处于 j 状态下的钱为 x\n    int[][] dp = new int[len][5];\n    // base case\n    dp[0][0] = 0;\n    dp[0][1] = -prices[0];\n    dp[0][2] = 0;\n    dp[0][3] = -prices[0];\n    dp[0][4] = 0;\n\n    for (int i = 1; i < len; ++i) {\n        dp[i][0] = 0;\n        dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i]);\n        dp[i][2] = Math.max(dp[i - 1][2], dp[i - 1][1] + prices[i]);\n        dp[i][3] = Math.max(dp[i - 1][3], dp[i - 1][2] - prices[i]);\n        dp[i][4] = Math.max(dp[i - 1][4], dp[i - 1][3] + prices[i]);\n    }\n\n    return Math.max(dp[len - 1][2], dp[len - 1][4]);\n}\n```\n\n### 27.3. 方法二：方法一的优化\n\n上面解法中，每一次 dp 数组的更新只会依赖于上一层 dp 数组，因此没必要使用二维数组，使用一维数组，存储上一层数据即可。\n\n```java\npublic int maxProfit(int[] prices) {\n    if (prices.length < 2) {\n        return 0;\n    }\n    int len = prices.length;\n    int[] dp = new int[5];\n    dp[0] = 0;\n    dp[1] = -prices[0];\n    dp[2] = Integer.MIN_VALUE;\n    dp[3] = Integer.MIN_VALUE;\n    dp[4] = Integer.MIN_VALUE;\n\n    for (int i = 1; i < len; ++i) {\n        dp[0] = 0;\n        dp[1] = Math.max(dp[1], dp[0] - prices[i]);\n        dp[2] = Math.max(dp[2], dp[1] + prices[i]);\n        dp[3] = Math.max(dp[3], dp[2] - prices[i]);\n        dp[4] = Math.max(dp[4], dp[3] + prices[i]);\n    }\n    return Math.max(dp[2], dp[4]);\n}\n```\n\n## 28. 参考引用\n\n1. [Wikipedia]([https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92](https://zh.wikipedia.org/wiki/动态规划))\n2. https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/dong-tai-gui-hua-xiang-jie-jin-jie\n3. https://mp.weixin.qq.com/s/7QFapCuvi-2nkh6gREcR9g\n4. https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zui-chang-gong-gong-zi-xu-lie\n5. https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zui-da-zi-shu-zu\n6. https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/dong-tai-gui-hua-zhi-kmp-zi-fu-pi-pei-suan-fa\n7. https://leetcode.wang/leetCode-42-Trapping-Rain-Water.html\n8. https://leetcode.wang/leetCode-32-Longest-Valid-Parentheses.html\n9. https://leetcode.wang/leetCode-89-Gray-Code.html\n\n","slug":"动态规划总结","published":1,"updated":"2020-12-26T12:26:49.154Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5mkxe001xnyl1hj878b3w","content":"<p>本文主要介绍了动态规划的概念、解题框架，并以斐波那契数列、零钱兑换为例，进一步说明动态规划如何运用和理解。另外，本文还解决了LeetCode中部分使用动态规划思想的题目，这部分会持续更新。</p>\n<h2 id=\"1-什么是动态规划？\"><a href=\"#1-什么是动态规划？\" class=\"headerlink\" title=\"1. 什么是动态规划？\"></a>1. 什么是动态规划？</h2><p><a href=\"https://zh.wikipedia.org/wiki/动态规划\" target=\"_blank\" rel=\"noopener\">维基定义</a>：（英语：Dynamic programming，简称DP）是一种在数学、管理科学、计算机科学、经济学和生物信息学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。</p>\n<p>动态规划常常适用于有重叠子问题和最优子结构性质的问题，动态规划方法所耗时间往往远少于朴素解法。</p>\n<p>动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。</p>\n<p>通常许多子问题非常相似，为此动态规划法试图仅仅解决每个子问题一次，从而减少计算量：一旦某个给定子问题的解已经算出，则将其记忆化存储，以便下次需要同一个子问题解之时直接查表。这种做法在重复子问题的数目关于输入的规模呈指数增长时特别有用。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"1-1-适用情况\"><a href=\"#1-1-适用情况\" class=\"headerlink\" title=\"1.1 适用情况\"></a>1.1 适用情况</h3><ol>\n<li>最优子结构性质。如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质（即满足最优化原理）。最优子结构性质为动态规划算法解决问题提供了重要线索。</li>\n<li>无后效性。即子问题的解一旦确定，就不再改变，不受在这之后、包含它的更大的问题的求解决策影响。</li>\n<li>子问题重叠性质。子问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。动态规划算法正是利用了这种子问题的重叠性质，对每一个子问题只计算一次，然后将其计算结果保存在一个表格中，当再次需要计算已经计算过的子问题时，只是在表格中简单地查看一下结果，从而获得较高的效率，降低了时间复杂度。</li>\n</ol>\n<h2 id=\"2-动态规划解题框架\"><a href=\"#2-动态规划解题框架\" class=\"headerlink\" title=\"2. 动态规划解题框架\"></a>2. 动态规划解题框架</h2><p>这一节参考 <a href=\"https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/dong-tai-gui-hua-xiang-jie-jin-jie\" target=\"_blank\" rel=\"noopener\">这里</a> 给出一些对于动态规划的理解和解体框架。</p>\n<p><strong>首先，动态规划问题的一般形式就是求最值</strong>。动态规划其实是运筹学的一种最优化方法，只不过在计算机问题上应用比较多，比如求<strong>最长</strong>递增子序列呀，<strong>最小</strong>编辑距离等。</p>\n<p>既然是要求最值，核心问题是什么呢？<strong>求解动态规划的核心问题是穷举</strong>。因为要求最值，肯定要把所有可行的答案穷举出来，然后在其中找最值。</p>\n<p>动态规划这么简单，就是穷举就完事了？我看到的动态规划问题都很难啊！</p>\n<p>首先，动态规划的穷举有点特别，因为这类问题<strong>存在「重叠子问题」</strong>，如果暴力穷举的话效率会极其低下，所以需要「备忘录」或者「DP table」来优化穷举过程，避免不必要的计算。</p>\n<p>而且，动态规划问题一定会<strong>具备「最优子结构」</strong>，才能通过子问题的最值得到原问题的最值。</p>\n<p>另外，虽然动态规划的核心思想就是穷举求最值，但是问题可以千变万化，穷举所有可行解其实并不是一件容易的事，只有列出<strong>正确的「状态转移方程」</strong>才能正确地穷举。</p>\n<p>以上提到的重叠子问题、最优子结构、状态转移方程就是动态规划三要素。具体什么意思等会会举例详解，但是在实际的算法问题中，<strong>写出状态转移方程是最困难的</strong>，这也就是为什么很多朋友觉得动态规划问题困难的原因，我来提供我研究出来的一个思维框架，辅助你思考状态转移方程：</p>\n<p><strong>明确 base case -&gt; 明确「状态」-&gt; 明确「选择」 -&gt; 定义 dp 数组/函数的含义</strong>。</p>\n<p>按上面的套路走，最后的结果就可以套这个框架：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 初始化 base case</span></span><br><span class=\"line\">dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>][...] = base</span><br><span class=\"line\"><span class=\"comment\"># 进行状态转移</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> 状态<span class=\"number\">1</span> <span class=\"keyword\">in</span> 状态<span class=\"number\">1</span>的所有取值：</span><br><span class=\"line\">    <span class=\"keyword\">for</span> 状态<span class=\"number\">2</span> <span class=\"keyword\">in</span> 状态<span class=\"number\">2</span>的所有取值：</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ...</span><br><span class=\"line\">            dp[状态<span class=\"number\">1</span>][状态<span class=\"number\">2</span>][...] = 求最值(选择<span class=\"number\">1</span>，选择<span class=\"number\">2.</span>..)</span><br></pre></td></tr></table></figure>\n\n<p>下文中的斐波那契数列可以帮助理解动态规划问题，零钱兑换问题使用总结的框架进行流程化求解。</p>\n<h2 id=\"3-以斐波那契数列-509-为例\"><a href=\"#3-以斐波那契数列-509-为例\" class=\"headerlink\" title=\"3. 以斐波那契数列 [509] 为例\"></a>3. 以斐波那契数列 [509] 为例</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/fibonacci-number/\" target=\"_blank\" rel=\"noopener\">509. 斐波那契数</a></p>\n<h3 id=\"3-1-题目描述\"><a href=\"#3-1-题目描述\" class=\"headerlink\" title=\"3.1 题目描述\"></a>3.1 题目描述</h3><p>斐波那契数，通常用 F(n) 表示，形成的序列称为斐波那契数列。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：</p>\n<p>F(0) = 0,   F(1) = 1<br>F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.<br>给定 N，计算 F(N)。</p>\n<p>示例 1：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：2</span><br><span class=\"line\">输出：1</span><br><span class=\"line\">解释：F(2) = F(1) + F(0) = 1 + 0 = 1.</span><br></pre></td></tr></table></figure>\n\n\n<p>示例 2：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：3</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：F(3) = F(2) + F(1) = 1 + 1 = 2.</span><br></pre></td></tr></table></figure>\n\n\n<p>提示：</p>\n<p>0 ≤ N ≤ 30</p>\n<h3 id=\"3-2-方法一：暴力递归\"><a href=\"#3-2-方法一：暴力递归\" class=\"headerlink\" title=\"3.2 方法一：暴力递归\"></a>3.2 方法一：暴力递归</h3><p>斐波那契数列的数学形式就是递归的，写成代码就是这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(N == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(N == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fib(N - <span class=\"number\">1</span>) + fib(N - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个不用多说了，学校老师讲递归的时候似乎都是拿这个举例。我们也知道这样写代码虽然简洁易懂，但是十分低效，低效在哪里？假设 n = 20，画出的递归树如下：</p>\n<img src=\"/pictures/1-1595902107828.jpg\" alt=\"img\" style=\"zoom:33%;\" />\n\n<p>这个递归树怎么理解？就是说想要计算原问题 <code>f(20)</code>，我就得先计算出子问题 <code>f(19)</code> 和 <code>f(18)</code>，然后要计算 <code>f(19)</code>，我就要先算出子问题 <code>f(18)</code> 和 <code>f(17)</code>，以此类推。最后遇到 <code>f(1)</code> 或者 <code>f(2)</code> 的时候，结果已知，就能直接返回结果，递归树不再向下生长了。</p>\n<p><strong>递归算法的时间复杂度怎么计算？就是用子问题个数乘以解决一个子问题需要的时间。</strong></p>\n<p>首先计算子问题个数，即递归树中节点的总数。显然二叉树节点总数为指数级别，所以子问题个数为 O(2^n)。</p>\n<p>然后计算解决一个子问题的时间，在本算法中，没有循环，只有 <code>f(n - 1) + f(n - 2)</code> 一个加法操作，时间为 O(1)。</p>\n<p>所以，这个算法的时间复杂度为二者相乘，即 O(2^n)，指数级别，爆炸。</p>\n<p>观察递归树，很明显发现了算法低效的原因：存在大量重复计算，比如 <code>f(18)</code> 被计算了两次，而且你可以看到，以 <code>f(18)</code> 为根的这个递归树体量巨大，多算一遍，会耗费巨大的时间。更何况，还不止 <code>f(18)</code> 这一个节点被重复计算，所以这个算法及其低效。</p>\n<p>这就是动态规划问题的第一个性质：<strong>重叠子问题</strong>。下面，我们想办法解决这个问题。</p>\n<h3 id=\"3-3-方法二：带备忘录的递归解法\"><a href=\"#3-3-方法二：带备忘录的递归解法\" class=\"headerlink\" title=\"3.3 方法二：带备忘录的递归解法\"></a>3.3 方法二：带备忘录的递归解法</h3><p>明确了问题，其实就已经把问题解决了一半。即然耗时的原因是重复计算，那么我们可以造一个「备忘录」，每次算出某个子问题的答案后别急着返回，先记到「备忘录」里再返回；每次遇到一个子问题先去「备忘录」里查一查，如果发现之前已经解决过这个问题了，直接把答案拿出来用，不要再耗时去计算了。</p>\n<p>一般使用一个数组充当这个「备忘录」，当然你也可以使用哈希表（字典），思想都是一样的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] memo = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(N == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\">    memo[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper(memo, N);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] memo, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 递归结束条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果已经计算过</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(memo[n] != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> memo[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    memo[n] = helper(memo, n - <span class=\"number\">1</span>) + helper(memo, n - <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> memo[n];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于本算法不存在冗余计算，子问题就是 <code>f(1)</code>, <code>f(2)</code>, <code>f(3)</code> … <code>f(20)</code>，数量和输入规模 n = 20 成正比，所以子问题个数为 O(n)。</p>\n<p>解决一个子问题的时间，同上，没有什么循环，时间为 O(1)。</p>\n<p>所以，本算法的时间复杂度是 O(n)。比起暴力算法，是降维打击。</p>\n<p>至此，带备忘录的递归解法的效率已经和迭代的动态规划解法一样了。实际上，这种解法和迭代的动态规划已经差不多了，只不过这种方法叫做「自顶向下」，动态规划叫做「自底向上」。</p>\n<p>啥叫「自顶向下」？注意我们刚才画的递归树（或者说图），是从上向下延伸，都是从一个规模较大的原问题比如说 <code>f(20)</code>，向下逐渐分解规模，直到 <code>f(1)</code> 和 <code>f(2)</code> 这两个 base case，然后逐层返回答案，这就叫「自顶向下」。</p>\n<p>啥叫「自底向上」？反过来，我们直接从最底下，最简单，问题规模最小的 <code>f(1)</code> 和 <code>f(2)</code> 开始往上推，直到推到我们想要的答案 <code>f(20)</code>，这就是动态规划的思路，这也是为什么动态规划一般都脱离了递归，而是由循环迭代完成计算。</p>\n<h3 id=\"3-4-方法三：动态规划\"><a href=\"#3-4-方法三：动态规划\" class=\"headerlink\" title=\"3.4 方法三：动态规划\"></a>3.4 方法三：动态规划</h3><p>有了上一步「备忘录」的启发，我们可以把这个「备忘录」独立出来成为一张表，就叫做 DP table 吧，在这张表上完成「自底向上」的推算。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(N == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(N == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= N; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 状态转移方程</span></span><br><span class=\"line\">        dp[i] = dp[i - <span class=\"number\">1</span>] + dp[i - <span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[N];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际上，带备忘录的递归解法中的「备忘录」，最终完成后就是这个 DP table，所以说这两种解法其实是差不多的，大部分情况下，效率也基本相同。</p>\n<p>这里，引出「状态转移方程」这个名词，实际上就是描述问题结构的数学形式：</p>\n<img src=\"/pictures/fib.png\" alt=\"img\" style=\"zoom: 67%;\" />\n\n<p>为啥叫「状态转移方程」？其实就是为了听起来高端。你把 <code>f(n)</code> 想做一个状态 <code>n</code>，这个状态 <code>n</code> 是由状态 <code>n - 1</code> 和状态 <code>n - 2</code> 相加转移而来，这就叫状态转移，仅此而已。</p>\n<p><strong>千万不要看不起暴力解，动态规划问题最困难的就是写出这个暴力解，即状态转移方程</strong>。只要写出暴力解，优化方法无非是用备忘录或者 DP table，再无奥妙可言。</p>\n<p>这个例子的最后，讲一个细节优化。细心的读者会发现，根据斐波那契数列的状态转移方程，当前状态只和之前的两个状态有关，其实并不需要那么长的一个 DP table 来存储所有的状态，只要想办法存储之前的两个状态就行了。所以，可以进一步优化，把空间复杂度降为 O(1)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">fib3</span><span class=\"params\">(<span class=\"keyword\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(N == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(N == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pre = <span class=\"number\">0</span>, curr = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= N; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = pre + curr;</span><br><span class=\"line\">        pre = curr;</span><br><span class=\"line\">        curr = sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个技巧就是所谓的「<strong>状态压缩</strong>」，如果我们发现每次状态转移只需要 DP table 中的一部分，那么可以尝试用状态压缩来缩小 DP table 的大小，只记录必要的数据，上述例子就相当于把DP table 的大小从 <code>n</code> 缩小到 2。后续的动态规划章节中我们还会看到这样的例子，一般来说是把一个二维的 DP table 压缩成一维，即把空间复杂度从 O(n^2) 压缩到 O(n)。</p>\n<p>有人会问，动态规划的另一个重要特性「最优子结构」，怎么没有涉及？下面会涉及。斐波那契数列的例子严格来说不算动态规划，因为没有涉及求最值，以上旨在说明重叠子问题的消除方法，演示得到最优解法逐步求精的过程。下面，看第二个例子，凑零钱问题。</p>\n<h2 id=\"4-框架求解零钱兑换-322\"><a href=\"#4-框架求解零钱兑换-322\" class=\"headerlink\" title=\"4. 框架求解零钱兑换 [322]\"></a>4. 框架求解零钱兑换 [322]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/coin-change/\" target=\"_blank\" rel=\"noopener\">322. 零钱兑换</a></p>\n<h3 id=\"4-1-题目描述\"><a href=\"#4-1-题目描述\" class=\"headerlink\" title=\"4.1 题目描述\"></a>4.1 题目描述</h3><p>给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。</p>\n<p>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: coins = [1, 2, 5], amount = 11</span><br><span class=\"line\">输出: 3 </span><br><span class=\"line\">解释: 11 = 5 + 5 + 1</span><br></pre></td></tr></table></figure>\n\n<p>示例 2：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: coins = [2], amount = 3</span><br><span class=\"line\">输出: -1</span><br></pre></td></tr></table></figure>\n\n\n<p>说明:<br>你可以认为每种硬币的数量是无限的。</p>\n<h3 id=\"4-2-题目分析与代码\"><a href=\"#4-2-题目分析与代码\" class=\"headerlink\" title=\"4.2 题目分析与代码\"></a>4.2 题目分析与代码</h3><p>分析参考 <a href=\"https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/dong-tai-gui-hua-xiang-jie-jin-jie#er-cou-ling-qian-wen-ti\" target=\"_blank\" rel=\"noopener\">这里</a> , 使用上文中总结的动态规划框架。</p>\n<p>首先，这是一个动态规划问题。满足三个条件：</p>\n<ol>\n<li><p>最优子结构。即问题的最优解所包含的子问题的解也是最优的，且子问题间必须相互独立。什么叫做相互独立？我用一个直观的例子来讲解。</p>\n<p>比如说，假设你考试，每门科目的成绩都是互相独立的。你的原问题是考出最高的总成绩，那么你的子问题就是要把语文考到最高，数学考到最高…… 为了每门课考到最高，你要把每门课相应的选择题分数拿到最高，填空题分数拿到最高…… 当然，最终就是你每门课都是满分，这就是最高的总成绩。</p>\n<p>得到了正确的结果：最高的总成绩就是总分。因为这个过程符合最优子结构，“每门科目考到最高”这些子问题是互相独立，互不干扰的。</p>\n<p>但是，如果加一个条件：你的语文成绩和数学成绩会互相制约，数学分数高，语文分数就会降低，反之亦然。这样的话，显然你能考到的最高总成绩就达不到总分了，按刚才那个思路就会得到错误的结果。因为子问题并不独立，语文数学成绩无法同时最优，所以最优子结构被破坏。</p>\n<p>回到凑零钱问题，为什么说它符合最优子结构呢？比如你想求 <code>amount = 11</code> 时的最少硬币数（原问题），如果你知道凑出 <code>amount = 10</code> 的最少硬币数（子问题），你只需要把子问题的答案加一（再选一枚面值为 1 的硬币）就是原问题的答案。因为硬币的数量是没有限制的，所以子问题之间没有相互制约，是互相独立的。</p>\n</li>\n<li><p>无后效性。即子问题的解一旦确定，就不再改变，不受在这之后、包含它的更大的问题的求解决策影响。</p>\n</li>\n<li><p>子问题重叠性质。子问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。</p>\n</li>\n</ol>\n<p>那么，既然知道了这是个动态规划问题，就要思考<strong>如何列出正确的状态转移方程</strong>？</p>\n<p>1、<strong>确定 base case</strong>，这个很简单，显然目标金额 <code>amount</code> 为 0 时算法返回 0，因为不需要任何硬币就已经凑出目标金额了。</p>\n<p>2、<strong>确定「状态」，也就是原问题和子问题中会变化的变量</strong>。由于硬币数量无限，硬币的面额也是题目给定的，只有目标金额会不断地向 base case 靠近，所以唯一的「状态」就是目标金额 <code>amount</code>。</p>\n<p>3、<strong>确定「选择」，也就是导致「状态」产生变化的行为</strong>。<em>目标金额为什么变化呢，因为你在选择硬币，你每选择一枚硬币，就相当于减少了目标金额。</em> 所以说 <strong>所有硬币的面值</strong> ，就是你的「选择」。</p>\n<p>4、<strong>明确</strong> <strong><code>dp</code></strong> <strong>函数/数组的定义</strong>。我们这里讲的是自顶向下的解法，所以会有一个递归的 <code>dp</code> 函数，一般来说函数的参数就是状态转移中会变化的量，也就是上面说到的「状态」；函数的返回值就是题目要求我们计算的量。就本题来说，状态只有一个，即「目标金额」，题目要求我们计算凑出目标金额所需的最少硬币数量。所以我们可以这样定义 <code>dp</code> 函数：</p>\n<p><code>dp(n)</code> 的定义：输入一个目标金额 <code>n</code>，返回凑出目标金额 <code>n</code> 的最少硬币数量。</p>\n<h4 id=\"4-2-1-先使用暴力递归\"><a href=\"#4-2-1-先使用暴力递归\" class=\"headerlink\" title=\"4.2.1 先使用暴力递归\"></a>4.2.1 先使用暴力递归</h4><p>搞清楚上面这几个关键点，解法的伪码就可以写出来了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 伪码框架</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">coinChange</span><span class=\"params\">(coins: List[int], amount: int)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 定义：要凑出金额 n，至少要 dp(n) 个硬币</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dp</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 做选择，选择需要硬币最少的那个结果</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> coin <span class=\"keyword\">in</span> coins:</span><br><span class=\"line\">            res = min(res, <span class=\"number\">1</span> + dp(n - coin))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 题目要求的最终结果是 dp(amount)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp(amount)</span><br></pre></td></tr></table></figure>\n\n<p>根据伪码，我们加上 base case 即可得到最终的答案。显然目标金额为 0 时，所需硬币数量为 0；当目标金额小于 0 时，无解，返回 -1：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">coinChange</span><span class=\"params\">(coins: List[int], amount: int)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dp</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># base case</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n &lt; <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"comment\"># 求最小值，所以初始化为正无穷</span></span><br><span class=\"line\">        res = float(<span class=\"string\">'INF'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> coin <span class=\"keyword\">in</span> coins:</span><br><span class=\"line\">            subproblem = dp(n - coin)</span><br><span class=\"line\">            <span class=\"comment\"># 子问题无解，跳过</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> subproblem == <span class=\"number\">-1</span>: <span class=\"keyword\">continue</span></span><br><span class=\"line\">            res = min(res, <span class=\"number\">1</span> + subproblem)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res <span class=\"keyword\">if</span> res != float(<span class=\"string\">'INF'</span>) <span class=\"keyword\">else</span> <span class=\"number\">-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp(amount)</span><br></pre></td></tr></table></figure>\n\n<p>据此，我们可以得出状态转移方程如下图，以上解法属于暴力递归解法。</p>\n<img src=\"/pictures/coin.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n<p><strong>递归算法的时间复杂度分析：子问题总数 x 每个子问题的时间</strong>。</p>\n<p>子问题总数为递归树节点个数，这个比较难看出来，是 O(n^k)，总之是指数级别的。每个子问题中含有一个 for 循环，复杂度为 O(k)。所以总时间复杂度为 O(k * n^k)，指数级别。</p>\n<h4 id=\"4-2-2-带备忘录的递归解法，消除重叠子问题\"><a href=\"#4-2-2-带备忘录的递归解法，消除重叠子问题\" class=\"headerlink\" title=\"4.2.2 带备忘录的递归解法，消除重叠子问题\"></a>4.2.2 带备忘录的递归解法，消除重叠子问题</h4><p>显然，上述解法中存在重叠子问题，比如<code>amount = 11, coins = {1,2,5}</code> 时画出递归树看看：</p>\n<img src=\"/pictures/5-1595987693352.jpg\" alt=\"img\" style=\"zoom: 33%;\" />\n\n<p>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">coinChange</span><span class=\"params\">(coins: List[int], amount: int)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 备忘录</span></span><br><span class=\"line\">    memo = dict()</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dp</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 查备忘录，避免重复计算</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n <span class=\"keyword\">in</span> memo: <span class=\"keyword\">return</span> memo[n]</span><br><span class=\"line\">        <span class=\"comment\"># base case</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n &lt; <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">        res = float(<span class=\"string\">'INF'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> coin <span class=\"keyword\">in</span> coins:</span><br><span class=\"line\">            subproblem = dp(n - coin)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> subproblem == <span class=\"number\">-1</span>: <span class=\"keyword\">continue</span></span><br><span class=\"line\">            res = min(res, <span class=\"number\">1</span> + subproblem)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 记入备忘录</span></span><br><span class=\"line\">        memo[n] = res <span class=\"keyword\">if</span> res != float(<span class=\"string\">'INF'</span>) <span class=\"keyword\">else</span> <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> memo[n]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp(amount)</span><br></pre></td></tr></table></figure>\n\n<p>很显然「备忘录」大大减小了子问题数目，完全消除了子问题的冗余，所以子问题总数不会超过金额数 <code>n</code>，即子问题数目为 O(n)。处理一个子问题的时间不变，仍是 O(k)，所以总的时间复杂度是 O(kn)。</p>\n<h4 id=\"4-2-3-动态规划，自底向上\"><a href=\"#4-2-3-动态规划，自底向上\" class=\"headerlink\" title=\"4.2.3 动态规划，自底向上\"></a>4.2.3 动态规划，自底向上</h4><p>当然，我们也可以自底向上使用 dp table 来消除重叠子问题，关于「状态」「选择」和 base case 与之前没有区别，<code>dp</code> 数组的定义和刚才 <code>dp</code> 函数类似，也是把「状态」，也就是目标金额作为变量。不过 <code>dp</code> 函数体现在函数参数，而 <code>dp</code> 数组体现在数组索引：</p>\n<p><strong><code>dp</code></strong> <strong>数组的定义：当目标金额为</strong> <strong><code>i</code></strong> <strong>时，至少需要</strong> <strong><code>dp[i]</code></strong> <strong>枚硬币凑出</strong>。</p>\n<p>根据我们文章开头给出的动态规划代码框架可以写出如下解法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">coinChange</span><span class=\"params\">(<span class=\"keyword\">int</span>[] coins, <span class=\"keyword\">int</span> amount)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// dp[i] = n 表示：当目标金额为 i 时，至少需要 n 枚硬币</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[amount+<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 初始化dp数组，初始值为 amount+1, 因为dp 数组最大值取到 amount</span></span><br><span class=\"line\">    Arrays.fill(dp, amount+<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//base case</span></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= amount; j++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 内层for求所有子问题的最小值</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> coin : coins) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 子问题无解，跳过</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j - coin &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dp[j] = dp[j] &lt; dp[j - coin] + <span class=\"number\">1</span> ? dp[j] : dp[j - coin] + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[amount] == amount+<span class=\"number\">1</span> ? -<span class=\"number\">1</span> : dp[amount];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>PS：为啥 <code>dp</code> 数组初始化为 <code>amount + 1</code> 呢，因为凑成 <code>amount</code> 金额的硬币数最多只可能等于 <code>amount</code>（全用 1 元面值的硬币），所以初始化为 <code>amount + 1</code> 就相当于初始化为正无穷，便于后续取最小值。</p>\n<h2 id=\"5-动态规划总结\"><a href=\"#5-动态规划总结\" class=\"headerlink\" title=\"5. 动态规划总结\"></a>5. 动态规划总结</h2><p>第一个斐波那契数列的问题，解释了如何通过「备忘录」或者「dp table」的方法来优化递归树，并且明确了这两种方法本质上是一样的，只是自顶向下和自底向上的不同而已。</p>\n<p>第二个凑零钱的问题，展示了如何流程化确定「状态转移方程」，只要通过状态转移方程写出暴力递归解，剩下的也就是优化递归树，消除重叠子问题而已。</p>\n<p><strong>计算机解决问题其实没有任何奇技淫巧，它唯一的解决办法就是穷举</strong>，穷举所有可能性。算法设计无非就是先思考“如何穷举”，然后再追求“如何聪明地穷举”。</p>\n<p>列出动态转移方程，就是在解决“如何穷举”的问题。之所以说它难，一是因为很多穷举需要递归实现，二是因为有的问题本身的解空间复杂，不那么容易穷举完整。</p>\n<p>备忘录、DP table 就是在追求“如何聪明地穷举”。用空间换时间的思路，是降低时间复杂度的不二法门，除此之外，试问，还能玩出啥花活？</p>\n<p>之后我们会有一章专门讲解动态规划问题，如果有任何问题都可以随时回来重读本文，希望读者在阅读每个题目和解法时，多往「状态」和「选择」上靠，才能对这套框架产生自己的理解，运用自如。</p>\n<h2 id=\"6-使用动态规划的题目列表\"><a href=\"#6-使用动态规划的题目列表\" class=\"headerlink\" title=\"6. 使用动态规划的题目列表\"></a>6. 使用动态规划的题目列表</h2><p>本文中使用动态规划解决的 LeetCode 题目列表如下，持续更新中~</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">#</th>\n<th align=\"center\">Title</th>\n<th align=\"center\">Remark</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">509</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/fibonacci-number/\" target=\"_blank\" rel=\"noopener\">斐波那契数</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">322</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/coin-change/\" target=\"_blank\" rel=\"noopener\">零钱兑换</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">300</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/longest-increasing-subsequence/\" target=\"_blank\" rel=\"noopener\">最长上升子序列</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">1143</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/longest-common-subsequence/\" target=\"_blank\" rel=\"noopener\">最长公共子序列</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">53</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/maximum-subarray/\" target=\"_blank\" rel=\"noopener\">最大子序和</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">72</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/edit-distance/\" target=\"_blank\" rel=\"noopener\">编辑距离</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">10</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/regular-expression-matching/\" target=\"_blank\" rel=\"noopener\">正则表达式匹配</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">44</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/wildcard-matching/\" target=\"_blank\" rel=\"noopener\">通配符匹配</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">62</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/unique-paths/\" target=\"_blank\" rel=\"noopener\">不同路径</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">63</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/unique-paths-ii/\" target=\"_blank\" rel=\"noopener\">不同路径 II</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">28</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/implement-strstr/\" target=\"_blank\" rel=\"noopener\">实现 strStr()</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">42</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/trapping-rain-water/\" target=\"_blank\" rel=\"noopener\">接雨水</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">32</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/longest-valid-parentheses/\" target=\"_blank\" rel=\"noopener\">最长有效括号</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">53</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/maximum-subarray/\" target=\"_blank\" rel=\"noopener\">最大子序和</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">64</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/minimum-path-sum/\" target=\"_blank\" rel=\"noopener\">最小路径和</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">85</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/maximal-rectangle/\" target=\"_blank\" rel=\"noopener\">最大矩形</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">87</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/scramble-string/\" target=\"_blank\" rel=\"noopener\">扰乱字符串</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">89</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/gray-code/\" target=\"_blank\" rel=\"noopener\">格雷编码</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">91</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/decode-ways/\" target=\"_blank\" rel=\"noopener\">解码方法</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">97</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/interleaving-string/\" target=\"_blank\" rel=\"noopener\">交错字符串</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">115</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/distinct-subsequences/\" target=\"_blank\" rel=\"noopener\">不同的子序列</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">120</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/triangle/\" target=\"_blank\" rel=\"noopener\">三角形最小路径和</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">123</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/\" target=\"_blank\" rel=\"noopener\">买卖股票的最佳时机 III</a></td>\n<td align=\"center\">Very Hard</td>\n</tr>\n</tbody></table>\n<h2 id=\"7-例题：最长上升子序列-300\"><a href=\"#7-例题：最长上升子序列-300\" class=\"headerlink\" title=\"7. 例题：最长上升子序列 [300]\"></a>7. 例题：最长上升子序列 [300]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/longest-increasing-subsequence/\" target=\"_blank\" rel=\"noopener\">300. 最长上升子序列</a></p>\n<h3 id=\"7-1-题目描述\"><a href=\"#7-1-题目描述\" class=\"headerlink\" title=\"7.1 题目描述\"></a>7.1 题目描述</h3><p>给定一个无序的整数数组，找到其中最长上升子序列的长度。</p>\n<p>示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [10,9,2,5,3,7,101,18]</span><br><span class=\"line\">输出: 4 </span><br><span class=\"line\">解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。</span><br></pre></td></tr></table></figure>\n\n\n<p>说明:</p>\n<p>可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。<br>你算法的时间复杂度应该为 O(n2) 。<br>进阶: 你能将算法的时间复杂度降低到 O(n log n) 吗?</p>\n<p>注意「子序列」和「子串」这两个名词的区别，子串一定是连续的，而子序列不一定是连续的。</p>\n<h3 id=\"7-2-题目分析\"><a href=\"#7-2-题目分析\" class=\"headerlink\" title=\"7.2 题目分析\"></a>7.2 题目分析</h3><p>本题分析参考 <a href=\"https://mp.weixin.qq.com/s/7QFapCuvi-2nkh6gREcR9g\" target=\"_blank\" rel=\"noopener\">这里</a> .</p>\n<p>最长递增子序列（Longest Increasing Subsequence，简写 LIS）是非常经典的一个算法问题，比较容易想到的是动态规划解法，时间复杂度 O(N^2)，我们借这个问题来由浅入深讲解如何找状态转移方程，如何写出动态规划解法。比较难想到的是利用二分查找，时间复杂度是 O(NlogN)，我们通过一种简单的纸牌游戏来辅助理解这种巧妙的解法。</p>\n<h3 id=\"7-3-方法一：动态规划（如何找到状态转移关系）\"><a href=\"#7-3-方法一：动态规划（如何找到状态转移关系）\" class=\"headerlink\" title=\"7.3 方法一：动态规划（如何找到状态转移关系）\"></a>7.3 方法一：动态规划（如何找到状态转移关系）</h3><p>动态规划的难点本来就在于寻找正确的状态转移方程，本文就借助经典的「最长递增子序列问题」来讲一讲设计动态规划的通用技巧：<strong>数学归纳思想</strong>。</p>\n<p>相信大家对数学归纳法都不陌生，高中就学过，而且思路很简单。比如我们想证明一个数学结论，那么<strong>我们先假设这个结论在 k 时成立，然后根据这个假设，想办法推导证明出 <code>k=n</code> 的时候此结论也成立</strong>。如果能够证明出来，那么就说明这个结论对于 <code>k</code> 等于任何数都成立。</p>\n<p>类似的，我们设计动态规划算法，不是需要一个 dp 数组吗？我们可以假设 <code>dp[0...i-1]</code> 都已经被算出来了，然后问自己：怎么通过这些结果算出 <code>dp[i]</code>？</p>\n<p>直接拿最长递增子序列这个问题举例你就明白了。不过，首先要定义清楚 dp 数组的含义，即 <code>dp[i]</code> 的值到底代表着什么？</p>\n<p><strong>我们的定义是这样的：<code>dp[i]</code> 表示以 <code>nums[i]</code> 这个数结尾的最长递增子序列的长度。</strong></p>\n<p>PS：<strong>为什么这样定义呢？</strong> 这是解决子序列问题的一个套路，后文动态规划之子序列问题解题模板 总结了几种常见套路。你读完本章所有的动态规划问题，就会发现 <code>dp</code> 数组的定义方法也就那几种。</p>\n<p>反过来想，如果 <code>dp[i]</code> 表示 <code>nums[0...i]</code> 这个数组中的最长递增子序列的长度，当求得 <code>dp[i]</code> 时，想要求出 <code>dp[i+1]</code> 是不行的，因为递增子序列是从数组中选出的，知道 <code>dp[i]</code> 并不能确定当前选择的是哪几个数字，当然也不知道选出的递增子序列最后一位，这样是没法推出 <code>dp[i+1]</code> 的。但如果我们定义 <code>dp[i]</code> 表示以<code>nums[i]</code> 结尾的最长递增子序列的长度，就可以明确知道选出的递增子序列的最后一位，从而推出 <code>dp[i]</code> . 只有这样定义才能将 <code>dp[i+1]</code> 和 <code>dp[i]</code> 建立起联系，利用数学归纳法写出状态转移方程。</p>\n<p>根据这个定义，我们就可以推出 base case：<code>dp[i]</code> 初始值为 1，因为以 <code>nums[i]</code> 结尾的最长递增子序列起码要包含它自己。</p>\n<p>根据这个定义，我们的最终结果（子序列的最大长度）应该是 dp 数组中的最大值。</p>\n<p>那么我们应该怎么设计算法逻辑来正确计算每个 <code>dp[i]</code> 呢？</p>\n<p>这就是动态规划的重头戏了，要思考如何设计算法逻辑进行状态转移，才能正确运行呢？这里就可以使用数学归纳的思想：</p>\n<p><strong>假设我们已经知道了 <code>dp[0..4]</code> 的所有结果，我们如何通过这些已知结果推出 <code>dp[5]</code> 呢</strong>？</p>\n<p>根据刚才我们对 <code>dp</code> 数组的定义，现在想求 <code>dp[5]</code> 的值，也就是想求以 <code>nums[5]</code> 为结尾的最长递增子序列。</p>\n<p><strong><code>nums[5] = 3</code>，既然是递增子序列，我们只要找到前面那些结尾比 3 小的子序列，然后把 3 接到最后，就可以形成一个新的递增子序列，而且这个新的子序列长度加一</strong>。</p>\n<p>显然，可能形成很多种新的子序列，但是我们只选择最长的那一个，把最长子序列的长度作为 <code>dp[5]</code> 的值即可。</p>\n<p>最终代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLIS</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// dp[i] = n 表示：以 nums[i] 这个数字结尾的最长上升子序列的长度（想不到）</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\">    <span class=\"comment\">// 初始化，最长上升子序列最少为数字本身，故初始化为1</span></span><br><span class=\"line\">    Arrays.fill(dp, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[j] &lt; nums[i])&#123;</span><br><span class=\"line\">                dp[i] = Math.max(dp[i], dp[j]+<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">        res = Math.max(res, dp[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此，这道题就解决了，时间复杂度 O(N^2)。总结一下如何找到动态规划的状态转移关系：</p>\n<p><strong>1、</strong>明确 <code>dp</code> 数组所存数据的含义。这一步对于任何动态规划问题都很重要，如果不得当或者不够清晰，会阻碍之后的步骤。</p>\n<p><strong>2、</strong>根据 <code>dp</code> 数组的定义，运用数学归纳法的思想，假设 <code>dp[0...i-1]</code> 都已知，想办法求出 <code>dp[i]</code>，一旦这一步完成，整个题目基本就解决了。</p>\n<p>但如果无法完成这一步，很可能就是 <code>dp</code> 数组的定义不够恰当，需要重新定义 <code>dp</code> 数组的含义；或者可能是 <code>dp</code> 数组存储的信息还不够，不足以推出下一步的答案，需要把 <code>dp</code> 数组扩大成二维数组甚至三维数组。</p>\n<h3 id=\"7-4-方法二：二分查找\"><a href=\"#7-4-方法二：二分查找\" class=\"headerlink\" title=\"7.4 方法二：二分查找\"></a>7.4 方法二：二分查找</h3><p>详解请看：<a href=\"https://mp.weixin.qq.com/s/7QFapCuvi-2nkh6gREcR9g##\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/7QFapCuvi-2nkh6gREcR9g##</a></p>\n<p>这个解法的时间复杂度为 O(NlogN)，但是说实话，正常人基本想不到这种解法（也许玩过某些纸牌游戏的人可以想出来）。所以大家了解一下就好，正常情况下能够给出动态规划解法就已经很不错了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLIS</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] top = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\">    <span class=\"comment\">// 牌初始堆数定义为0</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> piles = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 要处理的扑克牌</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> poker = nums[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//*********** 二分查找：搜索左侧边界 ***************/</span></span><br><span class=\"line\">        <span class=\"comment\">// piles 表示堆数，即就是数组的长度；如果写成 right = piles + 1, 当 nums=[0] 时返回 0， 正确结果是 1</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = piles;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(top[mid] == poker)&#123;</span><br><span class=\"line\">                right = mid;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(top[mid] &gt; poker)&#123;</span><br><span class=\"line\">                right = mid;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(top[mid] &lt; poker)&#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 牌比每一个都大，则新建一个堆</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left == piles)&#123;</span><br><span class=\"line\">            piles++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 牌比每一个都小、或者找到合适位置，放入 top 数组即可</span></span><br><span class=\"line\">        top[left] = poker;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> piles;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-例题：最长公共子序列-1143\"><a href=\"#8-例题：最长公共子序列-1143\" class=\"headerlink\" title=\"8. 例题：最长公共子序列 [1143]\"></a>8. 例题：最长公共子序列 [1143]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/longest-common-subsequence/\" target=\"_blank\" rel=\"noopener\">1143. 最长公共子序列</a></p>\n<h3 id=\"8-1-题目描述\"><a href=\"#8-1-题目描述\" class=\"headerlink\" title=\"8.1 题目描述\"></a>8.1 题目描述</h3><p>给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列的长度。</p>\n<p>若这两个字符串没有公共子序列，则返回 0。 </p>\n<p>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：text1 = <span class=\"string\">\"abcde\"</span>, text2 = <span class=\"string\">\"ace\"</span> </span><br><span class=\"line\">输出：3  </span><br><span class=\"line\">解释：最长公共子序列是 <span class=\"string\">\"ace\"</span>，它的长度为 3。</span><br></pre></td></tr></table></figure>\n\n\n<p>示例 2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：text1 = <span class=\"string\">\"abc\"</span>, text2 = <span class=\"string\">\"def\"</span></span><br><span class=\"line\">输出：0</span><br><span class=\"line\">解释：两个字符串没有公共子序列，返回 0。</span><br></pre></td></tr></table></figure>\n\n\n<p>提示:</p>\n<p>1 &lt;= text1.length &lt;= 1000<br>1 &lt;= text2.length &lt;= 1000<br>输入的字符串只含有小写英文字符。</p>\n<h3 id=\"8-2-题目分析\"><a href=\"#8-2-题目分析\" class=\"headerlink\" title=\"8.2 题目分析\"></a>8.2 题目分析</h3><p>最长公共子序列（Longest Common Subsequence，简称 LCS）是一道非常经典的面试题目，因为它的解法是典型的二维动态规划，大部分比较困难的字符串问题都和这个问题一个套路，比如说编辑距离。而且，这个算法稍加改造就可以用于解决其他问题，所以说 LCS 算法是值得掌握的。</p>\n<p>详细分析参考：<a href=\"https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zui-chang-gong-gong-zi-xu-lie\" target=\"_blank\" rel=\"noopener\">https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zui-chang-gong-gong-zi-xu-lie</a></p>\n<h3 id=\"8-3-代码\"><a href=\"#8-3-代码\" class=\"headerlink\" title=\"8.3 代码\"></a>8.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestCommonSubsequence</span><span class=\"params\">(String text1, String text2)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len1 = text1.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len2 = text2.length();</span><br><span class=\"line\">    <span class=\"comment\">// 让 text1,text2 的索引从 1 开始</span></span><br><span class=\"line\">    <span class=\"comment\">// dp[i][j] = n 表示：对于 text1[1...i] 和 text2[1...j] 的最长公共子序列为 n</span></span><br><span class=\"line\">    <span class=\"comment\">//base case 是：dp[0][..] 和 dp[..][0] 初始化为0</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len1+<span class=\"number\">1</span>][len2+<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= len1; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= len2; j++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//状态转移</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(text1.charAt(i-<span class=\"number\">1</span>) == text2.charAt(j-<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                dp[i][j] = dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                dp[i][j] = Math.max(dp[i-<span class=\"number\">1</span>][j], dp[i][j-<span class=\"number\">1</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[len1][len2];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-例题：最大子序列和-53\"><a href=\"#9-例题：最大子序列和-53\" class=\"headerlink\" title=\"9. 例题：最大子序列和 [53]\"></a>9. 例题：最大子序列和 [53]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/maximum-subarray/\" target=\"_blank\" rel=\"noopener\">53. 最大子序和</a></p>\n<h3 id=\"9-1-题目描述\"><a href=\"#9-1-题目描述\" class=\"headerlink\" title=\"9.1 题目描述\"></a>9.1 题目描述</h3><p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class=\"line\">输出: 6</span><br><span class=\"line\">解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</span><br></pre></td></tr></table></figure>\n\n\n<p>进阶:</p>\n<p>如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。</p>\n<h3 id=\"9-2-题目分析\"><a href=\"#9-2-题目分析\" class=\"headerlink\" title=\"9.2 题目分析\"></a>9.2 题目分析</h3><p>参考：<a href=\"https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zui-da-zi-shu-zu\" target=\"_blank\" rel=\"noopener\">https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zui-da-zi-shu-zu</a></p>\n<p>解决这个问题需要动态规划技巧，但是 <code>dp</code> 数组的定义比较特殊。按照我们常规的动态规划思路，一般是这样定义 <code>dp</code> 数组：</p>\n<p><strong><code>nums[0..i]</code></strong> <strong>中的「最大的子数组和」为</strong> <strong><code>dp[i]</code></strong>。</p>\n<p>如果这样定义的话，整个 <code>nums</code> 数组的「最大子数组和」就是 <code>dp[n-1]</code>。如何找状态转移方程呢？按照数学归纳法，假设我们知道了 <code>dp[i-1]</code>，如何推导出 <code>dp[i]</code> 呢？利用数学归纳法，你能用 <code>dp[i]</code> 推出 <code>dp[i+1]</code> 吗？</p>\n<p><strong>实际上是不行的，因为子数组一定是连续的，按照我们当前</strong> <strong><code>dp</code></strong> <strong>数组定义，并不能保证</strong> <strong><code>nums[0..i]</code></strong> <strong>中的最大子数组与</strong> <strong><code>nums[i+1]</code></strong> <strong>是相邻的</strong>，也就没办法从 <code>dp[i]</code> 推导出 <code>dp[i+1]</code>。</p>\n<p>所以说我们这样定义 <code>dp</code> 数组是不正确的，无法得到合适的状态转移方程。对于这类子数组问题，我们就要重新定义 <code>dp</code> 数组的含义：</p>\n<p><strong>以</strong> <strong><code>nums[i]</code></strong> <strong>为结尾的「最大子数组和」为</strong> <strong><code>dp[i]</code></strong>。</p>\n<p>这种定义之下，想得到整个 <code>nums</code> 数组的「最大子数组和」，不能直接返回 <code>dp[n-1]</code>，而需要遍历整个 <code>dp</code> 数组。</p>\n<p>虽然说动态规划推状态转移方程确实比较玄学，但大部分还是有些规律可循的。</p>\n<p>这道「最大子数组和」就和「最长递增子序列」非常类似，<code>dp</code> 数组的定义是「以 <code>nums[i]</code> 为结尾的最大子数组和/最长递增子序列为 <code>dp[i]</code>」。因为只有这样定义才能将 <code>dp[i+1]</code> 和 <code>dp[i]</code> 建立起联系，利用数学归纳法写出状态转移方程。</p>\n<h3 id=\"9-3-代码\"><a href=\"#9-3-代码\" class=\"headerlink\" title=\"9.3 代码\"></a>9.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = nums.length;</span><br><span class=\"line\">    <span class=\"comment\">// dp[i] = x 表示以 nums[i] 结尾的最大子序列和为x</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len];</span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 状态转移</span></span><br><span class=\"line\">        dp[i] = Math.max(nums[i], nums[i] + dp[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">        max = Math.max(max, dp[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-例题：编辑距离-72\"><a href=\"#10-例题：编辑距离-72\" class=\"headerlink\" title=\"10. 例题：编辑距离 [72]\"></a>10. 例题：编辑距离 [72]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/edit-distance/\" target=\"_blank\" rel=\"noopener\">72. 编辑距离</a></p>\n<h3 id=\"10-1-题目描述\"><a href=\"#10-1-题目描述\" class=\"headerlink\" title=\"10.1 题目描述\"></a>10.1 题目描述</h3><p>给你两个单词 word1 和 word2，请你计算出将 word1 转换成 word2 所使用的最少操作数 。</p>\n<p>你可以对一个单词进行如下三种操作：</p>\n<ol>\n<li>插入一个字符</li>\n<li>删除一个字符</li>\n<li>替换一个字符</li>\n</ol>\n<p>示例 1：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：word1 = <span class=\"string\">\"horse\"</span>, word2 = <span class=\"string\">\"ros\"</span></span><br><span class=\"line\">输出：3</span><br><span class=\"line\">解释：</span><br><span class=\"line\">horse -&gt; rorse (将 <span class=\"string\">'h'</span> 替换为 <span class=\"string\">'r'</span>)</span><br><span class=\"line\">rorse -&gt; rose (删除 <span class=\"string\">'r'</span>)</span><br><span class=\"line\">rose -&gt; ros (删除 <span class=\"string\">'e'</span>)</span><br></pre></td></tr></table></figure>\n\n\n<p>示例 2：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：word1 = <span class=\"string\">\"intention\"</span>, word2 = <span class=\"string\">\"execution\"</span></span><br><span class=\"line\">输出：5</span><br><span class=\"line\">解释：</span><br><span class=\"line\">intention -&gt; inention (删除 <span class=\"string\">'t'</span>)</span><br><span class=\"line\">inention -&gt; enention (将 <span class=\"string\">'i'</span> 替换为 <span class=\"string\">'e'</span>)</span><br><span class=\"line\">enention -&gt; exention (将 <span class=\"string\">'n'</span> 替换为 <span class=\"string\">'x'</span>)</span><br><span class=\"line\">exention -&gt; exection (将 <span class=\"string\">'n'</span> 替换为 <span class=\"string\">'c'</span>)</span><br><span class=\"line\">exection -&gt; execution (插入 <span class=\"string\">'u'</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-2-题目分析\"><a href=\"#10-2-题目分析\" class=\"headerlink\" title=\"10.2 题目分析\"></a>10.2 题目分析</h3><p>dp 问题自底向上求解，定义 dp 数组：<code>dp[i][j] = n</code> 表示：<code>word1[1..i]</code> 和 <code>word2[1..j]</code> 的最小编辑距离为 n，注意 word1 和 word2 的下标从1开始。</p>\n<p>base case：当 i=0 或者 j=0 时，属于base case。</p>\n<p>状态：距离。</p>\n<p>选择：有三种选择，即删除、替换、插入，选出距离最小的。做出每一种选择后，使用前面求出 dp 数组的值。比如如果选择删除，则 <code>dp[i][j] = dp[i-1][j] + 1</code> ；如果选择替换，则 <code>dp[i][j] = dp[i-1][j-1] + 1</code>；如果选择插入，则<code>dp[i][j] = dp[i][j-1] + 1</code>入，当插入时应该注意，不能在 <code>word1[i]</code> 之前插入，因为在前面插入后，没法使用已经求出的 dp 数组的值，而是在 <code>word1[i]</code> 的后面插入。</p>\n<p>状态转移方程：如果字符相等，跳过；否则在删除、替换、插入中选择一种。</p>\n<h3 id=\"10-3-代码\"><a href=\"#10-3-代码\" class=\"headerlink\" title=\"10.3 代码\"></a>10.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minDistance</span><span class=\"params\">(String word1, String word2)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len1 = word1.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len2 = word2.length();</span><br><span class=\"line\">    <span class=\"comment\">//word1 和 word2 的下标从 1 开始</span></span><br><span class=\"line\">    <span class=\"comment\">//dp[i][j] = n 表示：word1[1..i] 和 word2[1..j] 的最小编辑距离为 n</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len1+<span class=\"number\">1</span>][len2+<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//base case</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= len1; i++)&#123;</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= len2; j++)&#123;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][j] = j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= len1; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= len2; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(word1.charAt(i-<span class=\"number\">1</span>) == word2.charAt(j-<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                dp[i][j] = dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//三种情况：插入、删除、替换</span></span><br><span class=\"line\">                dp[i][j] = min(dp[i][j-<span class=\"number\">1</span>] + <span class=\"number\">1</span>, dp[i-<span class=\"number\">1</span>][j] + <span class=\"number\">1</span>, dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>] + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[len1][len2];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">min</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.min(Math.min(a,b),c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11-例题：正则表达式匹配-10\"><a href=\"#11-例题：正则表达式匹配-10\" class=\"headerlink\" title=\"11. 例题：正则表达式匹配 [10]\"></a>11. 例题：正则表达式匹配 [10]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/regular-expression-matching/\" target=\"_blank\" rel=\"noopener\">10. 正则表达式匹配</a></p>\n<h3 id=\"11-1-题目描述\"><a href=\"#11-1-题目描述\" class=\"headerlink\" title=\"11.1 题目描述\"></a>11.1 题目描述</h3><p>给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 ‘.’ 和 ‘*’ 的正则表达式匹配。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'.'</span> 匹配任意单个字符</span><br><span class=\"line\"><span class=\"string\">'*'</span> 匹配零个或多个前面的那一个元素</span><br></pre></td></tr></table></figure>\n\n\n<p>所谓匹配，是要涵盖整个字符串s的，而不是部分字符串。</p>\n<p>说明:</p>\n<p>s 可能为空，且只包含从 a-z 的小写字母。<br>p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。<br>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">s = <span class=\"string\">\"aa\"</span></span><br><span class=\"line\">p = <span class=\"string\">\"a\"</span></span><br><span class=\"line\">输出: <span class=\"literal\">false</span></span><br><span class=\"line\">解释: <span class=\"string\">\"a\"</span> 无法匹配 <span class=\"string\">\"aa\"</span> 整个字符串。</span><br></pre></td></tr></table></figure>\n\n<p>示例 2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">s = <span class=\"string\">\"aa\"</span></span><br><span class=\"line\">p = <span class=\"string\">\"a*\"</span></span><br><span class=\"line\">输出: <span class=\"literal\">true</span></span><br><span class=\"line\">解释: 因为 <span class=\"string\">'*'</span> 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 <span class=\"string\">'a'</span>。因此，字符串 <span class=\"string\">\"aa\"</span> 可被视为 <span class=\"string\">'a'</span> 重复了一次。</span><br></pre></td></tr></table></figure>\n\n<p>示例 3:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">s = <span class=\"string\">\"ab\"</span></span><br><span class=\"line\">p = <span class=\"string\">\".*\"</span></span><br><span class=\"line\">输出: <span class=\"literal\">true</span></span><br><span class=\"line\">解释: <span class=\"string\">\".*\"</span> 表示可匹配零个或多个（<span class=\"string\">'*'</span>）任意字符（<span class=\"string\">'.'</span>）。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-2-题目分析\"><a href=\"#11-2-题目分析\" class=\"headerlink\" title=\"11.2 题目分析\"></a>11.2 题目分析</h3><p>两个字符串比较的动态规划问题。<code>dp[i][j]</code> 表示 <code>s[i-1]</code> 和 <code>p[i-1]</code> 是否可以匹配。</p>\n<p>base case：<code>dp[0][0] = true</code>， 但这还不够，字符串 “” 和 “a*” 也是匹配的。</p>\n<p>状态：是否可以匹配。</p>\n<p>选择：字符串 s 和 p 各前进一位。</p>\n<p>状态转换：见代码。</p>\n<h3 id=\"11-3-代码\"><a href=\"#11-3-代码\" class=\"headerlink\" title=\"11.3 代码\"></a>11.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMatch</span><span class=\"params\">(String s, String p)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s == <span class=\"keyword\">null</span> || p == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len1 = s.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len2 = p.length();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//dp 数组中 字符串下标从 1 开始，索引 0 存储空字符</span></span><br><span class=\"line\">    <span class=\"comment\">//dp[i][j] = true 表示：s[0..(i-1)] p[0..(j-1)] 可以匹配</span></span><br><span class=\"line\">    <span class=\"comment\">//base case：dp[..][0] 初始化为 0, 不存在可以匹配的可能</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[len1+<span class=\"number\">1</span>][len2+<span class=\"number\">1</span>];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">//base case: dp[0][..] 初始化，如果出现 * 则可以消去上一个字符，且 上上一个字符对应 dp 值为 true，则当前 dp 值为true</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; len2; j++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//j-1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p.charAt(j) == <span class=\"string\">'*'</span> &amp;&amp; dp[<span class=\"number\">0</span>][j-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">            <span class=\"comment\">//j+1</span></span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j+<span class=\"number\">1</span>] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len1; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; len2; j++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果元素匹配或者为任意元素</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p.charAt(j) == <span class=\"string\">'.'</span> || s.charAt(i) == p.charAt(j))&#123;</span><br><span class=\"line\">                dp[i + <span class=\"number\">1</span>][j + <span class=\"number\">1</span>] = dp[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p.charAt(j) == <span class=\"string\">'*'</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果前一个元素不匹配，则消去这两个元素</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p.charAt(j-<span class=\"number\">1</span>) != s.charAt(i) &amp;&amp; p.charAt(j-<span class=\"number\">1</span>) != <span class=\"string\">'.'</span>)&#123;</span><br><span class=\"line\">                    dp[i + <span class=\"number\">1</span>][j + <span class=\"number\">1</span>] = dp[i + <span class=\"number\">1</span>][j - <span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                        * 如果前一个元素匹配，存在三种情况：</span></span><br><span class=\"line\"><span class=\"comment\">                        * 重复前一个字符多次（abbbb ab*）dp[i + 1][j + 1] = dp[i][j + 1]</span></span><br><span class=\"line\"><span class=\"comment\">                        * 重复前一个字符一次（ab ab*）dp[i + 1][j + 1] = dp[i + 1][j]</span></span><br><span class=\"line\"><span class=\"comment\">                        * 重复前一个字符零次（a ab*）dp[i + 1][j + 1] = dp[i + 1][j - 1]</span></span><br><span class=\"line\"><span class=\"comment\">                         */</span></span><br><span class=\"line\">                    dp[i + <span class=\"number\">1</span>][j + <span class=\"number\">1</span>] = (dp[i][j + <span class=\"number\">1</span>] || dp[i + <span class=\"number\">1</span>][j] || dp[i + <span class=\"number\">1</span>][j - <span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[len1][len2];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-例题：通配符匹配-44\"><a href=\"#12-例题：通配符匹配-44\" class=\"headerlink\" title=\"12. 例题：通配符匹配 [44]\"></a>12. 例题：通配符匹配 [44]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/wildcard-matching/\" target=\"_blank\" rel=\"noopener\">44. 通配符匹配</a></p>\n<h3 id=\"12-1-题目描述\"><a href=\"#12-1-题目描述\" class=\"headerlink\" title=\"12.1 题目描述\"></a>12.1 题目描述</h3><p>给定一个字符串 (s) 和一个字符模式 (p) ，实现一个支持 ‘?’ 和 ‘*’ 的通配符匹配。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'?'</span> 可以匹配任何单个字符。</span><br><span class=\"line\"><span class=\"string\">'*'</span> 可以匹配任意字符串（包括空字符串）。</span><br><span class=\"line\">两个字符串完全匹配才算匹配成功。</span><br></pre></td></tr></table></figure>\n\n<p>说明:</p>\n<p>s 可能为空，且只包含从 a-z 的小写字母。<br>p 可能为空，且只包含从 a-z 的小写字母，以及字符 ? 和 *。<br>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">s = <span class=\"string\">\"aa\"</span></span><br><span class=\"line\">p = <span class=\"string\">\"a\"</span></span><br><span class=\"line\">输出: <span class=\"literal\">false</span></span><br><span class=\"line\">解释: <span class=\"string\">\"a\"</span> 无法匹配 <span class=\"string\">\"aa\"</span> 整个字符串。</span><br></pre></td></tr></table></figure>\n\n\n<p>示例 2:</p>\n<p>输入:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">\"aa\"</span></span><br><span class=\"line\">p = <span class=\"string\">\"*\"</span></span><br><span class=\"line\">输出: <span class=\"literal\">true</span></span><br><span class=\"line\">解释: <span class=\"string\">'*'</span> 可以匹配任意字符串。</span><br></pre></td></tr></table></figure>\n\n<p>示例 3:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">s = <span class=\"string\">\"cb\"</span></span><br><span class=\"line\">p = <span class=\"string\">\"?a\"</span></span><br><span class=\"line\">输出: <span class=\"literal\">false</span></span><br><span class=\"line\">解释: <span class=\"string\">'?'</span> 可以匹配 <span class=\"string\">'c'</span>, 但第二个 <span class=\"string\">'a'</span> 无法匹配 <span class=\"string\">'b'</span>。</span><br></pre></td></tr></table></figure>\n\n<p>示例 4:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">s = <span class=\"string\">\"adceb\"</span></span><br><span class=\"line\">p = <span class=\"string\">\"*a*b\"</span></span><br><span class=\"line\">输出: <span class=\"literal\">true</span></span><br><span class=\"line\">解释: 第一个 <span class=\"string\">'*'</span> 可以匹配空字符串, 第二个 <span class=\"string\">'*'</span> 可以匹配字符串 <span class=\"string\">\"dce\"</span>.</span><br></pre></td></tr></table></figure>\n\n<p>示例 5:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">s = <span class=\"string\">\"acdcb\"</span></span><br><span class=\"line\">p = <span class=\"string\">\"a*c?b\"</span></span><br><span class=\"line\">输出: <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>PS：? 不可以匹配空字符串。</p>\n<h3 id=\"12-2-题目分析\"><a href=\"#12-2-题目分析\" class=\"headerlink\" title=\"12.2 题目分析\"></a>12.2 题目分析</h3><p>两个字符串比较的动态规划问题。</p>\n<p>本体类似于上一题，但我在考虑问题时始终不能跳出问题本身，使用动态规划的思想，而是一再考虑可能出现的不同情况，特别是出现 * 时。例如字符串 “abc” 和 “a*” , 当 p 中出现了 * 时，有两种处理方式：</p>\n<ol>\n<li>把 * 当做一个空字符串，那么 <code>dp[i + 1][j + 1] = dp[i + 1][j]</code></li>\n<li><code>*</code> 匹配任意字符串，那么 <code>dp[i + 1][j + 1] = dp[i][j + 1]</code></li>\n</ol>\n<p>要注意理解，dp 问题注重的是当前状态的转化，即只考虑当前这一位，并把这个问题转化为更小问题的答案。</p>\n<h3 id=\"12-3-代码\"><a href=\"#12-3-代码\" class=\"headerlink\" title=\"12.3 代码\"></a>12.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMatch</span><span class=\"params\">(String s, String p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s == <span class=\"keyword\">null</span> || p == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len1 = s.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len2 = p.length();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//dp 数组中 字符串下标从 1 开始，索引 0 存储空字符</span></span><br><span class=\"line\">    <span class=\"comment\">//dp[i][j] = true 表示：s[0..(i-1)] p[0..(j-1)] 可以匹配</span></span><br><span class=\"line\">    <span class=\"comment\">//base case：dp[..][0] 初始化为 0, 不存在可以匹配的可能</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[len1+<span class=\"number\">1</span>][len2+<span class=\"number\">1</span>];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">//base case: dp[0][..] 初始化，如果出现 * 则可以视为空字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; len2; j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p.charAt(j) == <span class=\"string\">'*'</span>)&#123;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j + <span class=\"number\">1</span>] = dp[<span class=\"number\">0</span>][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len1; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; len2; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p.charAt(j) == <span class=\"string\">'?'</span> || s.charAt(i) == p.charAt(j))&#123;</span><br><span class=\"line\">                dp[i + <span class=\"number\">1</span>][j + <span class=\"number\">1</span>] = dp[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p.charAt(j) == <span class=\"string\">'*'</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//情况一：s = \"a\", p = \"a*\", 此时 * 被当做空字符串 dp[i + 1][j + 1] = dp[i + 1][j]</span></span><br><span class=\"line\">                <span class=\"comment\">//情况二：s = \"abc\", p = \"a*\", 此时 * 被当做任意字符串 dp[i + 1][j + 1] = dp[i][j + 1]</span></span><br><span class=\"line\">                dp[i + <span class=\"number\">1</span>][j + <span class=\"number\">1</span>] = (dp[i + <span class=\"number\">1</span>][j] || dp[i][j + <span class=\"number\">1</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[len1][len2];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"13-例题：不同路径-62\"><a href=\"#13-例题：不同路径-62\" class=\"headerlink\" title=\"13. 例题：不同路径 [62]\"></a>13. 例题：不同路径 [62]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/unique-paths/\" target=\"_blank\" rel=\"noopener\">62. 不同路径</a></p>\n<h3 id=\"13-1-题目描述\"><a href=\"#13-1-题目描述\" class=\"headerlink\" title=\"13.1 题目描述\"></a>13.1 题目描述</h3><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p>\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p>\n<p>问总共有多少条不同的路径？</p>\n<p>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: m = 3, n = 2</span><br><span class=\"line\">输出: 3</span><br><span class=\"line\">解释:</span><br><span class=\"line\">从左上角开始，总共有 3 条路径可以到达右下角。</span><br><span class=\"line\">1. 向右 -&gt; 向右 -&gt; 向下</span><br><span class=\"line\">2. 向右 -&gt; 向下 -&gt; 向右</span><br><span class=\"line\">3. 向下 -&gt; 向右 -&gt; 向右</span><br></pre></td></tr></table></figure>\n\n<p>示例 2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: m = 7, n = 3</span><br><span class=\"line\">输出: 28</span><br></pre></td></tr></table></figure>\n\n\n<p>提示：</p>\n<p>1 &lt;= m, n &lt;= 100<br>题目数据保证答案小于等于 2 * 10 ^ 9</p>\n<h3 id=\"13-2-题目分析\"><a href=\"#13-2-题目分析\" class=\"headerlink\" title=\"13.2 题目分析\"></a>13.2 题目分析</h3><p>简单题。</p>\n<p><code>dp[i-1][j-1]</code>表示：i * j 的网格上机器人的移动步数</p>\n<p>状态转移：<code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]</code></p>\n<h3 id=\"13-3-代码\"><a href=\"#13-3-代码\" class=\"headerlink\" title=\"13.3 代码\"></a>13.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">uniquePaths</span><span class=\"params\">(<span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//dp[i-1][j-1] 表示：i * j 的网格上机器人的移动步数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[m][n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">            dp[i][j] = dp[i - <span class=\"number\">1</span>][j] + dp[i][j - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[m - <span class=\"number\">1</span>][n - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"14-例题：不同路径II-63\"><a href=\"#14-例题：不同路径II-63\" class=\"headerlink\" title=\"14. 例题：不同路径II [63]\"></a>14. 例题：不同路径II [63]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/unique-paths-ii/\" target=\"_blank\" rel=\"noopener\">63. 不同路径 II</a></p>\n<h3 id=\"14-1-题目描述\"><a href=\"#14-1-题目描述\" class=\"headerlink\" title=\"14.1 题目描述\"></a>14.1 题目描述</h3><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p>\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p>\n<p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p>\n<p>网格中的障碍物和空位置分别用 <code>1</code> 和 <code>0</code> 来表示。</p>\n<p>说明：m 和 n 的值均不超过 100。</p>\n<p>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [0,0,0],</span><br><span class=\"line\">  [0,1,0],</span><br><span class=\"line\">  [0,0,0]</span><br><span class=\"line\">]</span><br><span class=\"line\">输出: 2</span><br><span class=\"line\">解释:</span><br><span class=\"line\">3x3 网格的正中间有一个障碍物。</span><br><span class=\"line\">从左上角到右下角一共有 2 条不同的路径：</span><br><span class=\"line\">1. 向右 -&gt; 向右 -&gt; 向下 -&gt; 向下</span><br><span class=\"line\">2. 向下 -&gt; 向下 -&gt; 向右 -&gt; 向右</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-2-题目分析\"><a href=\"#14-2-题目分析\" class=\"headerlink\" title=\"14.2 题目分析\"></a>14.2 题目分析</h3><p>注意与上一题的区别。</p>\n<h3 id=\"14-3-代码\"><a href=\"#14-3-代码\" class=\"headerlink\" title=\"14.3 代码\"></a>14.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">uniquePathsWithObstacles</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] obstacleGrid)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = obstacleGrid.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = obstacleGrid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"comment\">//dp[i-1][j-1] 表示：i * j 的网格上机器人的移动步数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[m][n];</span><br><span class=\"line\">    <span class=\"comment\">// 注意</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obstacleGrid[<span class=\"number\">0</span>][<span class=\"number\">0</span>] == <span class=\"number\">1</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// base case，与上一题不同</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(obstacleGrid[i][<span class=\"number\">0</span>] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(obstacleGrid[<span class=\"number\">0</span>][i] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(obstacleGrid[i][j] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                dp[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                dp[i][j] = dp[i - <span class=\"number\">1</span>][j] + dp[i][j - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[m - <span class=\"number\">1</span>][n - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"15-例题：实现strStr-15\"><a href=\"#15-例题：实现strStr-15\" class=\"headerlink\" title=\"15. 例题：实现strStr() [15]\"></a>15. 例题：实现strStr() [15]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/implement-strstr/\" target=\"_blank\" rel=\"noopener\">28. 实现 strStr()</a></p>\n<h3 id=\"15-1-题目描述\"><a href=\"#15-1-题目描述\" class=\"headerlink\" title=\"15.1 题目描述\"></a>15.1 题目描述</h3><p>实现 strStr() 函数。</p>\n<p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。</p>\n<p>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: haystack = <span class=\"string\">\"hello\"</span>, needle = <span class=\"string\">\"ll\"</span></span><br><span class=\"line\">输出: 2</span><br></pre></td></tr></table></figure>\n\n\n<p>示例 2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: haystack = <span class=\"string\">\"aaaaa\"</span>, needle = <span class=\"string\">\"bba\"</span></span><br><span class=\"line\">输出: -1</span><br></pre></td></tr></table></figure>\n\n\n<p>说明:</p>\n<p>当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</p>\n<p>对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。</p>\n<h3 id=\"15-2-题目分析\"><a href=\"#15-2-题目分析\" class=\"headerlink\" title=\"15.2 题目分析\"></a>15.2 题目分析</h3><p>详细分析参考：<a href=\"https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/dong-tai-gui-hua-zhi-kmp-zi-fu-pi-pei-suan-fa\" target=\"_blank\" rel=\"noopener\">这里</a> . 太难了….</p>\n<p>标准的KMP方法在我的另一篇博客：<a href=\"https://juliajiang7.github.io/2020/07/17/KMP算法/#more\" target=\"_blank\" rel=\"noopener\">这里</a> .</p>\n<p>我们可以认为 <code>pat</code> 的匹配就是状态的转移。比如当 pat = “ABABC”：</p>\n<img src=\"/pictures/state.jpg\" alt=\"img\" style=\"zoom:33%;\" />\n\n<p>如上图，圆圈内的数字就是状态，状态 0 是起始状态，状态 5（<code>pat.length</code>）是终止状态。开始匹配时 <code>pat</code> 处于起始状态，一旦转移到终止状态，就说明在 <code>txt</code> 中找到了 <code>pat</code>。比如说当前处于状态 2，就说明字符 “AB” 被匹配：</p>\n<img src=\"/pictures/state2.jpg\" alt=\"img\" style=\"zoom:33%;\" />\n\n<p><code>dp[j][c] = next</code> 表示，当前是状态 <code>j</code>，遇到了字符 <code>c</code>，应该转移到状态 <code>next</code>。</p>\n<p>base case：<code>dp[0][pat.charAt(0)] = 1;</code>, 只有遇到 pat[0] 这个字符才能使状态从 0 转移到 1，遇到其它字符的话还是停留在状态 0（Java 默认初始化数组全为 0）.</p>\n<p>如何构建这个 <code>dp</code> 数组，需要一个辅助状态 <code>X</code>，它永远比当前状态 <code>j</code> 落后一个状态，拥有和 <code>j</code> 最长的相同前缀，我们给它起了个名字叫「影子状态」。</p>\n<p>在构建当前状态 <code>j</code> 的转移方向时，只有字符 <code>pat[j]</code> 才能使状态推进（<code>dp[j][pat[j]] = j+1</code>）；而对于其他字符只能进行状态回退，应该去请教影子状态 <code>X</code> 应该回退到哪里（<code>dp[j][other] = dp[X][other]</code>，其中 <code>other</code> 是除了 <code>pat[j]</code> 之外所有字符）。</p>\n<p>对于影子状态 <code>X</code>，我们把它初始化为 0，并且随着 <code>j</code> 的前进进行更新，更新的方式和 search 过程更新 <code>j</code> 的过程非常相似（<code>X = dp[X][pat[j]]</code>）。</p>\n<h3 id=\"15-3-代码\"><a href=\"#15-3-代码\" class=\"headerlink\" title=\"15.3 代码\"></a>15.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">strStr</span><span class=\"params\">(String haystack, String needle)</span></span>&#123;</span><br><span class=\"line\">    String txt = haystack;</span><br><span class=\"line\">    String pat = needle;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> M = pat.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = txt.length();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(M == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//dp[j][c] = i 表示： 当前状态为 j，且遇到的下一个字符是 c 时, 下一个状态位 i</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[M][<span class=\"number\">256</span>];</span><br><span class=\"line\">    KMP(pat, dp);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//pat 的初始状态为 0</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//计算 pat 的下一个状态</span></span><br><span class=\"line\">        j = dp[j][txt.charAt(i)];</span><br><span class=\"line\">        <span class=\"comment\">//到达终止状态，匹配成功</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j == M)&#123;<span class=\"keyword\">return</span> i - M + <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//没到达终止状态，匹配失败</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计算 dp, 即就是 next</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pat</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dp</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">KMP</span><span class=\"params\">(String pat, <span class=\"keyword\">int</span>[][] dp)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> M = pat.length();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//base case</span></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][pat.charAt(<span class=\"number\">0</span>)] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//影子状态，初始化为 0</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> X = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//构建状态转移图</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; M; j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt; <span class=\"number\">256</span>; c++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pat.charAt(j) == c)&#123;</span><br><span class=\"line\">                dp[j][c] = j + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                dp[j][c] = dp[X][c];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//更新影子状态</span></span><br><span class=\"line\">        X = dp[X][pat.charAt(j)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"16-接雨水-42\"><a href=\"#16-接雨水-42\" class=\"headerlink\" title=\"16. 接雨水 [42]\"></a>16. 接雨水 [42]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/trapping-rain-water/\" target=\"_blank\" rel=\"noopener\">42. 接雨水</a></p>\n<h3 id=\"16-1-题目描述\"><a href=\"#16-1-题目描述\" class=\"headerlink\" title=\"16.1. 题目描述\"></a>16.1. 题目描述</h3><p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p>\n<p><img src=\"/pictures/image-20200810100323970.png\" alt=\"image-20200810100323970\"></p>\n<p>上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 感谢 Marcos 贡献此图。</p>\n<p>示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [0,1,0,2,1,0,1,3,2,1,2,1]</span><br><span class=\"line\">输出: 6</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16-2-题目分析\"><a href=\"#16-2-题目分析\" class=\"headerlink\" title=\"16.2. 题目分析\"></a>16.2. 题目分析</h3><p>本题分析参考：<a href=\"https://leetcode.wang/leetCode-42-Trapping-Rain-Water.html\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<h3 id=\"16-3-方法一：暴力解法（按列求）\"><a href=\"#16-3-方法一：暴力解法（按列求）\" class=\"headerlink\" title=\"16.3. 方法一：暴力解法（按列求）\"></a>16.3. 方法一：暴力解法（按列求）</h3><p>参考 <a href=\"https://leetcode.wang/leetCode-42-Trapping-Rain-Water.html\" target=\"_blank\" rel=\"noopener\">这里</a> 的解法二按列求。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">trap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] height)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//最两端的不用考虑，因为一定不会有雨水</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; height.length - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max_left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//找出 height[i] 左边最高（包括height[i]），要把最左端考虑在内</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &gt;= <span class=\"number\">0</span>; j--)&#123;</span><br><span class=\"line\">            max_left = Math.max(height[j], max_left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> max_right = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//找出 height[i] 右边最高（包括height[i]），要把最右端考虑在内</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &lt; height.length;j++)&#123;</span><br><span class=\"line\">            max_right = Math.max(height[j], max_right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果自己就是最高的话 max_left = max_right = height[i]</span></span><br><span class=\"line\">        sum += Math.min(max_left, max_right) - height[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>时间复杂度：O（n²），遍历每一列需要 n，找出左边最高和右边最高的墙加起来刚好又是一个 n，所以是 n²。</p>\n<p>空间复杂度：O（1）。</p>\n<h3 id=\"16-4-方法二：动态规划\"><a href=\"#16-4-方法二：动态规划\" class=\"headerlink\" title=\"16.4. 方法二：动态规划\"></a>16.4. 方法二：动态规划</h3><p>参考 <a href=\"https://leetcode.wang/leetCode-42-Trapping-Rain-Water.html\" target=\"_blank\" rel=\"noopener\">这里</a> 的解法三动态规划。dp 数组定义不同，本文采用的方法和暴力解法同步。</p>\n<p>我们注意到，解法一中，对于每一列，我们求它左边最高的墙和右边最高的墙，都是重新遍历一遍所有高度，这里我们可以优化一下。</p>\n<p>首先用两个数组，max_left [ i ] 代表到第 i 列左边最高的墙的高度（包括第 i 列），max_right [ i ] 代表到第 i 列右边最高的墙的高度（包括第 i 列）。</p>\n<p>这样，我们利用解法一的思路，不用在 for 循环中再重新遍历求 max_left 和 max_right 了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">trap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] height)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = height.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// max_left[i] = x 表示：height[0..i] 中最大值为x</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> max_left[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len];</span><br><span class=\"line\">    <span class=\"comment\">// max_right[i] = x 表示：height[i..(len-1)] 中最大值为x</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> max_right[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\">    max_left[<span class=\"number\">0</span>] = height[<span class=\"number\">0</span>];</span><br><span class=\"line\">    max_right[len - <span class=\"number\">1</span>] = height[len - <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        max_left[i] = Math.max(height[i], max_left[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = len - <span class=\"number\">2</span>; j &gt; <span class=\"number\">0</span>; j--)&#123;</span><br><span class=\"line\">        max_right[j] = Math.max(height[j], max_right[j + <span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">        sum += Math.min(max_left[i], max_right[i]) - height[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>时间复杂度：O（n）。</p>\n<p>空间复杂度：O（n），用来保存每一列左边最高的墙和右边最高的墙。</p>\n<h2 id=\"17-最长有效括号-32\"><a href=\"#17-最长有效括号-32\" class=\"headerlink\" title=\"17. 最长有效括号 [32]\"></a>17. 最长有效括号 [32]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/longest-valid-parentheses/\" target=\"_blank\" rel=\"noopener\">32. 最长有效括号</a></p>\n<h3 id=\"17-1-题目描述\"><a href=\"#17-1-题目描述\" class=\"headerlink\" title=\"17.1. 题目描述\"></a>17.1. 题目描述</h3><p>给定一个只包含 ‘(‘ 和 ‘)’ 的字符串，找出最长的包含有效括号的子串的长度。</p>\n<p>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"string\">\"(()\"</span></span><br><span class=\"line\">输出: 2</span><br><span class=\"line\">解释: 最长有效括号子串为 <span class=\"string\">\"()\"</span></span><br></pre></td></tr></table></figure>\n\n\n<p>示例 2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"string\">\")()())\"</span></span><br><span class=\"line\">输出: 4</span><br><span class=\"line\">解释: 最长有效括号子串为 <span class=\"string\">\"()()\"</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：题目要求找 <strong>子串</strong>， 即字符串中连续的一段。</p>\n<h3 id=\"17-2-题目分析\"><a href=\"#17-2-题目分析\" class=\"headerlink\" title=\"17.2 题目分析\"></a>17.2 题目分析</h3><p>本题分析参考：<a href=\"https://leetcode.wang/leetCode-32-Longest-Valid-Parentheses.html\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<p>做题先从暴力解法入手，慢慢想如何进行优化。直接考虑高效率解法考虑会不周全，而且找不到思路啊，千万别心急。</p>\n<h3 id=\"17-3-方法一：暴力解法\"><a href=\"#17-3-方法一：暴力解法\" class=\"headerlink\" title=\"17.3. 方法一：暴力解法\"></a>17.3. 方法一：暴力解法</h3><p>暴力解法就是：对每一个子串判断是否有效，返回最长的长度。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestValidParentheses</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = s.length();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 注意：substring 是左闭右开，所以这里j的取值小于等于len</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i + <span class=\"number\">2</span>; j &lt;= len; j += <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(isValid(s.substring(i, j)))&#123;</span><br><span class=\"line\">                max = Math.max(max, j - i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(String s)</span></span>&#123;</span><br><span class=\"line\">    Deque&lt;Character&gt; stack = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.charAt(i) == <span class=\"string\">'('</span>)&#123;</span><br><span class=\"line\">            stack.push(<span class=\"string\">'('</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!stack.isEmpty() &amp;&amp; stack.peek() == <span class=\"string\">'('</span>)&#123;</span><br><span class=\"line\">                stack.pop();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> stack.isEmpty();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>时间复杂度: 列举字符串是 O（n²），判断是否是合法序列是 O（n），所以总共是 O（n³）。</p>\n<p>空间复杂度：O（n），每次判断的时候，栈的大小。</p>\n<p>这个算法，leetCode 会报时间超时。</p>\n<h3 id=\"17-4-方法二：暴力解法优化\"><a href=\"#17-4-方法二：暴力解法优化\" class=\"headerlink\" title=\"17.4. 方法二：暴力解法优化\"></a>17.4. 方法二：暴力解法优化</h3><p>在解法一中，我们会做很多重复的判断，比如 <code>()()()</code> ，从下标 0 开始，我们先判断长度为 2 的是否是合法序列，再判断长度为 4 时的字符串是否合法，但依旧从下标 0 开始。判断长度为 6 时，依旧从下标 0 开始，但其实之前已经确认前 4 个是合法序列了，所以我们从 4 开始判断即可。</p>\n<p>基于此，我们可以换一个思路，我们判断从每个位置开始的最长合法子串是多长即可。在判断是否是合法子串时，我们不使用栈，而是用一个变量记录当前的括号情况，遇到左括号加1，遇到右括号减1，如果变成0，更新最长合法子串长度。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestValidParentheses</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class=\"line\">        count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &lt; s.length(); j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s.charAt(j) == <span class=\"string\">'('</span>)&#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                count--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(count &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(count == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                max = Math.max(max, j - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>时间复杂度：O（n²）。</p>\n<p>空间复杂度：O（1）。</p>\n<h3 id=\"17-5-方法三：动态规划\"><a href=\"#17-5-方法三：动态规划\" class=\"headerlink\" title=\"17.5. 方法三：动态规划\"></a>17.5. 方法三：动态规划</h3><p>分析参考：<a href=\"https://leetcode.wang/leetCode-32-Longest-Valid-Parentheses.html#解法三-动态规划\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestValidParentheses</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = s.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// dp[i]=x 表示：以s[i]结尾的子串最长有效长度为x</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果遇到左括号，dp[i]=0，就是初始值</span></span><br><span class=\"line\">        <span class=\"comment\">// 遇到右括号时，才会更新dp数组</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.charAt(i) == <span class=\"string\">')'</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 右括号的前一位是左括号</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s.charAt(i - <span class=\"number\">1</span>) == <span class=\"string\">'('</span>)&#123;</span><br><span class=\"line\">                dp[i] = (i &gt; <span class=\"number\">2</span> ? dp[i - <span class=\"number\">2</span>] : <span class=\"number\">0</span>) + <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 右括号前一位是右括号</span></span><br><span class=\"line\">                <span class=\"comment\">// 并且除去前边的合法序列的前一位是左括号</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i - dp[i - <span class=\"number\">1</span>] &gt; <span class=\"number\">0</span> &amp;&amp; s.charAt(i - dp[i - <span class=\"number\">1</span>] - <span class=\"number\">1</span>) == <span class=\"string\">'('</span>)&#123;</span><br><span class=\"line\">                dp[i] = dp[i - <span class=\"number\">1</span>] + ((i - dp[i - <span class=\"number\">1</span>]) &gt; <span class=\"number\">2</span> ? dp[i - dp[i - <span class=\"number\">1</span>] - <span class=\"number\">2</span>] : <span class=\"number\">0</span>) + <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            max = Math.max(max, dp[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>时间复杂度：遍历了一次，O（n）。</p>\n<p>空间复杂度：O（n）。</p>\n<h2 id=\"18-最大矩形-85\"><a href=\"#18-最大矩形-85\" class=\"headerlink\" title=\"18. 最大矩形 [85]\"></a>18. 最大矩形 [85]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/maximal-rectangle/\" target=\"_blank\" rel=\"noopener\">85. 最大矩形</a></p>\n<h3 id=\"18-1-题目描述\"><a href=\"#18-1-题目描述\" class=\"headerlink\" title=\"18.1. 题目描述\"></a>18.1. 题目描述</h3><p><img src=\"/pictures/image-20200820100311020.png\" alt=\"image-20200820100311020\"></p>\n<h3 id=\"18-2-方法一：暴力解法\"><a href=\"#18-2-方法一：暴力解法\" class=\"headerlink\" title=\"18.2. 方法一：暴力解法\"></a>18.2. 方法一：暴力解法</h3><p>最原始地，我们可以列举每个可能的矩形。这可以通过遍历所有的(x1, y1) (x2, y2) 坐标，并以它们为对角顶点来完成。该方法过慢，不足以通过所有测试用例。</p>\n<p>时间复杂度：O(N<sup>3</sup>M<sup>3</sup>)，空间复杂度：O(1).</p>\n<h3 id=\"18-3-方法二：动态规划-使用柱状图的优化暴力解法\"><a href=\"#18-3-方法二：动态规划-使用柱状图的优化暴力解法\" class=\"headerlink\" title=\"18.3. 方法二：动态规划 - 使用柱状图的优化暴力解法\"></a>18.3. 方法二：动态规划 - 使用柱状图的优化暴力解法</h3><p>参考 <a href=\"https://leetcode-cn.com/problems/maximal-rectangle/solution/zui-da-ju-xing-by-leetcode/\" target=\"_blank\" rel=\"noopener\">这里</a>，这道题的难点是根本想不到…</p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maximalRectangle</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] matrix)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(matrix.length == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> row = matrix.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> col = matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxArea = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// dp[i][j] = x 表示：以 matrix[i][j] 结尾的最大可能宽度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[row][col];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; row; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; col; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(matrix[i][j] == <span class=\"string\">'1'</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 更新最大最大宽度</span></span><br><span class=\"line\">                dp[i][j] = (j == <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : dp[i][j - <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">int</span> width = dp[i][j];</span><br><span class=\"line\">                <span class=\"comment\">// 计算以 matrix[i][j] 为右下角的矩形最大面积</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = i; k &gt;= <span class=\"number\">0</span>; k--)&#123;</span><br><span class=\"line\">                    width = Math.min(width, dp[k][j]);</span><br><span class=\"line\">                    maxArea = Math.max(maxArea, width * (i - k + <span class=\"number\">1</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxArea;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18-4-方法三：动态规划-每个点的最大高度\"><a href=\"#18-4-方法三：动态规划-每个点的最大高度\" class=\"headerlink\" title=\"18.4. 方法三：动态规划 - 每个点的最大高度\"></a>18.4. 方法三：动态规划 - 每个点的最大高度</h3><p>参考 <a href=\"https://leetcode-cn.com/problems/maximal-rectangle/solution/zui-da-ju-xing-by-leetcode/\" target=\"_blank\" rel=\"noopener\">这里</a> 的方法四。太强了….更想不到… 而且不好理解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maximalRectangle</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] matrix)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(matrix.length == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> row = matrix.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> col = matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] left = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[col];</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] right = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[col];</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] height = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[col];</span><br><span class=\"line\">    Arrays.fill(right, col);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxArea = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历每一行</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; row; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cur_left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cur_right = col - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 高度</span></span><br><span class=\"line\">        <span class=\"comment\">// 遍历这一行的每一个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; col; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(matrix[i][j] == <span class=\"string\">'1'</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 在上一行的高度上加1</span></span><br><span class=\"line\">                height[j]++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                height[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 左边</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; col; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(matrix[i][j] == <span class=\"string\">'1'</span>)&#123;</span><br><span class=\"line\">                left[j] = Math.max(left[j], cur_left);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                left[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                cur_left = j + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 右边</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = col - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(matrix[i][j] == <span class=\"string\">'1'</span>)&#123;</span><br><span class=\"line\">                right[j] = Math.min(right[j], cur_right);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                right[j] = col - <span class=\"number\">1</span>;</span><br><span class=\"line\">                cur_right = j - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 面积</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; col; j++)&#123;</span><br><span class=\"line\">            maxArea = Math.max(maxArea, (right[j] - left[j] + <span class=\"number\">1</span>) * height[j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxArea;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"19-扰乱字符串-87\"><a href=\"#19-扰乱字符串-87\" class=\"headerlink\" title=\"19. 扰乱字符串 [87]\"></a>19. 扰乱字符串 [87]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/scramble-string/\" target=\"_blank\" rel=\"noopener\">87. 扰乱字符串</a></p>\n<h3 id=\"19-1-题目描述\"><a href=\"#19-1-题目描述\" class=\"headerlink\" title=\"19.1. 题目描述\"></a>19.1. 题目描述</h3><p><img src=\"/pictures/image-20200821104157163.png\" alt=\"image-20200821104157163\"></p>\n<p><img src=\"/pictures/image-20200821104215491.png\" alt=\"image-20200821104215491\"></p>\n<h3 id=\"19-2-代码\"><a href=\"#19-2-代码\" class=\"headerlink\" title=\"19.2. 代码\"></a>19.2. 代码</h3><p>本题的难点在于没有思路… 也很难构造出 dp 的定义和状态。</p>\n<p>具体分析参考：<a href=\"https://leetcode-cn.com/problems/scramble-string/solution/miao-dong-de-qu-jian-xing-dpsi-lu-by-sha-yu-la-jia/\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isScramble</span><span class=\"params\">(String s1, String s2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] chs1 = s1.toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] chs2 = s2.toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = s1.length();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// dp[i][j][len]dp[i][j][len] 表示从字符串 S 中 i 开始（包括 i）长度为 len 的字符串是否能变换为</span></span><br><span class=\"line\">    <span class=\"comment\">// 从字符串 T 中 j （包括 j）开始长度为 len 的字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[][][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[n][n][n + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\">    <span class=\"comment\">// 初始化单个字符的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">            dp[i][j][<span class=\"number\">1</span>] = (chs1[i] == chs2[j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 枚举长度区间 len</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> len = <span class=\"number\">2</span>; len &lt;= n; len++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 枚举 S 的起点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n - len; i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 枚举 T 的起点</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= n - len; j++)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 枚举划分位置</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= len - <span class=\"number\">1</span>; k++)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 第一种情况：不交换</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(dp[i][j][k] &amp;&amp; dp[i + k][j + k][len - k])&#123;</span><br><span class=\"line\">                        dp[i][j][len] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 第二种情况：交换</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(dp[i][j + len - k][k] &amp;&amp; dp[i + k][j][len - k])&#123;</span><br><span class=\"line\">                        dp[i][j][len] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>][n];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"20-格雷编码-89\"><a href=\"#20-格雷编码-89\" class=\"headerlink\" title=\"20. 格雷编码 [89]\"></a>20. 格雷编码 [89]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/gray-code/\" target=\"_blank\" rel=\"noopener\">89. 格雷编码</a></p>\n<h3 id=\"20-1-题目描述\"><a href=\"#20-1-题目描述\" class=\"headerlink\" title=\"20.1. 题目描述\"></a>20.1. 题目描述</h3><p><img src=\"/pictures/image-20200822094721670.png\" alt=\"image-20200822094721670\"></p>\n<h3 id=\"20-2-代码\"><a href=\"#20-2-代码\" class=\"headerlink\" title=\"20.2. 代码\"></a>20.2. 代码</h3><p>感觉应该用 dp，但是没找到怎么 dp，所以 dp 问题首先应该找到小问题，然后考虑怎么根据小问题解决大问题。</p>\n<p>详细参考：<a href=\"https://leetcode.wang/leetCode-89-Gray-Code.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">grayCode</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// dp 列表存储最终结果</span></span><br><span class=\"line\">    List&lt;Integer&gt; dp = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// base case，n = 0 时</span></span><br><span class=\"line\">    dp.add(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历要加的数的次数，从 0 开始，到 n-1 结束</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 要加的数，即 2^i</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> add = <span class=\"number\">1</span> &lt;&lt; i;</span><br><span class=\"line\">        <span class=\"comment\">// 倒序遍历，加上 add 添加到结果集中</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = dp.size() - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--)&#123;</span><br><span class=\"line\">            dp.add(dp.get(j) + add);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"21-解码方法-91\"><a href=\"#21-解码方法-91\" class=\"headerlink\" title=\"21. 解码方法 [91]\"></a>21. 解码方法 [91]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/decode-ways/\" target=\"_blank\" rel=\"noopener\">91. 解码方法</a></p>\n<h3 id=\"21-1-题目描述\"><a href=\"#21-1-题目描述\" class=\"headerlink\" title=\"21.1. 题目描述\"></a>21.1. 题目描述</h3><p><img src=\"/pictures/image-20200825143910613.png\" alt=\"image-20200825143910613\"></p>\n<h3 id=\"21-2-代码\"><a href=\"#21-2-代码\" class=\"headerlink\" title=\"21.2. 代码\"></a>21.2. 代码</h3><p>分析参考：<a href=\"https://leetcode-cn.com/problems/decode-ways/solution/dong-tai-gui-hua-java-python-by-liweiwei1419/\" target=\"_blank\" rel=\"noopener\">这里</a> ，再结合自己的思路，写了一个更好理解的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">numDecodings</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = s.length();</span><br><span class=\"line\">    <span class=\"comment\">// dp[i] = x 表示：s[0...i] 有 x 中解码方法</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] charArray = s.toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (charArray[<span class=\"number\">0</span>] == <span class=\"string\">'0'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = <span class=\"number\">10</span> * (charArray[i - <span class=\"number\">1</span>] - <span class=\"string\">'0'</span>) + (charArray[i] - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 如果是 0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(charArray[i] == <span class=\"string\">'0'</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 只有和前一位组成的数字在 10 到 26 之内，dp 才会有值，否则是初始值 0</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"number\">10</span> &lt;= num &amp;&amp; num &lt;= <span class=\"number\">26</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    dp[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    dp[i] = dp[i - <span class=\"number\">2</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果不是 0</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 和前一位组成的数字在 10 到 26 之内，dp 值增大</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"number\">10</span> &lt;= num &amp;&amp; num &lt;= <span class=\"number\">26</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    dp[i] = dp[i - <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    dp[i] = dp[i - <span class=\"number\">1</span>] + dp[i - <span class=\"number\">2</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 不在 10 到 26 之内，dp 和 前一位相同</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                dp[i] = dp[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[len - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>本题的难点在于：出现 0 的处理，边界条件太多了…可能的情况太多了…是真的费时间。</p>\n<h2 id=\"22-最大子序和-53\"><a href=\"#22-最大子序和-53\" class=\"headerlink\" title=\"22. 最大子序和 [53]\"></a>22. 最大子序和 [53]</h2><p>题目描述：<a href=\"https://leetcode-cn.com/problems/maximum-subarray/\" target=\"_blank\" rel=\"noopener\">53. 最大子序和</a></p>\n<h3 id=\"22-1-题目描述\"><a href=\"#22-1-题目描述\" class=\"headerlink\" title=\"22.1. 题目描述\"></a>22.1. 题目描述</h3><p><img src=\"/pictures/image-20200826102906095.png\" alt=\"image-20200826102906095\"></p>\n<h3 id=\"22-2-代码\"><a href=\"#22-2-代码\" class=\"headerlink\" title=\"22.2. 代码\"></a>22.2. 代码</h3><p>典型的动态规划问题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = nums.length;</span><br><span class=\"line\">    <span class=\"comment\">// dp[i] = x 表示以 nums[i] 结尾的最大子序列和为x</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len];</span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 状态转移</span></span><br><span class=\"line\">        dp[i] = Math.max(nums[i], nums[i] + dp[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">        max = Math.max(max, dp[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"23-交错字符串-97\"><a href=\"#23-交错字符串-97\" class=\"headerlink\" title=\"23. 交错字符串 [97]\"></a>23. 交错字符串 [97]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/interleaving-string/\" target=\"_blank\" rel=\"noopener\">97. 交错字符串</a></p>\n<h3 id=\"23-1-题目描述\"><a href=\"#23-1-题目描述\" class=\"headerlink\" title=\"23.1. 题目描述\"></a>23.1. 题目描述</h3><p><img src=\"/pictures/image-20200828110613718.png\" alt=\"image-20200828110613718\"></p>\n<h3 id=\"23-2-方法一：动态规划\"><a href=\"#23-2-方法一：动态规划\" class=\"headerlink\" title=\"23.2. 方法一：动态规划\"></a>23.2. 方法一：动态规划</h3><p>参考：<a href=\"https://leetcode.wang/leetCode-97-Interleaving-String.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>dp 数组定义：定义一个 boolean 二维数组 dp [ i ] [ j ] 来表示 s1[ 0, i ) 和 s2 [ 0, j ） 组合后能否构成 s3 [ 0, i + j )，注意不包括右边界，主要是为了考虑开始的时候如果只取 s1，那么 s2 就是空串，这样的话 dp [ i ] [ 0 ] 就能表示 s2 取空串。</p>\n<p>注意，<code>dp[0][0]</code> 表示 s1 和 s2 都取空串，组成一个空串，则值为 true。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isInterleave</span><span class=\"params\">(String s1, String s2, String s3)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s1.length() + s2.length() != s3.length()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s1.length() == <span class=\"number\">0</span> &amp;&amp; s2.length() == <span class=\"number\">0</span> &amp;&amp; s3.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len1 = s1.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len2 = s2.length();</span><br><span class=\"line\">    <span class=\"comment\">// dp[i][j] = true 表示：s1[0..i) 和 s2[0..j) 组合后能构成 s3[0..i+j)</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[len1 + <span class=\"number\">1</span>][len2 + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= len1; i++) &#123;</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] &amp;&amp; s1.charAt(i - <span class=\"number\">1</span>) == s3.charAt(i - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= len2; j++) &#123;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][j] = dp[<span class=\"number\">0</span>][j - <span class=\"number\">1</span>] &amp;&amp; s2.charAt(j - <span class=\"number\">1</span>) == s3.charAt(j - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= len1; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= len2; j++) &#123;</span><br><span class=\"line\">            dp[i][j] = (dp[i - <span class=\"number\">1</span>][j] &amp;&amp; s1.charAt(i - <span class=\"number\">1</span>) == s3.charAt(i + j - <span class=\"number\">1</span>))</span><br><span class=\"line\">                || (dp[i][j - <span class=\"number\">1</span>] &amp;&amp; s2.charAt(j - <span class=\"number\">1</span>) == s3.charAt(i + j - <span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[len1][len2];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"23-3-方法二：回溯\"><a href=\"#23-3-方法二：回溯\" class=\"headerlink\" title=\"23.3. 方法二：回溯\"></a>23.3. 方法二：回溯</h3><p>可前往我的博客 <a href=\"http://juliajiang.top/2020/07/25/回溯算法总结/\" target=\"_blank\" rel=\"noopener\">回溯算法总结</a> 的 15. 交错字符串 [97] 查看。</p>\n<h2 id=\"24-最小路径和-64\"><a href=\"#24-最小路径和-64\" class=\"headerlink\" title=\"24. 最小路径和 [64]\"></a>24. 最小路径和 [64]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/minimum-path-sum/\" target=\"_blank\" rel=\"noopener\">64. 最小路径和</a></p>\n<h3 id=\"24-1-题目描述\"><a href=\"#24-1-题目描述\" class=\"headerlink\" title=\"24.1. 题目描述\"></a>24.1. 题目描述</h3><p><img src=\"/pictures/image-20200901100037412.png\" alt=\"image-20200901100037412\"></p>\n<h3 id=\"24-2-代码\"><a href=\"#24-2-代码\" class=\"headerlink\" title=\"24.2. 代码\"></a>24.2. 代码</h3><p>典型的动态规划问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minPathSum</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] grid)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> row = grid.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> col = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">// dp[i][j] = x 表示：到grid[i][j]的最小路径和为 x</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[row][col];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = grid[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; col; j++)&#123;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][j] = dp[<span class=\"number\">0</span>][j - <span class=\"number\">1</span>] + grid[<span class=\"number\">0</span>][j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; row; i++)&#123;</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] + grid[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; row; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; col; j++)&#123;</span><br><span class=\"line\">            dp[i][j] = Math.min(dp[i - <span class=\"number\">1</span>][j], dp[i][j - <span class=\"number\">1</span>]) + grid[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[row - <span class=\"number\">1</span>][col - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"25-不同的子序列-115\"><a href=\"#25-不同的子序列-115\" class=\"headerlink\" title=\"25. 不同的子序列 [115]\"></a>25. 不同的子序列 [115]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/distinct-subsequences/\" target=\"_blank\" rel=\"noopener\">115. 不同的子序列</a></p>\n<h3 id=\"25-1-题目描述\"><a href=\"#25-1-题目描述\" class=\"headerlink\" title=\"25.1. 题目描述\"></a>25.1. 题目描述</h3><p><img src=\"/pictures/image-20200904105932893.png\" alt=\"image-20200904105932893\"></p>\n<h3 id=\"25-2-代码\"><a href=\"#25-2-代码\" class=\"headerlink\" title=\"25.2. 代码\"></a>25.2. 代码</h3><p>参考：<a href=\"https://leetcode.wang/leetcode-115-Distinct-Subsequences.html\" target=\"_blank\" rel=\"noopener\">这里</a> 的解法三，将 dp 从逆序改为正序。</p>\n<p>这道题一开始用的回溯，发现超时，需要用 map 存之前的递归结果，不太好存，也不好理解，参考 <a href=\"https://leetcode.wang/leetcode-115-Distinct-Subsequences.html\" target=\"_blank\" rel=\"noopener\">这里</a> 的解法二。</p>\n<p>还是用 dp 吧…</p>\n<p>两个字符串的 dp 问题，依旧是用 <code>dp[0][0]</code> 表示两个字符串均为空串的情况。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">numDistinct</span><span class=\"params\">(String s, String t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sLen = s.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tLen = t.length();</span><br><span class=\"line\">    <span class=\"comment\">// dp[i + 1][j + 1] = x 表示：s[0..i] 中的子序列 t[0..j] 的个数为 x</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[sLen + <span class=\"number\">1</span>][tLen + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= sLen; i++)&#123;</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= tLen; j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= sLen; i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果相等</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(t.charAt(j - <span class=\"number\">1</span>) == s.charAt(i - <span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 有两种选择：不选择当前字母 dp[i - 1][j] 和选择当前字母 dp[i - 1][j - 1]</span></span><br><span class=\"line\">                dp[i][j] = dp[i - <span class=\"number\">1</span>][j] + dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"comment\">// 如果不相等</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 只有一种选择：不选当前字母</span></span><br><span class=\"line\">                dp[i][j] = dp[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[sLen][tLen];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"26-三角形最小路径和-120\"><a href=\"#26-三角形最小路径和-120\" class=\"headerlink\" title=\"26. 三角形最小路径和 [120]\"></a>26. 三角形最小路径和 [120]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/triangle/\" target=\"_blank\" rel=\"noopener\">120. 三角形最小路径和</a></p>\n<h3 id=\"26-1-题目描述\"><a href=\"#26-1-题目描述\" class=\"headerlink\" title=\"26.1 题目描述\"></a>26.1 题目描述</h3><p><img src=\"/pictures/image-20200910185227369.png\" alt=\"image-20200910185227369\"></p>\n<h3 id=\"26-2-方法一：动态规划\"><a href=\"#26-2-方法一：动态规划\" class=\"headerlink\" title=\"26.2 方法一：动态规划\"></a>26.2 方法一：动态规划</h3><p>参考 <a href=\"https://leetcode.wang/leetcode-120-Triangle.html\" target=\"_blank\" rel=\"noopener\">这里</a> 做了一些改动。但是这种 dp 空复为 O(n^2)。</p>\n<p>为什么..最近做题老是想不到动态规划.. 老想回溯…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minimumTotal</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = triangle.size();</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[size][size];</span><br><span class=\"line\">    <span class=\"comment\">// dp[i][j] = x 表示：triangle[i][j] 的最小路径和为 x</span></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = triangle.get(<span class=\"number\">0</span>).get(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历每一行</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; size; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历这一行的每一个数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= i; j++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 这一行的最后一个数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j == i)&#123;</span><br><span class=\"line\">                dp[i][j] = dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + triangle.get(i).get(j);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                dp[i][j] = dp[i - <span class=\"number\">1</span>][j] + triangle.get(i).get(j);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                dp[i][j] = Math.min(dp[i - <span class=\"number\">1</span>][j], dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>]) + triangle.get(i).get(j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> min = Integer.MAX_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)&#123;</span><br><span class=\"line\">        min = Math.min(min, dp[size-<span class=\"number\">1</span>][i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"26-3-方法一的优化\"><a href=\"#26-3-方法一的优化\" class=\"headerlink\" title=\"26.3. 方法一的优化\"></a>26.3. 方法一的优化</h3><p>上面的动态规划 dp 数组是二维数组，但是每一次只用到上一层的数据。所以使用一维的 dp 数组即可。此时，空复是 O(n)。</p>\n<p>如果正着更新的话，会把后面要用的值覆盖掉。因此，倒着更新。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minimumTotal</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = triangle.size();</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[size];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>]=triangle.get(<span class=\"number\">0</span>).get(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; size; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &gt;= <span class=\"number\">0</span>; j--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j == i)&#123;</span><br><span class=\"line\">                dp[j] = dp[j - <span class=\"number\">1</span>] + triangle.get(i).get(j);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                dp[j] = dp[j] + triangle.get(i).get(j);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                dp[j] = Math.min(dp[j - <span class=\"number\">1</span>], dp[j]) + triangle.get(i).get(j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> min = Integer.MAX_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)&#123;</span><br><span class=\"line\">        min = Math.min(min, dp[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"27-买卖股票的最佳时机-III-123\"><a href=\"#27-买卖股票的最佳时机-III-123\" class=\"headerlink\" title=\"27. 买卖股票的最佳时机 III [123]\"></a>27. 买卖股票的最佳时机 III [123]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/\" target=\"_blank\" rel=\"noopener\">123. 买卖股票的最佳时机 III</a></p>\n<h3 id=\"27-1-题目描述\"><a href=\"#27-1-题目描述\" class=\"headerlink\" title=\"27.1. 题目描述\"></a>27.1. 题目描述</h3><p><img src=\"/pictures/image-20200914160900975.png\" alt=\"image-20200914160900975\"></p>\n<h3 id=\"27-2-方法一：DP\"><a href=\"#27-2-方法一：DP\" class=\"headerlink\" title=\"27.2. 方法一：DP\"></a>27.2. 方法一：DP</h3><p>参考 <a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/solution/mai-mai-gu-piao-zui-jia-shi-ji-iiidong-tai-gui-hua/\" target=\"_blank\" rel=\"noopener\">这里</a> 的方法二。</p>\n<p>使用二维数组，第二位存储 5 种状态，想不到…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"keyword\">int</span>[] prices)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prices.length &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = prices.length;</span><br><span class=\"line\">    <span class=\"comment\">// 5 种状态：0 未交易；1 买入一次；2 卖出一次；3 买入2次；卖出2次</span></span><br><span class=\"line\">    <span class=\"comment\">// dp[i][j] = x 表示：用户处于 j 状态下的钱为 x</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len][<span class=\"number\">5</span>];</span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">3</span>] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">4</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        dp[i][<span class=\"number\">1</span>] = Math.max(dp[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>], dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] - prices[i]);</span><br><span class=\"line\">        dp[i][<span class=\"number\">2</span>] = Math.max(dp[i - <span class=\"number\">1</span>][<span class=\"number\">2</span>], dp[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>] + prices[i]);</span><br><span class=\"line\">        dp[i][<span class=\"number\">3</span>] = Math.max(dp[i - <span class=\"number\">1</span>][<span class=\"number\">3</span>], dp[i - <span class=\"number\">1</span>][<span class=\"number\">2</span>] - prices[i]);</span><br><span class=\"line\">        dp[i][<span class=\"number\">4</span>] = Math.max(dp[i - <span class=\"number\">1</span>][<span class=\"number\">4</span>], dp[i - <span class=\"number\">1</span>][<span class=\"number\">3</span>] + prices[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.max(dp[len - <span class=\"number\">1</span>][<span class=\"number\">2</span>], dp[len - <span class=\"number\">1</span>][<span class=\"number\">4</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"27-3-方法二：方法一的优化\"><a href=\"#27-3-方法二：方法一的优化\" class=\"headerlink\" title=\"27.3. 方法二：方法一的优化\"></a>27.3. 方法二：方法一的优化</h3><p>上面解法中，每一次 dp 数组的更新只会依赖于上一层 dp 数组，因此没必要使用二维数组，使用一维数组，存储上一层数据即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"keyword\">int</span>[] prices)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prices.length &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = prices.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">    dp[<span class=\"number\">2</span>] = Integer.MIN_VALUE;</span><br><span class=\"line\">    dp[<span class=\"number\">3</span>] = Integer.MIN_VALUE;</span><br><span class=\"line\">    dp[<span class=\"number\">4</span>] = Integer.MIN_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>] = Math.max(dp[<span class=\"number\">1</span>], dp[<span class=\"number\">0</span>] - prices[i]);</span><br><span class=\"line\">        dp[<span class=\"number\">2</span>] = Math.max(dp[<span class=\"number\">2</span>], dp[<span class=\"number\">1</span>] + prices[i]);</span><br><span class=\"line\">        dp[<span class=\"number\">3</span>] = Math.max(dp[<span class=\"number\">3</span>], dp[<span class=\"number\">2</span>] - prices[i]);</span><br><span class=\"line\">        dp[<span class=\"number\">4</span>] = Math.max(dp[<span class=\"number\">4</span>], dp[<span class=\"number\">3</span>] + prices[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.max(dp[<span class=\"number\">2</span>], dp[<span class=\"number\">4</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"28-参考引用\"><a href=\"#28-参考引用\" class=\"headerlink\" title=\"28. 参考引用\"></a>28. 参考引用</h2><ol>\n<li><a href=\"[https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92](https://zh.wikipedia.org/wiki/动态规划)\">Wikipedia</a></li>\n<li><a href=\"https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/dong-tai-gui-hua-xiang-jie-jin-jie\" target=\"_blank\" rel=\"noopener\">https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/dong-tai-gui-hua-xiang-jie-jin-jie</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/7QFapCuvi-2nkh6gREcR9g\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/7QFapCuvi-2nkh6gREcR9g</a></li>\n<li><a href=\"https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zui-chang-gong-gong-zi-xu-lie\" target=\"_blank\" rel=\"noopener\">https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zui-chang-gong-gong-zi-xu-lie</a></li>\n<li><a href=\"https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zui-da-zi-shu-zu\" target=\"_blank\" rel=\"noopener\">https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zui-da-zi-shu-zu</a></li>\n<li><a href=\"https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/dong-tai-gui-hua-zhi-kmp-zi-fu-pi-pei-suan-fa\" target=\"_blank\" rel=\"noopener\">https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/dong-tai-gui-hua-zhi-kmp-zi-fu-pi-pei-suan-fa</a></li>\n<li><a href=\"https://leetcode.wang/leetCode-42-Trapping-Rain-Water.html\" target=\"_blank\" rel=\"noopener\">https://leetcode.wang/leetCode-42-Trapping-Rain-Water.html</a></li>\n<li><a href=\"https://leetcode.wang/leetCode-32-Longest-Valid-Parentheses.html\" target=\"_blank\" rel=\"noopener\">https://leetcode.wang/leetCode-32-Longest-Valid-Parentheses.html</a></li>\n<li><a href=\"https://leetcode.wang/leetCode-89-Gray-Code.html\" target=\"_blank\" rel=\"noopener\">https://leetcode.wang/leetCode-89-Gray-Code.html</a></li>\n</ol>\n","site":{"data":{}},"length":36023,"excerpt":"<p>本文主要介绍了动态规划的概念、解题框架，并以斐波那契数列、零钱兑换为例，进一步说明动态规划如何运用和理解。另外，本文还解决了LeetCode中部分使用动态规划思想的题目，这部分会持续更新。</p>\n<h2 id=\"1-什么是动态规划？\"><a href=\"#1-什么是动态规划？\" class=\"headerlink\" title=\"1. 什么是动态规划？\"></a>1. 什么是动态规划？</h2><p><a href=\"https://zh.wikipedia.org/wiki/动态规划\" target=\"_blank\" rel=\"noopener\">维基定义</a>：（英语：Dynamic programming，简称DP）是一种在数学、管理科学、计算机科学、经济学和生物信息学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。</p>\n<p>动态规划常常适用于有重叠子问题和最优子结构性质的问题，动态规划方法所耗时间往往远少于朴素解法。</p>\n<p>动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。</p>\n<p>通常许多子问题非常相似，为此动态规划法试图仅仅解决每个子问题一次，从而减少计算量：一旦某个给定子问题的解已经算出，则将其记忆化存储，以便下次需要同一个子问题解之时直接查表。这种做法在重复子问题的数目关于输入的规模呈指数增长时特别有用。</p>","more":"<h3 id=\"1-1-适用情况\"><a href=\"#1-1-适用情况\" class=\"headerlink\" title=\"1.1 适用情况\"></a>1.1 适用情况</h3><ol>\n<li>最优子结构性质。如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质（即满足最优化原理）。最优子结构性质为动态规划算法解决问题提供了重要线索。</li>\n<li>无后效性。即子问题的解一旦确定，就不再改变，不受在这之后、包含它的更大的问题的求解决策影响。</li>\n<li>子问题重叠性质。子问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。动态规划算法正是利用了这种子问题的重叠性质，对每一个子问题只计算一次，然后将其计算结果保存在一个表格中，当再次需要计算已经计算过的子问题时，只是在表格中简单地查看一下结果，从而获得较高的效率，降低了时间复杂度。</li>\n</ol>\n<h2 id=\"2-动态规划解题框架\"><a href=\"#2-动态规划解题框架\" class=\"headerlink\" title=\"2. 动态规划解题框架\"></a>2. 动态规划解题框架</h2><p>这一节参考 <a href=\"https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/dong-tai-gui-hua-xiang-jie-jin-jie\" target=\"_blank\" rel=\"noopener\">这里</a> 给出一些对于动态规划的理解和解体框架。</p>\n<p><strong>首先，动态规划问题的一般形式就是求最值</strong>。动态规划其实是运筹学的一种最优化方法，只不过在计算机问题上应用比较多，比如求<strong>最长</strong>递增子序列呀，<strong>最小</strong>编辑距离等。</p>\n<p>既然是要求最值，核心问题是什么呢？<strong>求解动态规划的核心问题是穷举</strong>。因为要求最值，肯定要把所有可行的答案穷举出来，然后在其中找最值。</p>\n<p>动态规划这么简单，就是穷举就完事了？我看到的动态规划问题都很难啊！</p>\n<p>首先，动态规划的穷举有点特别，因为这类问题<strong>存在「重叠子问题」</strong>，如果暴力穷举的话效率会极其低下，所以需要「备忘录」或者「DP table」来优化穷举过程，避免不必要的计算。</p>\n<p>而且，动态规划问题一定会<strong>具备「最优子结构」</strong>，才能通过子问题的最值得到原问题的最值。</p>\n<p>另外，虽然动态规划的核心思想就是穷举求最值，但是问题可以千变万化，穷举所有可行解其实并不是一件容易的事，只有列出<strong>正确的「状态转移方程」</strong>才能正确地穷举。</p>\n<p>以上提到的重叠子问题、最优子结构、状态转移方程就是动态规划三要素。具体什么意思等会会举例详解，但是在实际的算法问题中，<strong>写出状态转移方程是最困难的</strong>，这也就是为什么很多朋友觉得动态规划问题困难的原因，我来提供我研究出来的一个思维框架，辅助你思考状态转移方程：</p>\n<p><strong>明确 base case -&gt; 明确「状态」-&gt; 明确「选择」 -&gt; 定义 dp 数组/函数的含义</strong>。</p>\n<p>按上面的套路走，最后的结果就可以套这个框架：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 初始化 base case</span></span><br><span class=\"line\">dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>][...] = base</span><br><span class=\"line\"><span class=\"comment\"># 进行状态转移</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> 状态<span class=\"number\">1</span> <span class=\"keyword\">in</span> 状态<span class=\"number\">1</span>的所有取值：</span><br><span class=\"line\">    <span class=\"keyword\">for</span> 状态<span class=\"number\">2</span> <span class=\"keyword\">in</span> 状态<span class=\"number\">2</span>的所有取值：</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ...</span><br><span class=\"line\">            dp[状态<span class=\"number\">1</span>][状态<span class=\"number\">2</span>][...] = 求最值(选择<span class=\"number\">1</span>，选择<span class=\"number\">2.</span>..)</span><br></pre></td></tr></table></figure>\n\n<p>下文中的斐波那契数列可以帮助理解动态规划问题，零钱兑换问题使用总结的框架进行流程化求解。</p>\n<h2 id=\"3-以斐波那契数列-509-为例\"><a href=\"#3-以斐波那契数列-509-为例\" class=\"headerlink\" title=\"3. 以斐波那契数列 [509] 为例\"></a>3. 以斐波那契数列 [509] 为例</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/fibonacci-number/\" target=\"_blank\" rel=\"noopener\">509. 斐波那契数</a></p>\n<h3 id=\"3-1-题目描述\"><a href=\"#3-1-题目描述\" class=\"headerlink\" title=\"3.1 题目描述\"></a>3.1 题目描述</h3><p>斐波那契数，通常用 F(n) 表示，形成的序列称为斐波那契数列。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：</p>\n<p>F(0) = 0,   F(1) = 1<br>F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.<br>给定 N，计算 F(N)。</p>\n<p>示例 1：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：2</span><br><span class=\"line\">输出：1</span><br><span class=\"line\">解释：F(2) = F(1) + F(0) = 1 + 0 = 1.</span><br></pre></td></tr></table></figure>\n\n\n<p>示例 2：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：3</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：F(3) = F(2) + F(1) = 1 + 1 = 2.</span><br></pre></td></tr></table></figure>\n\n\n<p>提示：</p>\n<p>0 ≤ N ≤ 30</p>\n<h3 id=\"3-2-方法一：暴力递归\"><a href=\"#3-2-方法一：暴力递归\" class=\"headerlink\" title=\"3.2 方法一：暴力递归\"></a>3.2 方法一：暴力递归</h3><p>斐波那契数列的数学形式就是递归的，写成代码就是这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(N == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(N == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fib(N - <span class=\"number\">1</span>) + fib(N - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个不用多说了，学校老师讲递归的时候似乎都是拿这个举例。我们也知道这样写代码虽然简洁易懂，但是十分低效，低效在哪里？假设 n = 20，画出的递归树如下：</p>\n<img src=\"/pictures/1-1595902107828.jpg\" alt=\"img\" style=\"zoom:33%;\" />\n\n<p>这个递归树怎么理解？就是说想要计算原问题 <code>f(20)</code>，我就得先计算出子问题 <code>f(19)</code> 和 <code>f(18)</code>，然后要计算 <code>f(19)</code>，我就要先算出子问题 <code>f(18)</code> 和 <code>f(17)</code>，以此类推。最后遇到 <code>f(1)</code> 或者 <code>f(2)</code> 的时候，结果已知，就能直接返回结果，递归树不再向下生长了。</p>\n<p><strong>递归算法的时间复杂度怎么计算？就是用子问题个数乘以解决一个子问题需要的时间。</strong></p>\n<p>首先计算子问题个数，即递归树中节点的总数。显然二叉树节点总数为指数级别，所以子问题个数为 O(2^n)。</p>\n<p>然后计算解决一个子问题的时间，在本算法中，没有循环，只有 <code>f(n - 1) + f(n - 2)</code> 一个加法操作，时间为 O(1)。</p>\n<p>所以，这个算法的时间复杂度为二者相乘，即 O(2^n)，指数级别，爆炸。</p>\n<p>观察递归树，很明显发现了算法低效的原因：存在大量重复计算，比如 <code>f(18)</code> 被计算了两次，而且你可以看到，以 <code>f(18)</code> 为根的这个递归树体量巨大，多算一遍，会耗费巨大的时间。更何况，还不止 <code>f(18)</code> 这一个节点被重复计算，所以这个算法及其低效。</p>\n<p>这就是动态规划问题的第一个性质：<strong>重叠子问题</strong>。下面，我们想办法解决这个问题。</p>\n<h3 id=\"3-3-方法二：带备忘录的递归解法\"><a href=\"#3-3-方法二：带备忘录的递归解法\" class=\"headerlink\" title=\"3.3 方法二：带备忘录的递归解法\"></a>3.3 方法二：带备忘录的递归解法</h3><p>明确了问题，其实就已经把问题解决了一半。即然耗时的原因是重复计算，那么我们可以造一个「备忘录」，每次算出某个子问题的答案后别急着返回，先记到「备忘录」里再返回；每次遇到一个子问题先去「备忘录」里查一查，如果发现之前已经解决过这个问题了，直接把答案拿出来用，不要再耗时去计算了。</p>\n<p>一般使用一个数组充当这个「备忘录」，当然你也可以使用哈希表（字典），思想都是一样的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] memo = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(N == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\">    memo[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper(memo, N);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] memo, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 递归结束条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果已经计算过</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(memo[n] != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> memo[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    memo[n] = helper(memo, n - <span class=\"number\">1</span>) + helper(memo, n - <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> memo[n];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于本算法不存在冗余计算，子问题就是 <code>f(1)</code>, <code>f(2)</code>, <code>f(3)</code> … <code>f(20)</code>，数量和输入规模 n = 20 成正比，所以子问题个数为 O(n)。</p>\n<p>解决一个子问题的时间，同上，没有什么循环，时间为 O(1)。</p>\n<p>所以，本算法的时间复杂度是 O(n)。比起暴力算法，是降维打击。</p>\n<p>至此，带备忘录的递归解法的效率已经和迭代的动态规划解法一样了。实际上，这种解法和迭代的动态规划已经差不多了，只不过这种方法叫做「自顶向下」，动态规划叫做「自底向上」。</p>\n<p>啥叫「自顶向下」？注意我们刚才画的递归树（或者说图），是从上向下延伸，都是从一个规模较大的原问题比如说 <code>f(20)</code>，向下逐渐分解规模，直到 <code>f(1)</code> 和 <code>f(2)</code> 这两个 base case，然后逐层返回答案，这就叫「自顶向下」。</p>\n<p>啥叫「自底向上」？反过来，我们直接从最底下，最简单，问题规模最小的 <code>f(1)</code> 和 <code>f(2)</code> 开始往上推，直到推到我们想要的答案 <code>f(20)</code>，这就是动态规划的思路，这也是为什么动态规划一般都脱离了递归，而是由循环迭代完成计算。</p>\n<h3 id=\"3-4-方法三：动态规划\"><a href=\"#3-4-方法三：动态规划\" class=\"headerlink\" title=\"3.4 方法三：动态规划\"></a>3.4 方法三：动态规划</h3><p>有了上一步「备忘录」的启发，我们可以把这个「备忘录」独立出来成为一张表，就叫做 DP table 吧，在这张表上完成「自底向上」的推算。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(N == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(N == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= N; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 状态转移方程</span></span><br><span class=\"line\">        dp[i] = dp[i - <span class=\"number\">1</span>] + dp[i - <span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[N];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际上，带备忘录的递归解法中的「备忘录」，最终完成后就是这个 DP table，所以说这两种解法其实是差不多的，大部分情况下，效率也基本相同。</p>\n<p>这里，引出「状态转移方程」这个名词，实际上就是描述问题结构的数学形式：</p>\n<img src=\"/pictures/fib.png\" alt=\"img\" style=\"zoom: 67%;\" />\n\n<p>为啥叫「状态转移方程」？其实就是为了听起来高端。你把 <code>f(n)</code> 想做一个状态 <code>n</code>，这个状态 <code>n</code> 是由状态 <code>n - 1</code> 和状态 <code>n - 2</code> 相加转移而来，这就叫状态转移，仅此而已。</p>\n<p><strong>千万不要看不起暴力解，动态规划问题最困难的就是写出这个暴力解，即状态转移方程</strong>。只要写出暴力解，优化方法无非是用备忘录或者 DP table，再无奥妙可言。</p>\n<p>这个例子的最后，讲一个细节优化。细心的读者会发现，根据斐波那契数列的状态转移方程，当前状态只和之前的两个状态有关，其实并不需要那么长的一个 DP table 来存储所有的状态，只要想办法存储之前的两个状态就行了。所以，可以进一步优化，把空间复杂度降为 O(1)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">fib3</span><span class=\"params\">(<span class=\"keyword\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(N == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(N == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pre = <span class=\"number\">0</span>, curr = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= N; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = pre + curr;</span><br><span class=\"line\">        pre = curr;</span><br><span class=\"line\">        curr = sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个技巧就是所谓的「<strong>状态压缩</strong>」，如果我们发现每次状态转移只需要 DP table 中的一部分，那么可以尝试用状态压缩来缩小 DP table 的大小，只记录必要的数据，上述例子就相当于把DP table 的大小从 <code>n</code> 缩小到 2。后续的动态规划章节中我们还会看到这样的例子，一般来说是把一个二维的 DP table 压缩成一维，即把空间复杂度从 O(n^2) 压缩到 O(n)。</p>\n<p>有人会问，动态规划的另一个重要特性「最优子结构」，怎么没有涉及？下面会涉及。斐波那契数列的例子严格来说不算动态规划，因为没有涉及求最值，以上旨在说明重叠子问题的消除方法，演示得到最优解法逐步求精的过程。下面，看第二个例子，凑零钱问题。</p>\n<h2 id=\"4-框架求解零钱兑换-322\"><a href=\"#4-框架求解零钱兑换-322\" class=\"headerlink\" title=\"4. 框架求解零钱兑换 [322]\"></a>4. 框架求解零钱兑换 [322]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/coin-change/\" target=\"_blank\" rel=\"noopener\">322. 零钱兑换</a></p>\n<h3 id=\"4-1-题目描述\"><a href=\"#4-1-题目描述\" class=\"headerlink\" title=\"4.1 题目描述\"></a>4.1 题目描述</h3><p>给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。</p>\n<p>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: coins = [1, 2, 5], amount = 11</span><br><span class=\"line\">输出: 3 </span><br><span class=\"line\">解释: 11 = 5 + 5 + 1</span><br></pre></td></tr></table></figure>\n\n<p>示例 2：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: coins = [2], amount = 3</span><br><span class=\"line\">输出: -1</span><br></pre></td></tr></table></figure>\n\n\n<p>说明:<br>你可以认为每种硬币的数量是无限的。</p>\n<h3 id=\"4-2-题目分析与代码\"><a href=\"#4-2-题目分析与代码\" class=\"headerlink\" title=\"4.2 题目分析与代码\"></a>4.2 题目分析与代码</h3><p>分析参考 <a href=\"https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/dong-tai-gui-hua-xiang-jie-jin-jie#er-cou-ling-qian-wen-ti\" target=\"_blank\" rel=\"noopener\">这里</a> , 使用上文中总结的动态规划框架。</p>\n<p>首先，这是一个动态规划问题。满足三个条件：</p>\n<ol>\n<li><p>最优子结构。即问题的最优解所包含的子问题的解也是最优的，且子问题间必须相互独立。什么叫做相互独立？我用一个直观的例子来讲解。</p>\n<p>比如说，假设你考试，每门科目的成绩都是互相独立的。你的原问题是考出最高的总成绩，那么你的子问题就是要把语文考到最高，数学考到最高…… 为了每门课考到最高，你要把每门课相应的选择题分数拿到最高，填空题分数拿到最高…… 当然，最终就是你每门课都是满分，这就是最高的总成绩。</p>\n<p>得到了正确的结果：最高的总成绩就是总分。因为这个过程符合最优子结构，“每门科目考到最高”这些子问题是互相独立，互不干扰的。</p>\n<p>但是，如果加一个条件：你的语文成绩和数学成绩会互相制约，数学分数高，语文分数就会降低，反之亦然。这样的话，显然你能考到的最高总成绩就达不到总分了，按刚才那个思路就会得到错误的结果。因为子问题并不独立，语文数学成绩无法同时最优，所以最优子结构被破坏。</p>\n<p>回到凑零钱问题，为什么说它符合最优子结构呢？比如你想求 <code>amount = 11</code> 时的最少硬币数（原问题），如果你知道凑出 <code>amount = 10</code> 的最少硬币数（子问题），你只需要把子问题的答案加一（再选一枚面值为 1 的硬币）就是原问题的答案。因为硬币的数量是没有限制的，所以子问题之间没有相互制约，是互相独立的。</p>\n</li>\n<li><p>无后效性。即子问题的解一旦确定，就不再改变，不受在这之后、包含它的更大的问题的求解决策影响。</p>\n</li>\n<li><p>子问题重叠性质。子问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。</p>\n</li>\n</ol>\n<p>那么，既然知道了这是个动态规划问题，就要思考<strong>如何列出正确的状态转移方程</strong>？</p>\n<p>1、<strong>确定 base case</strong>，这个很简单，显然目标金额 <code>amount</code> 为 0 时算法返回 0，因为不需要任何硬币就已经凑出目标金额了。</p>\n<p>2、<strong>确定「状态」，也就是原问题和子问题中会变化的变量</strong>。由于硬币数量无限，硬币的面额也是题目给定的，只有目标金额会不断地向 base case 靠近，所以唯一的「状态」就是目标金额 <code>amount</code>。</p>\n<p>3、<strong>确定「选择」，也就是导致「状态」产生变化的行为</strong>。<em>目标金额为什么变化呢，因为你在选择硬币，你每选择一枚硬币，就相当于减少了目标金额。</em> 所以说 <strong>所有硬币的面值</strong> ，就是你的「选择」。</p>\n<p>4、<strong>明确</strong> <strong><code>dp</code></strong> <strong>函数/数组的定义</strong>。我们这里讲的是自顶向下的解法，所以会有一个递归的 <code>dp</code> 函数，一般来说函数的参数就是状态转移中会变化的量，也就是上面说到的「状态」；函数的返回值就是题目要求我们计算的量。就本题来说，状态只有一个，即「目标金额」，题目要求我们计算凑出目标金额所需的最少硬币数量。所以我们可以这样定义 <code>dp</code> 函数：</p>\n<p><code>dp(n)</code> 的定义：输入一个目标金额 <code>n</code>，返回凑出目标金额 <code>n</code> 的最少硬币数量。</p>\n<h4 id=\"4-2-1-先使用暴力递归\"><a href=\"#4-2-1-先使用暴力递归\" class=\"headerlink\" title=\"4.2.1 先使用暴力递归\"></a>4.2.1 先使用暴力递归</h4><p>搞清楚上面这几个关键点，解法的伪码就可以写出来了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 伪码框架</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">coinChange</span><span class=\"params\">(coins: List[int], amount: int)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 定义：要凑出金额 n，至少要 dp(n) 个硬币</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dp</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 做选择，选择需要硬币最少的那个结果</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> coin <span class=\"keyword\">in</span> coins:</span><br><span class=\"line\">            res = min(res, <span class=\"number\">1</span> + dp(n - coin))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 题目要求的最终结果是 dp(amount)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp(amount)</span><br></pre></td></tr></table></figure>\n\n<p>根据伪码，我们加上 base case 即可得到最终的答案。显然目标金额为 0 时，所需硬币数量为 0；当目标金额小于 0 时，无解，返回 -1：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">coinChange</span><span class=\"params\">(coins: List[int], amount: int)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dp</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># base case</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n &lt; <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"comment\"># 求最小值，所以初始化为正无穷</span></span><br><span class=\"line\">        res = float(<span class=\"string\">'INF'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> coin <span class=\"keyword\">in</span> coins:</span><br><span class=\"line\">            subproblem = dp(n - coin)</span><br><span class=\"line\">            <span class=\"comment\"># 子问题无解，跳过</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> subproblem == <span class=\"number\">-1</span>: <span class=\"keyword\">continue</span></span><br><span class=\"line\">            res = min(res, <span class=\"number\">1</span> + subproblem)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res <span class=\"keyword\">if</span> res != float(<span class=\"string\">'INF'</span>) <span class=\"keyword\">else</span> <span class=\"number\">-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp(amount)</span><br></pre></td></tr></table></figure>\n\n<p>据此，我们可以得出状态转移方程如下图，以上解法属于暴力递归解法。</p>\n<img src=\"/pictures/coin.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n<p><strong>递归算法的时间复杂度分析：子问题总数 x 每个子问题的时间</strong>。</p>\n<p>子问题总数为递归树节点个数，这个比较难看出来，是 O(n^k)，总之是指数级别的。每个子问题中含有一个 for 循环，复杂度为 O(k)。所以总时间复杂度为 O(k * n^k)，指数级别。</p>\n<h4 id=\"4-2-2-带备忘录的递归解法，消除重叠子问题\"><a href=\"#4-2-2-带备忘录的递归解法，消除重叠子问题\" class=\"headerlink\" title=\"4.2.2 带备忘录的递归解法，消除重叠子问题\"></a>4.2.2 带备忘录的递归解法，消除重叠子问题</h4><p>显然，上述解法中存在重叠子问题，比如<code>amount = 11, coins = {1,2,5}</code> 时画出递归树看看：</p>\n<img src=\"/pictures/5-1595987693352.jpg\" alt=\"img\" style=\"zoom: 33%;\" />\n\n<p>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">coinChange</span><span class=\"params\">(coins: List[int], amount: int)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 备忘录</span></span><br><span class=\"line\">    memo = dict()</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dp</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 查备忘录，避免重复计算</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n <span class=\"keyword\">in</span> memo: <span class=\"keyword\">return</span> memo[n]</span><br><span class=\"line\">        <span class=\"comment\"># base case</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n &lt; <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">        res = float(<span class=\"string\">'INF'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> coin <span class=\"keyword\">in</span> coins:</span><br><span class=\"line\">            subproblem = dp(n - coin)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> subproblem == <span class=\"number\">-1</span>: <span class=\"keyword\">continue</span></span><br><span class=\"line\">            res = min(res, <span class=\"number\">1</span> + subproblem)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 记入备忘录</span></span><br><span class=\"line\">        memo[n] = res <span class=\"keyword\">if</span> res != float(<span class=\"string\">'INF'</span>) <span class=\"keyword\">else</span> <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> memo[n]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp(amount)</span><br></pre></td></tr></table></figure>\n\n<p>很显然「备忘录」大大减小了子问题数目，完全消除了子问题的冗余，所以子问题总数不会超过金额数 <code>n</code>，即子问题数目为 O(n)。处理一个子问题的时间不变，仍是 O(k)，所以总的时间复杂度是 O(kn)。</p>\n<h4 id=\"4-2-3-动态规划，自底向上\"><a href=\"#4-2-3-动态规划，自底向上\" class=\"headerlink\" title=\"4.2.3 动态规划，自底向上\"></a>4.2.3 动态规划，自底向上</h4><p>当然，我们也可以自底向上使用 dp table 来消除重叠子问题，关于「状态」「选择」和 base case 与之前没有区别，<code>dp</code> 数组的定义和刚才 <code>dp</code> 函数类似，也是把「状态」，也就是目标金额作为变量。不过 <code>dp</code> 函数体现在函数参数，而 <code>dp</code> 数组体现在数组索引：</p>\n<p><strong><code>dp</code></strong> <strong>数组的定义：当目标金额为</strong> <strong><code>i</code></strong> <strong>时，至少需要</strong> <strong><code>dp[i]</code></strong> <strong>枚硬币凑出</strong>。</p>\n<p>根据我们文章开头给出的动态规划代码框架可以写出如下解法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">coinChange</span><span class=\"params\">(<span class=\"keyword\">int</span>[] coins, <span class=\"keyword\">int</span> amount)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// dp[i] = n 表示：当目标金额为 i 时，至少需要 n 枚硬币</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[amount+<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 初始化dp数组，初始值为 amount+1, 因为dp 数组最大值取到 amount</span></span><br><span class=\"line\">    Arrays.fill(dp, amount+<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//base case</span></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= amount; j++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 内层for求所有子问题的最小值</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> coin : coins) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 子问题无解，跳过</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j - coin &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dp[j] = dp[j] &lt; dp[j - coin] + <span class=\"number\">1</span> ? dp[j] : dp[j - coin] + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[amount] == amount+<span class=\"number\">1</span> ? -<span class=\"number\">1</span> : dp[amount];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>PS：为啥 <code>dp</code> 数组初始化为 <code>amount + 1</code> 呢，因为凑成 <code>amount</code> 金额的硬币数最多只可能等于 <code>amount</code>（全用 1 元面值的硬币），所以初始化为 <code>amount + 1</code> 就相当于初始化为正无穷，便于后续取最小值。</p>\n<h2 id=\"5-动态规划总结\"><a href=\"#5-动态规划总结\" class=\"headerlink\" title=\"5. 动态规划总结\"></a>5. 动态规划总结</h2><p>第一个斐波那契数列的问题，解释了如何通过「备忘录」或者「dp table」的方法来优化递归树，并且明确了这两种方法本质上是一样的，只是自顶向下和自底向上的不同而已。</p>\n<p>第二个凑零钱的问题，展示了如何流程化确定「状态转移方程」，只要通过状态转移方程写出暴力递归解，剩下的也就是优化递归树，消除重叠子问题而已。</p>\n<p><strong>计算机解决问题其实没有任何奇技淫巧，它唯一的解决办法就是穷举</strong>，穷举所有可能性。算法设计无非就是先思考“如何穷举”，然后再追求“如何聪明地穷举”。</p>\n<p>列出动态转移方程，就是在解决“如何穷举”的问题。之所以说它难，一是因为很多穷举需要递归实现，二是因为有的问题本身的解空间复杂，不那么容易穷举完整。</p>\n<p>备忘录、DP table 就是在追求“如何聪明地穷举”。用空间换时间的思路，是降低时间复杂度的不二法门，除此之外，试问，还能玩出啥花活？</p>\n<p>之后我们会有一章专门讲解动态规划问题，如果有任何问题都可以随时回来重读本文，希望读者在阅读每个题目和解法时，多往「状态」和「选择」上靠，才能对这套框架产生自己的理解，运用自如。</p>\n<h2 id=\"6-使用动态规划的题目列表\"><a href=\"#6-使用动态规划的题目列表\" class=\"headerlink\" title=\"6. 使用动态规划的题目列表\"></a>6. 使用动态规划的题目列表</h2><p>本文中使用动态规划解决的 LeetCode 题目列表如下，持续更新中~</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">#</th>\n<th align=\"center\">Title</th>\n<th align=\"center\">Remark</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">509</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/fibonacci-number/\" target=\"_blank\" rel=\"noopener\">斐波那契数</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">322</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/coin-change/\" target=\"_blank\" rel=\"noopener\">零钱兑换</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">300</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/longest-increasing-subsequence/\" target=\"_blank\" rel=\"noopener\">最长上升子序列</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">1143</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/longest-common-subsequence/\" target=\"_blank\" rel=\"noopener\">最长公共子序列</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">53</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/maximum-subarray/\" target=\"_blank\" rel=\"noopener\">最大子序和</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">72</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/edit-distance/\" target=\"_blank\" rel=\"noopener\">编辑距离</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">10</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/regular-expression-matching/\" target=\"_blank\" rel=\"noopener\">正则表达式匹配</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">44</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/wildcard-matching/\" target=\"_blank\" rel=\"noopener\">通配符匹配</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">62</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/unique-paths/\" target=\"_blank\" rel=\"noopener\">不同路径</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">63</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/unique-paths-ii/\" target=\"_blank\" rel=\"noopener\">不同路径 II</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">28</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/implement-strstr/\" target=\"_blank\" rel=\"noopener\">实现 strStr()</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">42</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/trapping-rain-water/\" target=\"_blank\" rel=\"noopener\">接雨水</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">32</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/longest-valid-parentheses/\" target=\"_blank\" rel=\"noopener\">最长有效括号</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">53</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/maximum-subarray/\" target=\"_blank\" rel=\"noopener\">最大子序和</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">64</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/minimum-path-sum/\" target=\"_blank\" rel=\"noopener\">最小路径和</a></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">85</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/maximal-rectangle/\" target=\"_blank\" rel=\"noopener\">最大矩形</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">87</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/scramble-string/\" target=\"_blank\" rel=\"noopener\">扰乱字符串</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">89</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/gray-code/\" target=\"_blank\" rel=\"noopener\">格雷编码</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">91</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/decode-ways/\" target=\"_blank\" rel=\"noopener\">解码方法</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">97</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/interleaving-string/\" target=\"_blank\" rel=\"noopener\">交错字符串</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">115</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/distinct-subsequences/\" target=\"_blank\" rel=\"noopener\">不同的子序列</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">120</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/triangle/\" target=\"_blank\" rel=\"noopener\">三角形最小路径和</a></td>\n<td align=\"center\">Hard</td>\n</tr>\n<tr>\n<td align=\"center\">123</td>\n<td align=\"center\"><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/\" target=\"_blank\" rel=\"noopener\">买卖股票的最佳时机 III</a></td>\n<td align=\"center\">Very Hard</td>\n</tr>\n</tbody></table>\n<h2 id=\"7-例题：最长上升子序列-300\"><a href=\"#7-例题：最长上升子序列-300\" class=\"headerlink\" title=\"7. 例题：最长上升子序列 [300]\"></a>7. 例题：最长上升子序列 [300]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/longest-increasing-subsequence/\" target=\"_blank\" rel=\"noopener\">300. 最长上升子序列</a></p>\n<h3 id=\"7-1-题目描述\"><a href=\"#7-1-题目描述\" class=\"headerlink\" title=\"7.1 题目描述\"></a>7.1 题目描述</h3><p>给定一个无序的整数数组，找到其中最长上升子序列的长度。</p>\n<p>示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [10,9,2,5,3,7,101,18]</span><br><span class=\"line\">输出: 4 </span><br><span class=\"line\">解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。</span><br></pre></td></tr></table></figure>\n\n\n<p>说明:</p>\n<p>可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。<br>你算法的时间复杂度应该为 O(n2) 。<br>进阶: 你能将算法的时间复杂度降低到 O(n log n) 吗?</p>\n<p>注意「子序列」和「子串」这两个名词的区别，子串一定是连续的，而子序列不一定是连续的。</p>\n<h3 id=\"7-2-题目分析\"><a href=\"#7-2-题目分析\" class=\"headerlink\" title=\"7.2 题目分析\"></a>7.2 题目分析</h3><p>本题分析参考 <a href=\"https://mp.weixin.qq.com/s/7QFapCuvi-2nkh6gREcR9g\" target=\"_blank\" rel=\"noopener\">这里</a> .</p>\n<p>最长递增子序列（Longest Increasing Subsequence，简写 LIS）是非常经典的一个算法问题，比较容易想到的是动态规划解法，时间复杂度 O(N^2)，我们借这个问题来由浅入深讲解如何找状态转移方程，如何写出动态规划解法。比较难想到的是利用二分查找，时间复杂度是 O(NlogN)，我们通过一种简单的纸牌游戏来辅助理解这种巧妙的解法。</p>\n<h3 id=\"7-3-方法一：动态规划（如何找到状态转移关系）\"><a href=\"#7-3-方法一：动态规划（如何找到状态转移关系）\" class=\"headerlink\" title=\"7.3 方法一：动态规划（如何找到状态转移关系）\"></a>7.3 方法一：动态规划（如何找到状态转移关系）</h3><p>动态规划的难点本来就在于寻找正确的状态转移方程，本文就借助经典的「最长递增子序列问题」来讲一讲设计动态规划的通用技巧：<strong>数学归纳思想</strong>。</p>\n<p>相信大家对数学归纳法都不陌生，高中就学过，而且思路很简单。比如我们想证明一个数学结论，那么<strong>我们先假设这个结论在 k 时成立，然后根据这个假设，想办法推导证明出 <code>k=n</code> 的时候此结论也成立</strong>。如果能够证明出来，那么就说明这个结论对于 <code>k</code> 等于任何数都成立。</p>\n<p>类似的，我们设计动态规划算法，不是需要一个 dp 数组吗？我们可以假设 <code>dp[0...i-1]</code> 都已经被算出来了，然后问自己：怎么通过这些结果算出 <code>dp[i]</code>？</p>\n<p>直接拿最长递增子序列这个问题举例你就明白了。不过，首先要定义清楚 dp 数组的含义，即 <code>dp[i]</code> 的值到底代表着什么？</p>\n<p><strong>我们的定义是这样的：<code>dp[i]</code> 表示以 <code>nums[i]</code> 这个数结尾的最长递增子序列的长度。</strong></p>\n<p>PS：<strong>为什么这样定义呢？</strong> 这是解决子序列问题的一个套路，后文动态规划之子序列问题解题模板 总结了几种常见套路。你读完本章所有的动态规划问题，就会发现 <code>dp</code> 数组的定义方法也就那几种。</p>\n<p>反过来想，如果 <code>dp[i]</code> 表示 <code>nums[0...i]</code> 这个数组中的最长递增子序列的长度，当求得 <code>dp[i]</code> 时，想要求出 <code>dp[i+1]</code> 是不行的，因为递增子序列是从数组中选出的，知道 <code>dp[i]</code> 并不能确定当前选择的是哪几个数字，当然也不知道选出的递增子序列最后一位，这样是没法推出 <code>dp[i+1]</code> 的。但如果我们定义 <code>dp[i]</code> 表示以<code>nums[i]</code> 结尾的最长递增子序列的长度，就可以明确知道选出的递增子序列的最后一位，从而推出 <code>dp[i]</code> . 只有这样定义才能将 <code>dp[i+1]</code> 和 <code>dp[i]</code> 建立起联系，利用数学归纳法写出状态转移方程。</p>\n<p>根据这个定义，我们就可以推出 base case：<code>dp[i]</code> 初始值为 1，因为以 <code>nums[i]</code> 结尾的最长递增子序列起码要包含它自己。</p>\n<p>根据这个定义，我们的最终结果（子序列的最大长度）应该是 dp 数组中的最大值。</p>\n<p>那么我们应该怎么设计算法逻辑来正确计算每个 <code>dp[i]</code> 呢？</p>\n<p>这就是动态规划的重头戏了，要思考如何设计算法逻辑进行状态转移，才能正确运行呢？这里就可以使用数学归纳的思想：</p>\n<p><strong>假设我们已经知道了 <code>dp[0..4]</code> 的所有结果，我们如何通过这些已知结果推出 <code>dp[5]</code> 呢</strong>？</p>\n<p>根据刚才我们对 <code>dp</code> 数组的定义，现在想求 <code>dp[5]</code> 的值，也就是想求以 <code>nums[5]</code> 为结尾的最长递增子序列。</p>\n<p><strong><code>nums[5] = 3</code>，既然是递增子序列，我们只要找到前面那些结尾比 3 小的子序列，然后把 3 接到最后，就可以形成一个新的递增子序列，而且这个新的子序列长度加一</strong>。</p>\n<p>显然，可能形成很多种新的子序列，但是我们只选择最长的那一个，把最长子序列的长度作为 <code>dp[5]</code> 的值即可。</p>\n<p>最终代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLIS</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// dp[i] = n 表示：以 nums[i] 这个数字结尾的最长上升子序列的长度（想不到）</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\">    <span class=\"comment\">// 初始化，最长上升子序列最少为数字本身，故初始化为1</span></span><br><span class=\"line\">    Arrays.fill(dp, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[j] &lt; nums[i])&#123;</span><br><span class=\"line\">                dp[i] = Math.max(dp[i], dp[j]+<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">        res = Math.max(res, dp[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此，这道题就解决了，时间复杂度 O(N^2)。总结一下如何找到动态规划的状态转移关系：</p>\n<p><strong>1、</strong>明确 <code>dp</code> 数组所存数据的含义。这一步对于任何动态规划问题都很重要，如果不得当或者不够清晰，会阻碍之后的步骤。</p>\n<p><strong>2、</strong>根据 <code>dp</code> 数组的定义，运用数学归纳法的思想，假设 <code>dp[0...i-1]</code> 都已知，想办法求出 <code>dp[i]</code>，一旦这一步完成，整个题目基本就解决了。</p>\n<p>但如果无法完成这一步，很可能就是 <code>dp</code> 数组的定义不够恰当，需要重新定义 <code>dp</code> 数组的含义；或者可能是 <code>dp</code> 数组存储的信息还不够，不足以推出下一步的答案，需要把 <code>dp</code> 数组扩大成二维数组甚至三维数组。</p>\n<h3 id=\"7-4-方法二：二分查找\"><a href=\"#7-4-方法二：二分查找\" class=\"headerlink\" title=\"7.4 方法二：二分查找\"></a>7.4 方法二：二分查找</h3><p>详解请看：<a href=\"https://mp.weixin.qq.com/s/7QFapCuvi-2nkh6gREcR9g##\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/7QFapCuvi-2nkh6gREcR9g##</a></p>\n<p>这个解法的时间复杂度为 O(NlogN)，但是说实话，正常人基本想不到这种解法（也许玩过某些纸牌游戏的人可以想出来）。所以大家了解一下就好，正常情况下能够给出动态规划解法就已经很不错了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLIS</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] top = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\">    <span class=\"comment\">// 牌初始堆数定义为0</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> piles = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 要处理的扑克牌</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> poker = nums[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//*********** 二分查找：搜索左侧边界 ***************/</span></span><br><span class=\"line\">        <span class=\"comment\">// piles 表示堆数，即就是数组的长度；如果写成 right = piles + 1, 当 nums=[0] 时返回 0， 正确结果是 1</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = piles;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(top[mid] == poker)&#123;</span><br><span class=\"line\">                right = mid;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(top[mid] &gt; poker)&#123;</span><br><span class=\"line\">                right = mid;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(top[mid] &lt; poker)&#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 牌比每一个都大，则新建一个堆</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left == piles)&#123;</span><br><span class=\"line\">            piles++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 牌比每一个都小、或者找到合适位置，放入 top 数组即可</span></span><br><span class=\"line\">        top[left] = poker;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> piles;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-例题：最长公共子序列-1143\"><a href=\"#8-例题：最长公共子序列-1143\" class=\"headerlink\" title=\"8. 例题：最长公共子序列 [1143]\"></a>8. 例题：最长公共子序列 [1143]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/longest-common-subsequence/\" target=\"_blank\" rel=\"noopener\">1143. 最长公共子序列</a></p>\n<h3 id=\"8-1-题目描述\"><a href=\"#8-1-题目描述\" class=\"headerlink\" title=\"8.1 题目描述\"></a>8.1 题目描述</h3><p>给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列的长度。</p>\n<p>若这两个字符串没有公共子序列，则返回 0。 </p>\n<p>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：text1 = <span class=\"string\">\"abcde\"</span>, text2 = <span class=\"string\">\"ace\"</span> </span><br><span class=\"line\">输出：3  </span><br><span class=\"line\">解释：最长公共子序列是 <span class=\"string\">\"ace\"</span>，它的长度为 3。</span><br></pre></td></tr></table></figure>\n\n\n<p>示例 2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：text1 = <span class=\"string\">\"abc\"</span>, text2 = <span class=\"string\">\"def\"</span></span><br><span class=\"line\">输出：0</span><br><span class=\"line\">解释：两个字符串没有公共子序列，返回 0。</span><br></pre></td></tr></table></figure>\n\n\n<p>提示:</p>\n<p>1 &lt;= text1.length &lt;= 1000<br>1 &lt;= text2.length &lt;= 1000<br>输入的字符串只含有小写英文字符。</p>\n<h3 id=\"8-2-题目分析\"><a href=\"#8-2-题目分析\" class=\"headerlink\" title=\"8.2 题目分析\"></a>8.2 题目分析</h3><p>最长公共子序列（Longest Common Subsequence，简称 LCS）是一道非常经典的面试题目，因为它的解法是典型的二维动态规划，大部分比较困难的字符串问题都和这个问题一个套路，比如说编辑距离。而且，这个算法稍加改造就可以用于解决其他问题，所以说 LCS 算法是值得掌握的。</p>\n<p>详细分析参考：<a href=\"https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zui-chang-gong-gong-zi-xu-lie\" target=\"_blank\" rel=\"noopener\">https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zui-chang-gong-gong-zi-xu-lie</a></p>\n<h3 id=\"8-3-代码\"><a href=\"#8-3-代码\" class=\"headerlink\" title=\"8.3 代码\"></a>8.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestCommonSubsequence</span><span class=\"params\">(String text1, String text2)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len1 = text1.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len2 = text2.length();</span><br><span class=\"line\">    <span class=\"comment\">// 让 text1,text2 的索引从 1 开始</span></span><br><span class=\"line\">    <span class=\"comment\">// dp[i][j] = n 表示：对于 text1[1...i] 和 text2[1...j] 的最长公共子序列为 n</span></span><br><span class=\"line\">    <span class=\"comment\">//base case 是：dp[0][..] 和 dp[..][0] 初始化为0</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len1+<span class=\"number\">1</span>][len2+<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= len1; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= len2; j++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//状态转移</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(text1.charAt(i-<span class=\"number\">1</span>) == text2.charAt(j-<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                dp[i][j] = dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                dp[i][j] = Math.max(dp[i-<span class=\"number\">1</span>][j], dp[i][j-<span class=\"number\">1</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[len1][len2];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-例题：最大子序列和-53\"><a href=\"#9-例题：最大子序列和-53\" class=\"headerlink\" title=\"9. 例题：最大子序列和 [53]\"></a>9. 例题：最大子序列和 [53]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/maximum-subarray/\" target=\"_blank\" rel=\"noopener\">53. 最大子序和</a></p>\n<h3 id=\"9-1-题目描述\"><a href=\"#9-1-题目描述\" class=\"headerlink\" title=\"9.1 题目描述\"></a>9.1 题目描述</h3><p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class=\"line\">输出: 6</span><br><span class=\"line\">解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</span><br></pre></td></tr></table></figure>\n\n\n<p>进阶:</p>\n<p>如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。</p>\n<h3 id=\"9-2-题目分析\"><a href=\"#9-2-题目分析\" class=\"headerlink\" title=\"9.2 题目分析\"></a>9.2 题目分析</h3><p>参考：<a href=\"https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zui-da-zi-shu-zu\" target=\"_blank\" rel=\"noopener\">https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zui-da-zi-shu-zu</a></p>\n<p>解决这个问题需要动态规划技巧，但是 <code>dp</code> 数组的定义比较特殊。按照我们常规的动态规划思路，一般是这样定义 <code>dp</code> 数组：</p>\n<p><strong><code>nums[0..i]</code></strong> <strong>中的「最大的子数组和」为</strong> <strong><code>dp[i]</code></strong>。</p>\n<p>如果这样定义的话，整个 <code>nums</code> 数组的「最大子数组和」就是 <code>dp[n-1]</code>。如何找状态转移方程呢？按照数学归纳法，假设我们知道了 <code>dp[i-1]</code>，如何推导出 <code>dp[i]</code> 呢？利用数学归纳法，你能用 <code>dp[i]</code> 推出 <code>dp[i+1]</code> 吗？</p>\n<p><strong>实际上是不行的，因为子数组一定是连续的，按照我们当前</strong> <strong><code>dp</code></strong> <strong>数组定义，并不能保证</strong> <strong><code>nums[0..i]</code></strong> <strong>中的最大子数组与</strong> <strong><code>nums[i+1]</code></strong> <strong>是相邻的</strong>，也就没办法从 <code>dp[i]</code> 推导出 <code>dp[i+1]</code>。</p>\n<p>所以说我们这样定义 <code>dp</code> 数组是不正确的，无法得到合适的状态转移方程。对于这类子数组问题，我们就要重新定义 <code>dp</code> 数组的含义：</p>\n<p><strong>以</strong> <strong><code>nums[i]</code></strong> <strong>为结尾的「最大子数组和」为</strong> <strong><code>dp[i]</code></strong>。</p>\n<p>这种定义之下，想得到整个 <code>nums</code> 数组的「最大子数组和」，不能直接返回 <code>dp[n-1]</code>，而需要遍历整个 <code>dp</code> 数组。</p>\n<p>虽然说动态规划推状态转移方程确实比较玄学，但大部分还是有些规律可循的。</p>\n<p>这道「最大子数组和」就和「最长递增子序列」非常类似，<code>dp</code> 数组的定义是「以 <code>nums[i]</code> 为结尾的最大子数组和/最长递增子序列为 <code>dp[i]</code>」。因为只有这样定义才能将 <code>dp[i+1]</code> 和 <code>dp[i]</code> 建立起联系，利用数学归纳法写出状态转移方程。</p>\n<h3 id=\"9-3-代码\"><a href=\"#9-3-代码\" class=\"headerlink\" title=\"9.3 代码\"></a>9.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = nums.length;</span><br><span class=\"line\">    <span class=\"comment\">// dp[i] = x 表示以 nums[i] 结尾的最大子序列和为x</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len];</span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 状态转移</span></span><br><span class=\"line\">        dp[i] = Math.max(nums[i], nums[i] + dp[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">        max = Math.max(max, dp[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-例题：编辑距离-72\"><a href=\"#10-例题：编辑距离-72\" class=\"headerlink\" title=\"10. 例题：编辑距离 [72]\"></a>10. 例题：编辑距离 [72]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/edit-distance/\" target=\"_blank\" rel=\"noopener\">72. 编辑距离</a></p>\n<h3 id=\"10-1-题目描述\"><a href=\"#10-1-题目描述\" class=\"headerlink\" title=\"10.1 题目描述\"></a>10.1 题目描述</h3><p>给你两个单词 word1 和 word2，请你计算出将 word1 转换成 word2 所使用的最少操作数 。</p>\n<p>你可以对一个单词进行如下三种操作：</p>\n<ol>\n<li>插入一个字符</li>\n<li>删除一个字符</li>\n<li>替换一个字符</li>\n</ol>\n<p>示例 1：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：word1 = <span class=\"string\">\"horse\"</span>, word2 = <span class=\"string\">\"ros\"</span></span><br><span class=\"line\">输出：3</span><br><span class=\"line\">解释：</span><br><span class=\"line\">horse -&gt; rorse (将 <span class=\"string\">'h'</span> 替换为 <span class=\"string\">'r'</span>)</span><br><span class=\"line\">rorse -&gt; rose (删除 <span class=\"string\">'r'</span>)</span><br><span class=\"line\">rose -&gt; ros (删除 <span class=\"string\">'e'</span>)</span><br></pre></td></tr></table></figure>\n\n\n<p>示例 2：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：word1 = <span class=\"string\">\"intention\"</span>, word2 = <span class=\"string\">\"execution\"</span></span><br><span class=\"line\">输出：5</span><br><span class=\"line\">解释：</span><br><span class=\"line\">intention -&gt; inention (删除 <span class=\"string\">'t'</span>)</span><br><span class=\"line\">inention -&gt; enention (将 <span class=\"string\">'i'</span> 替换为 <span class=\"string\">'e'</span>)</span><br><span class=\"line\">enention -&gt; exention (将 <span class=\"string\">'n'</span> 替换为 <span class=\"string\">'x'</span>)</span><br><span class=\"line\">exention -&gt; exection (将 <span class=\"string\">'n'</span> 替换为 <span class=\"string\">'c'</span>)</span><br><span class=\"line\">exection -&gt; execution (插入 <span class=\"string\">'u'</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-2-题目分析\"><a href=\"#10-2-题目分析\" class=\"headerlink\" title=\"10.2 题目分析\"></a>10.2 题目分析</h3><p>dp 问题自底向上求解，定义 dp 数组：<code>dp[i][j] = n</code> 表示：<code>word1[1..i]</code> 和 <code>word2[1..j]</code> 的最小编辑距离为 n，注意 word1 和 word2 的下标从1开始。</p>\n<p>base case：当 i=0 或者 j=0 时，属于base case。</p>\n<p>状态：距离。</p>\n<p>选择：有三种选择，即删除、替换、插入，选出距离最小的。做出每一种选择后，使用前面求出 dp 数组的值。比如如果选择删除，则 <code>dp[i][j] = dp[i-1][j] + 1</code> ；如果选择替换，则 <code>dp[i][j] = dp[i-1][j-1] + 1</code>；如果选择插入，则<code>dp[i][j] = dp[i][j-1] + 1</code>入，当插入时应该注意，不能在 <code>word1[i]</code> 之前插入，因为在前面插入后，没法使用已经求出的 dp 数组的值，而是在 <code>word1[i]</code> 的后面插入。</p>\n<p>状态转移方程：如果字符相等，跳过；否则在删除、替换、插入中选择一种。</p>\n<h3 id=\"10-3-代码\"><a href=\"#10-3-代码\" class=\"headerlink\" title=\"10.3 代码\"></a>10.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minDistance</span><span class=\"params\">(String word1, String word2)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len1 = word1.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len2 = word2.length();</span><br><span class=\"line\">    <span class=\"comment\">//word1 和 word2 的下标从 1 开始</span></span><br><span class=\"line\">    <span class=\"comment\">//dp[i][j] = n 表示：word1[1..i] 和 word2[1..j] 的最小编辑距离为 n</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len1+<span class=\"number\">1</span>][len2+<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//base case</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= len1; i++)&#123;</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= len2; j++)&#123;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][j] = j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= len1; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= len2; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(word1.charAt(i-<span class=\"number\">1</span>) == word2.charAt(j-<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                dp[i][j] = dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//三种情况：插入、删除、替换</span></span><br><span class=\"line\">                dp[i][j] = min(dp[i][j-<span class=\"number\">1</span>] + <span class=\"number\">1</span>, dp[i-<span class=\"number\">1</span>][j] + <span class=\"number\">1</span>, dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>] + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[len1][len2];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">min</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.min(Math.min(a,b),c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11-例题：正则表达式匹配-10\"><a href=\"#11-例题：正则表达式匹配-10\" class=\"headerlink\" title=\"11. 例题：正则表达式匹配 [10]\"></a>11. 例题：正则表达式匹配 [10]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/regular-expression-matching/\" target=\"_blank\" rel=\"noopener\">10. 正则表达式匹配</a></p>\n<h3 id=\"11-1-题目描述\"><a href=\"#11-1-题目描述\" class=\"headerlink\" title=\"11.1 题目描述\"></a>11.1 题目描述</h3><p>给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 ‘.’ 和 ‘*’ 的正则表达式匹配。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'.'</span> 匹配任意单个字符</span><br><span class=\"line\"><span class=\"string\">'*'</span> 匹配零个或多个前面的那一个元素</span><br></pre></td></tr></table></figure>\n\n\n<p>所谓匹配，是要涵盖整个字符串s的，而不是部分字符串。</p>\n<p>说明:</p>\n<p>s 可能为空，且只包含从 a-z 的小写字母。<br>p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。<br>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">s = <span class=\"string\">\"aa\"</span></span><br><span class=\"line\">p = <span class=\"string\">\"a\"</span></span><br><span class=\"line\">输出: <span class=\"literal\">false</span></span><br><span class=\"line\">解释: <span class=\"string\">\"a\"</span> 无法匹配 <span class=\"string\">\"aa\"</span> 整个字符串。</span><br></pre></td></tr></table></figure>\n\n<p>示例 2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">s = <span class=\"string\">\"aa\"</span></span><br><span class=\"line\">p = <span class=\"string\">\"a*\"</span></span><br><span class=\"line\">输出: <span class=\"literal\">true</span></span><br><span class=\"line\">解释: 因为 <span class=\"string\">'*'</span> 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 <span class=\"string\">'a'</span>。因此，字符串 <span class=\"string\">\"aa\"</span> 可被视为 <span class=\"string\">'a'</span> 重复了一次。</span><br></pre></td></tr></table></figure>\n\n<p>示例 3:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">s = <span class=\"string\">\"ab\"</span></span><br><span class=\"line\">p = <span class=\"string\">\".*\"</span></span><br><span class=\"line\">输出: <span class=\"literal\">true</span></span><br><span class=\"line\">解释: <span class=\"string\">\".*\"</span> 表示可匹配零个或多个（<span class=\"string\">'*'</span>）任意字符（<span class=\"string\">'.'</span>）。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-2-题目分析\"><a href=\"#11-2-题目分析\" class=\"headerlink\" title=\"11.2 题目分析\"></a>11.2 题目分析</h3><p>两个字符串比较的动态规划问题。<code>dp[i][j]</code> 表示 <code>s[i-1]</code> 和 <code>p[i-1]</code> 是否可以匹配。</p>\n<p>base case：<code>dp[0][0] = true</code>， 但这还不够，字符串 “” 和 “a*” 也是匹配的。</p>\n<p>状态：是否可以匹配。</p>\n<p>选择：字符串 s 和 p 各前进一位。</p>\n<p>状态转换：见代码。</p>\n<h3 id=\"11-3-代码\"><a href=\"#11-3-代码\" class=\"headerlink\" title=\"11.3 代码\"></a>11.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMatch</span><span class=\"params\">(String s, String p)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s == <span class=\"keyword\">null</span> || p == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len1 = s.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len2 = p.length();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//dp 数组中 字符串下标从 1 开始，索引 0 存储空字符</span></span><br><span class=\"line\">    <span class=\"comment\">//dp[i][j] = true 表示：s[0..(i-1)] p[0..(j-1)] 可以匹配</span></span><br><span class=\"line\">    <span class=\"comment\">//base case：dp[..][0] 初始化为 0, 不存在可以匹配的可能</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[len1+<span class=\"number\">1</span>][len2+<span class=\"number\">1</span>];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">//base case: dp[0][..] 初始化，如果出现 * 则可以消去上一个字符，且 上上一个字符对应 dp 值为 true，则当前 dp 值为true</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; len2; j++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//j-1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p.charAt(j) == <span class=\"string\">'*'</span> &amp;&amp; dp[<span class=\"number\">0</span>][j-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">            <span class=\"comment\">//j+1</span></span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j+<span class=\"number\">1</span>] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len1; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; len2; j++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果元素匹配或者为任意元素</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p.charAt(j) == <span class=\"string\">'.'</span> || s.charAt(i) == p.charAt(j))&#123;</span><br><span class=\"line\">                dp[i + <span class=\"number\">1</span>][j + <span class=\"number\">1</span>] = dp[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p.charAt(j) == <span class=\"string\">'*'</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果前一个元素不匹配，则消去这两个元素</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p.charAt(j-<span class=\"number\">1</span>) != s.charAt(i) &amp;&amp; p.charAt(j-<span class=\"number\">1</span>) != <span class=\"string\">'.'</span>)&#123;</span><br><span class=\"line\">                    dp[i + <span class=\"number\">1</span>][j + <span class=\"number\">1</span>] = dp[i + <span class=\"number\">1</span>][j - <span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                        * 如果前一个元素匹配，存在三种情况：</span></span><br><span class=\"line\"><span class=\"comment\">                        * 重复前一个字符多次（abbbb ab*）dp[i + 1][j + 1] = dp[i][j + 1]</span></span><br><span class=\"line\"><span class=\"comment\">                        * 重复前一个字符一次（ab ab*）dp[i + 1][j + 1] = dp[i + 1][j]</span></span><br><span class=\"line\"><span class=\"comment\">                        * 重复前一个字符零次（a ab*）dp[i + 1][j + 1] = dp[i + 1][j - 1]</span></span><br><span class=\"line\"><span class=\"comment\">                         */</span></span><br><span class=\"line\">                    dp[i + <span class=\"number\">1</span>][j + <span class=\"number\">1</span>] = (dp[i][j + <span class=\"number\">1</span>] || dp[i + <span class=\"number\">1</span>][j] || dp[i + <span class=\"number\">1</span>][j - <span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[len1][len2];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-例题：通配符匹配-44\"><a href=\"#12-例题：通配符匹配-44\" class=\"headerlink\" title=\"12. 例题：通配符匹配 [44]\"></a>12. 例题：通配符匹配 [44]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/wildcard-matching/\" target=\"_blank\" rel=\"noopener\">44. 通配符匹配</a></p>\n<h3 id=\"12-1-题目描述\"><a href=\"#12-1-题目描述\" class=\"headerlink\" title=\"12.1 题目描述\"></a>12.1 题目描述</h3><p>给定一个字符串 (s) 和一个字符模式 (p) ，实现一个支持 ‘?’ 和 ‘*’ 的通配符匹配。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'?'</span> 可以匹配任何单个字符。</span><br><span class=\"line\"><span class=\"string\">'*'</span> 可以匹配任意字符串（包括空字符串）。</span><br><span class=\"line\">两个字符串完全匹配才算匹配成功。</span><br></pre></td></tr></table></figure>\n\n<p>说明:</p>\n<p>s 可能为空，且只包含从 a-z 的小写字母。<br>p 可能为空，且只包含从 a-z 的小写字母，以及字符 ? 和 *。<br>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">s = <span class=\"string\">\"aa\"</span></span><br><span class=\"line\">p = <span class=\"string\">\"a\"</span></span><br><span class=\"line\">输出: <span class=\"literal\">false</span></span><br><span class=\"line\">解释: <span class=\"string\">\"a\"</span> 无法匹配 <span class=\"string\">\"aa\"</span> 整个字符串。</span><br></pre></td></tr></table></figure>\n\n\n<p>示例 2:</p>\n<p>输入:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">\"aa\"</span></span><br><span class=\"line\">p = <span class=\"string\">\"*\"</span></span><br><span class=\"line\">输出: <span class=\"literal\">true</span></span><br><span class=\"line\">解释: <span class=\"string\">'*'</span> 可以匹配任意字符串。</span><br></pre></td></tr></table></figure>\n\n<p>示例 3:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">s = <span class=\"string\">\"cb\"</span></span><br><span class=\"line\">p = <span class=\"string\">\"?a\"</span></span><br><span class=\"line\">输出: <span class=\"literal\">false</span></span><br><span class=\"line\">解释: <span class=\"string\">'?'</span> 可以匹配 <span class=\"string\">'c'</span>, 但第二个 <span class=\"string\">'a'</span> 无法匹配 <span class=\"string\">'b'</span>。</span><br></pre></td></tr></table></figure>\n\n<p>示例 4:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">s = <span class=\"string\">\"adceb\"</span></span><br><span class=\"line\">p = <span class=\"string\">\"*a*b\"</span></span><br><span class=\"line\">输出: <span class=\"literal\">true</span></span><br><span class=\"line\">解释: 第一个 <span class=\"string\">'*'</span> 可以匹配空字符串, 第二个 <span class=\"string\">'*'</span> 可以匹配字符串 <span class=\"string\">\"dce\"</span>.</span><br></pre></td></tr></table></figure>\n\n<p>示例 5:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">s = <span class=\"string\">\"acdcb\"</span></span><br><span class=\"line\">p = <span class=\"string\">\"a*c?b\"</span></span><br><span class=\"line\">输出: <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>PS：? 不可以匹配空字符串。</p>\n<h3 id=\"12-2-题目分析\"><a href=\"#12-2-题目分析\" class=\"headerlink\" title=\"12.2 题目分析\"></a>12.2 题目分析</h3><p>两个字符串比较的动态规划问题。</p>\n<p>本体类似于上一题，但我在考虑问题时始终不能跳出问题本身，使用动态规划的思想，而是一再考虑可能出现的不同情况，特别是出现 * 时。例如字符串 “abc” 和 “a*” , 当 p 中出现了 * 时，有两种处理方式：</p>\n<ol>\n<li>把 * 当做一个空字符串，那么 <code>dp[i + 1][j + 1] = dp[i + 1][j]</code></li>\n<li><code>*</code> 匹配任意字符串，那么 <code>dp[i + 1][j + 1] = dp[i][j + 1]</code></li>\n</ol>\n<p>要注意理解，dp 问题注重的是当前状态的转化，即只考虑当前这一位，并把这个问题转化为更小问题的答案。</p>\n<h3 id=\"12-3-代码\"><a href=\"#12-3-代码\" class=\"headerlink\" title=\"12.3 代码\"></a>12.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMatch</span><span class=\"params\">(String s, String p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s == <span class=\"keyword\">null</span> || p == <span class=\"keyword\">null</span>)&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len1 = s.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len2 = p.length();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//dp 数组中 字符串下标从 1 开始，索引 0 存储空字符</span></span><br><span class=\"line\">    <span class=\"comment\">//dp[i][j] = true 表示：s[0..(i-1)] p[0..(j-1)] 可以匹配</span></span><br><span class=\"line\">    <span class=\"comment\">//base case：dp[..][0] 初始化为 0, 不存在可以匹配的可能</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[len1+<span class=\"number\">1</span>][len2+<span class=\"number\">1</span>];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">//base case: dp[0][..] 初始化，如果出现 * 则可以视为空字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; len2; j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p.charAt(j) == <span class=\"string\">'*'</span>)&#123;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j + <span class=\"number\">1</span>] = dp[<span class=\"number\">0</span>][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len1; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; len2; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p.charAt(j) == <span class=\"string\">'?'</span> || s.charAt(i) == p.charAt(j))&#123;</span><br><span class=\"line\">                dp[i + <span class=\"number\">1</span>][j + <span class=\"number\">1</span>] = dp[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p.charAt(j) == <span class=\"string\">'*'</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//情况一：s = \"a\", p = \"a*\", 此时 * 被当做空字符串 dp[i + 1][j + 1] = dp[i + 1][j]</span></span><br><span class=\"line\">                <span class=\"comment\">//情况二：s = \"abc\", p = \"a*\", 此时 * 被当做任意字符串 dp[i + 1][j + 1] = dp[i][j + 1]</span></span><br><span class=\"line\">                dp[i + <span class=\"number\">1</span>][j + <span class=\"number\">1</span>] = (dp[i + <span class=\"number\">1</span>][j] || dp[i][j + <span class=\"number\">1</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[len1][len2];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"13-例题：不同路径-62\"><a href=\"#13-例题：不同路径-62\" class=\"headerlink\" title=\"13. 例题：不同路径 [62]\"></a>13. 例题：不同路径 [62]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/unique-paths/\" target=\"_blank\" rel=\"noopener\">62. 不同路径</a></p>\n<h3 id=\"13-1-题目描述\"><a href=\"#13-1-题目描述\" class=\"headerlink\" title=\"13.1 题目描述\"></a>13.1 题目描述</h3><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p>\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p>\n<p>问总共有多少条不同的路径？</p>\n<p>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: m = 3, n = 2</span><br><span class=\"line\">输出: 3</span><br><span class=\"line\">解释:</span><br><span class=\"line\">从左上角开始，总共有 3 条路径可以到达右下角。</span><br><span class=\"line\">1. 向右 -&gt; 向右 -&gt; 向下</span><br><span class=\"line\">2. 向右 -&gt; 向下 -&gt; 向右</span><br><span class=\"line\">3. 向下 -&gt; 向右 -&gt; 向右</span><br></pre></td></tr></table></figure>\n\n<p>示例 2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: m = 7, n = 3</span><br><span class=\"line\">输出: 28</span><br></pre></td></tr></table></figure>\n\n\n<p>提示：</p>\n<p>1 &lt;= m, n &lt;= 100<br>题目数据保证答案小于等于 2 * 10 ^ 9</p>\n<h3 id=\"13-2-题目分析\"><a href=\"#13-2-题目分析\" class=\"headerlink\" title=\"13.2 题目分析\"></a>13.2 题目分析</h3><p>简单题。</p>\n<p><code>dp[i-1][j-1]</code>表示：i * j 的网格上机器人的移动步数</p>\n<p>状态转移：<code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]</code></p>\n<h3 id=\"13-3-代码\"><a href=\"#13-3-代码\" class=\"headerlink\" title=\"13.3 代码\"></a>13.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">uniquePaths</span><span class=\"params\">(<span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//dp[i-1][j-1] 表示：i * j 的网格上机器人的移动步数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[m][n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">            dp[i][j] = dp[i - <span class=\"number\">1</span>][j] + dp[i][j - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[m - <span class=\"number\">1</span>][n - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"14-例题：不同路径II-63\"><a href=\"#14-例题：不同路径II-63\" class=\"headerlink\" title=\"14. 例题：不同路径II [63]\"></a>14. 例题：不同路径II [63]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/unique-paths-ii/\" target=\"_blank\" rel=\"noopener\">63. 不同路径 II</a></p>\n<h3 id=\"14-1-题目描述\"><a href=\"#14-1-题目描述\" class=\"headerlink\" title=\"14.1 题目描述\"></a>14.1 题目描述</h3><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p>\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p>\n<p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p>\n<p>网格中的障碍物和空位置分别用 <code>1</code> 和 <code>0</code> 来表示。</p>\n<p>说明：m 和 n 的值均不超过 100。</p>\n<p>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [0,0,0],</span><br><span class=\"line\">  [0,1,0],</span><br><span class=\"line\">  [0,0,0]</span><br><span class=\"line\">]</span><br><span class=\"line\">输出: 2</span><br><span class=\"line\">解释:</span><br><span class=\"line\">3x3 网格的正中间有一个障碍物。</span><br><span class=\"line\">从左上角到右下角一共有 2 条不同的路径：</span><br><span class=\"line\">1. 向右 -&gt; 向右 -&gt; 向下 -&gt; 向下</span><br><span class=\"line\">2. 向下 -&gt; 向下 -&gt; 向右 -&gt; 向右</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-2-题目分析\"><a href=\"#14-2-题目分析\" class=\"headerlink\" title=\"14.2 题目分析\"></a>14.2 题目分析</h3><p>注意与上一题的区别。</p>\n<h3 id=\"14-3-代码\"><a href=\"#14-3-代码\" class=\"headerlink\" title=\"14.3 代码\"></a>14.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">uniquePathsWithObstacles</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] obstacleGrid)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = obstacleGrid.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = obstacleGrid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"comment\">//dp[i-1][j-1] 表示：i * j 的网格上机器人的移动步数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[m][n];</span><br><span class=\"line\">    <span class=\"comment\">// 注意</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obstacleGrid[<span class=\"number\">0</span>][<span class=\"number\">0</span>] == <span class=\"number\">1</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// base case，与上一题不同</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(obstacleGrid[i][<span class=\"number\">0</span>] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(obstacleGrid[<span class=\"number\">0</span>][i] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(obstacleGrid[i][j] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                dp[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                dp[i][j] = dp[i - <span class=\"number\">1</span>][j] + dp[i][j - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[m - <span class=\"number\">1</span>][n - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"15-例题：实现strStr-15\"><a href=\"#15-例题：实现strStr-15\" class=\"headerlink\" title=\"15. 例题：实现strStr() [15]\"></a>15. 例题：实现strStr() [15]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/implement-strstr/\" target=\"_blank\" rel=\"noopener\">28. 实现 strStr()</a></p>\n<h3 id=\"15-1-题目描述\"><a href=\"#15-1-题目描述\" class=\"headerlink\" title=\"15.1 题目描述\"></a>15.1 题目描述</h3><p>实现 strStr() 函数。</p>\n<p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。</p>\n<p>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: haystack = <span class=\"string\">\"hello\"</span>, needle = <span class=\"string\">\"ll\"</span></span><br><span class=\"line\">输出: 2</span><br></pre></td></tr></table></figure>\n\n\n<p>示例 2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: haystack = <span class=\"string\">\"aaaaa\"</span>, needle = <span class=\"string\">\"bba\"</span></span><br><span class=\"line\">输出: -1</span><br></pre></td></tr></table></figure>\n\n\n<p>说明:</p>\n<p>当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</p>\n<p>对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。</p>\n<h3 id=\"15-2-题目分析\"><a href=\"#15-2-题目分析\" class=\"headerlink\" title=\"15.2 题目分析\"></a>15.2 题目分析</h3><p>详细分析参考：<a href=\"https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/dong-tai-gui-hua-zhi-kmp-zi-fu-pi-pei-suan-fa\" target=\"_blank\" rel=\"noopener\">这里</a> . 太难了….</p>\n<p>标准的KMP方法在我的另一篇博客：<a href=\"https://juliajiang7.github.io/2020/07/17/KMP算法/#more\" target=\"_blank\" rel=\"noopener\">这里</a> .</p>\n<p>我们可以认为 <code>pat</code> 的匹配就是状态的转移。比如当 pat = “ABABC”：</p>\n<img src=\"/pictures/state.jpg\" alt=\"img\" style=\"zoom:33%;\" />\n\n<p>如上图，圆圈内的数字就是状态，状态 0 是起始状态，状态 5（<code>pat.length</code>）是终止状态。开始匹配时 <code>pat</code> 处于起始状态，一旦转移到终止状态，就说明在 <code>txt</code> 中找到了 <code>pat</code>。比如说当前处于状态 2，就说明字符 “AB” 被匹配：</p>\n<img src=\"/pictures/state2.jpg\" alt=\"img\" style=\"zoom:33%;\" />\n\n<p><code>dp[j][c] = next</code> 表示，当前是状态 <code>j</code>，遇到了字符 <code>c</code>，应该转移到状态 <code>next</code>。</p>\n<p>base case：<code>dp[0][pat.charAt(0)] = 1;</code>, 只有遇到 pat[0] 这个字符才能使状态从 0 转移到 1，遇到其它字符的话还是停留在状态 0（Java 默认初始化数组全为 0）.</p>\n<p>如何构建这个 <code>dp</code> 数组，需要一个辅助状态 <code>X</code>，它永远比当前状态 <code>j</code> 落后一个状态，拥有和 <code>j</code> 最长的相同前缀，我们给它起了个名字叫「影子状态」。</p>\n<p>在构建当前状态 <code>j</code> 的转移方向时，只有字符 <code>pat[j]</code> 才能使状态推进（<code>dp[j][pat[j]] = j+1</code>）；而对于其他字符只能进行状态回退，应该去请教影子状态 <code>X</code> 应该回退到哪里（<code>dp[j][other] = dp[X][other]</code>，其中 <code>other</code> 是除了 <code>pat[j]</code> 之外所有字符）。</p>\n<p>对于影子状态 <code>X</code>，我们把它初始化为 0，并且随着 <code>j</code> 的前进进行更新，更新的方式和 search 过程更新 <code>j</code> 的过程非常相似（<code>X = dp[X][pat[j]]</code>）。</p>\n<h3 id=\"15-3-代码\"><a href=\"#15-3-代码\" class=\"headerlink\" title=\"15.3 代码\"></a>15.3 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">strStr</span><span class=\"params\">(String haystack, String needle)</span></span>&#123;</span><br><span class=\"line\">    String txt = haystack;</span><br><span class=\"line\">    String pat = needle;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> M = pat.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = txt.length();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(M == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//dp[j][c] = i 表示： 当前状态为 j，且遇到的下一个字符是 c 时, 下一个状态位 i</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[M][<span class=\"number\">256</span>];</span><br><span class=\"line\">    KMP(pat, dp);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//pat 的初始状态为 0</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//计算 pat 的下一个状态</span></span><br><span class=\"line\">        j = dp[j][txt.charAt(i)];</span><br><span class=\"line\">        <span class=\"comment\">//到达终止状态，匹配成功</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j == M)&#123;<span class=\"keyword\">return</span> i - M + <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//没到达终止状态，匹配失败</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计算 dp, 即就是 next</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pat</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dp</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">KMP</span><span class=\"params\">(String pat, <span class=\"keyword\">int</span>[][] dp)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> M = pat.length();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//base case</span></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][pat.charAt(<span class=\"number\">0</span>)] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//影子状态，初始化为 0</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> X = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//构建状态转移图</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; M; j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt; <span class=\"number\">256</span>; c++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pat.charAt(j) == c)&#123;</span><br><span class=\"line\">                dp[j][c] = j + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                dp[j][c] = dp[X][c];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//更新影子状态</span></span><br><span class=\"line\">        X = dp[X][pat.charAt(j)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"16-接雨水-42\"><a href=\"#16-接雨水-42\" class=\"headerlink\" title=\"16. 接雨水 [42]\"></a>16. 接雨水 [42]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/trapping-rain-water/\" target=\"_blank\" rel=\"noopener\">42. 接雨水</a></p>\n<h3 id=\"16-1-题目描述\"><a href=\"#16-1-题目描述\" class=\"headerlink\" title=\"16.1. 题目描述\"></a>16.1. 题目描述</h3><p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p>\n<p><img src=\"/pictures/image-20200810100323970.png\" alt=\"image-20200810100323970\"></p>\n<p>上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 感谢 Marcos 贡献此图。</p>\n<p>示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [0,1,0,2,1,0,1,3,2,1,2,1]</span><br><span class=\"line\">输出: 6</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16-2-题目分析\"><a href=\"#16-2-题目分析\" class=\"headerlink\" title=\"16.2. 题目分析\"></a>16.2. 题目分析</h3><p>本题分析参考：<a href=\"https://leetcode.wang/leetCode-42-Trapping-Rain-Water.html\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<h3 id=\"16-3-方法一：暴力解法（按列求）\"><a href=\"#16-3-方法一：暴力解法（按列求）\" class=\"headerlink\" title=\"16.3. 方法一：暴力解法（按列求）\"></a>16.3. 方法一：暴力解法（按列求）</h3><p>参考 <a href=\"https://leetcode.wang/leetCode-42-Trapping-Rain-Water.html\" target=\"_blank\" rel=\"noopener\">这里</a> 的解法二按列求。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">trap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] height)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//最两端的不用考虑，因为一定不会有雨水</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; height.length - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max_left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//找出 height[i] 左边最高（包括height[i]），要把最左端考虑在内</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &gt;= <span class=\"number\">0</span>; j--)&#123;</span><br><span class=\"line\">            max_left = Math.max(height[j], max_left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> max_right = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//找出 height[i] 右边最高（包括height[i]），要把最右端考虑在内</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &lt; height.length;j++)&#123;</span><br><span class=\"line\">            max_right = Math.max(height[j], max_right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果自己就是最高的话 max_left = max_right = height[i]</span></span><br><span class=\"line\">        sum += Math.min(max_left, max_right) - height[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>时间复杂度：O（n²），遍历每一列需要 n，找出左边最高和右边最高的墙加起来刚好又是一个 n，所以是 n²。</p>\n<p>空间复杂度：O（1）。</p>\n<h3 id=\"16-4-方法二：动态规划\"><a href=\"#16-4-方法二：动态规划\" class=\"headerlink\" title=\"16.4. 方法二：动态规划\"></a>16.4. 方法二：动态规划</h3><p>参考 <a href=\"https://leetcode.wang/leetCode-42-Trapping-Rain-Water.html\" target=\"_blank\" rel=\"noopener\">这里</a> 的解法三动态规划。dp 数组定义不同，本文采用的方法和暴力解法同步。</p>\n<p>我们注意到，解法一中，对于每一列，我们求它左边最高的墙和右边最高的墙，都是重新遍历一遍所有高度，这里我们可以优化一下。</p>\n<p>首先用两个数组，max_left [ i ] 代表到第 i 列左边最高的墙的高度（包括第 i 列），max_right [ i ] 代表到第 i 列右边最高的墙的高度（包括第 i 列）。</p>\n<p>这样，我们利用解法一的思路，不用在 for 循环中再重新遍历求 max_left 和 max_right 了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">trap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] height)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = height.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// max_left[i] = x 表示：height[0..i] 中最大值为x</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> max_left[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len];</span><br><span class=\"line\">    <span class=\"comment\">// max_right[i] = x 表示：height[i..(len-1)] 中最大值为x</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> max_right[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\">    max_left[<span class=\"number\">0</span>] = height[<span class=\"number\">0</span>];</span><br><span class=\"line\">    max_right[len - <span class=\"number\">1</span>] = height[len - <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        max_left[i] = Math.max(height[i], max_left[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = len - <span class=\"number\">2</span>; j &gt; <span class=\"number\">0</span>; j--)&#123;</span><br><span class=\"line\">        max_right[j] = Math.max(height[j], max_right[j + <span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">        sum += Math.min(max_left[i], max_right[i]) - height[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>时间复杂度：O（n）。</p>\n<p>空间复杂度：O（n），用来保存每一列左边最高的墙和右边最高的墙。</p>\n<h2 id=\"17-最长有效括号-32\"><a href=\"#17-最长有效括号-32\" class=\"headerlink\" title=\"17. 最长有效括号 [32]\"></a>17. 最长有效括号 [32]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/longest-valid-parentheses/\" target=\"_blank\" rel=\"noopener\">32. 最长有效括号</a></p>\n<h3 id=\"17-1-题目描述\"><a href=\"#17-1-题目描述\" class=\"headerlink\" title=\"17.1. 题目描述\"></a>17.1. 题目描述</h3><p>给定一个只包含 ‘(‘ 和 ‘)’ 的字符串，找出最长的包含有效括号的子串的长度。</p>\n<p>示例 1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"string\">\"(()\"</span></span><br><span class=\"line\">输出: 2</span><br><span class=\"line\">解释: 最长有效括号子串为 <span class=\"string\">\"()\"</span></span><br></pre></td></tr></table></figure>\n\n\n<p>示例 2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"string\">\")()())\"</span></span><br><span class=\"line\">输出: 4</span><br><span class=\"line\">解释: 最长有效括号子串为 <span class=\"string\">\"()()\"</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：题目要求找 <strong>子串</strong>， 即字符串中连续的一段。</p>\n<h3 id=\"17-2-题目分析\"><a href=\"#17-2-题目分析\" class=\"headerlink\" title=\"17.2 题目分析\"></a>17.2 题目分析</h3><p>本题分析参考：<a href=\"https://leetcode.wang/leetCode-32-Longest-Valid-Parentheses.html\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<p>做题先从暴力解法入手，慢慢想如何进行优化。直接考虑高效率解法考虑会不周全，而且找不到思路啊，千万别心急。</p>\n<h3 id=\"17-3-方法一：暴力解法\"><a href=\"#17-3-方法一：暴力解法\" class=\"headerlink\" title=\"17.3. 方法一：暴力解法\"></a>17.3. 方法一：暴力解法</h3><p>暴力解法就是：对每一个子串判断是否有效，返回最长的长度。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestValidParentheses</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = s.length();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 注意：substring 是左闭右开，所以这里j的取值小于等于len</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i + <span class=\"number\">2</span>; j &lt;= len; j += <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(isValid(s.substring(i, j)))&#123;</span><br><span class=\"line\">                max = Math.max(max, j - i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(String s)</span></span>&#123;</span><br><span class=\"line\">    Deque&lt;Character&gt; stack = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.charAt(i) == <span class=\"string\">'('</span>)&#123;</span><br><span class=\"line\">            stack.push(<span class=\"string\">'('</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!stack.isEmpty() &amp;&amp; stack.peek() == <span class=\"string\">'('</span>)&#123;</span><br><span class=\"line\">                stack.pop();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> stack.isEmpty();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>时间复杂度: 列举字符串是 O（n²），判断是否是合法序列是 O（n），所以总共是 O（n³）。</p>\n<p>空间复杂度：O（n），每次判断的时候，栈的大小。</p>\n<p>这个算法，leetCode 会报时间超时。</p>\n<h3 id=\"17-4-方法二：暴力解法优化\"><a href=\"#17-4-方法二：暴力解法优化\" class=\"headerlink\" title=\"17.4. 方法二：暴力解法优化\"></a>17.4. 方法二：暴力解法优化</h3><p>在解法一中，我们会做很多重复的判断，比如 <code>()()()</code> ，从下标 0 开始，我们先判断长度为 2 的是否是合法序列，再判断长度为 4 时的字符串是否合法，但依旧从下标 0 开始。判断长度为 6 时，依旧从下标 0 开始，但其实之前已经确认前 4 个是合法序列了，所以我们从 4 开始判断即可。</p>\n<p>基于此，我们可以换一个思路，我们判断从每个位置开始的最长合法子串是多长即可。在判断是否是合法子串时，我们不使用栈，而是用一个变量记录当前的括号情况，遇到左括号加1，遇到右括号减1，如果变成0，更新最长合法子串长度。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestValidParentheses</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class=\"line\">        count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &lt; s.length(); j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s.charAt(j) == <span class=\"string\">'('</span>)&#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                count--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(count &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(count == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                max = Math.max(max, j - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>时间复杂度：O（n²）。</p>\n<p>空间复杂度：O（1）。</p>\n<h3 id=\"17-5-方法三：动态规划\"><a href=\"#17-5-方法三：动态规划\" class=\"headerlink\" title=\"17.5. 方法三：动态规划\"></a>17.5. 方法三：动态规划</h3><p>分析参考：<a href=\"https://leetcode.wang/leetCode-32-Longest-Valid-Parentheses.html#解法三-动态规划\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestValidParentheses</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = s.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// dp[i]=x 表示：以s[i]结尾的子串最长有效长度为x</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果遇到左括号，dp[i]=0，就是初始值</span></span><br><span class=\"line\">        <span class=\"comment\">// 遇到右括号时，才会更新dp数组</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.charAt(i) == <span class=\"string\">')'</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 右括号的前一位是左括号</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s.charAt(i - <span class=\"number\">1</span>) == <span class=\"string\">'('</span>)&#123;</span><br><span class=\"line\">                dp[i] = (i &gt; <span class=\"number\">2</span> ? dp[i - <span class=\"number\">2</span>] : <span class=\"number\">0</span>) + <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 右括号前一位是右括号</span></span><br><span class=\"line\">                <span class=\"comment\">// 并且除去前边的合法序列的前一位是左括号</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i - dp[i - <span class=\"number\">1</span>] &gt; <span class=\"number\">0</span> &amp;&amp; s.charAt(i - dp[i - <span class=\"number\">1</span>] - <span class=\"number\">1</span>) == <span class=\"string\">'('</span>)&#123;</span><br><span class=\"line\">                dp[i] = dp[i - <span class=\"number\">1</span>] + ((i - dp[i - <span class=\"number\">1</span>]) &gt; <span class=\"number\">2</span> ? dp[i - dp[i - <span class=\"number\">1</span>] - <span class=\"number\">2</span>] : <span class=\"number\">0</span>) + <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            max = Math.max(max, dp[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>时间复杂度：遍历了一次，O（n）。</p>\n<p>空间复杂度：O（n）。</p>\n<h2 id=\"18-最大矩形-85\"><a href=\"#18-最大矩形-85\" class=\"headerlink\" title=\"18. 最大矩形 [85]\"></a>18. 最大矩形 [85]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/maximal-rectangle/\" target=\"_blank\" rel=\"noopener\">85. 最大矩形</a></p>\n<h3 id=\"18-1-题目描述\"><a href=\"#18-1-题目描述\" class=\"headerlink\" title=\"18.1. 题目描述\"></a>18.1. 题目描述</h3><p><img src=\"/pictures/image-20200820100311020.png\" alt=\"image-20200820100311020\"></p>\n<h3 id=\"18-2-方法一：暴力解法\"><a href=\"#18-2-方法一：暴力解法\" class=\"headerlink\" title=\"18.2. 方法一：暴力解法\"></a>18.2. 方法一：暴力解法</h3><p>最原始地，我们可以列举每个可能的矩形。这可以通过遍历所有的(x1, y1) (x2, y2) 坐标，并以它们为对角顶点来完成。该方法过慢，不足以通过所有测试用例。</p>\n<p>时间复杂度：O(N<sup>3</sup>M<sup>3</sup>)，空间复杂度：O(1).</p>\n<h3 id=\"18-3-方法二：动态规划-使用柱状图的优化暴力解法\"><a href=\"#18-3-方法二：动态规划-使用柱状图的优化暴力解法\" class=\"headerlink\" title=\"18.3. 方法二：动态规划 - 使用柱状图的优化暴力解法\"></a>18.3. 方法二：动态规划 - 使用柱状图的优化暴力解法</h3><p>参考 <a href=\"https://leetcode-cn.com/problems/maximal-rectangle/solution/zui-da-ju-xing-by-leetcode/\" target=\"_blank\" rel=\"noopener\">这里</a>，这道题的难点是根本想不到…</p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maximalRectangle</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] matrix)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(matrix.length == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> row = matrix.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> col = matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxArea = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// dp[i][j] = x 表示：以 matrix[i][j] 结尾的最大可能宽度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[row][col];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; row; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; col; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(matrix[i][j] == <span class=\"string\">'1'</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 更新最大最大宽度</span></span><br><span class=\"line\">                dp[i][j] = (j == <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : dp[i][j - <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">int</span> width = dp[i][j];</span><br><span class=\"line\">                <span class=\"comment\">// 计算以 matrix[i][j] 为右下角的矩形最大面积</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = i; k &gt;= <span class=\"number\">0</span>; k--)&#123;</span><br><span class=\"line\">                    width = Math.min(width, dp[k][j]);</span><br><span class=\"line\">                    maxArea = Math.max(maxArea, width * (i - k + <span class=\"number\">1</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxArea;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18-4-方法三：动态规划-每个点的最大高度\"><a href=\"#18-4-方法三：动态规划-每个点的最大高度\" class=\"headerlink\" title=\"18.4. 方法三：动态规划 - 每个点的最大高度\"></a>18.4. 方法三：动态规划 - 每个点的最大高度</h3><p>参考 <a href=\"https://leetcode-cn.com/problems/maximal-rectangle/solution/zui-da-ju-xing-by-leetcode/\" target=\"_blank\" rel=\"noopener\">这里</a> 的方法四。太强了….更想不到… 而且不好理解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maximalRectangle</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] matrix)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(matrix.length == <span class=\"number\">0</span>)&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> row = matrix.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> col = matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] left = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[col];</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] right = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[col];</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] height = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[col];</span><br><span class=\"line\">    Arrays.fill(right, col);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxArea = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历每一行</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; row; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cur_left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cur_right = col - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 高度</span></span><br><span class=\"line\">        <span class=\"comment\">// 遍历这一行的每一个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; col; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(matrix[i][j] == <span class=\"string\">'1'</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 在上一行的高度上加1</span></span><br><span class=\"line\">                height[j]++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                height[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 左边</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; col; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(matrix[i][j] == <span class=\"string\">'1'</span>)&#123;</span><br><span class=\"line\">                left[j] = Math.max(left[j], cur_left);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                left[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                cur_left = j + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 右边</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = col - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(matrix[i][j] == <span class=\"string\">'1'</span>)&#123;</span><br><span class=\"line\">                right[j] = Math.min(right[j], cur_right);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                right[j] = col - <span class=\"number\">1</span>;</span><br><span class=\"line\">                cur_right = j - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 面积</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; col; j++)&#123;</span><br><span class=\"line\">            maxArea = Math.max(maxArea, (right[j] - left[j] + <span class=\"number\">1</span>) * height[j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxArea;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"19-扰乱字符串-87\"><a href=\"#19-扰乱字符串-87\" class=\"headerlink\" title=\"19. 扰乱字符串 [87]\"></a>19. 扰乱字符串 [87]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/scramble-string/\" target=\"_blank\" rel=\"noopener\">87. 扰乱字符串</a></p>\n<h3 id=\"19-1-题目描述\"><a href=\"#19-1-题目描述\" class=\"headerlink\" title=\"19.1. 题目描述\"></a>19.1. 题目描述</h3><p><img src=\"/pictures/image-20200821104157163.png\" alt=\"image-20200821104157163\"></p>\n<p><img src=\"/pictures/image-20200821104215491.png\" alt=\"image-20200821104215491\"></p>\n<h3 id=\"19-2-代码\"><a href=\"#19-2-代码\" class=\"headerlink\" title=\"19.2. 代码\"></a>19.2. 代码</h3><p>本题的难点在于没有思路… 也很难构造出 dp 的定义和状态。</p>\n<p>具体分析参考：<a href=\"https://leetcode-cn.com/problems/scramble-string/solution/miao-dong-de-qu-jian-xing-dpsi-lu-by-sha-yu-la-jia/\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isScramble</span><span class=\"params\">(String s1, String s2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] chs1 = s1.toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] chs2 = s2.toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = s1.length();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// dp[i][j][len]dp[i][j][len] 表示从字符串 S 中 i 开始（包括 i）长度为 len 的字符串是否能变换为</span></span><br><span class=\"line\">    <span class=\"comment\">// 从字符串 T 中 j （包括 j）开始长度为 len 的字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[][][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[n][n][n + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\">    <span class=\"comment\">// 初始化单个字符的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">            dp[i][j][<span class=\"number\">1</span>] = (chs1[i] == chs2[j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 枚举长度区间 len</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> len = <span class=\"number\">2</span>; len &lt;= n; len++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 枚举 S 的起点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n - len; i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 枚举 T 的起点</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= n - len; j++)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 枚举划分位置</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= len - <span class=\"number\">1</span>; k++)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 第一种情况：不交换</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(dp[i][j][k] &amp;&amp; dp[i + k][j + k][len - k])&#123;</span><br><span class=\"line\">                        dp[i][j][len] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 第二种情况：交换</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(dp[i][j + len - k][k] &amp;&amp; dp[i + k][j][len - k])&#123;</span><br><span class=\"line\">                        dp[i][j][len] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>][n];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"20-格雷编码-89\"><a href=\"#20-格雷编码-89\" class=\"headerlink\" title=\"20. 格雷编码 [89]\"></a>20. 格雷编码 [89]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/gray-code/\" target=\"_blank\" rel=\"noopener\">89. 格雷编码</a></p>\n<h3 id=\"20-1-题目描述\"><a href=\"#20-1-题目描述\" class=\"headerlink\" title=\"20.1. 题目描述\"></a>20.1. 题目描述</h3><p><img src=\"/pictures/image-20200822094721670.png\" alt=\"image-20200822094721670\"></p>\n<h3 id=\"20-2-代码\"><a href=\"#20-2-代码\" class=\"headerlink\" title=\"20.2. 代码\"></a>20.2. 代码</h3><p>感觉应该用 dp，但是没找到怎么 dp，所以 dp 问题首先应该找到小问题，然后考虑怎么根据小问题解决大问题。</p>\n<p>详细参考：<a href=\"https://leetcode.wang/leetCode-89-Gray-Code.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">grayCode</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// dp 列表存储最终结果</span></span><br><span class=\"line\">    List&lt;Integer&gt; dp = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// base case，n = 0 时</span></span><br><span class=\"line\">    dp.add(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历要加的数的次数，从 0 开始，到 n-1 结束</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 要加的数，即 2^i</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> add = <span class=\"number\">1</span> &lt;&lt; i;</span><br><span class=\"line\">        <span class=\"comment\">// 倒序遍历，加上 add 添加到结果集中</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = dp.size() - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--)&#123;</span><br><span class=\"line\">            dp.add(dp.get(j) + add);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"21-解码方法-91\"><a href=\"#21-解码方法-91\" class=\"headerlink\" title=\"21. 解码方法 [91]\"></a>21. 解码方法 [91]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/decode-ways/\" target=\"_blank\" rel=\"noopener\">91. 解码方法</a></p>\n<h3 id=\"21-1-题目描述\"><a href=\"#21-1-题目描述\" class=\"headerlink\" title=\"21.1. 题目描述\"></a>21.1. 题目描述</h3><p><img src=\"/pictures/image-20200825143910613.png\" alt=\"image-20200825143910613\"></p>\n<h3 id=\"21-2-代码\"><a href=\"#21-2-代码\" class=\"headerlink\" title=\"21.2. 代码\"></a>21.2. 代码</h3><p>分析参考：<a href=\"https://leetcode-cn.com/problems/decode-ways/solution/dong-tai-gui-hua-java-python-by-liweiwei1419/\" target=\"_blank\" rel=\"noopener\">这里</a> ，再结合自己的思路，写了一个更好理解的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">numDecodings</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = s.length();</span><br><span class=\"line\">    <span class=\"comment\">// dp[i] = x 表示：s[0...i] 有 x 中解码方法</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] charArray = s.toCharArray();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (charArray[<span class=\"number\">0</span>] == <span class=\"string\">'0'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = <span class=\"number\">10</span> * (charArray[i - <span class=\"number\">1</span>] - <span class=\"string\">'0'</span>) + (charArray[i] - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 如果是 0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(charArray[i] == <span class=\"string\">'0'</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 只有和前一位组成的数字在 10 到 26 之内，dp 才会有值，否则是初始值 0</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"number\">10</span> &lt;= num &amp;&amp; num &lt;= <span class=\"number\">26</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    dp[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    dp[i] = dp[i - <span class=\"number\">2</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果不是 0</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 和前一位组成的数字在 10 到 26 之内，dp 值增大</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"number\">10</span> &lt;= num &amp;&amp; num &lt;= <span class=\"number\">26</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    dp[i] = dp[i - <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    dp[i] = dp[i - <span class=\"number\">1</span>] + dp[i - <span class=\"number\">2</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 不在 10 到 26 之内，dp 和 前一位相同</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                dp[i] = dp[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[len - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>本题的难点在于：出现 0 的处理，边界条件太多了…可能的情况太多了…是真的费时间。</p>\n<h2 id=\"22-最大子序和-53\"><a href=\"#22-最大子序和-53\" class=\"headerlink\" title=\"22. 最大子序和 [53]\"></a>22. 最大子序和 [53]</h2><p>题目描述：<a href=\"https://leetcode-cn.com/problems/maximum-subarray/\" target=\"_blank\" rel=\"noopener\">53. 最大子序和</a></p>\n<h3 id=\"22-1-题目描述\"><a href=\"#22-1-题目描述\" class=\"headerlink\" title=\"22.1. 题目描述\"></a>22.1. 题目描述</h3><p><img src=\"/pictures/image-20200826102906095.png\" alt=\"image-20200826102906095\"></p>\n<h3 id=\"22-2-代码\"><a href=\"#22-2-代码\" class=\"headerlink\" title=\"22.2. 代码\"></a>22.2. 代码</h3><p>典型的动态规划问题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = nums.length;</span><br><span class=\"line\">    <span class=\"comment\">// dp[i] = x 表示以 nums[i] 结尾的最大子序列和为x</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len];</span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 状态转移</span></span><br><span class=\"line\">        dp[i] = Math.max(nums[i], nums[i] + dp[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">        max = Math.max(max, dp[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"23-交错字符串-97\"><a href=\"#23-交错字符串-97\" class=\"headerlink\" title=\"23. 交错字符串 [97]\"></a>23. 交错字符串 [97]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/interleaving-string/\" target=\"_blank\" rel=\"noopener\">97. 交错字符串</a></p>\n<h3 id=\"23-1-题目描述\"><a href=\"#23-1-题目描述\" class=\"headerlink\" title=\"23.1. 题目描述\"></a>23.1. 题目描述</h3><p><img src=\"/pictures/image-20200828110613718.png\" alt=\"image-20200828110613718\"></p>\n<h3 id=\"23-2-方法一：动态规划\"><a href=\"#23-2-方法一：动态规划\" class=\"headerlink\" title=\"23.2. 方法一：动态规划\"></a>23.2. 方法一：动态规划</h3><p>参考：<a href=\"https://leetcode.wang/leetCode-97-Interleaving-String.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>dp 数组定义：定义一个 boolean 二维数组 dp [ i ] [ j ] 来表示 s1[ 0, i ) 和 s2 [ 0, j ） 组合后能否构成 s3 [ 0, i + j )，注意不包括右边界，主要是为了考虑开始的时候如果只取 s1，那么 s2 就是空串，这样的话 dp [ i ] [ 0 ] 就能表示 s2 取空串。</p>\n<p>注意，<code>dp[0][0]</code> 表示 s1 和 s2 都取空串，组成一个空串，则值为 true。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isInterleave</span><span class=\"params\">(String s1, String s2, String s3)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s1.length() + s2.length() != s3.length()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s1.length() == <span class=\"number\">0</span> &amp;&amp; s2.length() == <span class=\"number\">0</span> &amp;&amp; s3.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len1 = s1.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len2 = s2.length();</span><br><span class=\"line\">    <span class=\"comment\">// dp[i][j] = true 表示：s1[0..i) 和 s2[0..j) 组合后能构成 s3[0..i+j)</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[len1 + <span class=\"number\">1</span>][len2 + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= len1; i++) &#123;</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] &amp;&amp; s1.charAt(i - <span class=\"number\">1</span>) == s3.charAt(i - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= len2; j++) &#123;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][j] = dp[<span class=\"number\">0</span>][j - <span class=\"number\">1</span>] &amp;&amp; s2.charAt(j - <span class=\"number\">1</span>) == s3.charAt(j - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= len1; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= len2; j++) &#123;</span><br><span class=\"line\">            dp[i][j] = (dp[i - <span class=\"number\">1</span>][j] &amp;&amp; s1.charAt(i - <span class=\"number\">1</span>) == s3.charAt(i + j - <span class=\"number\">1</span>))</span><br><span class=\"line\">                || (dp[i][j - <span class=\"number\">1</span>] &amp;&amp; s2.charAt(j - <span class=\"number\">1</span>) == s3.charAt(i + j - <span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[len1][len2];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"23-3-方法二：回溯\"><a href=\"#23-3-方法二：回溯\" class=\"headerlink\" title=\"23.3. 方法二：回溯\"></a>23.3. 方法二：回溯</h3><p>可前往我的博客 <a href=\"http://juliajiang.top/2020/07/25/回溯算法总结/\" target=\"_blank\" rel=\"noopener\">回溯算法总结</a> 的 15. 交错字符串 [97] 查看。</p>\n<h2 id=\"24-最小路径和-64\"><a href=\"#24-最小路径和-64\" class=\"headerlink\" title=\"24. 最小路径和 [64]\"></a>24. 最小路径和 [64]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/minimum-path-sum/\" target=\"_blank\" rel=\"noopener\">64. 最小路径和</a></p>\n<h3 id=\"24-1-题目描述\"><a href=\"#24-1-题目描述\" class=\"headerlink\" title=\"24.1. 题目描述\"></a>24.1. 题目描述</h3><p><img src=\"/pictures/image-20200901100037412.png\" alt=\"image-20200901100037412\"></p>\n<h3 id=\"24-2-代码\"><a href=\"#24-2-代码\" class=\"headerlink\" title=\"24.2. 代码\"></a>24.2. 代码</h3><p>典型的动态规划问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minPathSum</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] grid)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> row = grid.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> col = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">// dp[i][j] = x 表示：到grid[i][j]的最小路径和为 x</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[row][col];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = grid[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; col; j++)&#123;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][j] = dp[<span class=\"number\">0</span>][j - <span class=\"number\">1</span>] + grid[<span class=\"number\">0</span>][j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; row; i++)&#123;</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] + grid[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; row; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; col; j++)&#123;</span><br><span class=\"line\">            dp[i][j] = Math.min(dp[i - <span class=\"number\">1</span>][j], dp[i][j - <span class=\"number\">1</span>]) + grid[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[row - <span class=\"number\">1</span>][col - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"25-不同的子序列-115\"><a href=\"#25-不同的子序列-115\" class=\"headerlink\" title=\"25. 不同的子序列 [115]\"></a>25. 不同的子序列 [115]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/distinct-subsequences/\" target=\"_blank\" rel=\"noopener\">115. 不同的子序列</a></p>\n<h3 id=\"25-1-题目描述\"><a href=\"#25-1-题目描述\" class=\"headerlink\" title=\"25.1. 题目描述\"></a>25.1. 题目描述</h3><p><img src=\"/pictures/image-20200904105932893.png\" alt=\"image-20200904105932893\"></p>\n<h3 id=\"25-2-代码\"><a href=\"#25-2-代码\" class=\"headerlink\" title=\"25.2. 代码\"></a>25.2. 代码</h3><p>参考：<a href=\"https://leetcode.wang/leetcode-115-Distinct-Subsequences.html\" target=\"_blank\" rel=\"noopener\">这里</a> 的解法三，将 dp 从逆序改为正序。</p>\n<p>这道题一开始用的回溯，发现超时，需要用 map 存之前的递归结果，不太好存，也不好理解，参考 <a href=\"https://leetcode.wang/leetcode-115-Distinct-Subsequences.html\" target=\"_blank\" rel=\"noopener\">这里</a> 的解法二。</p>\n<p>还是用 dp 吧…</p>\n<p>两个字符串的 dp 问题，依旧是用 <code>dp[0][0]</code> 表示两个字符串均为空串的情况。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">numDistinct</span><span class=\"params\">(String s, String t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sLen = s.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tLen = t.length();</span><br><span class=\"line\">    <span class=\"comment\">// dp[i + 1][j + 1] = x 表示：s[0..i] 中的子序列 t[0..j] 的个数为 x</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[sLen + <span class=\"number\">1</span>][tLen + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= sLen; i++)&#123;</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= tLen; j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= sLen; i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果相等</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(t.charAt(j - <span class=\"number\">1</span>) == s.charAt(i - <span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 有两种选择：不选择当前字母 dp[i - 1][j] 和选择当前字母 dp[i - 1][j - 1]</span></span><br><span class=\"line\">                dp[i][j] = dp[i - <span class=\"number\">1</span>][j] + dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"comment\">// 如果不相等</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 只有一种选择：不选当前字母</span></span><br><span class=\"line\">                dp[i][j] = dp[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[sLen][tLen];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"26-三角形最小路径和-120\"><a href=\"#26-三角形最小路径和-120\" class=\"headerlink\" title=\"26. 三角形最小路径和 [120]\"></a>26. 三角形最小路径和 [120]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/triangle/\" target=\"_blank\" rel=\"noopener\">120. 三角形最小路径和</a></p>\n<h3 id=\"26-1-题目描述\"><a href=\"#26-1-题目描述\" class=\"headerlink\" title=\"26.1 题目描述\"></a>26.1 题目描述</h3><p><img src=\"/pictures/image-20200910185227369.png\" alt=\"image-20200910185227369\"></p>\n<h3 id=\"26-2-方法一：动态规划\"><a href=\"#26-2-方法一：动态规划\" class=\"headerlink\" title=\"26.2 方法一：动态规划\"></a>26.2 方法一：动态规划</h3><p>参考 <a href=\"https://leetcode.wang/leetcode-120-Triangle.html\" target=\"_blank\" rel=\"noopener\">这里</a> 做了一些改动。但是这种 dp 空复为 O(n^2)。</p>\n<p>为什么..最近做题老是想不到动态规划.. 老想回溯…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minimumTotal</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = triangle.size();</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[size][size];</span><br><span class=\"line\">    <span class=\"comment\">// dp[i][j] = x 表示：triangle[i][j] 的最小路径和为 x</span></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = triangle.get(<span class=\"number\">0</span>).get(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历每一行</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; size; i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历这一行的每一个数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= i; j++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 这一行的最后一个数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j == i)&#123;</span><br><span class=\"line\">                dp[i][j] = dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + triangle.get(i).get(j);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                dp[i][j] = dp[i - <span class=\"number\">1</span>][j] + triangle.get(i).get(j);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                dp[i][j] = Math.min(dp[i - <span class=\"number\">1</span>][j], dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>]) + triangle.get(i).get(j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> min = Integer.MAX_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)&#123;</span><br><span class=\"line\">        min = Math.min(min, dp[size-<span class=\"number\">1</span>][i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"26-3-方法一的优化\"><a href=\"#26-3-方法一的优化\" class=\"headerlink\" title=\"26.3. 方法一的优化\"></a>26.3. 方法一的优化</h3><p>上面的动态规划 dp 数组是二维数组，但是每一次只用到上一层的数据。所以使用一维的 dp 数组即可。此时，空复是 O(n)。</p>\n<p>如果正着更新的话，会把后面要用的值覆盖掉。因此，倒着更新。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minimumTotal</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = triangle.size();</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[size];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>]=triangle.get(<span class=\"number\">0</span>).get(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; size; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &gt;= <span class=\"number\">0</span>; j--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j == i)&#123;</span><br><span class=\"line\">                dp[j] = dp[j - <span class=\"number\">1</span>] + triangle.get(i).get(j);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                dp[j] = dp[j] + triangle.get(i).get(j);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                dp[j] = Math.min(dp[j - <span class=\"number\">1</span>], dp[j]) + triangle.get(i).get(j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> min = Integer.MAX_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)&#123;</span><br><span class=\"line\">        min = Math.min(min, dp[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"27-买卖股票的最佳时机-III-123\"><a href=\"#27-买卖股票的最佳时机-III-123\" class=\"headerlink\" title=\"27. 买卖股票的最佳时机 III [123]\"></a>27. 买卖股票的最佳时机 III [123]</h2><p>题目来源：<a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/\" target=\"_blank\" rel=\"noopener\">123. 买卖股票的最佳时机 III</a></p>\n<h3 id=\"27-1-题目描述\"><a href=\"#27-1-题目描述\" class=\"headerlink\" title=\"27.1. 题目描述\"></a>27.1. 题目描述</h3><p><img src=\"/pictures/image-20200914160900975.png\" alt=\"image-20200914160900975\"></p>\n<h3 id=\"27-2-方法一：DP\"><a href=\"#27-2-方法一：DP\" class=\"headerlink\" title=\"27.2. 方法一：DP\"></a>27.2. 方法一：DP</h3><p>参考 <a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/solution/mai-mai-gu-piao-zui-jia-shi-ji-iiidong-tai-gui-hua/\" target=\"_blank\" rel=\"noopener\">这里</a> 的方法二。</p>\n<p>使用二维数组，第二位存储 5 种状态，想不到…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"keyword\">int</span>[] prices)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prices.length &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = prices.length;</span><br><span class=\"line\">    <span class=\"comment\">// 5 种状态：0 未交易；1 买入一次；2 卖出一次；3 买入2次；卖出2次</span></span><br><span class=\"line\">    <span class=\"comment\">// dp[i][j] = x 表示：用户处于 j 状态下的钱为 x</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len][<span class=\"number\">5</span>];</span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">3</span>] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">4</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        dp[i][<span class=\"number\">1</span>] = Math.max(dp[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>], dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] - prices[i]);</span><br><span class=\"line\">        dp[i][<span class=\"number\">2</span>] = Math.max(dp[i - <span class=\"number\">1</span>][<span class=\"number\">2</span>], dp[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>] + prices[i]);</span><br><span class=\"line\">        dp[i][<span class=\"number\">3</span>] = Math.max(dp[i - <span class=\"number\">1</span>][<span class=\"number\">3</span>], dp[i - <span class=\"number\">1</span>][<span class=\"number\">2</span>] - prices[i]);</span><br><span class=\"line\">        dp[i][<span class=\"number\">4</span>] = Math.max(dp[i - <span class=\"number\">1</span>][<span class=\"number\">4</span>], dp[i - <span class=\"number\">1</span>][<span class=\"number\">3</span>] + prices[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.max(dp[len - <span class=\"number\">1</span>][<span class=\"number\">2</span>], dp[len - <span class=\"number\">1</span>][<span class=\"number\">4</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"27-3-方法二：方法一的优化\"><a href=\"#27-3-方法二：方法一的优化\" class=\"headerlink\" title=\"27.3. 方法二：方法一的优化\"></a>27.3. 方法二：方法一的优化</h3><p>上面解法中，每一次 dp 数组的更新只会依赖于上一层 dp 数组，因此没必要使用二维数组，使用一维数组，存储上一层数据即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"keyword\">int</span>[] prices)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prices.length &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = prices.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = -prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">    dp[<span class=\"number\">2</span>] = Integer.MIN_VALUE;</span><br><span class=\"line\">    dp[<span class=\"number\">3</span>] = Integer.MIN_VALUE;</span><br><span class=\"line\">    dp[<span class=\"number\">4</span>] = Integer.MIN_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>] = Math.max(dp[<span class=\"number\">1</span>], dp[<span class=\"number\">0</span>] - prices[i]);</span><br><span class=\"line\">        dp[<span class=\"number\">2</span>] = Math.max(dp[<span class=\"number\">2</span>], dp[<span class=\"number\">1</span>] + prices[i]);</span><br><span class=\"line\">        dp[<span class=\"number\">3</span>] = Math.max(dp[<span class=\"number\">3</span>], dp[<span class=\"number\">2</span>] - prices[i]);</span><br><span class=\"line\">        dp[<span class=\"number\">4</span>] = Math.max(dp[<span class=\"number\">4</span>], dp[<span class=\"number\">3</span>] + prices[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.max(dp[<span class=\"number\">2</span>], dp[<span class=\"number\">4</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"28-参考引用\"><a href=\"#28-参考引用\" class=\"headerlink\" title=\"28. 参考引用\"></a>28. 参考引用</h2><ol>\n<li><a href=\"[https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92](https://zh.wikipedia.org/wiki/动态规划)\">Wikipedia</a></li>\n<li><a href=\"https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/dong-tai-gui-hua-xiang-jie-jin-jie\" target=\"_blank\" rel=\"noopener\">https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/dong-tai-gui-hua-xiang-jie-jin-jie</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/7QFapCuvi-2nkh6gREcR9g\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/7QFapCuvi-2nkh6gREcR9g</a></li>\n<li><a href=\"https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zui-chang-gong-gong-zi-xu-lie\" target=\"_blank\" rel=\"noopener\">https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zui-chang-gong-gong-zi-xu-lie</a></li>\n<li><a href=\"https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zui-da-zi-shu-zu\" target=\"_blank\" rel=\"noopener\">https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/zui-da-zi-shu-zu</a></li>\n<li><a href=\"https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/dong-tai-gui-hua-zhi-kmp-zi-fu-pi-pei-suan-fa\" target=\"_blank\" rel=\"noopener\">https://labuladong.gitbook.io/algo/dong-tai-gui-hua-xi-lie/dong-tai-gui-hua-zhi-kmp-zi-fu-pi-pei-suan-fa</a></li>\n<li><a href=\"https://leetcode.wang/leetCode-42-Trapping-Rain-Water.html\" target=\"_blank\" rel=\"noopener\">https://leetcode.wang/leetCode-42-Trapping-Rain-Water.html</a></li>\n<li><a href=\"https://leetcode.wang/leetCode-32-Longest-Valid-Parentheses.html\" target=\"_blank\" rel=\"noopener\">https://leetcode.wang/leetCode-32-Longest-Valid-Parentheses.html</a></li>\n<li><a href=\"https://leetcode.wang/leetCode-89-Gray-Code.html\" target=\"_blank\" rel=\"noopener\">https://leetcode.wang/leetCode-89-Gray-Code.html</a></li>\n</ol>"},{"title":"SpringBoot-AOP实现数据权限管理","date":"2021-03-07T06:58:01.000Z","top":1,"typora-copy-images-to":"..\\pictures","_content":"\n在系统开发中，总有这样的需求：控制登陆用户所能看到的数据，即进行数据权限管理。比如，用户查询所有员工数据时，只能展示该用户有权限查看的部门和业务线数据。当然，这可以在 sql 中进行限制，但是这样的数据权限处理就不存在通用性。\n\n实现数据权限管理，最核心的问题在于通用且不影响原有的业务代码，即 **高内聚低耦合**。这种场景可以使用AOP，将数据权限代码抽离出来，在需要查询数据时限制查询结果，从而在不修改业务代码的情况下实现方法增强。\n\n本文将以一个小例子介绍如何使用AOP实现数据权限管理，源码：[data-permission-aop-demo](https://github.com/JuliaJiang7/data-permission-aop-demo)\n\n<!--more-->\n\n## 1. 功能需求\n\n用户登录后，查看所有员工信息时，只展示有权限查看的数据。权限的限制维度是部门id和业务线id，即登录用户展示的数据是同时满足部门id和业务线id的员工信息。\n\n## 2. 流程图\n\n<img src=\"/pictures/Spring-AOP流程.jpg\"/>\n\n## 3. 类图\n\n<img src=\"/pictures/Spring-AOP类图.jpg\"/>\n\n## 4. 数据库\n\n<img src=\"/pictures/AOP-数据库UML.png\"/>\n\n\n\n## 5. 核心代码\n\n其中切面类代码如下：\n\n```java\n@Aspect\n@Slf4j\n@Component\npublic class DataPermissionAspect {\n\n\n    @Resource\n    private DataPermissionRepository dataPermissionRepository;\n\n    @Pointcut(\"@annotation(com.juliajiang.aopdemo.datapermission.aop.DataPermission)\")\n    public void pointCut() {\n\n    }\n\n    @Before(\"pointCut()\")\n    public void before(JoinPoint joinPoint) {\n        String sql = \"\";\n        // 1. 获取当前用户id\n        String employeeId = \"0001\";\n        // 2. 查缓存\n        // 3. 判断是否是超级管理员\n        // 4. 查权限列表\n        List<DataPermissionDto> list = dataPermissionRepository.selectDimension(employeeId);\n        if (CollectionUtils.isEmpty(list)) {\n            sql = \"1=2\";\n        } else {\n            // 4.1 获取注解的tableAlias\n            DataPermission annotation = ((MethodSignature) joinPoint.getSignature()).getMethod().getAnnotation(DataPermission.class);\n            String alias = annotation.tableAlias();\n\n            // 4.2 拼sql\n            sql = alias + \".permission in ( \";\n            // 将权限维度列表转为 and or 语句\n            // inOutTypeCode,unitCode,budgetSubjectCode\n            for (int i = 0; i < list.size(); i++) {\n                DataPermissionDto dto = list.get(i);\n                // 权限维度 double check\n                if (StringUtils.isEmpty(dto.getDepartmentId()) || StringUtils.isEmpty(dto.getBusinessId())) {\n                    continue;\n                }\n                if (i == 0) {\n                    sql += String.format(\"\\'%s,%s\\'\", dto.getDepartmentId(), dto.getBusinessId());\n                } else {\n                    sql += String.format(\",\\'%s,%s\\'\", dto.getDepartmentId(), dto.getBusinessId());\n                }\n            }\n            sql += \")\";\n\n            // 4.3 存入redis\n        }\n        log.info(\"permission sql : {}\", sql);\n\n        // 5.把数据权限注入到业务代码请求参数\n        Object[] args = joinPoint.getArgs();\n        for (Object arg : args) {\n            if (arg instanceof IDataPermission) {\n                try {\n                    Class clazz = arg.getClass();\n                    Field permission = clazz.getSuperclass().getDeclaredField(\"permission\");\n                    permission.setAccessible(true);\n                    permission.set(arg, sql);\n                } catch (NoSuchFieldException | IllegalAccessException e) {\n                    log.info(\"implement IDataPermission error\");\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}\n\n```\n\n\n\n## 6. 源码\n\n[data-permission-aop-demo](https://github.com/JuliaJiang7/data-permission-aop-demo)\n\n\n\n## 7. 参考引用\n\n1. [SpringBoot-AOP处理数据过滤](http://wjwcloud.com/springboot/2019/03/01/SpringBoot_AOP_dataAuthority/)","source":"_posts/SpringBoot-AOP实现数据权限管理.md","raw":"---\ntitle: SpringBoot-AOP实现数据权限管理\ndate: 2021-03-07 14:58:01\ntags:\n  - Java\n  - SpringBoot\n  - AOP\ncategories: SpringBoot\ntop: 1\n\ntypora-copy-images-to: ..\\pictures\n---\n\n在系统开发中，总有这样的需求：控制登陆用户所能看到的数据，即进行数据权限管理。比如，用户查询所有员工数据时，只能展示该用户有权限查看的部门和业务线数据。当然，这可以在 sql 中进行限制，但是这样的数据权限处理就不存在通用性。\n\n实现数据权限管理，最核心的问题在于通用且不影响原有的业务代码，即 **高内聚低耦合**。这种场景可以使用AOP，将数据权限代码抽离出来，在需要查询数据时限制查询结果，从而在不修改业务代码的情况下实现方法增强。\n\n本文将以一个小例子介绍如何使用AOP实现数据权限管理，源码：[data-permission-aop-demo](https://github.com/JuliaJiang7/data-permission-aop-demo)\n\n<!--more-->\n\n## 1. 功能需求\n\n用户登录后，查看所有员工信息时，只展示有权限查看的数据。权限的限制维度是部门id和业务线id，即登录用户展示的数据是同时满足部门id和业务线id的员工信息。\n\n## 2. 流程图\n\n<img src=\"/pictures/Spring-AOP流程.jpg\"/>\n\n## 3. 类图\n\n<img src=\"/pictures/Spring-AOP类图.jpg\"/>\n\n## 4. 数据库\n\n<img src=\"/pictures/AOP-数据库UML.png\"/>\n\n\n\n## 5. 核心代码\n\n其中切面类代码如下：\n\n```java\n@Aspect\n@Slf4j\n@Component\npublic class DataPermissionAspect {\n\n\n    @Resource\n    private DataPermissionRepository dataPermissionRepository;\n\n    @Pointcut(\"@annotation(com.juliajiang.aopdemo.datapermission.aop.DataPermission)\")\n    public void pointCut() {\n\n    }\n\n    @Before(\"pointCut()\")\n    public void before(JoinPoint joinPoint) {\n        String sql = \"\";\n        // 1. 获取当前用户id\n        String employeeId = \"0001\";\n        // 2. 查缓存\n        // 3. 判断是否是超级管理员\n        // 4. 查权限列表\n        List<DataPermissionDto> list = dataPermissionRepository.selectDimension(employeeId);\n        if (CollectionUtils.isEmpty(list)) {\n            sql = \"1=2\";\n        } else {\n            // 4.1 获取注解的tableAlias\n            DataPermission annotation = ((MethodSignature) joinPoint.getSignature()).getMethod().getAnnotation(DataPermission.class);\n            String alias = annotation.tableAlias();\n\n            // 4.2 拼sql\n            sql = alias + \".permission in ( \";\n            // 将权限维度列表转为 and or 语句\n            // inOutTypeCode,unitCode,budgetSubjectCode\n            for (int i = 0; i < list.size(); i++) {\n                DataPermissionDto dto = list.get(i);\n                // 权限维度 double check\n                if (StringUtils.isEmpty(dto.getDepartmentId()) || StringUtils.isEmpty(dto.getBusinessId())) {\n                    continue;\n                }\n                if (i == 0) {\n                    sql += String.format(\"\\'%s,%s\\'\", dto.getDepartmentId(), dto.getBusinessId());\n                } else {\n                    sql += String.format(\",\\'%s,%s\\'\", dto.getDepartmentId(), dto.getBusinessId());\n                }\n            }\n            sql += \")\";\n\n            // 4.3 存入redis\n        }\n        log.info(\"permission sql : {}\", sql);\n\n        // 5.把数据权限注入到业务代码请求参数\n        Object[] args = joinPoint.getArgs();\n        for (Object arg : args) {\n            if (arg instanceof IDataPermission) {\n                try {\n                    Class clazz = arg.getClass();\n                    Field permission = clazz.getSuperclass().getDeclaredField(\"permission\");\n                    permission.setAccessible(true);\n                    permission.set(arg, sql);\n                } catch (NoSuchFieldException | IllegalAccessException e) {\n                    log.info(\"implement IDataPermission error\");\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}\n\n```\n\n\n\n## 6. 源码\n\n[data-permission-aop-demo](https://github.com/JuliaJiang7/data-permission-aop-demo)\n\n\n\n## 7. 参考引用\n\n1. [SpringBoot-AOP处理数据过滤](http://wjwcloud.com/springboot/2019/03/01/SpringBoot_AOP_dataAuthority/)","slug":"SpringBoot-AOP实现数据权限管理","published":1,"updated":"2021-03-08T08:42:01.496Z","_id":"cklyyda3u0000kml1aub5ch7w","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在系统开发中，总有这样的需求：控制登陆用户所能看到的数据，即进行数据权限管理。比如，用户查询所有员工数据时，只能展示该用户有权限查看的部门和业务线数据。当然，这可以在 sql 中进行限制，但是这样的数据权限处理就不存在通用性。</p>\n<p>实现数据权限管理，最核心的问题在于通用且不影响原有的业务代码，即 <strong>高内聚低耦合</strong>。这种场景可以使用AOP，将数据权限代码抽离出来，在需要查询数据时限制查询结果，从而在不修改业务代码的情况下实现方法增强。</p>\n<p>本文将以一个小例子介绍如何使用AOP实现数据权限管理，源码：<a href=\"https://github.com/JuliaJiang7/data-permission-aop-demo\" target=\"_blank\" rel=\"noopener\">data-permission-aop-demo</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"1-功能需求\"><a href=\"#1-功能需求\" class=\"headerlink\" title=\"1. 功能需求\"></a>1. 功能需求</h2><p>用户登录后，查看所有员工信息时，只展示有权限查看的数据。权限的限制维度是部门id和业务线id，即登录用户展示的数据是同时满足部门id和业务线id的员工信息。</p>\n<h2 id=\"2-流程图\"><a href=\"#2-流程图\" class=\"headerlink\" title=\"2. 流程图\"></a>2. 流程图</h2><img src=\"/pictures/Spring-AOP流程.jpg\"/>\n\n<h2 id=\"3-类图\"><a href=\"#3-类图\" class=\"headerlink\" title=\"3. 类图\"></a>3. 类图</h2><img src=\"/pictures/Spring-AOP类图.jpg\"/>\n\n<h2 id=\"4-数据库\"><a href=\"#4-数据库\" class=\"headerlink\" title=\"4. 数据库\"></a>4. 数据库</h2><img src=\"/pictures/AOP-数据库UML.png\"/>\n\n\n\n<h2 id=\"5-核心代码\"><a href=\"#5-核心代码\" class=\"headerlink\" title=\"5. 核心代码\"></a>5. 核心代码</h2><p>其中切面类代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataPermissionAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DataPermissionRepository dataPermissionRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"@annotation(com.juliajiang.aopdemo.datapermission.aop.DataPermission)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pointCut</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"pointCut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 获取当前用户id</span></span><br><span class=\"line\">        String employeeId = <span class=\"string\">\"0001\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 2. 查缓存</span></span><br><span class=\"line\">        <span class=\"comment\">// 3. 判断是否是超级管理员</span></span><br><span class=\"line\">        <span class=\"comment\">// 4. 查权限列表</span></span><br><span class=\"line\">        List&lt;DataPermissionDto&gt; list = dataPermissionRepository.selectDimension(employeeId);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollectionUtils.isEmpty(list)) &#123;</span><br><span class=\"line\">            sql = <span class=\"string\">\"1=2\"</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 4.1 获取注解的tableAlias</span></span><br><span class=\"line\">            DataPermission annotation = ((MethodSignature) joinPoint.getSignature()).getMethod().getAnnotation(DataPermission<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">            String alias = annotation.tableAlias();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 4.2 拼sql</span></span><br><span class=\"line\">            sql = alias + <span class=\"string\">\".permission in ( \"</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 将权限维度列表转为 and or 语句</span></span><br><span class=\"line\">            <span class=\"comment\">// inOutTypeCode,unitCode,budgetSubjectCode</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class=\"line\">                DataPermissionDto dto = list.get(i);</span><br><span class=\"line\">                <span class=\"comment\">// 权限维度 double check</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (StringUtils.isEmpty(dto.getDepartmentId()) || StringUtils.isEmpty(dto.getBusinessId())) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    sql += String.format(<span class=\"string\">\"\\'%s,%s\\'\"</span>, dto.getDepartmentId(), dto.getBusinessId());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    sql += String.format(<span class=\"string\">\",\\'%s,%s\\'\"</span>, dto.getDepartmentId(), dto.getBusinessId());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sql += <span class=\"string\">\")\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 4.3 存入redis</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"permission sql : &#123;&#125;\"</span>, sql);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 5.把数据权限注入到业务代码请求参数</span></span><br><span class=\"line\">        Object[] args = joinPoint.getArgs();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object arg : args) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arg <span class=\"keyword\">instanceof</span> IDataPermission) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Class clazz = arg.getClass();</span><br><span class=\"line\">                    Field permission = clazz.getSuperclass().getDeclaredField(<span class=\"string\">\"permission\"</span>);</span><br><span class=\"line\">                    permission.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                    permission.set(arg, sql);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class=\"line\">                    log.info(<span class=\"string\">\"implement IDataPermission error\"</span>);</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"6-源码\"><a href=\"#6-源码\" class=\"headerlink\" title=\"6. 源码\"></a>6. 源码</h2><p><a href=\"https://github.com/JuliaJiang7/data-permission-aop-demo\" target=\"_blank\" rel=\"noopener\">data-permission-aop-demo</a></p>\n<h2 id=\"7-参考引用\"><a href=\"#7-参考引用\" class=\"headerlink\" title=\"7. 参考引用\"></a>7. 参考引用</h2><ol>\n<li><a href=\"http://wjwcloud.com/springboot/2019/03/01/SpringBoot_AOP_dataAuthority/\" target=\"_blank\" rel=\"noopener\">SpringBoot-AOP处理数据过滤</a></li>\n</ol>\n","site":{"data":{}},"length":2251,"excerpt":"<p>在系统开发中，总有这样的需求：控制登陆用户所能看到的数据，即进行数据权限管理。比如，用户查询所有员工数据时，只能展示该用户有权限查看的部门和业务线数据。当然，这可以在 sql 中进行限制，但是这样的数据权限处理就不存在通用性。</p>\n<p>实现数据权限管理，最核心的问题在于通用且不影响原有的业务代码，即 <strong>高内聚低耦合</strong>。这种场景可以使用AOP，将数据权限代码抽离出来，在需要查询数据时限制查询结果，从而在不修改业务代码的情况下实现方法增强。</p>\n<p>本文将以一个小例子介绍如何使用AOP实现数据权限管理，源码：<a href=\"https://github.com/JuliaJiang7/data-permission-aop-demo\" target=\"_blank\" rel=\"noopener\">data-permission-aop-demo</a></p>","more":"<h2 id=\"1-功能需求\"><a href=\"#1-功能需求\" class=\"headerlink\" title=\"1. 功能需求\"></a>1. 功能需求</h2><p>用户登录后，查看所有员工信息时，只展示有权限查看的数据。权限的限制维度是部门id和业务线id，即登录用户展示的数据是同时满足部门id和业务线id的员工信息。</p>\n<h2 id=\"2-流程图\"><a href=\"#2-流程图\" class=\"headerlink\" title=\"2. 流程图\"></a>2. 流程图</h2><img src=\"/pictures/Spring-AOP流程.jpg\"/>\n\n<h2 id=\"3-类图\"><a href=\"#3-类图\" class=\"headerlink\" title=\"3. 类图\"></a>3. 类图</h2><img src=\"/pictures/Spring-AOP类图.jpg\"/>\n\n<h2 id=\"4-数据库\"><a href=\"#4-数据库\" class=\"headerlink\" title=\"4. 数据库\"></a>4. 数据库</h2><img src=\"/pictures/AOP-数据库UML.png\"/>\n\n\n\n<h2 id=\"5-核心代码\"><a href=\"#5-核心代码\" class=\"headerlink\" title=\"5. 核心代码\"></a>5. 核心代码</h2><p>其中切面类代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataPermissionAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DataPermissionRepository dataPermissionRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"@annotation(com.juliajiang.aopdemo.datapermission.aop.DataPermission)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pointCut</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"pointCut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 获取当前用户id</span></span><br><span class=\"line\">        String employeeId = <span class=\"string\">\"0001\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 2. 查缓存</span></span><br><span class=\"line\">        <span class=\"comment\">// 3. 判断是否是超级管理员</span></span><br><span class=\"line\">        <span class=\"comment\">// 4. 查权限列表</span></span><br><span class=\"line\">        List&lt;DataPermissionDto&gt; list = dataPermissionRepository.selectDimension(employeeId);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollectionUtils.isEmpty(list)) &#123;</span><br><span class=\"line\">            sql = <span class=\"string\">\"1=2\"</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 4.1 获取注解的tableAlias</span></span><br><span class=\"line\">            DataPermission annotation = ((MethodSignature) joinPoint.getSignature()).getMethod().getAnnotation(DataPermission<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">            String alias = annotation.tableAlias();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 4.2 拼sql</span></span><br><span class=\"line\">            sql = alias + <span class=\"string\">\".permission in ( \"</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 将权限维度列表转为 and or 语句</span></span><br><span class=\"line\">            <span class=\"comment\">// inOutTypeCode,unitCode,budgetSubjectCode</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class=\"line\">                DataPermissionDto dto = list.get(i);</span><br><span class=\"line\">                <span class=\"comment\">// 权限维度 double check</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (StringUtils.isEmpty(dto.getDepartmentId()) || StringUtils.isEmpty(dto.getBusinessId())) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    sql += String.format(<span class=\"string\">\"\\'%s,%s\\'\"</span>, dto.getDepartmentId(), dto.getBusinessId());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    sql += String.format(<span class=\"string\">\",\\'%s,%s\\'\"</span>, dto.getDepartmentId(), dto.getBusinessId());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sql += <span class=\"string\">\")\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 4.3 存入redis</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"permission sql : &#123;&#125;\"</span>, sql);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 5.把数据权限注入到业务代码请求参数</span></span><br><span class=\"line\">        Object[] args = joinPoint.getArgs();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object arg : args) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arg <span class=\"keyword\">instanceof</span> IDataPermission) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Class clazz = arg.getClass();</span><br><span class=\"line\">                    Field permission = clazz.getSuperclass().getDeclaredField(<span class=\"string\">\"permission\"</span>);</span><br><span class=\"line\">                    permission.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                    permission.set(arg, sql);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class=\"line\">                    log.info(<span class=\"string\">\"implement IDataPermission error\"</span>);</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"6-源码\"><a href=\"#6-源码\" class=\"headerlink\" title=\"6. 源码\"></a>6. 源码</h2><p><a href=\"https://github.com/JuliaJiang7/data-permission-aop-demo\" target=\"_blank\" rel=\"noopener\">data-permission-aop-demo</a></p>\n<h2 id=\"7-参考引用\"><a href=\"#7-参考引用\" class=\"headerlink\" title=\"7. 参考引用\"></a>7. 参考引用</h2><ol>\n<li><a href=\"http://wjwcloud.com/springboot/2019/03/01/SpringBoot_AOP_dataAuthority/\" target=\"_blank\" rel=\"noopener\">SpringBoot-AOP处理数据过滤</a></li>\n</ol>"}],"PostAsset":[],"PostCategory":[{"post_id":"cklp5mkv10001nyl1g86qd6wk","category_id":"cklp5mkv70004nyl1bo1n6ugw","_id":"cklp5mkv90007nyl1fstnc08g"},{"post_id":"cklp5mkvq0008nyl1fsmqchpn","category_id":"cklp5mkv70004nyl1bo1n6ugw","_id":"cklp5mkvt000enyl1a3iggqyb"},{"post_id":"cklp5mkvr000bnyl1aebx7u72","category_id":"cklp5mkv70004nyl1bo1n6ugw","_id":"cklp5mkvu000jnyl187f4fe0r"},{"post_id":"cklp5mkvt000fnyl1ack38yph","category_id":"cklp5mkvs000cnyl15ydgc7cn","_id":"cklp5mkvu000nnyl1gdi39s9t"},{"post_id":"cklp5mkvr0009nyl19wmfdl6l","category_id":"cklp5mkvs000cnyl15ydgc7cn","_id":"cklp5mkvu000onyl1gsb57dbb"},{"post_id":"cklp5mkvt000inyl1hsk3gcob","category_id":"cklp5mkvs000cnyl15ydgc7cn","_id":"cklp5mkvv000qnyl1fyy77drc"},{"post_id":"cklp5mkvs000dnyl1e9gxclra","category_id":"cklp5mkvu000knyl1c4yj0udx","_id":"cklp5mkvv000rnyl18chacd24"},{"post_id":"cklp5mkwd001anyl1bh5ma4s8","category_id":"cklp5mkvs000cnyl15ydgc7cn","_id":"cklp5mkwe001cnyl16pct0x6h"},{"post_id":"cklp5mkwo001gnyl1fjeh32dv","category_id":"cklp5mkv70004nyl1bo1n6ugw","_id":"cklp5mkwp001inyl19si8gemj"},{"post_id":"cklp5mkx4001lnyl1gojg9oxg","category_id":"cklp5mkvs000cnyl15ydgc7cn","_id":"cklp5mkx5001nnyl16l9b43vm"},{"post_id":"cklp5mkx7001rnyl13w204g41","category_id":"cklp5mkvs000cnyl15ydgc7cn","_id":"cklp5mkxa001tnyl1a8hob1c2"},{"post_id":"cklp5mkxe001xnyl1hj878b3w","category_id":"cklp5mkvs000cnyl15ydgc7cn","_id":"cklp5mkxf001znyl18hu6cnr8"},{"post_id":"cklyyda3u0000kml1aub5ch7w","category_id":"cklyyda400001kml180wsgd0c","_id":"cklyyda440004kml16dkweup3"}],"PostTag":[{"post_id":"cklp5mkv10001nyl1g86qd6wk","tag_id":"cklp5mkv80005nyl1aq1z5kj6","_id":"cklp5mkv90006nyl19g7nc1q7"},{"post_id":"cklp5mkvq0008nyl1fsmqchpn","tag_id":"cklp5mkv80005nyl1aq1z5kj6","_id":"cklp5mkvt000hnyl11eute2ra"},{"post_id":"cklp5mkvq0008nyl1fsmqchpn","tag_id":"cklp5mkvr000anyl1fczt2dru","_id":"cklp5mkvu000lnyl104rv6t9t"},{"post_id":"cklp5mkvr0009nyl19wmfdl6l","tag_id":"cklp5mkvt000gnyl1hjc36r79","_id":"cklp5mkvw000tnyl1700ofqlc"},{"post_id":"cklp5mkvr0009nyl19wmfdl6l","tag_id":"cklp5mkvu000mnyl16neccwvi","_id":"cklp5mkvw000unyl1091f66gx"},{"post_id":"cklp5mkvr0009nyl19wmfdl6l","tag_id":"cklp5mkvv000pnyl17dqfdj2u","_id":"cklp5mkvw000wnyl18q35cm4m"},{"post_id":"cklp5mkvr000bnyl1aebx7u72","tag_id":"cklp5mkvt000gnyl1hjc36r79","_id":"cklp5mkvw000xnyl1fjld3217"},{"post_id":"cklp5mkvr000bnyl1aebx7u72","tag_id":"cklp5mkv80005nyl1aq1z5kj6","_id":"cklp5mkw0000znyl11xy1h0ke"},{"post_id":"cklp5mkvs000dnyl1e9gxclra","tag_id":"cklp5mkvw000vnyl16kjy4jai","_id":"cklp5mkw00010nyl1dmo07hz5"},{"post_id":"cklp5mkvt000fnyl1ack38yph","tag_id":"cklp5mkvu000mnyl16neccwvi","_id":"cklp5mkw00013nyl18gml15sf"},{"post_id":"cklp5mkvt000fnyl1ack38yph","tag_id":"cklp5mkv80005nyl1aq1z5kj6","_id":"cklp5mkw00014nyl15eo4b384"},{"post_id":"cklp5mkvt000fnyl1ack38yph","tag_id":"cklp5mkw00011nyl17qmi1an7","_id":"cklp5mkw10016nyl10qhr12at"},{"post_id":"cklp5mkvt000inyl1hsk3gcob","tag_id":"cklp5mkvu000mnyl16neccwvi","_id":"cklp5mkw10017nyl1hkj0bt5i"},{"post_id":"cklp5mkvt000inyl1hsk3gcob","tag_id":"cklp5mkv80005nyl1aq1z5kj6","_id":"cklp5mkw10018nyl1frm10es0"},{"post_id":"cklp5mkvt000inyl1hsk3gcob","tag_id":"cklp5mkw10015nyl12sqt6sa5","_id":"cklp5mkw10019nyl1665y7ooh"},{"post_id":"cklp5mkwd001anyl1bh5ma4s8","tag_id":"cklp5mkvu000mnyl16neccwvi","_id":"cklp5mkwf001dnyl1aawq12es"},{"post_id":"cklp5mkwd001anyl1bh5ma4s8","tag_id":"cklp5mkv80005nyl1aq1z5kj6","_id":"cklp5mkwf001enyl1ai6raroc"},{"post_id":"cklp5mkwd001anyl1bh5ma4s8","tag_id":"cklp5mkwe001bnyl1d10w1wmv","_id":"cklp5mkwf001fnyl10jjy22ix"},{"post_id":"cklp5mkwo001gnyl1fjeh32dv","tag_id":"cklp5mkwp001hnyl19wctht98","_id":"cklp5mkwp001jnyl18kg21b2l"},{"post_id":"cklp5mkwo001gnyl1fjeh32dv","tag_id":"cklp5mkv80005nyl1aq1z5kj6","_id":"cklp5mkwp001knyl1c8hbb7n6"},{"post_id":"cklp5mkx4001lnyl1gojg9oxg","tag_id":"cklp5mkvu000mnyl16neccwvi","_id":"cklp5mkx5001onyl1838427tp"},{"post_id":"cklp5mkx4001lnyl1gojg9oxg","tag_id":"cklp5mkv80005nyl1aq1z5kj6","_id":"cklp5mkx5001pnyl1d8j63xpf"},{"post_id":"cklp5mkx4001lnyl1gojg9oxg","tag_id":"cklp5mkx5001mnyl15v25b6ek","_id":"cklp5mkx5001qnyl131ub75fz"},{"post_id":"cklp5mkx7001rnyl13w204g41","tag_id":"cklp5mkvu000mnyl16neccwvi","_id":"cklp5mkxa001unyl1gcxad5ru"},{"post_id":"cklp5mkx7001rnyl13w204g41","tag_id":"cklp5mkv80005nyl1aq1z5kj6","_id":"cklp5mkxa001vnyl138n2aln1"},{"post_id":"cklp5mkx7001rnyl13w204g41","tag_id":"cklp5mkx9001snyl15y1bes7v","_id":"cklp5mkxa001wnyl11wqgewo6"},{"post_id":"cklp5mkxe001xnyl1hj878b3w","tag_id":"cklp5mkvu000mnyl16neccwvi","_id":"cklp5mkxf0020nyl10i4nff53"},{"post_id":"cklp5mkxe001xnyl1hj878b3w","tag_id":"cklp5mkv80005nyl1aq1z5kj6","_id":"cklp5mkxf0021nyl1bbqd9ppk"},{"post_id":"cklp5mkxe001xnyl1hj878b3w","tag_id":"cklp5mkxe001ynyl101n686j2","_id":"cklp5mkxf0022nyl1g5mpdyf8"},{"post_id":"cklyyda3u0000kml1aub5ch7w","tag_id":"cklp5mkv80005nyl1aq1z5kj6","_id":"cklyyda440005kml1fb4jaxf7"},{"post_id":"cklyyda3u0000kml1aub5ch7w","tag_id":"cklyyda430002kml1fqu5dhp8","_id":"cklyyda440006kml18pyg7mb5"},{"post_id":"cklyyda3u0000kml1aub5ch7w","tag_id":"cklyyda430003kml17l20akit","_id":"cklyyda440007kml1cbwmhb2m"}],"Tag":[{"name":"Java","_id":"cklp5mkv80005nyl1aq1z5kj6"},{"name":"json","_id":"cklp5mkvr000anyl1fczt2dru"},{"name":"String","_id":"cklp5mkvt000gnyl1hjc36r79"},{"name":"Algorithm","_id":"cklp5mkvu000mnyl16neccwvi"},{"name":"KMP","_id":"cklp5mkvv000pnyl17dqfdj2u"},{"name":"Database","_id":"cklp5mkvw000vnyl16kjy4jai"},{"name":"链表","_id":"cklp5mkw00011nyl17qmi1an7"},{"name":"贪心算法","_id":"cklp5mkw10015nyl12sqt6sa5"},{"name":"二分查找","_id":"cklp5mkwe001bnyl1d10w1wmv"},{"name":"HashMap","_id":"cklp5mkwp001hnyl19wctht98"},{"name":"回溯","_id":"cklp5mkx5001mnyl15v25b6ek"},{"name":"二叉树","_id":"cklp5mkx9001snyl15y1bes7v"},{"name":"DP","_id":"cklp5mkxe001ynyl101n686j2"},{"name":"SpringBoot","_id":"cklyyda430002kml1fqu5dhp8"},{"name":"AOP","_id":"cklyyda430003kml17l20akit"}]}}